# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require "cfndsl/cloudformation_template"
require "cfndsl/types"

module CfnDsl
  module AWS
    module Serverless
      # CloudFormation resource AWS::Serverless::Function
      class Function < ResourceType
        # Property Definition AlexaSkillEvent
        class AlexaSkillEvent < PropertyType
          #   @param [Map|JSONable] value
          #     The value to use for Variables
          def Variables(value)
            dsl_attribute(:Variables, value)
          end
        end

        # Property Definition ApiEvent
        class ApiEvent < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Method
          def Method(value)
            dsl_attribute(:Method, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Path
          def Path(value)
            dsl_attribute(:Path, value)
          end

          #   @param [Map|JSONable] value
          #     The value to use for RestApiId
          def RestApiId(value)
            dsl_attribute(:RestApiId, value)
          end
        end

        # Property Definition CloudWatchEventEvent
        class CloudWatchEventEvent < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for EventBusName
          def EventBusName(value)
            dsl_attribute(:EventBusName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Input
          def Input(value)
            dsl_attribute(:Input, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for InputPath
          def InputPath(value)
            dsl_attribute(:InputPath, value)
          end

          #   @param [Map|JSONable] value
          #     The value to use for Pattern
          def Pattern(value)
            dsl_attribute(:Pattern, value)
          end
        end

        # Property Definition EventBridgeRule
        class EventBridgeRule < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Input
          def Input(value)
            dsl_attribute(:Input, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for InputPath
          def InputPath(value)
            dsl_attribute(:InputPath, value)
          end

          #   @param [Map|JSONable] value
          #     The value to use for Pattern
          def Pattern(value)
            dsl_attribute(:Pattern, value)
          end
        end

        # Property Definition LogEvent
        class LogEvent < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for LogGroupName
          def LogGroupName(value)
            dsl_attribute(:LogGroupName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for FilterPattern
          def FilterPattern(value)
            dsl_attribute(:FilterPattern, value)
          end
        end

        # Property Definition DeadLetterQueue
        class DeadLetterQueue < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for TargetArn
          def TargetArn(value)
            dsl_attribute(:TargetArn, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Type
          def Type(value)
            dsl_attribute(:Type, value)
          end
        end

        # Property Definition CognitoEvent
        class CognitoEvent < PropertyType
          #   @param [Map|JSONable] value
          #     The value to use for UserPool
          def UserPool(value)
            dsl_attribute(:UserPool, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Trigger
          def Triggers(values)
            dsl_list_attribute(:Trigger, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Trigger
          def Trigger(value, fn_if: nil)
            dsl_push_attribute(:Trigger, value, fn_if: fn_if)
          end
        end

        # Property Definition DynamoDBEvent
        class DynamoDBEvent < PropertyType
          #   @param [Number|JSONable] value
          #     The value to use for BatchSize
          def BatchSize(value)
            dsl_attribute(:BatchSize, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for StartingPosition
          def StartingPosition(value)
            dsl_attribute(:StartingPosition, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Stream
          def Stream(value)
            dsl_attribute(:Stream, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for Enabled
          def Enabled(value)
            dsl_attribute(:Enabled, value)
          end
        end

        # Property Definition EventSource
        class EventSource < PropertyType
          #   @param [Map|JSONable] value
          #     The value to use for Properties
          def Properties(value)
            dsl_attribute(:Properties, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Type
          def Type(value)
            dsl_attribute(:Type, value)
          end
        end

        # Property Definition FunctionEnvironment
        class FunctionEnvironment < PropertyType
          #   @param [Map|JSONable] value
          #     The value to use for Variables
          def Variables(value)
            dsl_attribute(:Variables, value)
          end
        end

        # Property Definition IAMPolicyDocument
        class IAMPolicyDocument < PropertyType
          # @param [Array<Object>|JSONable>] values
          #   The List of values to use for Statement
          def Statements(values)
            dsl_list_attribute(:Statement, values)
          end

          #  @param [Object|JSONable] value  Append value to the List
          #    The List of values to use for Statement
          def Statement(value, fn_if: nil)
            dsl_push_attribute(:Statement, value, fn_if: fn_if)
          end
        end

        # Property Definition IoTRuleEvent
        class IoTRuleEvent < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for AwsIotSqlVersion
          def AwsIotSqlVersion(value)
            dsl_attribute(:AwsIotSqlVersion, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Sql
          def Sql(value)
            dsl_attribute(:Sql, value)
          end
        end

        # Property Definition KinesisEvent
        class KinesisEvent < PropertyType
          #   @param [Number|JSONable] value
          #     The value to use for BatchSize
          def BatchSize(value)
            dsl_attribute(:BatchSize, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for StartingPosition
          def StartingPosition(value)
            dsl_attribute(:StartingPosition, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Stream
          def Stream(value)
            dsl_attribute(:Stream, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for Enabled
          def Enabled(value)
            dsl_attribute(:Enabled, value)
          end
        end

        # Property Definition MSKEvent
        class MSKEvent < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for StartingPosition
          def StartingPosition(value)
            dsl_attribute(:StartingPosition, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Stream
          def Stream(value)
            dsl_attribute(:Stream, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Topics
          def Topics(values)
            dsl_list_attribute(:Topics, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Topics
          def Topic(value, fn_if: nil)
            dsl_push_attribute(:Topics, value, fn_if: fn_if)
          end
        end

        # Property Definition MQEvent
        class MQEvent < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Broker
          def Broker(value)
            dsl_attribute(:Broker, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Queues
          def Queues(values)
            dsl_list_attribute(:Queues, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Queues
          def Queue(value, fn_if: nil)
            dsl_push_attribute(:Queues, value, fn_if: fn_if)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for SourceAccessConfigurations
          def SourceAccessConfigurations(values)
            dsl_list_attribute(:SourceAccessConfigurations, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for SourceAccessConfigurations
          def SourceAccessConfiguration(value, fn_if: nil)
            dsl_push_attribute(:SourceAccessConfigurations, value, fn_if: fn_if)
          end
        end

        # Property Definition SQSEvent
        class SQSEvent < PropertyType
          #   @param [Number|JSONable] value
          #     The value to use for BatchSize
          def BatchSize(value)
            dsl_attribute(:BatchSize, value)
          end

          #   @param [Map|JSONable] value
          #     The value to use for Queue
          def Queue(value)
            dsl_attribute(:Queue, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for Enabled
          def Enabled(value)
            dsl_attribute(:Enabled, value)
          end
        end

        # Property Definition S3Event
        class S3Event < PropertyType
          #   @param [Map|JSONable] value
          #     The value to use for Bucket
          def Bucket(value)
            dsl_attribute(:Bucket, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Events
          def Events(values)
            dsl_list_attribute(:Events, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Events
          def Event(value, fn_if: nil)
            dsl_push_attribute(:Events, value, fn_if: fn_if)
          end

          #   @param [S3NotificationFilter|JSONable] value
          #     The value to use for Filter
          # @@overload Filter(&block)
          #   Set :Filter from block via instance eval of a new S3NotificationFilter
          def Filter(value = nil, **value_hash, &block)
            dsl_attribute(:Filter, value, attr_class: S3NotificationFilter, **value_hash, &block)
          end
        end

        # Property Definition S3Location
        class S3Location < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Bucket
          def Bucket(value)
            dsl_attribute(:Bucket, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end

          #   @param [Number|JSONable] value
          #     The value to use for Version
          def Version(value)
            dsl_attribute(:Version, value)
          end
        end

        # Property Definition S3NotificationFilter
        class S3NotificationFilter < PropertyType
          #   @param [Map|JSONable] value
          #     The value to use for S3Key
          def S3Key(value)
            dsl_attribute(:S3Key, value)
          end
        end

        # Property Definition SNSEvent
        class SNSEvent < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Topic
          def Topic(value)
            dsl_attribute(:Topic, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Region
          def Region(value)
            dsl_attribute(:Region, value)
          end

          #   @param [Map|JSONable] value
          #     The value to use for FilterPolicy
          def FilterPolicy(value)
            dsl_attribute(:FilterPolicy, value)
          end
        end

        # Property Definition ScheduleEvent
        class ScheduleEvent < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Input
          def Input(value)
            dsl_attribute(:Input, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Schedule
          def Schedule(value)
            dsl_attribute(:Schedule, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Description
          def Description(value)
            dsl_attribute(:Description, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for Enabled
          def Enabled(value)
            dsl_attribute(:Enabled, value)
          end
        end

        # Property Definition VpcConfig
        class VpcConfig < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for SecurityGroupIds
          def SecurityGroupIds(values)
            dsl_list_attribute(:SecurityGroupIds, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for SecurityGroupIds
          def SecurityGroupId(value, fn_if: nil)
            dsl_push_attribute(:SecurityGroupIds, value, fn_if: fn_if)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for SubnetIds
          def SubnetIds(values)
            dsl_list_attribute(:SubnetIds, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for SubnetIds
          def SubnetId(value, fn_if: nil)
            dsl_push_attribute(:SubnetIds, value, fn_if: fn_if)
          end

          # @param [Array<Object>|JSONable>] values
          #   The List of values to use for SubnetIdsUsingRef
          def SubnetIdsUsingRefs(values)
            dsl_list_attribute(:SubnetIdsUsingRef, values)
          end

          #  @param [Object|JSONable] value  Append value to the List
          #    The List of values to use for SubnetIdsUsingRef
          def SubnetIdsUsingRef(value, fn_if: nil)
            dsl_push_attribute(:SubnetIdsUsingRef, value, fn_if: fn_if)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for InlineCode
        def InlineCode(value)
          dsl_attribute(:InlineCode, value)
        end

        #   @param [S3Location|JSONable] value
        #     The value to use for CodeUri
        # @@overload CodeUri(&block)
        #   Set :CodeUri from block via instance eval of a new S3Location
        def CodeUri(value = nil, **value_hash, &block)
          dsl_attribute(:CodeUri, value, attr_class: S3Location, **value_hash, &block)
        end

        #   @param [DeadLetterQueue|JSONable] value
        #     The value to use for DeadLetterQueue
        # @@overload DeadLetterQueue(&block)
        #   Set :DeadLetterQueue from block via instance eval of a new DeadLetterQueue
        def DeadLetterQueue(value = nil, **value_hash, &block)
          dsl_attribute(:DeadLetterQueue, value, attr_class: DeadLetterQueue, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Description
        def Description(value)
          dsl_attribute(:Description, value)
        end

        #   @param [FunctionEnvironment|JSONable] value
        #     The value to use for Environment
        # @@overload Environment(&block)
        #   Set :Environment from block via instance eval of a new FunctionEnvironment
        def Environment(value = nil, **value_hash, &block)
          dsl_attribute(:Environment, value, attr_class: FunctionEnvironment, **value_hash, &block)
        end

        #   @param [Map|JSONable] value
        #     The value to use for Events
        def Events(value)
          dsl_attribute(:Events, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for FunctionName
        def FunctionName(value)
          dsl_attribute(:FunctionName, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Handler
        def Handler(value)
          dsl_attribute(:Handler, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for KmsKeyArn
        def KmsKeyArn(value)
          dsl_attribute(:KmsKeyArn, value)
        end

        #   @param [Number|JSONable] value
        #     The value to use for MemorySize
        def MemorySize(value)
          dsl_attribute(:MemorySize, value)
        end

        #   @param [IAMPolicyDocument|JSONable] value
        #     The value to use for Policies
        # @@overload Policies(&block)
        #   Set :Policies from block via instance eval of a new IAMPolicyDocument
        def Policies(value = nil, **value_hash, &block)
          dsl_attribute(:Policies, value, attr_class: IAMPolicyDocument, **value_hash, &block)
        end

        #   @param [Map|JSONable] value
        #     The value to use for Role
        def Role(value)
          dsl_attribute(:Role, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Runtime
        def Runtime(value)
          dsl_attribute(:Runtime, value)
        end

        #   @param [Map|JSONable] value
        #     The value to use for Tags
        def Tags(value)
          dsl_attribute(:Tags, value)
        end

        #   @param [Number|JSONable] value
        #     The value to use for Timeout
        def Timeout(value)
          dsl_attribute(:Timeout, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Tracing
        def Tracing(value)
          dsl_attribute(:Tracing, value)
        end

        #   @param [VpcConfig|JSONable] value
        #     The value to use for VpcConfig
        # @@overload VpcConfig(&block)
        #   Set :VpcConfig from block via instance eval of a new VpcConfig
        def VpcConfig(value = nil, **value_hash, &block)
          dsl_attribute(:VpcConfig, value, attr_class: VpcConfig, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::Serverless::Function]
    def AWS_Serverless_Function(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::Serverless::Function, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
