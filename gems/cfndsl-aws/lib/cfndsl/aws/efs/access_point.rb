# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module EFS
      # Resource Type definition for AWS::EFS::AccessPoint
      # @see https://github.com/aws-cloudformation/aws-cloudformation-rpdk.git
      class AccessPoint < ResourceType
        # Property Definition AccessPointTag
        class AccessPointTag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        # Property Definition CreationInfo
        class CreationInfo < PropertyType
          #   @param [String|JSONable] value
          #     Specifies the POSIX user ID to apply to the RootDirectory. Accepts values from 0 to 2^32 (4294967295).
          def OwnerUid(value)
            dsl_attribute(:OwnerUid, value)
          end

          #   @param [String|JSONable] value
          #     Specifies the POSIX group ID to apply to the RootDirectory. Accepts values from 0 to 2^32 (4294967295).
          def OwnerGid(value)
            dsl_attribute(:OwnerGid, value)
          end

          #   @param [String|JSONable] value
          #     Specifies the POSIX permissions to apply to the RootDirectory, in the format of an octal number representing the file's mode bits.
          def Permissions(value)
            dsl_attribute(:Permissions, value)
          end
        end

        # Property Definition RootDirectory
        class RootDirectory < PropertyType
          #   @param [String|JSONable] value
          #     Specifies the path on the EFS file system to expose as the root directory to NFS clients using the access point to access the EFS file system. A path can have up to four subdirectories. If the specified path does not exist, you are required to provide the CreationInfo.
          def Path(value)
            dsl_attribute(:Path, value)
          end

          #   @param [CreationInfo|JSONable] value
          #     (Optional) Specifies the POSIX IDs and permissions to apply to the access point's RootDirectory. If the RootDirectory>Path specified does not exist, EFS creates the root directory using the CreationInfo settings when a client connects to an access point. When specifying the CreationInfo, you must provide values for all properties.   If you do not provide CreationInfo and the specified RootDirectory>Path does not exist, attempts to mount the file system using the access point will fail.
          # @@overload CreationInfo(&block)
          #   Set :CreationInfo from block via instance eval of a new CreationInfo
          def CreationInfo(value = nil, **value_hash, &block)
            dsl_attribute(:CreationInfo, value, attr_class: CreationInfo, **value_hash, &block)
          end
        end

        # Property Definition PosixUser
        class PosixUser < PropertyType
          #   @param [String|JSONable] value
          #     The POSIX user ID used for all file system operations using this access point.
          def Uid(value)
            dsl_attribute(:Uid, value)
          end

          #   @param [String|JSONable] value
          #     The POSIX group ID used for all file system operations using this access point.
          def Gid(value)
            dsl_attribute(:Gid, value)
          end

          # @param [Array<String>|JSONable>] values
          #   Secondary POSIX group IDs used for all file system operations using this access point.
          def SecondaryGids(values)
            dsl_list_attribute(:SecondaryGids, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    Secondary POSIX group IDs used for all file system operations using this access point.
          def SecondaryGid(value, fn_if: nil)
            dsl_push_attribute(:SecondaryGids, value, fn_if: fn_if)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for AccessPointId
        def AccessPointId(value)
          dsl_attribute(:AccessPointId, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Arn
        def Arn(value)
          dsl_attribute(:Arn, value)
        end

        #   @param [String|JSONable] value
        #     (optional) A string of up to 64 ASCII characters that Amazon EFS uses to ensure idempotent creation.
        def ClientToken(value)
          dsl_attribute(:ClientToken, value)
        end

        # @param [Array<AccessPointTag>|JSONable>] values
        #   The List of values to use for AccessPointTags
        def AccessPointTags(values)
          dsl_list_attribute(:AccessPointTags, values)
        end

        #  @param [AccessPointTag|JSONable] value  Append value to the List
        #    The List of values to use for AccessPointTags
        # @@overload AccessPointTag(&block)
        # Append value to the List from block via instance eval of a new AccessPointTag
        def AccessPointTag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:AccessPointTags, value, fn_if: fn_if, attr_class: AccessPointTag, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The ID of the EFS file system that the access point provides access to.
        def FileSystemId(value)
          dsl_attribute(:FileSystemId, value)
        end

        #   @param [PosixUser|JSONable] value
        #     The operating system user and group applied to all file system requests made using the access point.
        # @@overload PosixUser(&block)
        #   Set :PosixUser from block via instance eval of a new PosixUser
        def PosixUser(value = nil, **value_hash, &block)
          dsl_attribute(:PosixUser, value, attr_class: PosixUser, **value_hash, &block)
        end

        #   @param [RootDirectory|JSONable] value
        #     Specifies the directory on the Amazon EFS file system that the access point exposes as the root directory of your file system to NFS clients using the access point. The clients using the access point can only access the root directory and below. If the RootDirectory>Path specified does not exist, EFS creates it and applies the CreationInfo settings when a client connects to an access point. When specifying a RootDirectory, you need to provide the Path, and the CreationInfo is optional.
        # @@overload RootDirectory(&block)
        #   Set :RootDirectory from block via instance eval of a new RootDirectory
        def RootDirectory(value = nil, **value_hash, &block)
          dsl_attribute(:RootDirectory, value, attr_class: RootDirectory, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::EFS::AccessPoint]
    def AWS_EFS_AccessPoint(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::EFS::AccessPoint, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
