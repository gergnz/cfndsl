# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module CloudFormation
      # StackSet as a resource provides one-click experience for provisioning a StackSet and StackInstances
      # @see https://github.com/aws-cloudformation/aws-cloudformation-resource-providers-cloudformation.git
      class StackSet < ResourceType
        # Tag type enables you to specify a key-value pair that can be used to store information about an AWS CloudFormation StackSet.
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     A string used to identify this tag. You can specify a maximum of 127 characters for a tag key.
          def Key(value)
            dsl_attribute(:Key, value)
          end

          #   @param [String|JSONable] value
          #     A string containing the value for this tag. You can specify a maximum of 256 characters for a tag value.
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        # Property Definition AutoDeployment
        class AutoDeployment < PropertyType
          #   @param [Boolean|JSONable] value
          #     If set to true, StackSets automatically deploys additional stack instances to AWS Organizations accounts that are added to a target organization or organizational unit (OU) in the specified Regions. If an account is removed from a target organization or OU, StackSets deletes stack instances from the account in the specified Regions.
          def Enabled(value)
            dsl_attribute(:Enabled, value)
          end

          #   @param [Boolean|JSONable] value
          #     If set to true, stack resources are retained when an account is removed from a target organization or OU. If set to false, stack resources are deleted. Specify only if Enabled is set to True.
          def RetainStacksOnAccountRemoval(value)
            dsl_attribute(:RetainStacksOnAccountRemoval, value)
          end
        end

        # The user-specified preferences for how AWS CloudFormation performs a stack set operation.
        class OperationPreferences < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for FailureToleranceCount
          def FailureToleranceCount(value)
            dsl_attribute(:FailureToleranceCount, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for FailureTolerancePercentage
          def FailureTolerancePercentage(value)
            dsl_attribute(:FailureTolerancePercentage, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for MaxConcurrentCount
          def MaxConcurrentCount(value)
            dsl_attribute(:MaxConcurrentCount, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for MaxConcurrentPercentage
          def MaxConcurrentPercentage(value)
            dsl_attribute(:MaxConcurrentPercentage, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for RegionOrder
          def RegionOrders(values)
            dsl_list_attribute(:RegionOrder, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for RegionOrder
          def RegionOrder(value, fn_if: nil)
            dsl_push_attribute(:RegionOrder, value, fn_if: fn_if)
          end
        end

        # Property Definition Parameter
        class Parameter < PropertyType
          #   @param [String|JSONable] value
          #     The key associated with the parameter. If you don't specify a key and value for a particular parameter, AWS CloudFormation uses the default value that is specified in your template.
          def ParameterKey(value)
            dsl_attribute(:ParameterKey, value)
          end

          #   @param [String|JSONable] value
          #     The input value associated with the parameter.
          def ParameterValue(value)
            dsl_attribute(:ParameterValue, value)
          end
        end

        #  The AWS OrganizationalUnitIds or Accounts for which to create stack instances in the specified Regions.
        class DeploymentTargets < PropertyType
          # @param [Array<String>|JSONable>] values
          #   AWS accounts that you want to create stack instances in the specified Region(s) for.
          def Accounts(values)
            dsl_list_attribute(:Accounts, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    AWS accounts that you want to create stack instances in the specified Region(s) for.
          def Account(value, fn_if: nil)
            dsl_push_attribute(:Accounts, value, fn_if: fn_if)
          end

          # @param [Array<String>|JSONable>] values
          #   The organization root ID or organizational unit (OU) IDs to which StackSets deploys.
          def OrganizationalUnitIds(values)
            dsl_list_attribute(:OrganizationalUnitIds, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The organization root ID or organizational unit (OU) IDs to which StackSets deploys.
          def OrganizationalUnitId(value, fn_if: nil)
            dsl_push_attribute(:OrganizationalUnitIds, value, fn_if: fn_if)
          end
        end

        # Stack instances in some specific accounts and Regions.
        class StackInstances < PropertyType
          #   @param [DeploymentTargets|JSONable] value
          #     The value to use for DeploymentTargets
          # @@overload DeploymentTargets(&block)
          #   Set :DeploymentTargets from block via instance eval of a new DeploymentTargets
          def DeploymentTargets(value = nil, **value_hash, &block)
            dsl_attribute(:DeploymentTargets, value, attr_class: DeploymentTargets, **value_hash, &block)
          end

          # @param [Array<String>|JSONable>] values
          #   The names of one or more Regions where you want to create stack instances using the specified AWS account(s).
          def Regions(values)
            dsl_list_attribute(:Regions, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The names of one or more Regions where you want to create stack instances using the specified AWS account(s).
          def Region(value, fn_if: nil)
            dsl_push_attribute(:Regions, value, fn_if: fn_if)
          end

          # @param [Array<Parameter>|JSONable>] values
          #   A list of stack set parameters whose values you want to override in the selected stack instances.
          def ParameterOverrides(values)
            dsl_list_attribute(:ParameterOverrides, values)
          end

          #  @param [Parameter|JSONable] value  Append value to the List
          #    A list of stack set parameters whose values you want to override in the selected stack instances.
          # @@overload ParameterOverride(&block)
          # Append value to the List from block via instance eval of a new Parameter
          def ParameterOverride(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:ParameterOverrides, value, fn_if: fn_if, attr_class: Parameter, **value_hash, &block)
          end
        end

        #   @param [String|JSONable] value
        #     The name to associate with the stack set. The name must be unique in the Region where you create your stack set.
        def StackSetName(value)
          dsl_attribute(:StackSetName, value)
        end

        #   @param [String|JSONable] value
        #     The ID of the stack set that you're creating.
        def StackSetId(value)
          dsl_attribute(:StackSetId, value)
        end

        #   @param [String|JSONable] value
        #     The Amazon Resource Number (ARN) of the IAM role to use to create this stack set. Specify an IAM role only if you are using customized administrator roles to control which users or groups can manage specific stack sets within the same administrator account.
        def AdministrationRoleARN(value)
          dsl_attribute(:AdministrationRoleARN, value)
        end

        #   @param [AutoDeployment|JSONable] value
        #     Describes whether StackSets automatically deploys to AWS Organizations accounts that are added to the target organization or organizational unit (OU). Specify only if PermissionModel is SERVICE_MANAGED.
        # @@overload AutoDeployment(&block)
        #   Set :AutoDeployment from block via instance eval of a new AutoDeployment
        def AutoDeployment(value = nil, **value_hash, &block)
          dsl_attribute(:AutoDeployment, value, attr_class: AutoDeployment, **value_hash, &block)
        end

        # @param [Array<String>|JSONable>] values
        #   In some cases, you must explicitly acknowledge that your stack set template contains certain capabilities in order for AWS CloudFormation to create the stack set and related stack instances.
        def Capabilities(values)
          dsl_list_attribute(:Capabilities, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    In some cases, you must explicitly acknowledge that your stack set template contains certain capabilities in order for AWS CloudFormation to create the stack set and related stack instances.
        def Capability(value, fn_if: nil)
          dsl_push_attribute(:Capabilities, value, fn_if: fn_if)
        end

        #   @param [String|JSONable] value
        #     A description of the stack set. You can use the description to identify the stack set's purpose or other important information.
        def Description(value)
          dsl_attribute(:Description, value)
        end

        #   @param [String|JSONable] value
        #     The name of the IAM execution role to use to create the stack set. If you do not specify an execution role, AWS CloudFormation uses the AWSCloudFormationStackSetExecutionRole role for the stack set operation.
        def ExecutionRoleName(value)
          dsl_attribute(:ExecutionRoleName, value)
        end

        #   @param [OperationPreferences|JSONable] value
        #     The value to use for OperationPreferences
        # @@overload OperationPreferences(&block)
        #   Set :OperationPreferences from block via instance eval of a new OperationPreferences
        def OperationPreferences(value = nil, **value_hash, &block)
          dsl_attribute(:OperationPreferences, value, attr_class: OperationPreferences, **value_hash, &block)
        end

        # @param [Array<StackInstances>|JSONable>] values
        #   A group of stack instances with parameters in some specific accounts and regions.
        def StackInstancesGroups(values)
          dsl_list_attribute(:StackInstancesGroup, values)
        end

        #  @param [StackInstances|JSONable] value  Append value to the List
        #    A group of stack instances with parameters in some specific accounts and regions.
        # @@overload StackInstancesGroup(&block)
        # Append value to the List from block via instance eval of a new StackInstances
        def StackInstancesGroup(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:StackInstancesGroup, value, fn_if: fn_if, attr_class: StackInstances, **value_hash, &block)
        end

        # @param [Array<Parameter>|JSONable>] values
        #   The input parameters for the stack set template.
        def Parameters(values)
          dsl_list_attribute(:Parameters, values)
        end

        #  @param [Parameter|JSONable] value  Append value to the List
        #    The input parameters for the stack set template.
        # @@overload Parameter(&block)
        # Append value to the List from block via instance eval of a new Parameter
        def Parameter(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Parameters, value, fn_if: fn_if, attr_class: Parameter, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     Describes how the IAM roles required for stack set operations are created. By default, SELF-MANAGED is specified.
        def PermissionModel(value)
          dsl_attribute(:PermissionModel, value)
        end

        # @param [Array<Tag>|JSONable>] values
        #   The key-value pairs to associate with this stack set and the stacks created from it. AWS CloudFormation also propagates these tags to supported resources that are created in the stacks. A maximum number of 50 tags can be specified.
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    The key-value pairs to associate with this stack set and the stacks created from it. AWS CloudFormation also propagates these tags to supported resources that are created in the stacks. A maximum number of 50 tags can be specified.
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The structure that contains the template body, with a minimum length of 1 byte and a maximum length of 51,200 bytes.
        def TemplateBody(value)
          dsl_attribute(:TemplateBody, value)
        end

        #   @param [String|JSONable] value
        #     Location of file containing the template body. The URL must point to a template (max size: 460,800 bytes) that is located in an Amazon S3 bucket.
        def TemplateURL(value)
          dsl_attribute(:TemplateURL, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::CloudFormation::StackSet]
    def AWS_CloudFormation_StackSet(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::CloudFormation::StackSet, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
