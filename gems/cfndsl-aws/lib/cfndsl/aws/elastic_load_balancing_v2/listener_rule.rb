# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module ElasticLoadBalancingV2
      # Resource Type definition for AWS::ElasticLoadBalancingV2::ListenerRule
      class ListenerRule < ResourceType
        # Property Definition TargetGroupTuple
        class TargetGroupTuple < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for TargetGroupArn
          def TargetGroupArn(value)
            dsl_attribute(:TargetGroupArn, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for Weight
          def Weight(value)
            dsl_attribute(:Weight, value)
          end
        end

        # Property Definition Action
        class Action < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for Order
          def Order(value)
            dsl_attribute(:Order, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for TargetGroupArn
          def TargetGroupArn(value)
            dsl_attribute(:TargetGroupArn, value)
          end

          #   @param [FixedResponseConfig|JSONable] value
          #     The value to use for FixedResponseConfig
          # @@overload FixedResponseConfig(&block)
          #   Set :FixedResponseConfig from block via instance eval of a new FixedResponseConfig
          def FixedResponseConfig(value = nil, **value_hash, &block)
            dsl_attribute(:FixedResponseConfig, value, attr_class: FixedResponseConfig, **value_hash, &block)
          end

          #   @param [AuthenticateCognitoConfig|JSONable] value
          #     The value to use for AuthenticateCognitoConfig
          # @@overload AuthenticateCognitoConfig(&block)
          #   Set :AuthenticateCognitoConfig from block via instance eval of a new AuthenticateCognitoConfig
          def AuthenticateCognitoConfig(value = nil, **value_hash, &block)
            dsl_attribute(:AuthenticateCognitoConfig, value, attr_class: AuthenticateCognitoConfig, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for Type
          def Type(value)
            dsl_attribute(:Type, value)
          end

          #   @param [RedirectConfig|JSONable] value
          #     The value to use for RedirectConfig
          # @@overload RedirectConfig(&block)
          #   Set :RedirectConfig from block via instance eval of a new RedirectConfig
          def RedirectConfig(value = nil, **value_hash, &block)
            dsl_attribute(:RedirectConfig, value, attr_class: RedirectConfig, **value_hash, &block)
          end

          #   @param [ForwardConfig|JSONable] value
          #     The value to use for ForwardConfig
          # @@overload ForwardConfig(&block)
          #   Set :ForwardConfig from block via instance eval of a new ForwardConfig
          def ForwardConfig(value = nil, **value_hash, &block)
            dsl_attribute(:ForwardConfig, value, attr_class: ForwardConfig, **value_hash, &block)
          end

          #   @param [AuthenticateOidcConfig|JSONable] value
          #     The value to use for AuthenticateOidcConfig
          # @@overload AuthenticateOidcConfig(&block)
          #   Set :AuthenticateOidcConfig from block via instance eval of a new AuthenticateOidcConfig
          def AuthenticateOidcConfig(value = nil, **value_hash, &block)
            dsl_attribute(:AuthenticateOidcConfig, value, attr_class: AuthenticateOidcConfig, **value_hash, &block)
          end
        end

        # Property Definition RuleCondition
        class RuleCondition < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Field
          def Field(value)
            dsl_attribute(:Field, value)
          end

          #   @param [HttpHeaderConfig|JSONable] value
          #     The value to use for HttpHeaderConfig
          # @@overload HttpHeaderConfig(&block)
          #   Set :HttpHeaderConfig from block via instance eval of a new HttpHeaderConfig
          def HttpHeaderConfig(value = nil, **value_hash, &block)
            dsl_attribute(:HttpHeaderConfig, value, attr_class: HttpHeaderConfig, **value_hash, &block)
          end

          #   @param [QueryStringConfig|JSONable] value
          #     The value to use for QueryStringConfig
          # @@overload QueryStringConfig(&block)
          #   Set :QueryStringConfig from block via instance eval of a new QueryStringConfig
          def QueryStringConfig(value = nil, **value_hash, &block)
            dsl_attribute(:QueryStringConfig, value, attr_class: QueryStringConfig, **value_hash, &block)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Values
          def Values(values)
            dsl_list_attribute(:Values, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Values
          def Value(value, fn_if: nil)
            dsl_push_attribute(:Values, value, fn_if: fn_if)
          end

          #   @param [HostHeaderConfig|JSONable] value
          #     The value to use for HostHeaderConfig
          # @@overload HostHeaderConfig(&block)
          #   Set :HostHeaderConfig from block via instance eval of a new HostHeaderConfig
          def HostHeaderConfig(value = nil, **value_hash, &block)
            dsl_attribute(:HostHeaderConfig, value, attr_class: HostHeaderConfig, **value_hash, &block)
          end

          #   @param [HttpRequestMethodConfig|JSONable] value
          #     The value to use for HttpRequestMethodConfig
          # @@overload HttpRequestMethodConfig(&block)
          #   Set :HttpRequestMethodConfig from block via instance eval of a new HttpRequestMethodConfig
          def HttpRequestMethodConfig(value = nil, **value_hash, &block)
            dsl_attribute(:HttpRequestMethodConfig, value, attr_class: HttpRequestMethodConfig, **value_hash, &block)
          end

          #   @param [PathPatternConfig|JSONable] value
          #     The value to use for PathPatternConfig
          # @@overload PathPatternConfig(&block)
          #   Set :PathPatternConfig from block via instance eval of a new PathPatternConfig
          def PathPatternConfig(value = nil, **value_hash, &block)
            dsl_attribute(:PathPatternConfig, value, attr_class: PathPatternConfig, **value_hash, &block)
          end

          #   @param [SourceIpConfig|JSONable] value
          #     The value to use for SourceIpConfig
          # @@overload SourceIpConfig(&block)
          #   Set :SourceIpConfig from block via instance eval of a new SourceIpConfig
          def SourceIpConfig(value = nil, **value_hash, &block)
            dsl_attribute(:SourceIpConfig, value, attr_class: SourceIpConfig, **value_hash, &block)
          end
        end

        # Property Definition QueryStringConfig
        class QueryStringConfig < PropertyType
          # @param [Array<QueryStringKeyValue>|JSONable>] values
          #   The List of values to use for Values
          def Values(values)
            dsl_list_attribute(:Values, values)
          end

          #  @param [QueryStringKeyValue|JSONable] value  Append value to the List
          #    The List of values to use for Values
          # @@overload Value(&block)
          # Append value to the List from block via instance eval of a new QueryStringKeyValue
          def Value(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Values, value, fn_if: fn_if, attr_class: QueryStringKeyValue, **value_hash, &block)
          end
        end

        # Property Definition TargetGroupStickinessConfig
        class TargetGroupStickinessConfig < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for Enabled
          def Enabled(value)
            dsl_attribute(:Enabled, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for DurationSeconds
          def DurationSeconds(value)
            dsl_attribute(:DurationSeconds, value)
          end
        end

        # Property Definition PathPatternConfig
        class PathPatternConfig < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Values
          def Values(values)
            dsl_list_attribute(:Values, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Values
          def Value(value, fn_if: nil)
            dsl_push_attribute(:Values, value, fn_if: fn_if)
          end
        end

        # Property Definition FixedResponseConfig
        class FixedResponseConfig < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ContentType
          def ContentType(value)
            dsl_attribute(:ContentType, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for StatusCode
          def StatusCode(value)
            dsl_attribute(:StatusCode, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for MessageBody
          def MessageBody(value)
            dsl_attribute(:MessageBody, value)
          end
        end

        # Property Definition HttpHeaderConfig
        class HttpHeaderConfig < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Values
          def Values(values)
            dsl_list_attribute(:Values, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Values
          def Value(value, fn_if: nil)
            dsl_push_attribute(:Values, value, fn_if: fn_if)
          end

          #   @param [String|JSONable] value
          #     The value to use for HttpHeaderName
          def HttpHeaderName(value)
            dsl_attribute(:HttpHeaderName, value)
          end
        end

        # Property Definition AuthenticateCognitoConfig
        class AuthenticateCognitoConfig < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for OnUnauthenticatedRequest
          def OnUnauthenticatedRequest(value)
            dsl_attribute(:OnUnauthenticatedRequest, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for UserPoolClientId
          def UserPoolClientId(value)
            dsl_attribute(:UserPoolClientId, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for UserPoolDomain
          def UserPoolDomain(value)
            dsl_attribute(:UserPoolDomain, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for SessionTimeout
          def SessionTimeout(value)
            dsl_attribute(:SessionTimeout, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Scope
          def Scope(value)
            dsl_attribute(:Scope, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for SessionCookieName
          def SessionCookieName(value)
            dsl_attribute(:SessionCookieName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for UserPoolArn
          def UserPoolArn(value)
            dsl_attribute(:UserPoolArn, value)
          end

          #   @param [Object|JSONable] value
          #     The value to use for AuthenticationRequestExtraParams
          def AuthenticationRequestExtraParams(value)
            dsl_attribute(:AuthenticationRequestExtraParams, value)
          end
        end

        # Property Definition RedirectConfig
        class RedirectConfig < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Path
          def Path(value)
            dsl_attribute(:Path, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Query
          def Query(value)
            dsl_attribute(:Query, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Port
          def Port(value)
            dsl_attribute(:Port, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Host
          def Host(value)
            dsl_attribute(:Host, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Protocol
          def Protocol(value)
            dsl_attribute(:Protocol, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for StatusCode
          def StatusCode(value)
            dsl_attribute(:StatusCode, value)
          end
        end

        # Property Definition QueryStringKeyValue
        class QueryStringKeyValue < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end
        end

        # Property Definition ForwardConfig
        class ForwardConfig < PropertyType
          #   @param [TargetGroupStickinessConfig|JSONable] value
          #     The value to use for TargetGroupStickinessConfig
          # @@overload TargetGroupStickinessConfig(&block)
          #   Set :TargetGroupStickinessConfig from block via instance eval of a new TargetGroupStickinessConfig
          def TargetGroupStickinessConfig(value = nil, **value_hash, &block)
            dsl_attribute(:TargetGroupStickinessConfig, value, attr_class: TargetGroupStickinessConfig, **value_hash, &block)
          end

          # @param [Array<TargetGroupTuple>|JSONable>] values
          #   The List of values to use for TargetGroups
          def TargetGroups(values)
            dsl_list_attribute(:TargetGroups, values)
          end

          #  @param [TargetGroupTuple|JSONable] value  Append value to the List
          #    The List of values to use for TargetGroups
          # @@overload TargetGroup(&block)
          # Append value to the List from block via instance eval of a new TargetGroupTuple
          def TargetGroup(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:TargetGroups, value, fn_if: fn_if, attr_class: TargetGroupTuple, **value_hash, &block)
          end
        end

        # Property Definition HostHeaderConfig
        class HostHeaderConfig < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Values
          def Values(values)
            dsl_list_attribute(:Values, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Values
          def Value(value, fn_if: nil)
            dsl_push_attribute(:Values, value, fn_if: fn_if)
          end
        end

        # Property Definition HttpRequestMethodConfig
        class HttpRequestMethodConfig < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Values
          def Values(values)
            dsl_list_attribute(:Values, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Values
          def Value(value, fn_if: nil)
            dsl_push_attribute(:Values, value, fn_if: fn_if)
          end
        end

        # Property Definition AuthenticateOidcConfig
        class AuthenticateOidcConfig < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for OnUnauthenticatedRequest
          def OnUnauthenticatedRequest(value)
            dsl_attribute(:OnUnauthenticatedRequest, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for TokenEndpoint
          def TokenEndpoint(value)
            dsl_attribute(:TokenEndpoint, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for SessionTimeout
          def SessionTimeout(value)
            dsl_attribute(:SessionTimeout, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Scope
          def Scope(value)
            dsl_attribute(:Scope, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Issuer
          def Issuer(value)
            dsl_attribute(:Issuer, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ClientSecret
          def ClientSecret(value)
            dsl_attribute(:ClientSecret, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for UserInfoEndpoint
          def UserInfoEndpoint(value)
            dsl_attribute(:UserInfoEndpoint, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ClientId
          def ClientId(value)
            dsl_attribute(:ClientId, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for AuthorizationEndpoint
          def AuthorizationEndpoint(value)
            dsl_attribute(:AuthorizationEndpoint, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for SessionCookieName
          def SessionCookieName(value)
            dsl_attribute(:SessionCookieName, value)
          end

          #   @param [Object|JSONable] value
          #     The value to use for AuthenticationRequestExtraParams
          def AuthenticationRequestExtraParams(value)
            dsl_attribute(:AuthenticationRequestExtraParams, value)
          end
        end

        # Property Definition SourceIpConfig
        class SourceIpConfig < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Values
          def Values(values)
            dsl_list_attribute(:Values, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Values
          def Value(value, fn_if: nil)
            dsl_push_attribute(:Values, value, fn_if: fn_if)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for ListenerArn
        def ListenerArn(value)
          dsl_attribute(:ListenerArn, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        # @param [Array<Action>|JSONable>] values
        #   The List of values to use for Actions
        def Actions(values)
          dsl_list_attribute(:Actions, values)
        end

        #  @param [Action|JSONable] value  Append value to the List
        #    The List of values to use for Actions
        # @@overload Action(&block)
        # Append value to the List from block via instance eval of a new Action
        def Action(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Actions, value, fn_if: fn_if, attr_class: Action, **value_hash, &block)
        end

        #   @param [Integer|JSONable] value
        #     The value to use for Priority
        def Priority(value)
          dsl_attribute(:Priority, value)
        end

        # @param [Array<RuleCondition>|JSONable>] values
        #   The List of values to use for Conditions
        def Conditions(values)
          dsl_list_attribute(:Conditions, values)
        end

        #  @param [RuleCondition|JSONable] value  Append value to the List
        #    The List of values to use for Conditions
        # @@overload Condition(&block)
        # Append value to the List from block via instance eval of a new RuleCondition
        def Condition(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Conditions, value, fn_if: fn_if, attr_class: RuleCondition, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::ElasticLoadBalancingV2::ListenerRule]
    def AWS_ElasticLoadBalancingV2_ListenerRule(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::ElasticLoadBalancingV2::ListenerRule, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
