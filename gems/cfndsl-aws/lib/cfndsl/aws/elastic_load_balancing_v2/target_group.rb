# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module ElasticLoadBalancingV2
      # Resource Type definition for AWS::ElasticLoadBalancingV2::TargetGroup
      class TargetGroup < ResourceType
        # Property Definition TargetGroupAttribute
        class TargetGroupAttribute < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        # Property Definition Matcher
        class Matcher < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for HttpCode
          def HttpCode(value)
            dsl_attribute(:HttpCode, value)
          end
        end

        # Property Definition TargetDescription
        class TargetDescription < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for AvailabilityZone
          def AvailabilityZone(value)
            dsl_attribute(:AvailabilityZone, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Id
          def Id(value)
            dsl_attribute(:Id, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for Port
          def Port(value)
            dsl_attribute(:Port, value)
          end
        end

        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        # @param [Array<String>|JSONable>] values
        #   The List of values to use for LoadBalancerArns
        def LoadBalancerArns(values)
          dsl_list_attribute(:LoadBalancerArns, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for LoadBalancerArns
        def LoadBalancerArn(value, fn_if: nil)
          dsl_push_attribute(:LoadBalancerArns, value, fn_if: fn_if)
        end

        #   @param [String|JSONable] value
        #     The value to use for TargetGroupFullName
        def TargetGroupFullName(value)
          dsl_attribute(:TargetGroupFullName, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for TargetGroupName
        def TargetGroupName(value)
          dsl_attribute(:TargetGroupName, value)
        end

        #   @param [Boolean|JSONable] value
        #     The value to use for HealthCheckEnabled
        def HealthCheckEnabled(value)
          dsl_attribute(:HealthCheckEnabled, value)
        end

        #   @param [Integer|JSONable] value
        #     The value to use for HealthCheckIntervalSeconds
        def HealthCheckIntervalSeconds(value)
          dsl_attribute(:HealthCheckIntervalSeconds, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for HealthCheckPath
        def HealthCheckPath(value)
          dsl_attribute(:HealthCheckPath, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for HealthCheckPort
        def HealthCheckPort(value)
          dsl_attribute(:HealthCheckPort, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for HealthCheckProtocol
        def HealthCheckProtocol(value)
          dsl_attribute(:HealthCheckProtocol, value)
        end

        #   @param [Integer|JSONable] value
        #     The value to use for HealthCheckTimeoutSeconds
        def HealthCheckTimeoutSeconds(value)
          dsl_attribute(:HealthCheckTimeoutSeconds, value)
        end

        #   @param [Integer|JSONable] value
        #     The value to use for HealthyThresholdCount
        def HealthyThresholdCount(value)
          dsl_attribute(:HealthyThresholdCount, value)
        end

        #   @param [Matcher|JSONable] value
        #     The value to use for Matcher
        # @@overload Matcher(&block)
        #   Set :Matcher from block via instance eval of a new Matcher
        def Matcher(value = nil, **value_hash, &block)
          dsl_attribute(:Matcher, value, attr_class: Matcher, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Name
        def Name(value)
          dsl_attribute(:Name, value)
        end

        #   @param [Integer|JSONable] value
        #     The value to use for Port
        def Port(value)
          dsl_attribute(:Port, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Protocol
        def Protocol(value)
          dsl_attribute(:Protocol, value)
        end

        # @param [Array<Tag>|JSONable>] values
        #   The List of values to use for Tags
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    The List of values to use for Tags
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end

        # @param [Array<TargetGroupAttribute>|JSONable>] values
        #   The List of values to use for TargetGroupAttributes
        def TargetGroupAttributes(values)
          dsl_list_attribute(:TargetGroupAttributes, values)
        end

        #  @param [TargetGroupAttribute|JSONable] value  Append value to the List
        #    The List of values to use for TargetGroupAttributes
        # @@overload TargetGroupAttribute(&block)
        # Append value to the List from block via instance eval of a new TargetGroupAttribute
        def TargetGroupAttribute(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:TargetGroupAttributes, value, fn_if: fn_if, attr_class: TargetGroupAttribute, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for TargetType
        def TargetType(value)
          dsl_attribute(:TargetType, value)
        end

        # @param [Array<TargetDescription>|JSONable>] values
        #   The List of values to use for Targets
        def Targets(values)
          dsl_list_attribute(:Targets, values)
        end

        #  @param [TargetDescription|JSONable] value  Append value to the List
        #    The List of values to use for Targets
        # @@overload Target(&block)
        # Append value to the List from block via instance eval of a new TargetDescription
        def Target(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Targets, value, fn_if: fn_if, attr_class: TargetDescription, **value_hash, &block)
        end

        #   @param [Integer|JSONable] value
        #     The value to use for UnhealthyThresholdCount
        def UnhealthyThresholdCount(value)
          dsl_attribute(:UnhealthyThresholdCount, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for VpcId
        def VpcId(value)
          dsl_attribute(:VpcId, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::ElasticLoadBalancingV2::TargetGroup]
    def AWS_ElasticLoadBalancingV2_TargetGroup(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::ElasticLoadBalancingV2::TargetGroup, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
