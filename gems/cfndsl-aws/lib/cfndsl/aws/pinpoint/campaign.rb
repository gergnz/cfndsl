# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module Pinpoint
      # Resource Type definition for AWS::Pinpoint::Campaign
      class Campaign < ResourceType
        # Property Definition Limits
        class Limits < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for Daily
          def Daily(value)
            dsl_attribute(:Daily, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for MaximumDuration
          def MaximumDuration(value)
            dsl_attribute(:MaximumDuration, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for Total
          def Total(value)
            dsl_attribute(:Total, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for MessagesPerSecond
          def MessagesPerSecond(value)
            dsl_attribute(:MessagesPerSecond, value)
          end
        end

        # Property Definition CampaignHook
        class CampaignHook < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Mode
          def Mode(value)
            dsl_attribute(:Mode, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for WebUrl
          def WebUrl(value)
            dsl_attribute(:WebUrl, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for LambdaFunctionName
          def LambdaFunctionName(value)
            dsl_attribute(:LambdaFunctionName, value)
          end
        end

        # Property Definition MessageConfiguration
        class MessageConfiguration < PropertyType
          #   @param [Message|JSONable] value
          #     The value to use for APNSMessage
          # @@overload APNSMessage(&block)
          #   Set :APNSMessage from block via instance eval of a new Message
          def APNSMessage(value = nil, **value_hash, &block)
            dsl_attribute(:APNSMessage, value, attr_class: Message, **value_hash, &block)
          end

          #   @param [Message|JSONable] value
          #     The value to use for BaiduMessage
          # @@overload BaiduMessage(&block)
          #   Set :BaiduMessage from block via instance eval of a new Message
          def BaiduMessage(value = nil, **value_hash, &block)
            dsl_attribute(:BaiduMessage, value, attr_class: Message, **value_hash, &block)
          end

          #   @param [Message|JSONable] value
          #     The value to use for DefaultMessage
          # @@overload DefaultMessage(&block)
          #   Set :DefaultMessage from block via instance eval of a new Message
          def DefaultMessage(value = nil, **value_hash, &block)
            dsl_attribute(:DefaultMessage, value, attr_class: Message, **value_hash, &block)
          end

          #   @param [CampaignEmailMessage|JSONable] value
          #     The value to use for EmailMessage
          # @@overload EmailMessage(&block)
          #   Set :EmailMessage from block via instance eval of a new CampaignEmailMessage
          def EmailMessage(value = nil, **value_hash, &block)
            dsl_attribute(:EmailMessage, value, attr_class: CampaignEmailMessage, **value_hash, &block)
          end

          #   @param [Message|JSONable] value
          #     The value to use for GCMMessage
          # @@overload GCMMessage(&block)
          #   Set :GCMMessage from block via instance eval of a new Message
          def GCMMessage(value = nil, **value_hash, &block)
            dsl_attribute(:GCMMessage, value, attr_class: Message, **value_hash, &block)
          end

          #   @param [CampaignSmsMessage|JSONable] value
          #     The value to use for SMSMessage
          # @@overload SMSMessage(&block)
          #   Set :SMSMessage from block via instance eval of a new CampaignSmsMessage
          def SMSMessage(value = nil, **value_hash, &block)
            dsl_attribute(:SMSMessage, value, attr_class: CampaignSmsMessage, **value_hash, &block)
          end

          #   @param [Message|JSONable] value
          #     The value to use for ADMMessage
          # @@overload ADMMessage(&block)
          #   Set :ADMMessage from block via instance eval of a new Message
          def ADMMessage(value = nil, **value_hash, &block)
            dsl_attribute(:ADMMessage, value, attr_class: Message, **value_hash, &block)
          end
        end

        # Property Definition Schedule
        class Schedule < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for TimeZone
          def TimeZone(value)
            dsl_attribute(:TimeZone, value)
          end

          #   @param [QuietTime|JSONable] value
          #     The value to use for QuietTime
          # @@overload QuietTime(&block)
          #   Set :QuietTime from block via instance eval of a new QuietTime
          def QuietTime(value = nil, **value_hash, &block)
            dsl_attribute(:QuietTime, value, attr_class: QuietTime, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for EndTime
          def EndTime(value)
            dsl_attribute(:EndTime, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for StartTime
          def StartTime(value)
            dsl_attribute(:StartTime, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Frequency
          def Frequency(value)
            dsl_attribute(:Frequency, value)
          end

          #   @param [CampaignEventFilter|JSONable] value
          #     The value to use for EventFilter
          # @@overload EventFilter(&block)
          #   Set :EventFilter from block via instance eval of a new CampaignEventFilter
          def EventFilter(value = nil, **value_hash, &block)
            dsl_attribute(:EventFilter, value, attr_class: CampaignEventFilter, **value_hash, &block)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for IsLocalTime
          def IsLocalTime(value)
            dsl_attribute(:IsLocalTime, value)
          end
        end

        # Property Definition WriteTreatmentResource
        class WriteTreatmentResource < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for TreatmentDescription
          def TreatmentDescription(value)
            dsl_attribute(:TreatmentDescription, value)
          end

          #   @param [MessageConfiguration|JSONable] value
          #     The value to use for MessageConfiguration
          # @@overload MessageConfiguration(&block)
          #   Set :MessageConfiguration from block via instance eval of a new MessageConfiguration
          def MessageConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:MessageConfiguration, value, attr_class: MessageConfiguration, **value_hash, &block)
          end

          #   @param [Schedule|JSONable] value
          #     The value to use for Schedule
          # @@overload Schedule(&block)
          #   Set :Schedule from block via instance eval of a new Schedule
          def Schedule(value = nil, **value_hash, &block)
            dsl_attribute(:Schedule, value, attr_class: Schedule, **value_hash, &block)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for SizePercent
          def SizePercent(value)
            dsl_attribute(:SizePercent, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for TreatmentName
          def TreatmentName(value)
            dsl_attribute(:TreatmentName, value)
          end
        end

        # Property Definition CampaignEmailMessage
        class CampaignEmailMessage < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for FromAddress
          def FromAddress(value)
            dsl_attribute(:FromAddress, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for HtmlBody
          def HtmlBody(value)
            dsl_attribute(:HtmlBody, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Title
          def Title(value)
            dsl_attribute(:Title, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Body
          def Body(value)
            dsl_attribute(:Body, value)
          end
        end

        # Property Definition QuietTime
        class QuietTime < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Start
          def Start(value)
            dsl_attribute(:Start, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for End
          def End(value)
            dsl_attribute(:End, value)
          end
        end

        # Property Definition Message
        class Message < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for JsonBody
          def JsonBody(value)
            dsl_attribute(:JsonBody, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Action
          def Action(value)
            dsl_attribute(:Action, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for MediaUrl
          def MediaUrl(value)
            dsl_attribute(:MediaUrl, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for TimeToLive
          def TimeToLive(value)
            dsl_attribute(:TimeToLive, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ImageSmallIconUrl
          def ImageSmallIconUrl(value)
            dsl_attribute(:ImageSmallIconUrl, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ImageUrl
          def ImageUrl(value)
            dsl_attribute(:ImageUrl, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Title
          def Title(value)
            dsl_attribute(:Title, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ImageIconUrl
          def ImageIconUrl(value)
            dsl_attribute(:ImageIconUrl, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for SilentPush
          def SilentPush(value)
            dsl_attribute(:SilentPush, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Body
          def Body(value)
            dsl_attribute(:Body, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for RawContent
          def RawContent(value)
            dsl_attribute(:RawContent, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Url
          def Url(value)
            dsl_attribute(:Url, value)
          end
        end

        # Property Definition CampaignSmsMessage
        class CampaignSmsMessage < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for SenderId
          def SenderId(value)
            dsl_attribute(:SenderId, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Body
          def Body(value)
            dsl_attribute(:Body, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for MessageType
          def MessageType(value)
            dsl_attribute(:MessageType, value)
          end
        end

        # Property Definition CampaignEventFilter
        class CampaignEventFilter < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for FilterType
          def FilterType(value)
            dsl_attribute(:FilterType, value)
          end

          #   @param [EventDimensions|JSONable] value
          #     The value to use for Dimensions
          # @@overload Dimensions(&block)
          #   Set :Dimensions from block via instance eval of a new EventDimensions
          def Dimensions(value = nil, **value_hash, &block)
            dsl_attribute(:Dimensions, value, attr_class: EventDimensions, **value_hash, &block)
          end
        end

        # Property Definition EventDimensions
        class EventDimensions < PropertyType
          #   @param [Object|JSONable] value
          #     The value to use for Metrics
          def Metrics(value)
            dsl_attribute(:Metrics, value)
          end

          #   @param [SetDimension|JSONable] value
          #     The value to use for EventType
          # @@overload EventType(&block)
          #   Set :EventType from block via instance eval of a new SetDimension
          def EventType(value = nil, **value_hash, &block)
            dsl_attribute(:EventType, value, attr_class: SetDimension, **value_hash, &block)
          end

          #   @param [Object|JSONable] value
          #     The value to use for Attributes
          def Attributes(value)
            dsl_attribute(:Attributes, value)
          end
        end

        # Property Definition SetDimension
        class SetDimension < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for DimensionType
          def DimensionType(value)
            dsl_attribute(:DimensionType, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Values
          def Values(values)
            dsl_list_attribute(:Values, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Values
          def Value(value, fn_if: nil)
            dsl_push_attribute(:Values, value, fn_if: fn_if)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for CampaignId
        def CampaignId(value)
          dsl_attribute(:CampaignId, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Arn
        def Arn(value)
          dsl_attribute(:Arn, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Description
        def Description(value)
          dsl_attribute(:Description, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for SegmentId
        def SegmentId(value)
          dsl_attribute(:SegmentId, value)
        end

        #   @param [Boolean|JSONable] value
        #     The value to use for IsPaused
        def IsPaused(value)
          dsl_attribute(:IsPaused, value)
        end

        # @param [Array<WriteTreatmentResource>|JSONable>] values
        #   The List of values to use for AdditionalTreatments
        def AdditionalTreatments(values)
          dsl_list_attribute(:AdditionalTreatments, values)
        end

        #  @param [WriteTreatmentResource|JSONable] value  Append value to the List
        #    The List of values to use for AdditionalTreatments
        # @@overload AdditionalTreatment(&block)
        # Append value to the List from block via instance eval of a new WriteTreatmentResource
        def AdditionalTreatment(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:AdditionalTreatments, value, fn_if: fn_if, attr_class: WriteTreatmentResource, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Name
        def Name(value)
          dsl_attribute(:Name, value)
        end

        #   @param [Integer|JSONable] value
        #     The value to use for SegmentVersion
        def SegmentVersion(value)
          dsl_attribute(:SegmentVersion, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for TreatmentDescription
        def TreatmentDescription(value)
          dsl_attribute(:TreatmentDescription, value)
        end

        #   @param [MessageConfiguration|JSONable] value
        #     The value to use for MessageConfiguration
        # @@overload MessageConfiguration(&block)
        #   Set :MessageConfiguration from block via instance eval of a new MessageConfiguration
        def MessageConfiguration(value = nil, **value_hash, &block)
          dsl_attribute(:MessageConfiguration, value, attr_class: MessageConfiguration, **value_hash, &block)
        end

        #   @param [Limits|JSONable] value
        #     The value to use for Limits
        # @@overload Limits(&block)
        #   Set :Limits from block via instance eval of a new Limits
        def Limits(value = nil, **value_hash, &block)
          dsl_attribute(:Limits, value, attr_class: Limits, **value_hash, &block)
        end

        #   @param [Integer|JSONable] value
        #     The value to use for HoldoutPercent
        def HoldoutPercent(value)
          dsl_attribute(:HoldoutPercent, value)
        end

        #   @param [Schedule|JSONable] value
        #     The value to use for Schedule
        # @@overload Schedule(&block)
        #   Set :Schedule from block via instance eval of a new Schedule
        def Schedule(value = nil, **value_hash, &block)
          dsl_attribute(:Schedule, value, attr_class: Schedule, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for ApplicationId
        def ApplicationId(value)
          dsl_attribute(:ApplicationId, value)
        end

        #   @param [CampaignHook|JSONable] value
        #     The value to use for CampaignHook
        # @@overload CampaignHook(&block)
        #   Set :CampaignHook from block via instance eval of a new CampaignHook
        def CampaignHook(value = nil, **value_hash, &block)
          dsl_attribute(:CampaignHook, value, attr_class: CampaignHook, **value_hash, &block)
        end

        #   @param [Object|JSONable] value
        #     The value to use for Tags
        def Tags(value)
          dsl_attribute(:Tags, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for TreatmentName
        def TreatmentName(value)
          dsl_attribute(:TreatmentName, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::Pinpoint::Campaign]
    def AWS_Pinpoint_Campaign(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::Pinpoint::Campaign, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
