# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module Pinpoint
      # Resource Type definition for AWS::Pinpoint::Segment
      class Segment < ResourceType
        # Property Definition SegmentDimensions
        class SegmentDimensions < PropertyType
          #   @param [Demographic|JSONable] value
          #     The value to use for Demographic
          # @@overload Demographic(&block)
          #   Set :Demographic from block via instance eval of a new Demographic
          def Demographic(value = nil, **value_hash, &block)
            dsl_attribute(:Demographic, value, attr_class: Demographic, **value_hash, &block)
          end

          #   @param [Object|JSONable] value
          #     The value to use for Metrics
          def Metrics(value)
            dsl_attribute(:Metrics, value)
          end

          #   @param [Object|JSONable] value
          #     The value to use for Attributes
          def Attributes(value)
            dsl_attribute(:Attributes, value)
          end

          #   @param [Behavior|JSONable] value
          #     The value to use for Behavior
          # @@overload Behavior(&block)
          #   Set :Behavior from block via instance eval of a new Behavior
          def Behavior(value = nil, **value_hash, &block)
            dsl_attribute(:Behavior, value, attr_class: Behavior, **value_hash, &block)
          end

          #   @param [Object|JSONable] value
          #     The value to use for UserAttributes
          def UserAttributes(value)
            dsl_attribute(:UserAttributes, value)
          end

          #   @param [Location|JSONable] value
          #     The value to use for Location
          # @@overload Location(&block)
          #   Set :Location from block via instance eval of a new Location
          def Location(value = nil, **value_hash, &block)
            dsl_attribute(:Location, value, attr_class: Location, **value_hash, &block)
          end
        end

        # Property Definition SegmentGroups
        class SegmentGroups < PropertyType
          # @param [Array<Groups>|JSONable>] values
          #   The List of values to use for Groups
          def Groups(values)
            dsl_list_attribute(:Groups, values)
          end

          #  @param [Groups|JSONable] value  Append value to the List
          #    The List of values to use for Groups
          # @@overload Group(&block)
          # Append value to the List from block via instance eval of a new Groups
          def Group(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Groups, value, fn_if: fn_if, attr_class: Groups, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for Include
          def Include(value)
            dsl_attribute(:Include, value)
          end
        end

        # Property Definition Demographic
        class Demographic < PropertyType
          #   @param [SetDimension|JSONable] value
          #     The value to use for AppVersion
          # @@overload AppVersion(&block)
          #   Set :AppVersion from block via instance eval of a new SetDimension
          def AppVersion(value = nil, **value_hash, &block)
            dsl_attribute(:AppVersion, value, attr_class: SetDimension, **value_hash, &block)
          end

          #   @param [SetDimension|JSONable] value
          #     The value to use for DeviceType
          # @@overload DeviceType(&block)
          #   Set :DeviceType from block via instance eval of a new SetDimension
          def DeviceType(value = nil, **value_hash, &block)
            dsl_attribute(:DeviceType, value, attr_class: SetDimension, **value_hash, &block)
          end

          #   @param [SetDimension|JSONable] value
          #     The value to use for Platform
          # @@overload Platform(&block)
          #   Set :Platform from block via instance eval of a new SetDimension
          def Platform(value = nil, **value_hash, &block)
            dsl_attribute(:Platform, value, attr_class: SetDimension, **value_hash, &block)
          end

          #   @param [SetDimension|JSONable] value
          #     The value to use for Channel
          # @@overload Channel(&block)
          #   Set :Channel from block via instance eval of a new SetDimension
          def Channel(value = nil, **value_hash, &block)
            dsl_attribute(:Channel, value, attr_class: SetDimension, **value_hash, &block)
          end

          #   @param [SetDimension|JSONable] value
          #     The value to use for Model
          # @@overload Model(&block)
          #   Set :Model from block via instance eval of a new SetDimension
          def Model(value = nil, **value_hash, &block)
            dsl_attribute(:Model, value, attr_class: SetDimension, **value_hash, &block)
          end

          #   @param [SetDimension|JSONable] value
          #     The value to use for Make
          # @@overload Make(&block)
          #   Set :Make from block via instance eval of a new SetDimension
          def Make(value = nil, **value_hash, &block)
            dsl_attribute(:Make, value, attr_class: SetDimension, **value_hash, &block)
          end
        end

        # Property Definition Groups
        class Groups < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Type
          def Type(value)
            dsl_attribute(:Type, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for SourceType
          def SourceType(value)
            dsl_attribute(:SourceType, value)
          end

          # @param [Array<SegmentDimensions>|JSONable>] values
          #   The List of values to use for Dimensions
          def Dimensions(values)
            dsl_list_attribute(:Dimensions, values)
          end

          #  @param [SegmentDimensions|JSONable] value  Append value to the List
          #    The List of values to use for Dimensions
          # @@overload Dimension(&block)
          # Append value to the List from block via instance eval of a new SegmentDimensions
          def Dimension(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Dimensions, value, fn_if: fn_if, attr_class: SegmentDimensions, **value_hash, &block)
          end

          # @param [Array<SourceSegments>|JSONable>] values
          #   The List of values to use for SourceSegments
          def SourceSegments(values)
            dsl_list_attribute(:SourceSegments, values)
          end

          #  @param [SourceSegments|JSONable] value  Append value to the List
          #    The List of values to use for SourceSegments
          # @@overload SourceSegment(&block)
          # Append value to the List from block via instance eval of a new SourceSegments
          def SourceSegment(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:SourceSegments, value, fn_if: fn_if, attr_class: SourceSegments, **value_hash, &block)
          end
        end

        # Property Definition Location
        class Location < PropertyType
          #   @param [GPSPoint|JSONable] value
          #     The value to use for GPSPoint
          # @@overload GPSPoint(&block)
          #   Set :GPSPoint from block via instance eval of a new GPSPoint
          def GPSPoint(value = nil, **value_hash, &block)
            dsl_attribute(:GPSPoint, value, attr_class: GPSPoint, **value_hash, &block)
          end

          #   @param [SetDimension|JSONable] value
          #     The value to use for Country
          # @@overload Country(&block)
          #   Set :Country from block via instance eval of a new SetDimension
          def Country(value = nil, **value_hash, &block)
            dsl_attribute(:Country, value, attr_class: SetDimension, **value_hash, &block)
          end
        end

        # Property Definition Behavior
        class Behavior < PropertyType
          #   @param [Recency|JSONable] value
          #     The value to use for Recency
          # @@overload Recency(&block)
          #   Set :Recency from block via instance eval of a new Recency
          def Recency(value = nil, **value_hash, &block)
            dsl_attribute(:Recency, value, attr_class: Recency, **value_hash, &block)
          end
        end

        # Property Definition SetDimension
        class SetDimension < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for DimensionType
          def DimensionType(value)
            dsl_attribute(:DimensionType, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Values
          def Values(values)
            dsl_list_attribute(:Values, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Values
          def Value(value, fn_if: nil)
            dsl_push_attribute(:Values, value, fn_if: fn_if)
          end
        end

        # Property Definition SourceSegments
        class SourceSegments < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for Version
          def Version(value)
            dsl_attribute(:Version, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Id
          def Id(value)
            dsl_attribute(:Id, value)
          end
        end

        # Property Definition GPSPoint
        class GPSPoint < PropertyType
          #   @param [Number|JSONable] value
          #     The value to use for RangeInKilometers
          def RangeInKilometers(value)
            dsl_attribute(:RangeInKilometers, value)
          end

          #   @param [Coordinates|JSONable] value
          #     The value to use for Coordinates
          # @@overload Coordinates(&block)
          #   Set :Coordinates from block via instance eval of a new Coordinates
          def Coordinates(value = nil, **value_hash, &block)
            dsl_attribute(:Coordinates, value, attr_class: Coordinates, **value_hash, &block)
          end
        end

        # Property Definition Recency
        class Recency < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Duration
          def Duration(value)
            dsl_attribute(:Duration, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for RecencyType
          def RecencyType(value)
            dsl_attribute(:RecencyType, value)
          end
        end

        # Property Definition Coordinates
        class Coordinates < PropertyType
          #   @param [Number|JSONable] value
          #     The value to use for Latitude
          def Latitude(value)
            dsl_attribute(:Latitude, value)
          end

          #   @param [Number|JSONable] value
          #     The value to use for Longitude
          def Longitude(value)
            dsl_attribute(:Longitude, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for SegmentId
        def SegmentId(value)
          dsl_attribute(:SegmentId, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Arn
        def Arn(value)
          dsl_attribute(:Arn, value)
        end

        #   @param [SegmentGroups|JSONable] value
        #     The value to use for SegmentGroups
        # @@overload SegmentGroups(&block)
        #   Set :SegmentGroups from block via instance eval of a new SegmentGroups
        def SegmentGroups(value = nil, **value_hash, &block)
          dsl_attribute(:SegmentGroups, value, attr_class: SegmentGroups, **value_hash, &block)
        end

        #   @param [SegmentDimensions|JSONable] value
        #     The value to use for Dimensions
        # @@overload Dimensions(&block)
        #   Set :Dimensions from block via instance eval of a new SegmentDimensions
        def Dimensions(value = nil, **value_hash, &block)
          dsl_attribute(:Dimensions, value, attr_class: SegmentDimensions, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for ApplicationId
        def ApplicationId(value)
          dsl_attribute(:ApplicationId, value)
        end

        #   @param [Object|JSONable] value
        #     The value to use for Tags
        def Tags(value)
          dsl_attribute(:Tags, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Name
        def Name(value)
          dsl_attribute(:Name, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::Pinpoint::Segment]
    def AWS_Pinpoint_Segment(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::Pinpoint::Segment, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
