# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module ServiceCatalog
      # Resource Schema for AWS::ServiceCatalog::CloudFormationProvisionedProduct
      # @see https://github.com/aws-cloudformation/aws-cloudformation-rpdk.git
      class CloudFormationProvisionedProduct < ResourceType
        # Property Definition ProvisioningPreferences
        class ProvisioningPreferences < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for StackSetAccounts
          def StackSetAccounts(values)
            dsl_list_attribute(:StackSetAccounts, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for StackSetAccounts
          def StackSetAccount(value, fn_if: nil)
            dsl_push_attribute(:StackSetAccounts, value, fn_if: fn_if)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for StackSetFailureToleranceCount
          def StackSetFailureToleranceCount(value)
            dsl_attribute(:StackSetFailureToleranceCount, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for StackSetFailureTolerancePercentage
          def StackSetFailureTolerancePercentage(value)
            dsl_attribute(:StackSetFailureTolerancePercentage, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for StackSetMaxConcurrencyCount
          def StackSetMaxConcurrencyCount(value)
            dsl_attribute(:StackSetMaxConcurrencyCount, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for StackSetMaxConcurrencyPercentage
          def StackSetMaxConcurrencyPercentage(value)
            dsl_attribute(:StackSetMaxConcurrencyPercentage, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for StackSetOperationType
          def StackSetOperationType(value)
            dsl_attribute(:StackSetOperationType, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for StackSetRegions
          def StackSetRegions(values)
            dsl_list_attribute(:StackSetRegions, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for StackSetRegions
          def StackSetRegion(value, fn_if: nil)
            dsl_push_attribute(:StackSetRegions, value, fn_if: fn_if)
          end
        end

        # Property Definition ProvisioningParameter
        class ProvisioningParameter < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for AcceptLanguage
        def AcceptLanguage(value)
          dsl_attribute(:AcceptLanguage, value)
        end

        # @param [Array<String>|JSONable>] values
        #   The List of values to use for NotificationArns
        def NotificationArns(values)
          dsl_list_attribute(:NotificationArns, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for NotificationArns
        def NotificationArn(value, fn_if: nil)
          dsl_push_attribute(:NotificationArns, value, fn_if: fn_if)
        end

        #   @param [String|JSONable] value
        #     The value to use for PathId
        def PathId(value)
          dsl_attribute(:PathId, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for PathName
        def PathName(value)
          dsl_attribute(:PathName, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for ProductId
        def ProductId(value)
          dsl_attribute(:ProductId, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for ProductName
        def ProductName(value)
          dsl_attribute(:ProductName, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for ProvisionedProductName
        def ProvisionedProductName(value)
          dsl_attribute(:ProvisionedProductName, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for ProvisioningArtifactId
        def ProvisioningArtifactId(value)
          dsl_attribute(:ProvisioningArtifactId, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for ProvisioningArtifactName
        def ProvisioningArtifactName(value)
          dsl_attribute(:ProvisioningArtifactName, value)
        end

        # @param [Array<ProvisioningParameter>|JSONable>] values
        #   The List of values to use for ProvisioningParameters
        def ProvisioningParameters(values)
          dsl_list_attribute(:ProvisioningParameters, values)
        end

        #  @param [ProvisioningParameter|JSONable] value  Append value to the List
        #    The List of values to use for ProvisioningParameters
        # @@overload ProvisioningParameter(&block)
        # Append value to the List from block via instance eval of a new ProvisioningParameter
        def ProvisioningParameter(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:ProvisioningParameters, value, fn_if: fn_if, attr_class: ProvisioningParameter, **value_hash, &block)
        end

        #   @param [ProvisioningPreferences|JSONable] value
        #     The value to use for ProvisioningPreferences
        # @@overload ProvisioningPreferences(&block)
        #   Set :ProvisioningPreferences from block via instance eval of a new ProvisioningPreferences
        def ProvisioningPreferences(value = nil, **value_hash, &block)
          dsl_attribute(:ProvisioningPreferences, value, attr_class: ProvisioningPreferences, **value_hash, &block)
        end

        # @param [Array<Tag>|JSONable>] values
        #   The List of values to use for Tags
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    The List of values to use for Tags
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for ProvisionedProductId
        def ProvisionedProductId(value)
          dsl_attribute(:ProvisionedProductId, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for RecordId
        def RecordId(value)
          dsl_attribute(:RecordId, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for CloudformationStackArn
        def CloudformationStackArn(value)
          dsl_attribute(:CloudformationStackArn, value)
        end

        #   @param [Object|JSONable] value
        #     List of key-value pair outputs.
        def Outputs(value)
          dsl_attribute(:Outputs, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::ServiceCatalog::CloudFormationProvisionedProduct]
    def AWS_ServiceCatalog_CloudFormationProvisionedProduct(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::ServiceCatalog::CloudFormationProvisionedProduct, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
