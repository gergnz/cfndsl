# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module DataPipeline
      # Resource Type definition for AWS::DataPipeline::Pipeline
      class Pipeline < ResourceType
        # Property Definition ParameterAttribute
        class ParameterAttribute < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for StringValue
          def StringValue(value)
            dsl_attribute(:StringValue, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end
        end

        # Property Definition PipelineTag
        class PipelineTag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end
        end

        # Property Definition Field
        class Field < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for RefValue
          def RefValue(value)
            dsl_attribute(:RefValue, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for StringValue
          def StringValue(value)
            dsl_attribute(:StringValue, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end
        end

        # Property Definition ParameterValue
        class ParameterValue < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for StringValue
          def StringValue(value)
            dsl_attribute(:StringValue, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Id
          def Id(value)
            dsl_attribute(:Id, value)
          end
        end

        # Property Definition PipelineObject
        class PipelineObject < PropertyType
          # @param [Array<Field>|JSONable>] values
          #   The List of values to use for Fields
          def Fields(values)
            dsl_list_attribute(:Fields, values)
          end

          #  @param [Field|JSONable] value  Append value to the List
          #    The List of values to use for Fields
          # @@overload Field(&block)
          # Append value to the List from block via instance eval of a new Field
          def Field(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Fields, value, fn_if: fn_if, attr_class: Field, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for Id
          def Id(value)
            dsl_attribute(:Id, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end
        end

        # Property Definition ParameterObject
        class ParameterObject < PropertyType
          # @param [Array<ParameterAttribute>|JSONable>] values
          #   The List of values to use for Attributes
          def Attributes(values)
            dsl_list_attribute(:Attributes, values)
          end

          #  @param [ParameterAttribute|JSONable] value  Append value to the List
          #    The List of values to use for Attributes
          # @@overload Attribute(&block)
          # Append value to the List from block via instance eval of a new ParameterAttribute
          def Attribute(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Attributes, value, fn_if: fn_if, attr_class: ParameterAttribute, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for Id
          def Id(value)
            dsl_attribute(:Id, value)
          end
        end

        # @param [Array<PipelineTag>|JSONable>] values
        #   The List of values to use for PipelineTags
        def PipelineTags(values)
          dsl_list_attribute(:PipelineTags, values)
        end

        #  @param [PipelineTag|JSONable] value  Append value to the List
        #    The List of values to use for PipelineTags
        # @@overload PipelineTag(&block)
        # Append value to the List from block via instance eval of a new PipelineTag
        def PipelineTag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:PipelineTags, value, fn_if: fn_if, attr_class: PipelineTag, **value_hash, &block)
        end

        # @param [Array<ParameterObject>|JSONable>] values
        #   The List of values to use for ParameterObjects
        def ParameterObjects(values)
          dsl_list_attribute(:ParameterObjects, values)
        end

        #  @param [ParameterObject|JSONable] value  Append value to the List
        #    The List of values to use for ParameterObjects
        # @@overload ParameterObject(&block)
        # Append value to the List from block via instance eval of a new ParameterObject
        def ParameterObject(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:ParameterObjects, value, fn_if: fn_if, attr_class: ParameterObject, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Description
        def Description(value)
          dsl_attribute(:Description, value)
        end

        #   @param [Boolean|JSONable] value
        #     The value to use for Activate
        def Activate(value)
          dsl_attribute(:Activate, value)
        end

        # @param [Array<PipelineObject>|JSONable>] values
        #   The List of values to use for PipelineObjects
        def PipelineObjects(values)
          dsl_list_attribute(:PipelineObjects, values)
        end

        #  @param [PipelineObject|JSONable] value  Append value to the List
        #    The List of values to use for PipelineObjects
        # @@overload PipelineObject(&block)
        # Append value to the List from block via instance eval of a new PipelineObject
        def PipelineObject(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:PipelineObjects, value, fn_if: fn_if, attr_class: PipelineObject, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        # @param [Array<ParameterValue>|JSONable>] values
        #   The List of values to use for ParameterValues
        def ParameterValues(values)
          dsl_list_attribute(:ParameterValues, values)
        end

        #  @param [ParameterValue|JSONable] value  Append value to the List
        #    The List of values to use for ParameterValues
        # @@overload ParameterValue(&block)
        # Append value to the List from block via instance eval of a new ParameterValue
        def ParameterValue(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:ParameterValues, value, fn_if: fn_if, attr_class: ParameterValue, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Name
        def Name(value)
          dsl_attribute(:Name, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::DataPipeline::Pipeline]
    def AWS_DataPipeline_Pipeline(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::DataPipeline::Pipeline, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
