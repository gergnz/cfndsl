# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module Cassandra
      # Resource schema for AWS::Cassandra::Table
      class Table < ResourceType
        # Property Definition Column
        class Column < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ColumnName
          def ColumnName(value)
            dsl_attribute(:ColumnName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ColumnType
          def ColumnType(value)
            dsl_attribute(:ColumnType, value)
          end
        end

        # Property Definition ClusteringKeyColumn
        class ClusteringKeyColumn < PropertyType
          #   @param [Column|JSONable] value
          #     The value to use for Column
          # @@overload Column(&block)
          #   Set :Column from block via instance eval of a new Column
          def Column(value = nil, **value_hash, &block)
            dsl_attribute(:Column, value, attr_class: Column, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for OrderBy
          def OrderBy(value)
            dsl_attribute(:OrderBy, value)
          end
        end

        # Throughput for the specified table, which consists of values for ReadCapacityUnits and WriteCapacityUnits
        class ProvisionedThroughput < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for ReadCapacityUnits
          def ReadCapacityUnits(value)
            dsl_attribute(:ReadCapacityUnits, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for WriteCapacityUnits
          def WriteCapacityUnits(value)
            dsl_attribute(:WriteCapacityUnits, value)
          end
        end

        # Property Definition BillingMode
        class BillingMode < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Mode
          def Mode(value)
            dsl_attribute(:Mode, value)
          end

          #   @param [ProvisionedThroughput|JSONable] value
          #     The value to use for ProvisionedThroughput
          # @@overload ProvisionedThroughput(&block)
          #   Set :ProvisionedThroughput from block via instance eval of a new ProvisionedThroughput
          def ProvisionedThroughput(value = nil, **value_hash, &block)
            dsl_attribute(:ProvisionedThroughput, value, attr_class: ProvisionedThroughput, **value_hash, &block)
          end
        end

        #   @param [String|JSONable] value
        #     Name for Cassandra keyspace
        def KeyspaceName(value)
          dsl_attribute(:KeyspaceName, value)
        end

        #   @param [String|JSONable] value
        #     Name for Cassandra table
        def TableName(value)
          dsl_attribute(:TableName, value)
        end

        # @param [Array<Column>|JSONable>] values
        #   Non-key columns of the table
        def RegularColumns(values)
          dsl_list_attribute(:RegularColumns, values)
        end

        #  @param [Column|JSONable] value  Append value to the List
        #    Non-key columns of the table
        # @@overload RegularColumn(&block)
        # Append value to the List from block via instance eval of a new Column
        def RegularColumn(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:RegularColumns, value, fn_if: fn_if, attr_class: Column, **value_hash, &block)
        end

        # @param [Array<Column>|JSONable>] values
        #   Partition key columns of the table
        def PartitionKeyColumns(values)
          dsl_list_attribute(:PartitionKeyColumns, values)
        end

        #  @param [Column|JSONable] value  Append value to the List
        #    Partition key columns of the table
        # @@overload PartitionKeyColumn(&block)
        # Append value to the List from block via instance eval of a new Column
        def PartitionKeyColumn(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:PartitionKeyColumns, value, fn_if: fn_if, attr_class: Column, **value_hash, &block)
        end

        # @param [Array<ClusteringKeyColumn>|JSONable>] values
        #   Clustering key columns of the table
        def ClusteringKeyColumns(values)
          dsl_list_attribute(:ClusteringKeyColumns, values)
        end

        #  @param [ClusteringKeyColumn|JSONable] value  Append value to the List
        #    Clustering key columns of the table
        # @@overload ClusteringKeyColumn(&block)
        # Append value to the List from block via instance eval of a new ClusteringKeyColumn
        def ClusteringKeyColumn(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:ClusteringKeyColumns, value, fn_if: fn_if, attr_class: ClusteringKeyColumn, **value_hash, &block)
        end

        #   @param [BillingMode|JSONable] value
        #     The value to use for BillingMode
        # @@overload BillingMode(&block)
        #   Set :BillingMode from block via instance eval of a new BillingMode
        def BillingMode(value = nil, **value_hash, &block)
          dsl_attribute(:BillingMode, value, attr_class: BillingMode, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::Cassandra::Table]
    def AWS_Cassandra_Table(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::Cassandra::Table, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
