# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module ServiceDiscovery
      # Resource Type definition for AWS::ServiceDiscovery::Service
      class Service < ResourceType
        # Property Definition HealthCheckCustomConfig
        class HealthCheckCustomConfig < PropertyType
          #   @param [Number|JSONable] value
          #     The value to use for FailureThreshold
          def FailureThreshold(value)
            dsl_attribute(:FailureThreshold, value)
          end
        end

        # Property Definition DnsConfig
        class DnsConfig < PropertyType
          # @param [Array<DnsRecord>|JSONable>] values
          #   The List of values to use for DnsRecords
          def DnsRecords(values)
            dsl_list_attribute(:DnsRecords, values)
          end

          #  @param [DnsRecord|JSONable] value  Append value to the List
          #    The List of values to use for DnsRecords
          # @@overload DnsRecord(&block)
          # Append value to the List from block via instance eval of a new DnsRecord
          def DnsRecord(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:DnsRecords, value, fn_if: fn_if, attr_class: DnsRecord, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for RoutingPolicy
          def RoutingPolicy(value)
            dsl_attribute(:RoutingPolicy, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for NamespaceId
          def NamespaceId(value)
            dsl_attribute(:NamespaceId, value)
          end
        end

        # Property Definition HealthCheckConfig
        class HealthCheckConfig < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Type
          def Type(value)
            dsl_attribute(:Type, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ResourcePath
          def ResourcePath(value)
            dsl_attribute(:ResourcePath, value)
          end

          #   @param [Number|JSONable] value
          #     The value to use for FailureThreshold
          def FailureThreshold(value)
            dsl_attribute(:FailureThreshold, value)
          end
        end

        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end
        end

        # Property Definition DnsRecord
        class DnsRecord < PropertyType
          #   @param [Number|JSONable] value
          #     The value to use for TTL
          def TTL(value)
            dsl_attribute(:TTL, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Type
          def Type(value)
            dsl_attribute(:Type, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for Description
        def Description(value)
          dsl_attribute(:Description, value)
        end

        #   @param [HealthCheckCustomConfig|JSONable] value
        #     The value to use for HealthCheckCustomConfig
        # @@overload HealthCheckCustomConfig(&block)
        #   Set :HealthCheckCustomConfig from block via instance eval of a new HealthCheckCustomConfig
        def HealthCheckCustomConfig(value = nil, **value_hash, &block)
          dsl_attribute(:HealthCheckCustomConfig, value, attr_class: HealthCheckCustomConfig, **value_hash, &block)
        end

        #   @param [DnsConfig|JSONable] value
        #     The value to use for DnsConfig
        # @@overload DnsConfig(&block)
        #   Set :DnsConfig from block via instance eval of a new DnsConfig
        def DnsConfig(value = nil, **value_hash, &block)
          dsl_attribute(:DnsConfig, value, attr_class: DnsConfig, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for NamespaceId
        def NamespaceId(value)
          dsl_attribute(:NamespaceId, value)
        end

        #   @param [HealthCheckConfig|JSONable] value
        #     The value to use for HealthCheckConfig
        # @@overload HealthCheckConfig(&block)
        #   Set :HealthCheckConfig from block via instance eval of a new HealthCheckConfig
        def HealthCheckConfig(value = nil, **value_hash, &block)
          dsl_attribute(:HealthCheckConfig, value, attr_class: HealthCheckConfig, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Arn
        def Arn(value)
          dsl_attribute(:Arn, value)
        end

        # @param [Array<Tag>|JSONable>] values
        #   The List of values to use for Tags
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    The List of values to use for Tags
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Name
        def Name(value)
          dsl_attribute(:Name, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::ServiceDiscovery::Service]
    def AWS_ServiceDiscovery_Service(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::ServiceDiscovery::Service, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
