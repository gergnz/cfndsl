# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module AutoScalingPlans
      # Resource Type definition for AWS::AutoScalingPlans::ScalingPlan
      class ScalingPlan < ResourceType
        # Property Definition ScalingInstruction
        class ScalingInstruction < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for DisableDynamicScaling
          def DisableDynamicScaling(value)
            dsl_attribute(:DisableDynamicScaling, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ServiceNamespace
          def ServiceNamespace(value)
            dsl_attribute(:ServiceNamespace, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for PredictiveScalingMaxCapacityBehavior
          def PredictiveScalingMaxCapacityBehavior(value)
            dsl_attribute(:PredictiveScalingMaxCapacityBehavior, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ScalableDimension
          def ScalableDimension(value)
            dsl_attribute(:ScalableDimension, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ScalingPolicyUpdateBehavior
          def ScalingPolicyUpdateBehavior(value)
            dsl_attribute(:ScalingPolicyUpdateBehavior, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for MinCapacity
          def MinCapacity(value)
            dsl_attribute(:MinCapacity, value)
          end

          # @param [Array<TargetTrackingConfiguration>|JSONable>] values
          #   The List of values to use for TargetTrackingConfigurations
          def TargetTrackingConfigurations(values)
            dsl_list_attribute(:TargetTrackingConfigurations, values)
          end

          #  @param [TargetTrackingConfiguration|JSONable] value  Append value to the List
          #    The List of values to use for TargetTrackingConfigurations
          # @@overload TargetTrackingConfiguration(&block)
          # Append value to the List from block via instance eval of a new TargetTrackingConfiguration
          def TargetTrackingConfiguration(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:TargetTrackingConfigurations, value, fn_if: fn_if, attr_class: TargetTrackingConfiguration, **value_hash, &block)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for PredictiveScalingMaxCapacityBuffer
          def PredictiveScalingMaxCapacityBuffer(value)
            dsl_attribute(:PredictiveScalingMaxCapacityBuffer, value)
          end

          #   @param [CustomizedLoadMetricSpecification|JSONable] value
          #     The value to use for CustomizedLoadMetricSpecification
          # @@overload CustomizedLoadMetricSpecification(&block)
          #   Set :CustomizedLoadMetricSpecification from block via instance eval of a new CustomizedLoadMetricSpecification
          def CustomizedLoadMetricSpecification(value = nil, **value_hash, &block)
            dsl_attribute(:CustomizedLoadMetricSpecification, value, attr_class: CustomizedLoadMetricSpecification, **value_hash, &block)
          end

          #   @param [PredefinedLoadMetricSpecification|JSONable] value
          #     The value to use for PredefinedLoadMetricSpecification
          # @@overload PredefinedLoadMetricSpecification(&block)
          #   Set :PredefinedLoadMetricSpecification from block via instance eval of a new PredefinedLoadMetricSpecification
          def PredefinedLoadMetricSpecification(value = nil, **value_hash, &block)
            dsl_attribute(:PredefinedLoadMetricSpecification, value, attr_class: PredefinedLoadMetricSpecification, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for ResourceId
          def ResourceId(value)
            dsl_attribute(:ResourceId, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for ScheduledActionBufferTime
          def ScheduledActionBufferTime(value)
            dsl_attribute(:ScheduledActionBufferTime, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for MaxCapacity
          def MaxCapacity(value)
            dsl_attribute(:MaxCapacity, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for PredictiveScalingMode
          def PredictiveScalingMode(value)
            dsl_attribute(:PredictiveScalingMode, value)
          end
        end

        # Property Definition ApplicationSource
        class ApplicationSource < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for CloudFormationStackARN
          def CloudFormationStackARN(value)
            dsl_attribute(:CloudFormationStackARN, value)
          end

          # @param [Array<TagFilter>|JSONable>] values
          #   The List of values to use for TagFilters
          def TagFilters(values)
            dsl_list_attribute(:TagFilters, values)
          end

          #  @param [TagFilter|JSONable] value  Append value to the List
          #    The List of values to use for TagFilters
          # @@overload TagFilter(&block)
          # Append value to the List from block via instance eval of a new TagFilter
          def TagFilter(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:TagFilters, value, fn_if: fn_if, attr_class: TagFilter, **value_hash, &block)
          end
        end

        # Property Definition TargetTrackingConfiguration
        class TargetTrackingConfiguration < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for ScaleOutCooldown
          def ScaleOutCooldown(value)
            dsl_attribute(:ScaleOutCooldown, value)
          end

          #   @param [Number|JSONable] value
          #     The value to use for TargetValue
          def TargetValue(value)
            dsl_attribute(:TargetValue, value)
          end

          #   @param [PredefinedScalingMetricSpecification|JSONable] value
          #     The value to use for PredefinedScalingMetricSpecification
          # @@overload PredefinedScalingMetricSpecification(&block)
          #   Set :PredefinedScalingMetricSpecification from block via instance eval of a new PredefinedScalingMetricSpecification
          def PredefinedScalingMetricSpecification(value = nil, **value_hash, &block)
            dsl_attribute(:PredefinedScalingMetricSpecification, value, attr_class: PredefinedScalingMetricSpecification, **value_hash, &block)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for DisableScaleIn
          def DisableScaleIn(value)
            dsl_attribute(:DisableScaleIn, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for ScaleInCooldown
          def ScaleInCooldown(value)
            dsl_attribute(:ScaleInCooldown, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for EstimatedInstanceWarmup
          def EstimatedInstanceWarmup(value)
            dsl_attribute(:EstimatedInstanceWarmup, value)
          end

          #   @param [CustomizedScalingMetricSpecification|JSONable] value
          #     The value to use for CustomizedScalingMetricSpecification
          # @@overload CustomizedScalingMetricSpecification(&block)
          #   Set :CustomizedScalingMetricSpecification from block via instance eval of a new CustomizedScalingMetricSpecification
          def CustomizedScalingMetricSpecification(value = nil, **value_hash, &block)
            dsl_attribute(:CustomizedScalingMetricSpecification, value, attr_class: CustomizedScalingMetricSpecification, **value_hash, &block)
          end
        end

        # Property Definition CustomizedLoadMetricSpecification
        class CustomizedLoadMetricSpecification < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for MetricName
          def MetricName(value)
            dsl_attribute(:MetricName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Statistic
          def Statistic(value)
            dsl_attribute(:Statistic, value)
          end

          # @param [Array<MetricDimension>|JSONable>] values
          #   The List of values to use for Dimensions
          def Dimensions(values)
            dsl_list_attribute(:Dimensions, values)
          end

          #  @param [MetricDimension|JSONable] value  Append value to the List
          #    The List of values to use for Dimensions
          # @@overload Dimension(&block)
          # Append value to the List from block via instance eval of a new MetricDimension
          def Dimension(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Dimensions, value, fn_if: fn_if, attr_class: MetricDimension, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for Unit
          def Unit(value)
            dsl_attribute(:Unit, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Namespace
          def Namespace(value)
            dsl_attribute(:Namespace, value)
          end
        end

        # Property Definition PredefinedLoadMetricSpecification
        class PredefinedLoadMetricSpecification < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for PredefinedLoadMetricType
          def PredefinedLoadMetricType(value)
            dsl_attribute(:PredefinedLoadMetricType, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ResourceLabel
          def ResourceLabel(value)
            dsl_attribute(:ResourceLabel, value)
          end
        end

        # Property Definition TagFilter
        class TagFilter < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Values
          def Values(values)
            dsl_list_attribute(:Values, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Values
          def Value(value, fn_if: nil)
            dsl_push_attribute(:Values, value, fn_if: fn_if)
          end

          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end
        end

        # Property Definition PredefinedScalingMetricSpecification
        class PredefinedScalingMetricSpecification < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ResourceLabel
          def ResourceLabel(value)
            dsl_attribute(:ResourceLabel, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for PredefinedScalingMetricType
          def PredefinedScalingMetricType(value)
            dsl_attribute(:PredefinedScalingMetricType, value)
          end
        end

        # Property Definition CustomizedScalingMetricSpecification
        class CustomizedScalingMetricSpecification < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for MetricName
          def MetricName(value)
            dsl_attribute(:MetricName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Statistic
          def Statistic(value)
            dsl_attribute(:Statistic, value)
          end

          # @param [Array<MetricDimension>|JSONable>] values
          #   The List of values to use for Dimensions
          def Dimensions(values)
            dsl_list_attribute(:Dimensions, values)
          end

          #  @param [MetricDimension|JSONable] value  Append value to the List
          #    The List of values to use for Dimensions
          # @@overload Dimension(&block)
          # Append value to the List from block via instance eval of a new MetricDimension
          def Dimension(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Dimensions, value, fn_if: fn_if, attr_class: MetricDimension, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for Unit
          def Unit(value)
            dsl_attribute(:Unit, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Namespace
          def Namespace(value)
            dsl_attribute(:Namespace, value)
          end
        end

        # Property Definition MetricDimension
        class MetricDimension < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for ScalingPlanName
        def ScalingPlanName(value)
          dsl_attribute(:ScalingPlanName, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for ScalingPlanVersion
        def ScalingPlanVersion(value)
          dsl_attribute(:ScalingPlanVersion, value)
        end

        #   @param [ApplicationSource|JSONable] value
        #     The value to use for ApplicationSource
        # @@overload ApplicationSource(&block)
        #   Set :ApplicationSource from block via instance eval of a new ApplicationSource
        def ApplicationSource(value = nil, **value_hash, &block)
          dsl_attribute(:ApplicationSource, value, attr_class: ApplicationSource, **value_hash, &block)
        end

        # @param [Array<ScalingInstruction>|JSONable>] values
        #   The List of values to use for ScalingInstructions
        def ScalingInstructions(values)
          dsl_list_attribute(:ScalingInstructions, values)
        end

        #  @param [ScalingInstruction|JSONable] value  Append value to the List
        #    The List of values to use for ScalingInstructions
        # @@overload ScalingInstruction(&block)
        # Append value to the List from block via instance eval of a new ScalingInstruction
        def ScalingInstruction(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:ScalingInstructions, value, fn_if: fn_if, attr_class: ScalingInstruction, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::AutoScalingPlans::ScalingPlan]
    def AWS_AutoScalingPlans_ScalingPlan(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::AutoScalingPlans::ScalingPlan, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
