# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module EC2
      # Resource Type definition for AWS::EC2::NetworkAclEntry
      class NetworkAclEntry < ResourceType
        # Property Definition PortRange
        class PortRange < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for From
          def From(value)
            dsl_attribute(:From, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for To
          def To(value)
            dsl_attribute(:To, value)
          end
        end

        # Property Definition Icmp
        class Icmp < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for Code
          def Code(value)
            dsl_attribute(:Code, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for Type
          def Type(value)
            dsl_attribute(:Type, value)
          end
        end

        #   @param [PortRange|JSONable] value
        #     The value to use for PortRange
        # @@overload PortRange(&block)
        #   Set :PortRange from block via instance eval of a new PortRange
        def PortRange(value = nil, **value_hash, &block)
          dsl_attribute(:PortRange, value, attr_class: PortRange, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for NetworkAclId
        def NetworkAclId(value)
          dsl_attribute(:NetworkAclId, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for RuleAction
        def RuleAction(value)
          dsl_attribute(:RuleAction, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for CidrBlock
        def CidrBlock(value)
          dsl_attribute(:CidrBlock, value)
        end

        #   @param [Boolean|JSONable] value
        #     The value to use for Egress
        def Egress(value)
          dsl_attribute(:Egress, value)
        end

        #   @param [Integer|JSONable] value
        #     The value to use for RuleNumber
        def RuleNumber(value)
          dsl_attribute(:RuleNumber, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Ipv6CidrBlock
        def Ipv6CidrBlock(value)
          dsl_attribute(:Ipv6CidrBlock, value)
        end

        #   @param [Integer|JSONable] value
        #     The value to use for Protocol
        def Protocol(value)
          dsl_attribute(:Protocol, value)
        end

        #   @param [Icmp|JSONable] value
        #     The value to use for Icmp
        # @@overload Icmp(&block)
        #   Set :Icmp from block via instance eval of a new Icmp
        def Icmp(value = nil, **value_hash, &block)
          dsl_attribute(:Icmp, value, attr_class: Icmp, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::EC2::NetworkAclEntry]
    def AWS_EC2_NetworkAclEntry(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::EC2::NetworkAclEntry, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
