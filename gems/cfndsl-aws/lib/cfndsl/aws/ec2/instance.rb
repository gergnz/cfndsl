# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module EC2
      # Resource Type definition for AWS::EC2::Instance
      class Instance < ResourceType
        # Property Definition LaunchTemplateSpecification
        class LaunchTemplateSpecification < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for LaunchTemplateName
          def LaunchTemplateName(value)
            dsl_attribute(:LaunchTemplateName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for LaunchTemplateId
          def LaunchTemplateId(value)
            dsl_attribute(:LaunchTemplateId, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Version
          def Version(value)
            dsl_attribute(:Version, value)
          end
        end

        # Property Definition HibernationOptions
        class HibernationOptions < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for Configured
          def Configured(value)
            dsl_attribute(:Configured, value)
          end
        end

        # Property Definition LicenseSpecification
        class LicenseSpecification < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for LicenseConfigurationArn
          def LicenseConfigurationArn(value)
            dsl_attribute(:LicenseConfigurationArn, value)
          end
        end

        # Property Definition CpuOptions
        class CpuOptions < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for ThreadsPerCore
          def ThreadsPerCore(value)
            dsl_attribute(:ThreadsPerCore, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for CoreCount
          def CoreCount(value)
            dsl_attribute(:CoreCount, value)
          end
        end

        # Property Definition NoDevice
        class NoDevice < PropertyType
        end

        # Property Definition InstanceIpv6Address
        class InstanceIpv6Address < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Ipv6Address
          def Ipv6Address(value)
            dsl_attribute(:Ipv6Address, value)
          end
        end

        # Property Definition NetworkInterface
        class NetworkInterface < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Description
          def Description(value)
            dsl_attribute(:Description, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for PrivateIpAddress
          def PrivateIpAddress(value)
            dsl_attribute(:PrivateIpAddress, value)
          end

          #  @param [PrivateIpAddressSpecification|JSONable] value  Append value to the List
          #    The List of values to use for PrivateIpAddresses
          # @@overload PrivateIpAddresses(&block)
          # Append value to the List from block via instance eval of a new PrivateIpAddressSpecification
          def PrivateIpAddresses(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:PrivateIpAddresses, value, fn_if: fn_if, attr_class: PrivateIpAddressSpecification, **value_hash, &block)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for SecondaryPrivateIpAddressCount
          def SecondaryPrivateIpAddressCount(value)
            dsl_attribute(:SecondaryPrivateIpAddressCount, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for DeviceIndex
          def DeviceIndex(value)
            dsl_attribute(:DeviceIndex, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for GroupSet
          def GroupSets(values)
            dsl_list_attribute(:GroupSet, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for GroupSet
          def GroupSet(value, fn_if: nil)
            dsl_push_attribute(:GroupSet, value, fn_if: fn_if)
          end

          # @param [Array<InstanceIpv6Address>|JSONable>] values
          #   The List of values to use for Ipv6Addresses
          def Ipv6Addresses(values)
            dsl_list_attribute(:Ipv6Addresses, values)
          end

          #  @param [InstanceIpv6Address|JSONable] value  Append value to the List
          #    The List of values to use for Ipv6Addresses
          # @@overload Ipv6Address(&block)
          # Append value to the List from block via instance eval of a new InstanceIpv6Address
          def Ipv6Address(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Ipv6Addresses, value, fn_if: fn_if, attr_class: InstanceIpv6Address, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for SubnetId
          def SubnetId(value)
            dsl_attribute(:SubnetId, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for AssociatePublicIpAddress
          def AssociatePublicIpAddress(value)
            dsl_attribute(:AssociatePublicIpAddress, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for NetworkInterfaceId
          def NetworkInterfaceId(value)
            dsl_attribute(:NetworkInterfaceId, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for Ipv6AddressCount
          def Ipv6AddressCount(value)
            dsl_attribute(:Ipv6AddressCount, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for DeleteOnTermination
          def DeleteOnTermination(value)
            dsl_attribute(:DeleteOnTermination, value)
          end
        end

        # Property Definition ElasticGpuSpecification
        class ElasticGpuSpecification < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Type
          def Type(value)
            dsl_attribute(:Type, value)
          end
        end

        # Property Definition ElasticInferenceAccelerator
        class ElasticInferenceAccelerator < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Type
          def Type(value)
            dsl_attribute(:Type, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for Count
          def Count(value)
            dsl_attribute(:Count, value)
          end
        end

        # Property Definition SsmAssociation
        class SsmAssociation < PropertyType
          # @param [Array<AssociationParameter>|JSONable>] values
          #   The List of values to use for AssociationParameters
          def AssociationParameters(values)
            dsl_list_attribute(:AssociationParameters, values)
          end

          #  @param [AssociationParameter|JSONable] value  Append value to the List
          #    The List of values to use for AssociationParameters
          # @@overload AssociationParameter(&block)
          # Append value to the List from block via instance eval of a new AssociationParameter
          def AssociationParameter(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:AssociationParameters, value, fn_if: fn_if, attr_class: AssociationParameter, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for DocumentName
          def DocumentName(value)
            dsl_attribute(:DocumentName, value)
          end
        end

        # Property Definition AssociationParameter
        class AssociationParameter < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Value
          def Values(values)
            dsl_list_attribute(:Value, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Value
          def Value(value, fn_if: nil)
            dsl_push_attribute(:Value, value, fn_if: fn_if)
          end

          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end
        end

        # Property Definition PrivateIpAddressSpecification
        class PrivateIpAddressSpecification < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for PrivateIpAddress
          def PrivateIpAddress(value)
            dsl_attribute(:PrivateIpAddress, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for Primary
          def Primary(value)
            dsl_attribute(:Primary, value)
          end
        end

        # Property Definition Volume
        class Volume < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for VolumeId
          def VolumeId(value)
            dsl_attribute(:VolumeId, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Device
          def Device(value)
            dsl_attribute(:Device, value)
          end
        end

        # Property Definition Ebs
        class Ebs < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for SnapshotId
          def SnapshotId(value)
            dsl_attribute(:SnapshotId, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for VolumeType
          def VolumeType(value)
            dsl_attribute(:VolumeType, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for KmsKeyId
          def KmsKeyId(value)
            dsl_attribute(:KmsKeyId, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for Encrypted
          def Encrypted(value)
            dsl_attribute(:Encrypted, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for Iops
          def Iops(value)
            dsl_attribute(:Iops, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for VolumeSize
          def VolumeSize(value)
            dsl_attribute(:VolumeSize, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for DeleteOnTermination
          def DeleteOnTermination(value)
            dsl_attribute(:DeleteOnTermination, value)
          end
        end

        # Property Definition BlockDeviceMapping
        class BlockDeviceMapping < PropertyType
          #   @param [NoDevice|JSONable] value
          #     The value to use for NoDevice
          # @@overload NoDevice(&block)
          #   Set :NoDevice from block via instance eval of a new NoDevice
          def NoDevice(value = nil, **value_hash, &block)
            dsl_attribute(:NoDevice, value, attr_class: NoDevice, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for VirtualName
          def VirtualName(value)
            dsl_attribute(:VirtualName, value)
          end

          #   @param [Ebs|JSONable] value
          #     The value to use for Ebs
          # @@overload Ebs(&block)
          #   Set :Ebs from block via instance eval of a new Ebs
          def Ebs(value = nil, **value_hash, &block)
            dsl_attribute(:Ebs, value, attr_class: Ebs, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for DeviceName
          def DeviceName(value)
            dsl_attribute(:DeviceName, value)
          end
        end

        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end
        end

        # Property Definition CreditSpecification
        class CreditSpecification < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for CPUCredits
          def CPUCredits(value)
            dsl_attribute(:CPUCredits, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for Tenancy
        def Tenancy(value)
          dsl_attribute(:Tenancy, value)
        end

        # @param [Array<String>|JSONable>] values
        #   The List of values to use for SecurityGroups
        def SecurityGroups(values)
          dsl_list_attribute(:SecurityGroups, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for SecurityGroups
        def SecurityGroup(value, fn_if: nil)
          dsl_push_attribute(:SecurityGroups, value, fn_if: fn_if)
        end

        #   @param [String|JSONable] value
        #     The value to use for PrivateDnsName
        def PrivateDnsName(value)
          dsl_attribute(:PrivateDnsName, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for PrivateIpAddress
        def PrivateIpAddress(value)
          dsl_attribute(:PrivateIpAddress, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for UserData
        def UserData(value)
          dsl_attribute(:UserData, value)
        end

        # @param [Array<BlockDeviceMapping>|JSONable>] values
        #   The List of values to use for BlockDeviceMappings
        def BlockDeviceMappings(values)
          dsl_list_attribute(:BlockDeviceMappings, values)
        end

        #  @param [BlockDeviceMapping|JSONable] value  Append value to the List
        #    The List of values to use for BlockDeviceMappings
        # @@overload BlockDeviceMapping(&block)
        # Append value to the List from block via instance eval of a new BlockDeviceMapping
        def BlockDeviceMapping(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:BlockDeviceMappings, value, fn_if: fn_if, attr_class: BlockDeviceMapping, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for IamInstanceProfile
        def IamInstanceProfile(value)
          dsl_attribute(:IamInstanceProfile, value)
        end

        # @param [Array<InstanceIpv6Address>|JSONable>] values
        #   The List of values to use for Ipv6Addresses
        def Ipv6Addresses(values)
          dsl_list_attribute(:Ipv6Addresses, values)
        end

        #  @param [InstanceIpv6Address|JSONable] value  Append value to the List
        #    The List of values to use for Ipv6Addresses
        # @@overload Ipv6Address(&block)
        # Append value to the List from block via instance eval of a new InstanceIpv6Address
        def Ipv6Address(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Ipv6Addresses, value, fn_if: fn_if, attr_class: InstanceIpv6Address, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for KernelId
        def KernelId(value)
          dsl_attribute(:KernelId, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for SubnetId
        def SubnetId(value)
          dsl_attribute(:SubnetId, value)
        end

        #   @param [Boolean|JSONable] value
        #     The value to use for EbsOptimized
        def EbsOptimized(value)
          dsl_attribute(:EbsOptimized, value)
        end

        # @param [Array<ElasticGpuSpecification>|JSONable>] values
        #   The List of values to use for ElasticGpuSpecifications
        def ElasticGpuSpecifications(values)
          dsl_list_attribute(:ElasticGpuSpecifications, values)
        end

        #  @param [ElasticGpuSpecification|JSONable] value  Append value to the List
        #    The List of values to use for ElasticGpuSpecifications
        # @@overload ElasticGpuSpecification(&block)
        # Append value to the List from block via instance eval of a new ElasticGpuSpecification
        def ElasticGpuSpecification(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:ElasticGpuSpecifications, value, fn_if: fn_if, attr_class: ElasticGpuSpecification, **value_hash, &block)
        end

        # @param [Array<ElasticInferenceAccelerator>|JSONable>] values
        #   The List of values to use for ElasticInferenceAccelerators
        def ElasticInferenceAccelerators(values)
          dsl_list_attribute(:ElasticInferenceAccelerators, values)
        end

        #  @param [ElasticInferenceAccelerator|JSONable] value  Append value to the List
        #    The List of values to use for ElasticInferenceAccelerators
        # @@overload ElasticInferenceAccelerator(&block)
        # Append value to the List from block via instance eval of a new ElasticInferenceAccelerator
        def ElasticInferenceAccelerator(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:ElasticInferenceAccelerators, value, fn_if: fn_if, attr_class: ElasticInferenceAccelerator, **value_hash, &block)
        end

        # @param [Array<Volume>|JSONable>] values
        #   The List of values to use for Volumes
        def Volumes(values)
          dsl_list_attribute(:Volumes, values)
        end

        #  @param [Volume|JSONable] value  Append value to the List
        #    The List of values to use for Volumes
        # @@overload Volume(&block)
        # Append value to the List from block via instance eval of a new Volume
        def Volume(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Volumes, value, fn_if: fn_if, attr_class: Volume, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for PrivateIp
        def PrivateIp(value)
          dsl_attribute(:PrivateIp, value)
        end

        #   @param [Integer|JSONable] value
        #     The value to use for Ipv6AddressCount
        def Ipv6AddressCount(value)
          dsl_attribute(:Ipv6AddressCount, value)
        end

        #   @param [LaunchTemplateSpecification|JSONable] value
        #     The value to use for LaunchTemplate
        # @@overload LaunchTemplate(&block)
        #   Set :LaunchTemplate from block via instance eval of a new LaunchTemplateSpecification
        def LaunchTemplate(value = nil, **value_hash, &block)
          dsl_attribute(:LaunchTemplate, value, attr_class: LaunchTemplateSpecification, **value_hash, &block)
        end

        # @param [Array<NetworkInterface>|JSONable>] values
        #   The List of values to use for NetworkInterfaces
        def NetworkInterfaces(values)
          dsl_list_attribute(:NetworkInterfaces, values)
        end

        #  @param [NetworkInterface|JSONable] value  Append value to the List
        #    The List of values to use for NetworkInterfaces
        # @@overload NetworkInterface(&block)
        # Append value to the List from block via instance eval of a new NetworkInterface
        def NetworkInterface(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:NetworkInterfaces, value, fn_if: fn_if, attr_class: NetworkInterface, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for ImageId
        def ImageId(value)
          dsl_attribute(:ImageId, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for InstanceType
        def InstanceType(value)
          dsl_attribute(:InstanceType, value)
        end

        #   @param [Boolean|JSONable] value
        #     The value to use for Monitoring
        def Monitoring(value)
          dsl_attribute(:Monitoring, value)
        end

        # @param [Array<Tag>|JSONable>] values
        #   The List of values to use for Tags
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    The List of values to use for Tags
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for AdditionalInfo
        def AdditionalInfo(value)
          dsl_attribute(:AdditionalInfo, value)
        end

        #   @param [HibernationOptions|JSONable] value
        #     The value to use for HibernationOptions
        # @@overload HibernationOptions(&block)
        #   Set :HibernationOptions from block via instance eval of a new HibernationOptions
        def HibernationOptions(value = nil, **value_hash, &block)
          dsl_attribute(:HibernationOptions, value, attr_class: HibernationOptions, **value_hash, &block)
        end

        # @param [Array<LicenseSpecification>|JSONable>] values
        #   The List of values to use for LicenseSpecifications
        def LicenseSpecifications(values)
          dsl_list_attribute(:LicenseSpecifications, values)
        end

        #  @param [LicenseSpecification|JSONable] value  Append value to the List
        #    The List of values to use for LicenseSpecifications
        # @@overload LicenseSpecification(&block)
        # Append value to the List from block via instance eval of a new LicenseSpecification
        def LicenseSpecification(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:LicenseSpecifications, value, fn_if: fn_if, attr_class: LicenseSpecification, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for PublicIp
        def PublicIp(value)
          dsl_attribute(:PublicIp, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for InstanceInitiatedShutdownBehavior
        def InstanceInitiatedShutdownBehavior(value)
          dsl_attribute(:InstanceInitiatedShutdownBehavior, value)
        end

        #   @param [CpuOptions|JSONable] value
        #     The value to use for CpuOptions
        # @@overload CpuOptions(&block)
        #   Set :CpuOptions from block via instance eval of a new CpuOptions
        def CpuOptions(value = nil, **value_hash, &block)
          dsl_attribute(:CpuOptions, value, attr_class: CpuOptions, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for AvailabilityZone
        def AvailabilityZone(value)
          dsl_attribute(:AvailabilityZone, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for HostId
        def HostId(value)
          dsl_attribute(:HostId, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for HostResourceGroupArn
        def HostResourceGroupArn(value)
          dsl_attribute(:HostResourceGroupArn, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for PublicDnsName
        def PublicDnsName(value)
          dsl_attribute(:PublicDnsName, value)
        end

        # @param [Array<String>|JSONable>] values
        #   The List of values to use for SecurityGroupIds
        def SecurityGroupIds(values)
          dsl_list_attribute(:SecurityGroupIds, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for SecurityGroupIds
        def SecurityGroupId(value, fn_if: nil)
          dsl_push_attribute(:SecurityGroupIds, value, fn_if: fn_if)
        end

        #   @param [Boolean|JSONable] value
        #     The value to use for DisableApiTermination
        def DisableApiTermination(value)
          dsl_attribute(:DisableApiTermination, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for KeyName
        def KeyName(value)
          dsl_attribute(:KeyName, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for RamdiskId
        def RamdiskId(value)
          dsl_attribute(:RamdiskId, value)
        end

        #   @param [Boolean|JSONable] value
        #     The value to use for SourceDestCheck
        def SourceDestCheck(value)
          dsl_attribute(:SourceDestCheck, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for PlacementGroupName
        def PlacementGroupName(value)
          dsl_attribute(:PlacementGroupName, value)
        end

        # @param [Array<SsmAssociation>|JSONable>] values
        #   The List of values to use for SsmAssociations
        def SsmAssociations(values)
          dsl_list_attribute(:SsmAssociations, values)
        end

        #  @param [SsmAssociation|JSONable] value  Append value to the List
        #    The List of values to use for SsmAssociations
        # @@overload SsmAssociation(&block)
        # Append value to the List from block via instance eval of a new SsmAssociation
        def SsmAssociation(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:SsmAssociations, value, fn_if: fn_if, attr_class: SsmAssociation, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Affinity
        def Affinity(value)
          dsl_attribute(:Affinity, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [CreditSpecification|JSONable] value
        #     The value to use for CreditSpecification
        # @@overload CreditSpecification(&block)
        #   Set :CreditSpecification from block via instance eval of a new CreditSpecification
        def CreditSpecification(value = nil, **value_hash, &block)
          dsl_attribute(:CreditSpecification, value, attr_class: CreditSpecification, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::EC2::Instance]
    def AWS_EC2_Instance(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::EC2::Instance, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
