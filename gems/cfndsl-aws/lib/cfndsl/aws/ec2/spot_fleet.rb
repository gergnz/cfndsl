# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module EC2
      # Resource Type definition for AWS::EC2::SpotFleet
      class SpotFleet < ResourceType
        # Property Definition SpotFleetRequestConfigData
        class SpotFleetRequestConfigData < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for AllocationStrategy
          def AllocationStrategy(value)
            dsl_attribute(:AllocationStrategy, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ExcessCapacityTerminationPolicy
          def ExcessCapacityTerminationPolicy(value)
            dsl_attribute(:ExcessCapacityTerminationPolicy, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for IamFleetRole
          def IamFleetRole(value)
            dsl_attribute(:IamFleetRole, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for InstanceInterruptionBehavior
          def InstanceInterruptionBehavior(value)
            dsl_attribute(:InstanceInterruptionBehavior, value)
          end

          # @param [Array<SpotFleetLaunchSpecification>|JSONable>] values
          #   The List of values to use for LaunchSpecifications
          def LaunchSpecifications(values)
            dsl_list_attribute(:LaunchSpecifications, values)
          end

          #  @param [SpotFleetLaunchSpecification|JSONable] value  Append value to the List
          #    The List of values to use for LaunchSpecifications
          # @@overload LaunchSpecification(&block)
          # Append value to the List from block via instance eval of a new SpotFleetLaunchSpecification
          def LaunchSpecification(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:LaunchSpecifications, value, fn_if: fn_if, attr_class: SpotFleetLaunchSpecification, **value_hash, &block)
          end

          # @param [Array<LaunchTemplateConfig>|JSONable>] values
          #   The List of values to use for LaunchTemplateConfigs
          def LaunchTemplateConfigs(values)
            dsl_list_attribute(:LaunchTemplateConfigs, values)
          end

          #  @param [LaunchTemplateConfig|JSONable] value  Append value to the List
          #    The List of values to use for LaunchTemplateConfigs
          # @@overload LaunchTemplateConfig(&block)
          # Append value to the List from block via instance eval of a new LaunchTemplateConfig
          def LaunchTemplateConfig(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:LaunchTemplateConfigs, value, fn_if: fn_if, attr_class: LaunchTemplateConfig, **value_hash, &block)
          end

          #   @param [LoadBalancersConfig|JSONable] value
          #     The value to use for LoadBalancersConfig
          # @@overload LoadBalancersConfig(&block)
          #   Set :LoadBalancersConfig from block via instance eval of a new LoadBalancersConfig
          def LoadBalancersConfig(value = nil, **value_hash, &block)
            dsl_attribute(:LoadBalancersConfig, value, attr_class: LoadBalancersConfig, **value_hash, &block)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for ReplaceUnhealthyInstances
          def ReplaceUnhealthyInstances(value)
            dsl_attribute(:ReplaceUnhealthyInstances, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for SpotPrice
          def SpotPrice(value)
            dsl_attribute(:SpotPrice, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for TargetCapacity
          def TargetCapacity(value)
            dsl_attribute(:TargetCapacity, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for TerminateInstancesWithExpiration
          def TerminateInstancesWithExpiration(value)
            dsl_attribute(:TerminateInstancesWithExpiration, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Type
          def Type(value)
            dsl_attribute(:Type, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ValidFrom
          def ValidFrom(value)
            dsl_attribute(:ValidFrom, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ValidUntil
          def ValidUntil(value)
            dsl_attribute(:ValidUntil, value)
          end
        end

        # Property Definition SpotFleetLaunchSpecification
        class SpotFleetLaunchSpecification < PropertyType
          # @param [Array<BlockDeviceMapping>|JSONable>] values
          #   The List of values to use for BlockDeviceMappings
          def BlockDeviceMappings(values)
            dsl_list_attribute(:BlockDeviceMappings, values)
          end

          #  @param [BlockDeviceMapping|JSONable] value  Append value to the List
          #    The List of values to use for BlockDeviceMappings
          # @@overload BlockDeviceMapping(&block)
          # Append value to the List from block via instance eval of a new BlockDeviceMapping
          def BlockDeviceMapping(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:BlockDeviceMappings, value, fn_if: fn_if, attr_class: BlockDeviceMapping, **value_hash, &block)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for EbsOptimized
          def EbsOptimized(value)
            dsl_attribute(:EbsOptimized, value)
          end

          #   @param [IamInstanceProfileSpecification|JSONable] value
          #     The value to use for IamInstanceProfile
          # @@overload IamInstanceProfile(&block)
          #   Set :IamInstanceProfile from block via instance eval of a new IamInstanceProfileSpecification
          def IamInstanceProfile(value = nil, **value_hash, &block)
            dsl_attribute(:IamInstanceProfile, value, attr_class: IamInstanceProfileSpecification, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for ImageId
          def ImageId(value)
            dsl_attribute(:ImageId, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for InstanceType
          def InstanceType(value)
            dsl_attribute(:InstanceType, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for KernelId
          def KernelId(value)
            dsl_attribute(:KernelId, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for KeyName
          def KeyName(value)
            dsl_attribute(:KeyName, value)
          end

          #   @param [SpotFleetMonitoring|JSONable] value
          #     The value to use for Monitoring
          # @@overload Monitoring(&block)
          #   Set :Monitoring from block via instance eval of a new SpotFleetMonitoring
          def Monitoring(value = nil, **value_hash, &block)
            dsl_attribute(:Monitoring, value, attr_class: SpotFleetMonitoring, **value_hash, &block)
          end

          # @param [Array<InstanceNetworkInterfaceSpecification>|JSONable>] values
          #   The List of values to use for NetworkInterfaces
          def NetworkInterfaces(values)
            dsl_list_attribute(:NetworkInterfaces, values)
          end

          #  @param [InstanceNetworkInterfaceSpecification|JSONable] value  Append value to the List
          #    The List of values to use for NetworkInterfaces
          # @@overload NetworkInterface(&block)
          # Append value to the List from block via instance eval of a new InstanceNetworkInterfaceSpecification
          def NetworkInterface(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:NetworkInterfaces, value, fn_if: fn_if, attr_class: InstanceNetworkInterfaceSpecification, **value_hash, &block)
          end

          #   @param [SpotPlacement|JSONable] value
          #     The value to use for Placement
          # @@overload Placement(&block)
          #   Set :Placement from block via instance eval of a new SpotPlacement
          def Placement(value = nil, **value_hash, &block)
            dsl_attribute(:Placement, value, attr_class: SpotPlacement, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for RamdiskId
          def RamdiskId(value)
            dsl_attribute(:RamdiskId, value)
          end

          # @param [Array<GroupIdentifier>|JSONable>] values
          #   The List of values to use for SecurityGroups
          def SecurityGroups(values)
            dsl_list_attribute(:SecurityGroups, values)
          end

          #  @param [GroupIdentifier|JSONable] value  Append value to the List
          #    The List of values to use for SecurityGroups
          # @@overload SecurityGroup(&block)
          # Append value to the List from block via instance eval of a new GroupIdentifier
          def SecurityGroup(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:SecurityGroups, value, fn_if: fn_if, attr_class: GroupIdentifier, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for SpotPrice
          def SpotPrice(value)
            dsl_attribute(:SpotPrice, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for SubnetId
          def SubnetId(value)
            dsl_attribute(:SubnetId, value)
          end

          # @param [Array<SpotFleetTagSpecification>|JSONable>] values
          #   The List of values to use for TagSpecifications
          def TagSpecifications(values)
            dsl_list_attribute(:TagSpecifications, values)
          end

          #  @param [SpotFleetTagSpecification|JSONable] value  Append value to the List
          #    The List of values to use for TagSpecifications
          # @@overload TagSpecification(&block)
          # Append value to the List from block via instance eval of a new SpotFleetTagSpecification
          def TagSpecification(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:TagSpecifications, value, fn_if: fn_if, attr_class: SpotFleetTagSpecification, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for UserData
          def UserData(value)
            dsl_attribute(:UserData, value)
          end

          #   @param [Number|JSONable] value
          #     The value to use for WeightedCapacity
          def WeightedCapacity(value)
            dsl_attribute(:WeightedCapacity, value)
          end
        end

        # Property Definition LoadBalancersConfig
        class LoadBalancersConfig < PropertyType
          #   @param [ClassicLoadBalancersConfig|JSONable] value
          #     The value to use for ClassicLoadBalancersConfig
          # @@overload ClassicLoadBalancersConfig(&block)
          #   Set :ClassicLoadBalancersConfig from block via instance eval of a new ClassicLoadBalancersConfig
          def ClassicLoadBalancersConfig(value = nil, **value_hash, &block)
            dsl_attribute(:ClassicLoadBalancersConfig, value, attr_class: ClassicLoadBalancersConfig, **value_hash, &block)
          end

          #   @param [TargetGroupsConfig|JSONable] value
          #     The value to use for TargetGroupsConfig
          # @@overload TargetGroupsConfig(&block)
          #   Set :TargetGroupsConfig from block via instance eval of a new TargetGroupsConfig
          def TargetGroupsConfig(value = nil, **value_hash, &block)
            dsl_attribute(:TargetGroupsConfig, value, attr_class: TargetGroupsConfig, **value_hash, &block)
          end
        end

        # Property Definition LaunchTemplateConfig
        class LaunchTemplateConfig < PropertyType
          #   @param [FleetLaunchTemplateSpecification|JSONable] value
          #     The value to use for LaunchTemplateSpecification
          # @@overload LaunchTemplateSpecification(&block)
          #   Set :LaunchTemplateSpecification from block via instance eval of a new FleetLaunchTemplateSpecification
          def LaunchTemplateSpecification(value = nil, **value_hash, &block)
            dsl_attribute(:LaunchTemplateSpecification, value, attr_class: FleetLaunchTemplateSpecification, **value_hash, &block)
          end

          # @param [Array<LaunchTemplateOverrides>|JSONable>] values
          #   The List of values to use for Overrides
          def Overrides(values)
            dsl_list_attribute(:Overrides, values)
          end

          #  @param [LaunchTemplateOverrides|JSONable] value  Append value to the List
          #    The List of values to use for Overrides
          # @@overload Override(&block)
          # Append value to the List from block via instance eval of a new LaunchTemplateOverrides
          def Override(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Overrides, value, fn_if: fn_if, attr_class: LaunchTemplateOverrides, **value_hash, &block)
          end
        end

        # Property Definition SpotFleetTagSpecification
        class SpotFleetTagSpecification < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ResourceType
          def ResourceType(value)
            dsl_attribute(:ResourceType, value)
          end

          # @param [Array<Tag>|JSONable>] values
          #   The List of values to use for Tags
          def Tags(values)
            dsl_list_attribute(:Tags, values)
          end

          #  @param [Tag|JSONable] value  Append value to the List
          #    The List of values to use for Tags
          # @@overload Tag(&block)
          # Append value to the List from block via instance eval of a new Tag
          def Tag(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
          end
        end

        # Property Definition FleetLaunchTemplateSpecification
        class FleetLaunchTemplateSpecification < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for LaunchTemplateId
          def LaunchTemplateId(value)
            dsl_attribute(:LaunchTemplateId, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for LaunchTemplateName
          def LaunchTemplateName(value)
            dsl_attribute(:LaunchTemplateName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Version
          def Version(value)
            dsl_attribute(:Version, value)
          end
        end

        # Property Definition GroupIdentifier
        class GroupIdentifier < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for GroupId
          def GroupId(value)
            dsl_attribute(:GroupId, value)
          end
        end

        # Property Definition IamInstanceProfileSpecification
        class IamInstanceProfileSpecification < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Arn
          def Arn(value)
            dsl_attribute(:Arn, value)
          end
        end

        # Property Definition ClassicLoadBalancersConfig
        class ClassicLoadBalancersConfig < PropertyType
          # @param [Array<ClassicLoadBalancer>|JSONable>] values
          #   The List of values to use for ClassicLoadBalancers
          def ClassicLoadBalancers(values)
            dsl_list_attribute(:ClassicLoadBalancers, values)
          end

          #  @param [ClassicLoadBalancer|JSONable] value  Append value to the List
          #    The List of values to use for ClassicLoadBalancers
          # @@overload ClassicLoadBalancer(&block)
          # Append value to the List from block via instance eval of a new ClassicLoadBalancer
          def ClassicLoadBalancer(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:ClassicLoadBalancers, value, fn_if: fn_if, attr_class: ClassicLoadBalancer, **value_hash, &block)
          end
        end

        # Property Definition LaunchTemplateOverrides
        class LaunchTemplateOverrides < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for AvailabilityZone
          def AvailabilityZone(value)
            dsl_attribute(:AvailabilityZone, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for InstanceType
          def InstanceType(value)
            dsl_attribute(:InstanceType, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for SpotPrice
          def SpotPrice(value)
            dsl_attribute(:SpotPrice, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for SubnetId
          def SubnetId(value)
            dsl_attribute(:SubnetId, value)
          end

          #   @param [Number|JSONable] value
          #     The value to use for WeightedCapacity
          def WeightedCapacity(value)
            dsl_attribute(:WeightedCapacity, value)
          end
        end

        # Property Definition SpotFleetMonitoring
        class SpotFleetMonitoring < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for Enabled
          def Enabled(value)
            dsl_attribute(:Enabled, value)
          end
        end

        # Property Definition SpotPlacement
        class SpotPlacement < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for AvailabilityZone
          def AvailabilityZone(value)
            dsl_attribute(:AvailabilityZone, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for GroupName
          def GroupName(value)
            dsl_attribute(:GroupName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Tenancy
          def Tenancy(value)
            dsl_attribute(:Tenancy, value)
          end
        end

        # Property Definition InstanceNetworkInterfaceSpecification
        class InstanceNetworkInterfaceSpecification < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for AssociatePublicIpAddress
          def AssociatePublicIpAddress(value)
            dsl_attribute(:AssociatePublicIpAddress, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for DeleteOnTermination
          def DeleteOnTermination(value)
            dsl_attribute(:DeleteOnTermination, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Description
          def Description(value)
            dsl_attribute(:Description, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for DeviceIndex
          def DeviceIndex(value)
            dsl_attribute(:DeviceIndex, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Groups
          def Groups(values)
            dsl_list_attribute(:Groups, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Groups
          def Group(value, fn_if: nil)
            dsl_push_attribute(:Groups, value, fn_if: fn_if)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for Ipv6AddressCount
          def Ipv6AddressCount(value)
            dsl_attribute(:Ipv6AddressCount, value)
          end

          # @param [Array<InstanceIpv6Address>|JSONable>] values
          #   The List of values to use for Ipv6Addresses
          def Ipv6Addresses(values)
            dsl_list_attribute(:Ipv6Addresses, values)
          end

          #  @param [InstanceIpv6Address|JSONable] value  Append value to the List
          #    The List of values to use for Ipv6Addresses
          # @@overload Ipv6Address(&block)
          # Append value to the List from block via instance eval of a new InstanceIpv6Address
          def Ipv6Address(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Ipv6Addresses, value, fn_if: fn_if, attr_class: InstanceIpv6Address, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for NetworkInterfaceId
          def NetworkInterfaceId(value)
            dsl_attribute(:NetworkInterfaceId, value)
          end

          # @param [Array<PrivateIpAddressSpecification>|JSONable>] values
          #   The List of values to use for PrivateIpAddresses
          def PrivateIpAddresses(values)
            dsl_list_attribute(:PrivateIpAddresses, values)
          end

          #  @param [PrivateIpAddressSpecification|JSONable] value  Append value to the List
          #    The List of values to use for PrivateIpAddresses
          # @@overload PrivateIpAddress(&block)
          # Append value to the List from block via instance eval of a new PrivateIpAddressSpecification
          def PrivateIpAddress(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:PrivateIpAddresses, value, fn_if: fn_if, attr_class: PrivateIpAddressSpecification, **value_hash, &block)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for SecondaryPrivateIpAddressCount
          def SecondaryPrivateIpAddressCount(value)
            dsl_attribute(:SecondaryPrivateIpAddressCount, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for SubnetId
          def SubnetId(value)
            dsl_attribute(:SubnetId, value)
          end
        end

        # Property Definition BlockDeviceMapping
        class BlockDeviceMapping < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for DeviceName
          def DeviceName(value)
            dsl_attribute(:DeviceName, value)
          end

          #   @param [EbsBlockDevice|JSONable] value
          #     The value to use for Ebs
          # @@overload Ebs(&block)
          #   Set :Ebs from block via instance eval of a new EbsBlockDevice
          def Ebs(value = nil, **value_hash, &block)
            dsl_attribute(:Ebs, value, attr_class: EbsBlockDevice, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for NoDevice
          def NoDevice(value)
            dsl_attribute(:NoDevice, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for VirtualName
          def VirtualName(value)
            dsl_attribute(:VirtualName, value)
          end
        end

        # Property Definition TargetGroupsConfig
        class TargetGroupsConfig < PropertyType
          # @param [Array<TargetGroup>|JSONable>] values
          #   The List of values to use for TargetGroups
          def TargetGroups(values)
            dsl_list_attribute(:TargetGroups, values)
          end

          #  @param [TargetGroup|JSONable] value  Append value to the List
          #    The List of values to use for TargetGroups
          # @@overload TargetGroup(&block)
          # Append value to the List from block via instance eval of a new TargetGroup
          def TargetGroup(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:TargetGroups, value, fn_if: fn_if, attr_class: TargetGroup, **value_hash, &block)
          end
        end

        # Property Definition EbsBlockDevice
        class EbsBlockDevice < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for DeleteOnTermination
          def DeleteOnTermination(value)
            dsl_attribute(:DeleteOnTermination, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for Encrypted
          def Encrypted(value)
            dsl_attribute(:Encrypted, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for Iops
          def Iops(value)
            dsl_attribute(:Iops, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for SnapshotId
          def SnapshotId(value)
            dsl_attribute(:SnapshotId, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for VolumeSize
          def VolumeSize(value)
            dsl_attribute(:VolumeSize, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for VolumeType
          def VolumeType(value)
            dsl_attribute(:VolumeType, value)
          end
        end

        # Property Definition TargetGroup
        class TargetGroup < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Arn
          def Arn(value)
            dsl_attribute(:Arn, value)
          end
        end

        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        # Property Definition PrivateIpAddressSpecification
        class PrivateIpAddressSpecification < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for Primary
          def Primary(value)
            dsl_attribute(:Primary, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for PrivateIpAddress
          def PrivateIpAddress(value)
            dsl_attribute(:PrivateIpAddress, value)
          end
        end

        # Property Definition ClassicLoadBalancer
        class ClassicLoadBalancer < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end
        end

        # Property Definition InstanceIpv6Address
        class InstanceIpv6Address < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Ipv6Address
          def Ipv6Address(value)
            dsl_attribute(:Ipv6Address, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [SpotFleetRequestConfigData|JSONable] value
        #     The value to use for SpotFleetRequestConfigData
        # @@overload SpotFleetRequestConfigData(&block)
        #   Set :SpotFleetRequestConfigData from block via instance eval of a new SpotFleetRequestConfigData
        def SpotFleetRequestConfigData(value = nil, **value_hash, &block)
          dsl_attribute(:SpotFleetRequestConfigData, value, attr_class: SpotFleetRequestConfigData, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::EC2::SpotFleet]
    def AWS_EC2_SpotFleet(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::EC2::SpotFleet, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
