# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module EC2
      # Resource Type definition for AWS::EC2::NetworkInterface
      class NetworkInterface < ResourceType
        # Property Definition InstanceIpv6Address
        class InstanceIpv6Address < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Ipv6Address
          def Ipv6Address(value)
            dsl_attribute(:Ipv6Address, value)
          end
        end

        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        # Property Definition PrivateIpAddressSpecification
        class PrivateIpAddressSpecification < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for Primary
          def Primary(value)
            dsl_attribute(:Primary, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for PrivateIpAddress
          def PrivateIpAddress(value)
            dsl_attribute(:PrivateIpAddress, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for PrimaryPrivateIpAddress
        def PrimaryPrivateIpAddress(value)
          dsl_attribute(:PrimaryPrivateIpAddress, value)
        end

        # @param [Array<String>|JSONable>] values
        #   The List of values to use for SecondaryPrivateIpAddresses
        def SecondaryPrivateIpAddresses(values)
          dsl_list_attribute(:SecondaryPrivateIpAddresses, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for SecondaryPrivateIpAddresses
        def SecondaryPrivateIpAddress(value, fn_if: nil)
          dsl_push_attribute(:SecondaryPrivateIpAddresses, value, fn_if: fn_if)
        end

        #   @param [String|JSONable] value
        #     The value to use for Description
        def Description(value)
          dsl_attribute(:Description, value)
        end

        # @param [Array<String>|JSONable>] values
        #   The List of values to use for GroupSet
        def GroupSets(values)
          dsl_list_attribute(:GroupSet, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for GroupSet
        def GroupSet(value, fn_if: nil)
          dsl_push_attribute(:GroupSet, value, fn_if: fn_if)
        end

        #   @param [String|JSONable] value
        #     The value to use for InterfaceType
        def InterfaceType(value)
          dsl_attribute(:InterfaceType, value)
        end

        #   @param [Integer|JSONable] value
        #     The value to use for Ipv6AddressCount
        def Ipv6AddressCount(value)
          dsl_attribute(:Ipv6AddressCount, value)
        end

        #   @param [InstanceIpv6Address|JSONable] value
        #     The value to use for Ipv6Addresses
        # @@overload Ipv6Addresses(&block)
        #   Set :Ipv6Addresses from block via instance eval of a new InstanceIpv6Address
        def Ipv6Addresses(value = nil, **value_hash, &block)
          dsl_attribute(:Ipv6Addresses, value, attr_class: InstanceIpv6Address, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for PrivateIpAddress
        def PrivateIpAddress(value)
          dsl_attribute(:PrivateIpAddress, value)
        end

        #  @param [PrivateIpAddressSpecification|JSONable] value  Append value to the List
        #    The List of values to use for PrivateIpAddresses
        # @@overload PrivateIpAddresses(&block)
        # Append value to the List from block via instance eval of a new PrivateIpAddressSpecification
        def PrivateIpAddresses(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:PrivateIpAddresses, value, fn_if: fn_if, attr_class: PrivateIpAddressSpecification, **value_hash, &block)
        end

        #   @param [Integer|JSONable] value
        #     The value to use for SecondaryPrivateIpAddressCount
        def SecondaryPrivateIpAddressCount(value)
          dsl_attribute(:SecondaryPrivateIpAddressCount, value)
        end

        #   @param [Boolean|JSONable] value
        #     The value to use for SourceDestCheck
        def SourceDestCheck(value)
          dsl_attribute(:SourceDestCheck, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for SubnetId
        def SubnetId(value)
          dsl_attribute(:SubnetId, value)
        end

        # @param [Array<Tag>|JSONable>] values
        #   The List of values to use for Tags
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    The List of values to use for Tags
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::EC2::NetworkInterface]
    def AWS_EC2_NetworkInterface(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::EC2::NetworkInterface, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
