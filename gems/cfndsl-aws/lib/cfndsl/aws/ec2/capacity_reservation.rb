# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module EC2
      # Resource Type definition for AWS::EC2::CapacityReservation
      class CapacityReservation < ResourceType
        # Property Definition TagSpecification
        class TagSpecification < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ResourceType
          def ResourceType(value)
            dsl_attribute(:ResourceType, value)
          end

          # @param [Array<Tag>|JSONable>] values
          #   The List of values to use for Tags
          def Tags(values)
            dsl_list_attribute(:Tags, values)
          end

          #  @param [Tag|JSONable] value  Append value to the List
          #    The List of values to use for Tags
          # @@overload Tag(&block)
          # Append value to the List from block via instance eval of a new Tag
          def Tag(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
          end
        end

        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Tenancy
        def Tenancy(value)
          dsl_attribute(:Tenancy, value)
        end

        #   @param [Integer|JSONable] value
        #     The value to use for AvailableInstanceCount
        def AvailableInstanceCount(value)
          dsl_attribute(:AvailableInstanceCount, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for AvailabilityZone
        def AvailabilityZone(value)
          dsl_attribute(:AvailabilityZone, value)
        end

        #   @param [Integer|JSONable] value
        #     The value to use for TotalInstanceCount
        def TotalInstanceCount(value)
          dsl_attribute(:TotalInstanceCount, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for InstanceType
        def InstanceType(value)
          dsl_attribute(:InstanceType, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for EndDateType
        def EndDateType(value)
          dsl_attribute(:EndDateType, value)
        end

        #   @param [Integer|JSONable] value
        #     The value to use for InstanceCount
        def InstanceCount(value)
          dsl_attribute(:InstanceCount, value)
        end

        # @param [Array<TagSpecification>|JSONable>] values
        #   The List of values to use for TagSpecifications
        def TagSpecifications(values)
          dsl_list_attribute(:TagSpecifications, values)
        end

        #  @param [TagSpecification|JSONable] value  Append value to the List
        #    The List of values to use for TagSpecifications
        # @@overload TagSpecification(&block)
        # Append value to the List from block via instance eval of a new TagSpecification
        def TagSpecification(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:TagSpecifications, value, fn_if: fn_if, attr_class: TagSpecification, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for InstancePlatform
        def InstancePlatform(value)
          dsl_attribute(:InstancePlatform, value)
        end

        #   @param [Boolean|JSONable] value
        #     The value to use for EphemeralStorage
        def EphemeralStorage(value)
          dsl_attribute(:EphemeralStorage, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for InstanceMatchCriteria
        def InstanceMatchCriteria(value)
          dsl_attribute(:InstanceMatchCriteria, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for EndDate
        def EndDate(value)
          dsl_attribute(:EndDate, value)
        end

        #   @param [Boolean|JSONable] value
        #     The value to use for EbsOptimized
        def EbsOptimized(value)
          dsl_attribute(:EbsOptimized, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::EC2::CapacityReservation]
    def AWS_EC2_CapacityReservation(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::EC2::CapacityReservation, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
