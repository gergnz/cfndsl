# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module EC2
      # Resource Type definition for AWS::EC2::LaunchTemplate
      class LaunchTemplate < ResourceType
        # Property Definition HibernationOptions
        class HibernationOptions < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for Configured
          def Configured(value)
            dsl_attribute(:Configured, value)
          end
        end

        # Property Definition LaunchTemplateData
        class LaunchTemplateData < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for SecurityGroups
          def SecurityGroups(values)
            dsl_list_attribute(:SecurityGroups, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for SecurityGroups
          def SecurityGroup(value, fn_if: nil)
            dsl_push_attribute(:SecurityGroups, value, fn_if: fn_if)
          end

          # @param [Array<TagSpecification>|JSONable>] values
          #   The List of values to use for TagSpecifications
          def TagSpecifications(values)
            dsl_list_attribute(:TagSpecifications, values)
          end

          #  @param [TagSpecification|JSONable] value  Append value to the List
          #    The List of values to use for TagSpecifications
          # @@overload TagSpecification(&block)
          # Append value to the List from block via instance eval of a new TagSpecification
          def TagSpecification(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:TagSpecifications, value, fn_if: fn_if, attr_class: TagSpecification, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for UserData
          def UserData(value)
            dsl_attribute(:UserData, value)
          end

          # @param [Array<BlockDeviceMapping>|JSONable>] values
          #   The List of values to use for BlockDeviceMappings
          def BlockDeviceMappings(values)
            dsl_list_attribute(:BlockDeviceMappings, values)
          end

          #  @param [BlockDeviceMapping|JSONable] value  Append value to the List
          #    The List of values to use for BlockDeviceMappings
          # @@overload BlockDeviceMapping(&block)
          # Append value to the List from block via instance eval of a new BlockDeviceMapping
          def BlockDeviceMapping(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:BlockDeviceMappings, value, fn_if: fn_if, attr_class: BlockDeviceMapping, **value_hash, &block)
          end

          #   @param [IamInstanceProfile|JSONable] value
          #     The value to use for IamInstanceProfile
          # @@overload IamInstanceProfile(&block)
          #   Set :IamInstanceProfile from block via instance eval of a new IamInstanceProfile
          def IamInstanceProfile(value = nil, **value_hash, &block)
            dsl_attribute(:IamInstanceProfile, value, attr_class: IamInstanceProfile, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for KernelId
          def KernelId(value)
            dsl_attribute(:KernelId, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for EbsOptimized
          def EbsOptimized(value)
            dsl_attribute(:EbsOptimized, value)
          end

          # @param [Array<ElasticGpuSpecification>|JSONable>] values
          #   The List of values to use for ElasticGpuSpecifications
          def ElasticGpuSpecifications(values)
            dsl_list_attribute(:ElasticGpuSpecifications, values)
          end

          #  @param [ElasticGpuSpecification|JSONable] value  Append value to the List
          #    The List of values to use for ElasticGpuSpecifications
          # @@overload ElasticGpuSpecification(&block)
          # Append value to the List from block via instance eval of a new ElasticGpuSpecification
          def ElasticGpuSpecification(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:ElasticGpuSpecifications, value, fn_if: fn_if, attr_class: ElasticGpuSpecification, **value_hash, &block)
          end

          # @param [Array<LaunchTemplateElasticInferenceAccelerator>|JSONable>] values
          #   The List of values to use for ElasticInferenceAccelerators
          def ElasticInferenceAccelerators(values)
            dsl_list_attribute(:ElasticInferenceAccelerators, values)
          end

          #  @param [LaunchTemplateElasticInferenceAccelerator|JSONable] value  Append value to the List
          #    The List of values to use for ElasticInferenceAccelerators
          # @@overload ElasticInferenceAccelerator(&block)
          # Append value to the List from block via instance eval of a new LaunchTemplateElasticInferenceAccelerator
          def ElasticInferenceAccelerator(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:ElasticInferenceAccelerators, value, fn_if: fn_if, attr_class: LaunchTemplateElasticInferenceAccelerator, **value_hash, &block)
          end

          #   @param [Placement|JSONable] value
          #     The value to use for Placement
          # @@overload Placement(&block)
          #   Set :Placement from block via instance eval of a new Placement
          def Placement(value = nil, **value_hash, &block)
            dsl_attribute(:Placement, value, attr_class: Placement, **value_hash, &block)
          end

          # @param [Array<NetworkInterface>|JSONable>] values
          #   The List of values to use for NetworkInterfaces
          def NetworkInterfaces(values)
            dsl_list_attribute(:NetworkInterfaces, values)
          end

          #  @param [NetworkInterface|JSONable] value  Append value to the List
          #    The List of values to use for NetworkInterfaces
          # @@overload NetworkInterface(&block)
          # Append value to the List from block via instance eval of a new NetworkInterface
          def NetworkInterface(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:NetworkInterfaces, value, fn_if: fn_if, attr_class: NetworkInterface, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for ImageId
          def ImageId(value)
            dsl_attribute(:ImageId, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for InstanceType
          def InstanceType(value)
            dsl_attribute(:InstanceType, value)
          end

          #   @param [Monitoring|JSONable] value
          #     The value to use for Monitoring
          # @@overload Monitoring(&block)
          #   Set :Monitoring from block via instance eval of a new Monitoring
          def Monitoring(value = nil, **value_hash, &block)
            dsl_attribute(:Monitoring, value, attr_class: Monitoring, **value_hash, &block)
          end

          #   @param [HibernationOptions|JSONable] value
          #     The value to use for HibernationOptions
          # @@overload HibernationOptions(&block)
          #   Set :HibernationOptions from block via instance eval of a new HibernationOptions
          def HibernationOptions(value = nil, **value_hash, &block)
            dsl_attribute(:HibernationOptions, value, attr_class: HibernationOptions, **value_hash, &block)
          end

          #   @param [MetadataOptions|JSONable] value
          #     The value to use for MetadataOptions
          # @@overload MetadataOptions(&block)
          #   Set :MetadataOptions from block via instance eval of a new MetadataOptions
          def MetadataOptions(value = nil, **value_hash, &block)
            dsl_attribute(:MetadataOptions, value, attr_class: MetadataOptions, **value_hash, &block)
          end

          # @param [Array<LicenseSpecification>|JSONable>] values
          #   The List of values to use for LicenseSpecifications
          def LicenseSpecifications(values)
            dsl_list_attribute(:LicenseSpecifications, values)
          end

          #  @param [LicenseSpecification|JSONable] value  Append value to the List
          #    The List of values to use for LicenseSpecifications
          # @@overload LicenseSpecification(&block)
          # Append value to the List from block via instance eval of a new LicenseSpecification
          def LicenseSpecification(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:LicenseSpecifications, value, fn_if: fn_if, attr_class: LicenseSpecification, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for InstanceInitiatedShutdownBehavior
          def InstanceInitiatedShutdownBehavior(value)
            dsl_attribute(:InstanceInitiatedShutdownBehavior, value)
          end

          #   @param [CpuOptions|JSONable] value
          #     The value to use for CpuOptions
          # @@overload CpuOptions(&block)
          #   Set :CpuOptions from block via instance eval of a new CpuOptions
          def CpuOptions(value = nil, **value_hash, &block)
            dsl_attribute(:CpuOptions, value, attr_class: CpuOptions, **value_hash, &block)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for SecurityGroupIds
          def SecurityGroupIds(values)
            dsl_list_attribute(:SecurityGroupIds, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for SecurityGroupIds
          def SecurityGroupId(value, fn_if: nil)
            dsl_push_attribute(:SecurityGroupIds, value, fn_if: fn_if)
          end

          #   @param [String|JSONable] value
          #     The value to use for KeyName
          def KeyName(value)
            dsl_attribute(:KeyName, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for DisableApiTermination
          def DisableApiTermination(value)
            dsl_attribute(:DisableApiTermination, value)
          end

          #   @param [InstanceMarketOptions|JSONable] value
          #     The value to use for InstanceMarketOptions
          # @@overload InstanceMarketOptions(&block)
          #   Set :InstanceMarketOptions from block via instance eval of a new InstanceMarketOptions
          def InstanceMarketOptions(value = nil, **value_hash, &block)
            dsl_attribute(:InstanceMarketOptions, value, attr_class: InstanceMarketOptions, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for RamDiskId
          def RamDiskId(value)
            dsl_attribute(:RamDiskId, value)
          end

          #   @param [CapacityReservationSpecification|JSONable] value
          #     The value to use for CapacityReservationSpecification
          # @@overload CapacityReservationSpecification(&block)
          #   Set :CapacityReservationSpecification from block via instance eval of a new CapacityReservationSpecification
          def CapacityReservationSpecification(value = nil, **value_hash, &block)
            dsl_attribute(:CapacityReservationSpecification, value, attr_class: CapacityReservationSpecification, **value_hash, &block)
          end

          #   @param [CreditSpecification|JSONable] value
          #     The value to use for CreditSpecification
          # @@overload CreditSpecification(&block)
          #   Set :CreditSpecification from block via instance eval of a new CreditSpecification
          def CreditSpecification(value = nil, **value_hash, &block)
            dsl_attribute(:CreditSpecification, value, attr_class: CreditSpecification, **value_hash, &block)
          end
        end

        # Property Definition MetadataOptions
        class MetadataOptions < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for HttpPutResponseHopLimit
          def HttpPutResponseHopLimit(value)
            dsl_attribute(:HttpPutResponseHopLimit, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for HttpTokens
          def HttpTokens(value)
            dsl_attribute(:HttpTokens, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for HttpEndpoint
          def HttpEndpoint(value)
            dsl_attribute(:HttpEndpoint, value)
          end
        end

        # Property Definition Ipv6Add
        class Ipv6Add < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Ipv6Address
          def Ipv6Address(value)
            dsl_attribute(:Ipv6Address, value)
          end
        end

        # Property Definition LicenseSpecification
        class LicenseSpecification < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for LicenseConfigurationArn
          def LicenseConfigurationArn(value)
            dsl_attribute(:LicenseConfigurationArn, value)
          end
        end

        # Property Definition CpuOptions
        class CpuOptions < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for ThreadsPerCore
          def ThreadsPerCore(value)
            dsl_attribute(:ThreadsPerCore, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for CoreCount
          def CoreCount(value)
            dsl_attribute(:CoreCount, value)
          end
        end

        # Property Definition SpotOptions
        class SpotOptions < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for InstanceInterruptionBehavior
          def InstanceInterruptionBehavior(value)
            dsl_attribute(:InstanceInterruptionBehavior, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for MaxPrice
          def MaxPrice(value)
            dsl_attribute(:MaxPrice, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for SpotInstanceType
          def SpotInstanceType(value)
            dsl_attribute(:SpotInstanceType, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for BlockDurationMinutes
          def BlockDurationMinutes(value)
            dsl_attribute(:BlockDurationMinutes, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ValidUntil
          def ValidUntil(value)
            dsl_attribute(:ValidUntil, value)
          end
        end

        # Property Definition ElasticGpuSpecification
        class ElasticGpuSpecification < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Type
          def Type(value)
            dsl_attribute(:Type, value)
          end
        end

        # Property Definition NetworkInterface
        class NetworkInterface < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Description
          def Description(value)
            dsl_attribute(:Description, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for PrivateIpAddress
          def PrivateIpAddress(value)
            dsl_attribute(:PrivateIpAddress, value)
          end

          #  @param [PrivateIpAdd|JSONable] value  Append value to the List
          #    The List of values to use for PrivateIpAddresses
          # @@overload PrivateIpAddresses(&block)
          # Append value to the List from block via instance eval of a new PrivateIpAdd
          def PrivateIpAddresses(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:PrivateIpAddresses, value, fn_if: fn_if, attr_class: PrivateIpAdd, **value_hash, &block)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for SecondaryPrivateIpAddressCount
          def SecondaryPrivateIpAddressCount(value)
            dsl_attribute(:SecondaryPrivateIpAddressCount, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for DeviceIndex
          def DeviceIndex(value)
            dsl_attribute(:DeviceIndex, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for SubnetId
          def SubnetId(value)
            dsl_attribute(:SubnetId, value)
          end

          # @param [Array<Ipv6Add>|JSONable>] values
          #   The List of values to use for Ipv6Addresses
          def Ipv6Addresses(values)
            dsl_list_attribute(:Ipv6Addresses, values)
          end

          #  @param [Ipv6Add|JSONable] value  Append value to the List
          #    The List of values to use for Ipv6Addresses
          # @@overload Ipv6Address(&block)
          # Append value to the List from block via instance eval of a new Ipv6Add
          def Ipv6Address(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Ipv6Addresses, value, fn_if: fn_if, attr_class: Ipv6Add, **value_hash, &block)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for AssociatePublicIpAddress
          def AssociatePublicIpAddress(value)
            dsl_attribute(:AssociatePublicIpAddress, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for NetworkInterfaceId
          def NetworkInterfaceId(value)
            dsl_attribute(:NetworkInterfaceId, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for InterfaceType
          def InterfaceType(value)
            dsl_attribute(:InterfaceType, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for Ipv6AddressCount
          def Ipv6AddressCount(value)
            dsl_attribute(:Ipv6AddressCount, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Groups
          def Groups(values)
            dsl_list_attribute(:Groups, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Groups
          def Group(value, fn_if: nil)
            dsl_push_attribute(:Groups, value, fn_if: fn_if)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for DeleteOnTermination
          def DeleteOnTermination(value)
            dsl_attribute(:DeleteOnTermination, value)
          end
        end

        # Property Definition IamInstanceProfile
        class IamInstanceProfile < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Arn
          def Arn(value)
            dsl_attribute(:Arn, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end
        end

        # Property Definition PrivateIpAdd
        class PrivateIpAdd < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for PrivateIpAddress
          def PrivateIpAddress(value)
            dsl_attribute(:PrivateIpAddress, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for Primary
          def Primary(value)
            dsl_attribute(:Primary, value)
          end
        end

        # Property Definition TagSpecification
        class TagSpecification < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ResourceType
          def ResourceType(value)
            dsl_attribute(:ResourceType, value)
          end

          # @param [Array<Tag>|JSONable>] values
          #   The List of values to use for Tags
          def Tags(values)
            dsl_list_attribute(:Tags, values)
          end

          #  @param [Tag|JSONable] value  Append value to the List
          #    The List of values to use for Tags
          # @@overload Tag(&block)
          # Append value to the List from block via instance eval of a new Tag
          def Tag(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
          end
        end

        # Property Definition Placement
        class Placement < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for GroupName
          def GroupName(value)
            dsl_attribute(:GroupName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Tenancy
          def Tenancy(value)
            dsl_attribute(:Tenancy, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for SpreadDomain
          def SpreadDomain(value)
            dsl_attribute(:SpreadDomain, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for PartitionNumber
          def PartitionNumber(value)
            dsl_attribute(:PartitionNumber, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for AvailabilityZone
          def AvailabilityZone(value)
            dsl_attribute(:AvailabilityZone, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Affinity
          def Affinity(value)
            dsl_attribute(:Affinity, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for HostId
          def HostId(value)
            dsl_attribute(:HostId, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for HostResourceGroupArn
          def HostResourceGroupArn(value)
            dsl_attribute(:HostResourceGroupArn, value)
          end
        end

        # Property Definition InstanceMarketOptions
        class InstanceMarketOptions < PropertyType
          #   @param [SpotOptions|JSONable] value
          #     The value to use for SpotOptions
          # @@overload SpotOptions(&block)
          #   Set :SpotOptions from block via instance eval of a new SpotOptions
          def SpotOptions(value = nil, **value_hash, &block)
            dsl_attribute(:SpotOptions, value, attr_class: SpotOptions, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for MarketType
          def MarketType(value)
            dsl_attribute(:MarketType, value)
          end
        end

        # Property Definition Ebs
        class Ebs < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for SnapshotId
          def SnapshotId(value)
            dsl_attribute(:SnapshotId, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for VolumeType
          def VolumeType(value)
            dsl_attribute(:VolumeType, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for KmsKeyId
          def KmsKeyId(value)
            dsl_attribute(:KmsKeyId, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for Encrypted
          def Encrypted(value)
            dsl_attribute(:Encrypted, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for Iops
          def Iops(value)
            dsl_attribute(:Iops, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for VolumeSize
          def VolumeSize(value)
            dsl_attribute(:VolumeSize, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for DeleteOnTermination
          def DeleteOnTermination(value)
            dsl_attribute(:DeleteOnTermination, value)
          end
        end

        # Property Definition LaunchTemplateElasticInferenceAccelerator
        class LaunchTemplateElasticInferenceAccelerator < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Type
          def Type(value)
            dsl_attribute(:Type, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for Count
          def Count(value)
            dsl_attribute(:Count, value)
          end
        end

        # Property Definition BlockDeviceMapping
        class BlockDeviceMapping < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for NoDevice
          def NoDevice(value)
            dsl_attribute(:NoDevice, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for VirtualName
          def VirtualName(value)
            dsl_attribute(:VirtualName, value)
          end

          #   @param [Ebs|JSONable] value
          #     The value to use for Ebs
          # @@overload Ebs(&block)
          #   Set :Ebs from block via instance eval of a new Ebs
          def Ebs(value = nil, **value_hash, &block)
            dsl_attribute(:Ebs, value, attr_class: Ebs, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for DeviceName
          def DeviceName(value)
            dsl_attribute(:DeviceName, value)
          end
        end

        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end
        end

        # Property Definition CapacityReservationTarget
        class CapacityReservationTarget < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for CapacityReservationId
          def CapacityReservationId(value)
            dsl_attribute(:CapacityReservationId, value)
          end
        end

        # Property Definition CapacityReservationSpecification
        class CapacityReservationSpecification < PropertyType
          #   @param [CapacityReservationTarget|JSONable] value
          #     The value to use for CapacityReservationTarget
          # @@overload CapacityReservationTarget(&block)
          #   Set :CapacityReservationTarget from block via instance eval of a new CapacityReservationTarget
          def CapacityReservationTarget(value = nil, **value_hash, &block)
            dsl_attribute(:CapacityReservationTarget, value, attr_class: CapacityReservationTarget, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for CapacityReservationPreference
          def CapacityReservationPreference(value)
            dsl_attribute(:CapacityReservationPreference, value)
          end
        end

        # Property Definition CreditSpecification
        class CreditSpecification < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for CpuCredits
          def CpuCredits(value)
            dsl_attribute(:CpuCredits, value)
          end
        end

        # Property Definition Monitoring
        class Monitoring < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for Enabled
          def Enabled(value)
            dsl_attribute(:Enabled, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for LaunchTemplateName
        def LaunchTemplateName(value)
          dsl_attribute(:LaunchTemplateName, value)
        end

        #   @param [LaunchTemplateData|JSONable] value
        #     The value to use for LaunchTemplateData
        # @@overload LaunchTemplateData(&block)
        #   Set :LaunchTemplateData from block via instance eval of a new LaunchTemplateData
        def LaunchTemplateData(value = nil, **value_hash, &block)
          dsl_attribute(:LaunchTemplateData, value, attr_class: LaunchTemplateData, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for DefaultVersionNumber
        def DefaultVersionNumber(value)
          dsl_attribute(:DefaultVersionNumber, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for LatestVersionNumber
        def LatestVersionNumber(value)
          dsl_attribute(:LatestVersionNumber, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::EC2::LaunchTemplate]
    def AWS_EC2_LaunchTemplate(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::EC2::LaunchTemplate, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
