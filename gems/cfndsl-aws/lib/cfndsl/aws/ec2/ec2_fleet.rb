# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module EC2
      # Resource Type definition for AWS::EC2::EC2Fleet
      class EC2Fleet < ResourceType
        # Property Definition OnDemandOptionsRequest
        class OnDemandOptionsRequest < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for SingleAvailabilityZone
          def SingleAvailabilityZone(value)
            dsl_attribute(:SingleAvailabilityZone, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for AllocationStrategy
          def AllocationStrategy(value)
            dsl_attribute(:AllocationStrategy, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for SingleInstanceType
          def SingleInstanceType(value)
            dsl_attribute(:SingleInstanceType, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for MinTargetCapacity
          def MinTargetCapacity(value)
            dsl_attribute(:MinTargetCapacity, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for MaxTotalPrice
          def MaxTotalPrice(value)
            dsl_attribute(:MaxTotalPrice, value)
          end

          #   @param [CapacityReservationOptionsRequest|JSONable] value
          #     The value to use for CapacityReservationOptions
          # @@overload CapacityReservationOptions(&block)
          #   Set :CapacityReservationOptions from block via instance eval of a new CapacityReservationOptionsRequest
          def CapacityReservationOptions(value = nil, **value_hash, &block)
            dsl_attribute(:CapacityReservationOptions, value, attr_class: CapacityReservationOptionsRequest, **value_hash, &block)
          end
        end

        # Property Definition SpotOptionsRequest
        class SpotOptionsRequest < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for SingleAvailabilityZone
          def SingleAvailabilityZone(value)
            dsl_attribute(:SingleAvailabilityZone, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for AllocationStrategy
          def AllocationStrategy(value)
            dsl_attribute(:AllocationStrategy, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for SingleInstanceType
          def SingleInstanceType(value)
            dsl_attribute(:SingleInstanceType, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for MinTargetCapacity
          def MinTargetCapacity(value)
            dsl_attribute(:MinTargetCapacity, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for MaxTotalPrice
          def MaxTotalPrice(value)
            dsl_attribute(:MaxTotalPrice, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for InstanceInterruptionBehavior
          def InstanceInterruptionBehavior(value)
            dsl_attribute(:InstanceInterruptionBehavior, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for InstancePoolsToUseCount
          def InstancePoolsToUseCount(value)
            dsl_attribute(:InstancePoolsToUseCount, value)
          end
        end

        # Property Definition TargetCapacitySpecificationRequest
        class TargetCapacitySpecificationRequest < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for DefaultTargetCapacityType
          def DefaultTargetCapacityType(value)
            dsl_attribute(:DefaultTargetCapacityType, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for TotalTargetCapacity
          def TotalTargetCapacity(value)
            dsl_attribute(:TotalTargetCapacity, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for OnDemandTargetCapacity
          def OnDemandTargetCapacity(value)
            dsl_attribute(:OnDemandTargetCapacity, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for SpotTargetCapacity
          def SpotTargetCapacity(value)
            dsl_attribute(:SpotTargetCapacity, value)
          end
        end

        # Property Definition FleetLaunchTemplateSpecificationRequest
        class FleetLaunchTemplateSpecificationRequest < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for LaunchTemplateName
          def LaunchTemplateName(value)
            dsl_attribute(:LaunchTemplateName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for LaunchTemplateId
          def LaunchTemplateId(value)
            dsl_attribute(:LaunchTemplateId, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Version
          def Version(value)
            dsl_attribute(:Version, value)
          end
        end

        # Property Definition Placement
        class Placement < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for GroupName
          def GroupName(value)
            dsl_attribute(:GroupName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Tenancy
          def Tenancy(value)
            dsl_attribute(:Tenancy, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for SpreadDomain
          def SpreadDomain(value)
            dsl_attribute(:SpreadDomain, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for PartitionNumber
          def PartitionNumber(value)
            dsl_attribute(:PartitionNumber, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for AvailabilityZone
          def AvailabilityZone(value)
            dsl_attribute(:AvailabilityZone, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Affinity
          def Affinity(value)
            dsl_attribute(:Affinity, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for HostId
          def HostId(value)
            dsl_attribute(:HostId, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for HostResourceGroupArn
          def HostResourceGroupArn(value)
            dsl_attribute(:HostResourceGroupArn, value)
          end
        end

        # Property Definition FleetLaunchTemplateConfigRequest
        class FleetLaunchTemplateConfigRequest < PropertyType
          #   @param [FleetLaunchTemplateSpecificationRequest|JSONable] value
          #     The value to use for LaunchTemplateSpecification
          # @@overload LaunchTemplateSpecification(&block)
          #   Set :LaunchTemplateSpecification from block via instance eval of a new FleetLaunchTemplateSpecificationRequest
          def LaunchTemplateSpecification(value = nil, **value_hash, &block)
            dsl_attribute(:LaunchTemplateSpecification, value, attr_class: FleetLaunchTemplateSpecificationRequest, **value_hash, &block)
          end

          # @param [Array<FleetLaunchTemplateOverridesRequest>|JSONable>] values
          #   The List of values to use for Overrides
          def Overrides(values)
            dsl_list_attribute(:Overrides, values)
          end

          #  @param [FleetLaunchTemplateOverridesRequest|JSONable] value  Append value to the List
          #    The List of values to use for Overrides
          # @@overload Override(&block)
          # Append value to the List from block via instance eval of a new FleetLaunchTemplateOverridesRequest
          def Override(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Overrides, value, fn_if: fn_if, attr_class: FleetLaunchTemplateOverridesRequest, **value_hash, &block)
          end
        end

        # Property Definition CapacityReservationOptionsRequest
        class CapacityReservationOptionsRequest < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for UsageStrategy
          def UsageStrategy(value)
            dsl_attribute(:UsageStrategy, value)
          end
        end

        # Property Definition FleetLaunchTemplateOverridesRequest
        class FleetLaunchTemplateOverridesRequest < PropertyType
          #   @param [Number|JSONable] value
          #     The value to use for WeightedCapacity
          def WeightedCapacity(value)
            dsl_attribute(:WeightedCapacity, value)
          end

          #   @param [Placement|JSONable] value
          #     The value to use for Placement
          # @@overload Placement(&block)
          #   Set :Placement from block via instance eval of a new Placement
          def Placement(value = nil, **value_hash, &block)
            dsl_attribute(:Placement, value, attr_class: Placement, **value_hash, &block)
          end

          #   @param [Number|JSONable] value
          #     The value to use for Priority
          def Priority(value)
            dsl_attribute(:Priority, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for AvailabilityZone
          def AvailabilityZone(value)
            dsl_attribute(:AvailabilityZone, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for SubnetId
          def SubnetId(value)
            dsl_attribute(:SubnetId, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for InstanceType
          def InstanceType(value)
            dsl_attribute(:InstanceType, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for MaxPrice
          def MaxPrice(value)
            dsl_attribute(:MaxPrice, value)
          end
        end

        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end
        end

        # Property Definition TagSpecification
        class TagSpecification < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ResourceType
          def ResourceType(value)
            dsl_attribute(:ResourceType, value)
          end

          # @param [Array<Tag>|JSONable>] values
          #   The List of values to use for Tags
          def Tags(values)
            dsl_list_attribute(:Tags, values)
          end

          #  @param [Tag|JSONable] value  Append value to the List
          #    The List of values to use for Tags
          # @@overload Tag(&block)
          # Append value to the List from block via instance eval of a new Tag
          def Tag(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
          end
        end

        #   @param [TargetCapacitySpecificationRequest|JSONable] value
        #     The value to use for TargetCapacitySpecification
        # @@overload TargetCapacitySpecification(&block)
        #   Set :TargetCapacitySpecification from block via instance eval of a new TargetCapacitySpecificationRequest
        def TargetCapacitySpecification(value = nil, **value_hash, &block)
          dsl_attribute(:TargetCapacitySpecification, value, attr_class: TargetCapacitySpecificationRequest, **value_hash, &block)
        end

        #   @param [OnDemandOptionsRequest|JSONable] value
        #     The value to use for OnDemandOptions
        # @@overload OnDemandOptions(&block)
        #   Set :OnDemandOptions from block via instance eval of a new OnDemandOptionsRequest
        def OnDemandOptions(value = nil, **value_hash, &block)
          dsl_attribute(:OnDemandOptions, value, attr_class: OnDemandOptionsRequest, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Type
        def Type(value)
          dsl_attribute(:Type, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for ExcessCapacityTerminationPolicy
        def ExcessCapacityTerminationPolicy(value)
          dsl_attribute(:ExcessCapacityTerminationPolicy, value)
        end

        # @param [Array<TagSpecification>|JSONable>] values
        #   The List of values to use for TagSpecifications
        def TagSpecifications(values)
          dsl_list_attribute(:TagSpecifications, values)
        end

        #  @param [TagSpecification|JSONable] value  Append value to the List
        #    The List of values to use for TagSpecifications
        # @@overload TagSpecification(&block)
        # Append value to the List from block via instance eval of a new TagSpecification
        def TagSpecification(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:TagSpecifications, value, fn_if: fn_if, attr_class: TagSpecification, **value_hash, &block)
        end

        #   @param [SpotOptionsRequest|JSONable] value
        #     The value to use for SpotOptions
        # @@overload SpotOptions(&block)
        #   Set :SpotOptions from block via instance eval of a new SpotOptionsRequest
        def SpotOptions(value = nil, **value_hash, &block)
          dsl_attribute(:SpotOptions, value, attr_class: SpotOptionsRequest, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for ValidFrom
        def ValidFrom(value)
          dsl_attribute(:ValidFrom, value)
        end

        #   @param [Boolean|JSONable] value
        #     The value to use for ReplaceUnhealthyInstances
        def ReplaceUnhealthyInstances(value)
          dsl_attribute(:ReplaceUnhealthyInstances, value)
        end

        # @param [Array<FleetLaunchTemplateConfigRequest>|JSONable>] values
        #   The List of values to use for LaunchTemplateConfigs
        def LaunchTemplateConfigs(values)
          dsl_list_attribute(:LaunchTemplateConfigs, values)
        end

        #  @param [FleetLaunchTemplateConfigRequest|JSONable] value  Append value to the List
        #    The List of values to use for LaunchTemplateConfigs
        # @@overload LaunchTemplateConfig(&block)
        # Append value to the List from block via instance eval of a new FleetLaunchTemplateConfigRequest
        def LaunchTemplateConfig(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:LaunchTemplateConfigs, value, fn_if: fn_if, attr_class: FleetLaunchTemplateConfigRequest, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [Boolean|JSONable] value
        #     The value to use for TerminateInstancesWithExpiration
        def TerminateInstancesWithExpiration(value)
          dsl_attribute(:TerminateInstancesWithExpiration, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for ValidUntil
        def ValidUntil(value)
          dsl_attribute(:ValidUntil, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::EC2::EC2Fleet]
    def AWS_EC2_EC2Fleet(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::EC2::EC2Fleet, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
