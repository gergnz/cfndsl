# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module AppMesh
      # Resource Type definition for AWS::AppMesh::Route
      class Route < ResourceType
        # Property Definition TcpRouteAction
        class TcpRouteAction < PropertyType
          # @param [Array<WeightedTarget>|JSONable>] values
          #   The List of values to use for WeightedTargets
          def WeightedTargets(values)
            dsl_list_attribute(:WeightedTargets, values)
          end

          #  @param [WeightedTarget|JSONable] value  Append value to the List
          #    The List of values to use for WeightedTargets
          # @@overload WeightedTarget(&block)
          # Append value to the List from block via instance eval of a new WeightedTarget
          def WeightedTarget(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:WeightedTargets, value, fn_if: fn_if, attr_class: WeightedTarget, **value_hash, &block)
          end
        end

        # Property Definition GrpcRouteMatch
        class GrpcRouteMatch < PropertyType
          # @param [Array<GrpcRouteMetadata>|JSONable>] values
          #   The List of values to use for Metadata
          def Metadatas(values)
            dsl_list_attribute(:Metadata, values)
          end

          #  @param [GrpcRouteMetadata|JSONable] value  Append value to the List
          #    The List of values to use for Metadata
          # @@overload Metadata(&block)
          # Append value to the List from block via instance eval of a new GrpcRouteMetadata
          def Metadata(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Metadata, value, fn_if: fn_if, attr_class: GrpcRouteMetadata, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for MethodName
          def MethodName(value)
            dsl_attribute(:MethodName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ServiceName
          def ServiceName(value)
            dsl_attribute(:ServiceName, value)
          end
        end

        # Property Definition HttpRetryPolicy
        class HttpRetryPolicy < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for MaxRetries
          def MaxRetries(value)
            dsl_attribute(:MaxRetries, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for TcpRetryEvents
          def TcpRetryEvents(values)
            dsl_list_attribute(:TcpRetryEvents, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for TcpRetryEvents
          def TcpRetryEvent(value, fn_if: nil)
            dsl_push_attribute(:TcpRetryEvents, value, fn_if: fn_if)
          end

          #   @param [Duration|JSONable] value
          #     The value to use for PerRetryTimeout
          # @@overload PerRetryTimeout(&block)
          #   Set :PerRetryTimeout from block via instance eval of a new Duration
          def PerRetryTimeout(value = nil, **value_hash, &block)
            dsl_attribute(:PerRetryTimeout, value, attr_class: Duration, **value_hash, &block)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for HttpRetryEvents
          def HttpRetryEvents(values)
            dsl_list_attribute(:HttpRetryEvents, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for HttpRetryEvents
          def HttpRetryEvent(value, fn_if: nil)
            dsl_push_attribute(:HttpRetryEvents, value, fn_if: fn_if)
          end
        end

        # Property Definition MatchRange
        class MatchRange < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for Start
          def Start(value)
            dsl_attribute(:Start, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for End
          def End(value)
            dsl_attribute(:End, value)
          end
        end

        # Property Definition GrpcRoute
        class GrpcRoute < PropertyType
          #   @param [GrpcRouteAction|JSONable] value
          #     The value to use for Action
          # @@overload Action(&block)
          #   Set :Action from block via instance eval of a new GrpcRouteAction
          def Action(value = nil, **value_hash, &block)
            dsl_attribute(:Action, value, attr_class: GrpcRouteAction, **value_hash, &block)
          end

          #   @param [GrpcRetryPolicy|JSONable] value
          #     The value to use for RetryPolicy
          # @@overload RetryPolicy(&block)
          #   Set :RetryPolicy from block via instance eval of a new GrpcRetryPolicy
          def RetryPolicy(value = nil, **value_hash, &block)
            dsl_attribute(:RetryPolicy, value, attr_class: GrpcRetryPolicy, **value_hash, &block)
          end

          #   @param [GrpcTimeout|JSONable] value
          #     The value to use for Timeout
          # @@overload Timeout(&block)
          #   Set :Timeout from block via instance eval of a new GrpcTimeout
          def Timeout(value = nil, **value_hash, &block)
            dsl_attribute(:Timeout, value, attr_class: GrpcTimeout, **value_hash, &block)
          end

          #   @param [GrpcRouteMatch|JSONable] value
          #     The value to use for Match
          # @@overload Match(&block)
          #   Set :Match from block via instance eval of a new GrpcRouteMatch
          def Match(value = nil, **value_hash, &block)
            dsl_attribute(:Match, value, attr_class: GrpcRouteMatch, **value_hash, &block)
          end
        end

        # Property Definition HttpRouteAction
        class HttpRouteAction < PropertyType
          # @param [Array<WeightedTarget>|JSONable>] values
          #   The List of values to use for WeightedTargets
          def WeightedTargets(values)
            dsl_list_attribute(:WeightedTargets, values)
          end

          #  @param [WeightedTarget|JSONable] value  Append value to the List
          #    The List of values to use for WeightedTargets
          # @@overload WeightedTarget(&block)
          # Append value to the List from block via instance eval of a new WeightedTarget
          def WeightedTarget(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:WeightedTargets, value, fn_if: fn_if, attr_class: WeightedTarget, **value_hash, &block)
          end
        end

        # Property Definition TcpRoute
        class TcpRoute < PropertyType
          #   @param [TcpRouteAction|JSONable] value
          #     The value to use for Action
          # @@overload Action(&block)
          #   Set :Action from block via instance eval of a new TcpRouteAction
          def Action(value = nil, **value_hash, &block)
            dsl_attribute(:Action, value, attr_class: TcpRouteAction, **value_hash, &block)
          end

          #   @param [TcpTimeout|JSONable] value
          #     The value to use for Timeout
          # @@overload Timeout(&block)
          #   Set :Timeout from block via instance eval of a new TcpTimeout
          def Timeout(value = nil, **value_hash, &block)
            dsl_attribute(:Timeout, value, attr_class: TcpTimeout, **value_hash, &block)
          end
        end

        # Property Definition Duration
        class Duration < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Unit
          def Unit(value)
            dsl_attribute(:Unit, value)
          end
        end

        # Property Definition HttpRouteHeader
        class HttpRouteHeader < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for Invert
          def Invert(value)
            dsl_attribute(:Invert, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end

          #   @param [HeaderMatchMethod|JSONable] value
          #     The value to use for Match
          # @@overload Match(&block)
          #   Set :Match from block via instance eval of a new HeaderMatchMethod
          def Match(value = nil, **value_hash, &block)
            dsl_attribute(:Match, value, attr_class: HeaderMatchMethod, **value_hash, &block)
          end
        end

        # Property Definition RouteSpec
        class RouteSpec < PropertyType
          #   @param [HttpRoute|JSONable] value
          #     The value to use for HttpRoute
          # @@overload HttpRoute(&block)
          #   Set :HttpRoute from block via instance eval of a new HttpRoute
          def HttpRoute(value = nil, **value_hash, &block)
            dsl_attribute(:HttpRoute, value, attr_class: HttpRoute, **value_hash, &block)
          end

          #   @param [HttpRoute|JSONable] value
          #     The value to use for Http2Route
          # @@overload Http2Route(&block)
          #   Set :Http2Route from block via instance eval of a new HttpRoute
          def Http2Route(value = nil, **value_hash, &block)
            dsl_attribute(:Http2Route, value, attr_class: HttpRoute, **value_hash, &block)
          end

          #   @param [GrpcRoute|JSONable] value
          #     The value to use for GrpcRoute
          # @@overload GrpcRoute(&block)
          #   Set :GrpcRoute from block via instance eval of a new GrpcRoute
          def GrpcRoute(value = nil, **value_hash, &block)
            dsl_attribute(:GrpcRoute, value, attr_class: GrpcRoute, **value_hash, &block)
          end

          #   @param [TcpRoute|JSONable] value
          #     The value to use for TcpRoute
          # @@overload TcpRoute(&block)
          #   Set :TcpRoute from block via instance eval of a new TcpRoute
          def TcpRoute(value = nil, **value_hash, &block)
            dsl_attribute(:TcpRoute, value, attr_class: TcpRoute, **value_hash, &block)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for Priority
          def Priority(value)
            dsl_attribute(:Priority, value)
          end
        end

        # Property Definition GrpcTimeout
        class GrpcTimeout < PropertyType
          #   @param [Duration|JSONable] value
          #     The value to use for PerRequest
          # @@overload PerRequest(&block)
          #   Set :PerRequest from block via instance eval of a new Duration
          def PerRequest(value = nil, **value_hash, &block)
            dsl_attribute(:PerRequest, value, attr_class: Duration, **value_hash, &block)
          end

          #   @param [Duration|JSONable] value
          #     The value to use for Idle
          # @@overload Idle(&block)
          #   Set :Idle from block via instance eval of a new Duration
          def Idle(value = nil, **value_hash, &block)
            dsl_attribute(:Idle, value, attr_class: Duration, **value_hash, &block)
          end
        end

        # Property Definition GrpcRouteMetadataMatchMethod
        class GrpcRouteMetadataMatchMethod < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Suffix
          def Suffix(value)
            dsl_attribute(:Suffix, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Exact
          def Exact(value)
            dsl_attribute(:Exact, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Prefix
          def Prefix(value)
            dsl_attribute(:Prefix, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Regex
          def Regex(value)
            dsl_attribute(:Regex, value)
          end

          #   @param [MatchRange|JSONable] value
          #     The value to use for Range
          # @@overload Range(&block)
          #   Set :Range from block via instance eval of a new MatchRange
          def Range(value = nil, **value_hash, &block)
            dsl_attribute(:Range, value, attr_class: MatchRange, **value_hash, &block)
          end
        end

        # Property Definition HttpRoute
        class HttpRoute < PropertyType
          #   @param [HttpRouteAction|JSONable] value
          #     The value to use for Action
          # @@overload Action(&block)
          #   Set :Action from block via instance eval of a new HttpRouteAction
          def Action(value = nil, **value_hash, &block)
            dsl_attribute(:Action, value, attr_class: HttpRouteAction, **value_hash, &block)
          end

          #   @param [HttpRetryPolicy|JSONable] value
          #     The value to use for RetryPolicy
          # @@overload RetryPolicy(&block)
          #   Set :RetryPolicy from block via instance eval of a new HttpRetryPolicy
          def RetryPolicy(value = nil, **value_hash, &block)
            dsl_attribute(:RetryPolicy, value, attr_class: HttpRetryPolicy, **value_hash, &block)
          end

          #   @param [HttpTimeout|JSONable] value
          #     The value to use for Timeout
          # @@overload Timeout(&block)
          #   Set :Timeout from block via instance eval of a new HttpTimeout
          def Timeout(value = nil, **value_hash, &block)
            dsl_attribute(:Timeout, value, attr_class: HttpTimeout, **value_hash, &block)
          end

          #   @param [HttpRouteMatch|JSONable] value
          #     The value to use for Match
          # @@overload Match(&block)
          #   Set :Match from block via instance eval of a new HttpRouteMatch
          def Match(value = nil, **value_hash, &block)
            dsl_attribute(:Match, value, attr_class: HttpRouteMatch, **value_hash, &block)
          end
        end

        # Property Definition GrpcRouteMetadata
        class GrpcRouteMetadata < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for Invert
          def Invert(value)
            dsl_attribute(:Invert, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end

          #   @param [GrpcRouteMetadataMatchMethod|JSONable] value
          #     The value to use for Match
          # @@overload Match(&block)
          #   Set :Match from block via instance eval of a new GrpcRouteMetadataMatchMethod
          def Match(value = nil, **value_hash, &block)
            dsl_attribute(:Match, value, attr_class: GrpcRouteMetadataMatchMethod, **value_hash, &block)
          end
        end

        # Property Definition HeaderMatchMethod
        class HeaderMatchMethod < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Suffix
          def Suffix(value)
            dsl_attribute(:Suffix, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Exact
          def Exact(value)
            dsl_attribute(:Exact, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Prefix
          def Prefix(value)
            dsl_attribute(:Prefix, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Regex
          def Regex(value)
            dsl_attribute(:Regex, value)
          end

          #   @param [MatchRange|JSONable] value
          #     The value to use for Range
          # @@overload Range(&block)
          #   Set :Range from block via instance eval of a new MatchRange
          def Range(value = nil, **value_hash, &block)
            dsl_attribute(:Range, value, attr_class: MatchRange, **value_hash, &block)
          end
        end

        # Property Definition GrpcRouteAction
        class GrpcRouteAction < PropertyType
          # @param [Array<WeightedTarget>|JSONable>] values
          #   The List of values to use for WeightedTargets
          def WeightedTargets(values)
            dsl_list_attribute(:WeightedTargets, values)
          end

          #  @param [WeightedTarget|JSONable] value  Append value to the List
          #    The List of values to use for WeightedTargets
          # @@overload WeightedTarget(&block)
          # Append value to the List from block via instance eval of a new WeightedTarget
          def WeightedTarget(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:WeightedTargets, value, fn_if: fn_if, attr_class: WeightedTarget, **value_hash, &block)
          end
        end

        # Property Definition GrpcRetryPolicy
        class GrpcRetryPolicy < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for MaxRetries
          def MaxRetries(value)
            dsl_attribute(:MaxRetries, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for TcpRetryEvents
          def TcpRetryEvents(values)
            dsl_list_attribute(:TcpRetryEvents, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for TcpRetryEvents
          def TcpRetryEvent(value, fn_if: nil)
            dsl_push_attribute(:TcpRetryEvents, value, fn_if: fn_if)
          end

          #   @param [Duration|JSONable] value
          #     The value to use for PerRetryTimeout
          # @@overload PerRetryTimeout(&block)
          #   Set :PerRetryTimeout from block via instance eval of a new Duration
          def PerRetryTimeout(value = nil, **value_hash, &block)
            dsl_attribute(:PerRetryTimeout, value, attr_class: Duration, **value_hash, &block)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for GrpcRetryEvents
          def GrpcRetryEvents(values)
            dsl_list_attribute(:GrpcRetryEvents, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for GrpcRetryEvents
          def GrpcRetryEvent(value, fn_if: nil)
            dsl_push_attribute(:GrpcRetryEvents, value, fn_if: fn_if)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for HttpRetryEvents
          def HttpRetryEvents(values)
            dsl_list_attribute(:HttpRetryEvents, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for HttpRetryEvents
          def HttpRetryEvent(value, fn_if: nil)
            dsl_push_attribute(:HttpRetryEvents, value, fn_if: fn_if)
          end
        end

        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end
        end

        # Property Definition TcpTimeout
        class TcpTimeout < PropertyType
          #   @param [Duration|JSONable] value
          #     The value to use for Idle
          # @@overload Idle(&block)
          #   Set :Idle from block via instance eval of a new Duration
          def Idle(value = nil, **value_hash, &block)
            dsl_attribute(:Idle, value, attr_class: Duration, **value_hash, &block)
          end
        end

        # Property Definition HttpRouteMatch
        class HttpRouteMatch < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Scheme
          def Scheme(value)
            dsl_attribute(:Scheme, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Prefix
          def Prefix(value)
            dsl_attribute(:Prefix, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Method
          def Method(value)
            dsl_attribute(:Method, value)
          end

          # @param [Array<HttpRouteHeader>|JSONable>] values
          #   The List of values to use for Headers
          def Headers(values)
            dsl_list_attribute(:Headers, values)
          end

          #  @param [HttpRouteHeader|JSONable] value  Append value to the List
          #    The List of values to use for Headers
          # @@overload Header(&block)
          # Append value to the List from block via instance eval of a new HttpRouteHeader
          def Header(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Headers, value, fn_if: fn_if, attr_class: HttpRouteHeader, **value_hash, &block)
          end
        end

        # Property Definition WeightedTarget
        class WeightedTarget < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for VirtualNode
          def VirtualNode(value)
            dsl_attribute(:VirtualNode, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for Weight
          def Weight(value)
            dsl_attribute(:Weight, value)
          end
        end

        # Property Definition HttpTimeout
        class HttpTimeout < PropertyType
          #   @param [Duration|JSONable] value
          #     The value to use for PerRequest
          # @@overload PerRequest(&block)
          #   Set :PerRequest from block via instance eval of a new Duration
          def PerRequest(value = nil, **value_hash, &block)
            dsl_attribute(:PerRequest, value, attr_class: Duration, **value_hash, &block)
          end

          #   @param [Duration|JSONable] value
          #     The value to use for Idle
          # @@overload Idle(&block)
          #   Set :Idle from block via instance eval of a new Duration
          def Idle(value = nil, **value_hash, &block)
            dsl_attribute(:Idle, value, attr_class: Duration, **value_hash, &block)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for Uid
        def Uid(value)
          dsl_attribute(:Uid, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for MeshName
        def MeshName(value)
          dsl_attribute(:MeshName, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for VirtualRouterName
        def VirtualRouterName(value)
          dsl_attribute(:VirtualRouterName, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for MeshOwner
        def MeshOwner(value)
          dsl_attribute(:MeshOwner, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for ResourceOwner
        def ResourceOwner(value)
          dsl_attribute(:ResourceOwner, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for RouteName
        def RouteName(value)
          dsl_attribute(:RouteName, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Arn
        def Arn(value)
          dsl_attribute(:Arn, value)
        end

        #   @param [RouteSpec|JSONable] value
        #     The value to use for Spec
        # @@overload Spec(&block)
        #   Set :Spec from block via instance eval of a new RouteSpec
        def Spec(value = nil, **value_hash, &block)
          dsl_attribute(:Spec, value, attr_class: RouteSpec, **value_hash, &block)
        end

        # @param [Array<Tag>|JSONable>] values
        #   The List of values to use for Tags
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    The List of values to use for Tags
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::AppMesh::Route]
    def AWS_AppMesh_Route(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::AppMesh::Route, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
