# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module AppMesh
      # Resource Type definition for AWS::AppMesh::VirtualNode
      class VirtualNode < ResourceType
        # Property Definition AccessLog
        class AccessLog < PropertyType
          #   @param [FileAccessLog|JSONable] value
          #     The value to use for File
          # @@overload File(&block)
          #   Set :File from block via instance eval of a new FileAccessLog
          def File(value = nil, **value_hash, &block)
            dsl_attribute(:File, value, attr_class: FileAccessLog, **value_hash, &block)
          end
        end

        # Property Definition ListenerTimeout
        class ListenerTimeout < PropertyType
          #   @param [TcpTimeout|JSONable] value
          #     The value to use for TCP
          # @@overload TCP(&block)
          #   Set :TCP from block via instance eval of a new TcpTimeout
          def TCP(value = nil, **value_hash, &block)
            dsl_attribute(:TCP, value, attr_class: TcpTimeout, **value_hash, &block)
          end

          #   @param [HttpTimeout|JSONable] value
          #     The value to use for HTTP
          # @@overload HTTP(&block)
          #   Set :HTTP from block via instance eval of a new HttpTimeout
          def HTTP(value = nil, **value_hash, &block)
            dsl_attribute(:HTTP, value, attr_class: HttpTimeout, **value_hash, &block)
          end

          #   @param [HttpTimeout|JSONable] value
          #     The value to use for HTTP2
          # @@overload HTTP2(&block)
          #   Set :HTTP2 from block via instance eval of a new HttpTimeout
          def HTTP2(value = nil, **value_hash, &block)
            dsl_attribute(:HTTP2, value, attr_class: HttpTimeout, **value_hash, &block)
          end

          #   @param [GrpcTimeout|JSONable] value
          #     The value to use for GRPC
          # @@overload GRPC(&block)
          #   Set :GRPC from block via instance eval of a new GrpcTimeout
          def GRPC(value = nil, **value_hash, &block)
            dsl_attribute(:GRPC, value, attr_class: GrpcTimeout, **value_hash, &block)
          end
        end

        # Property Definition TlsValidationContextAcmTrust
        class TlsValidationContextAcmTrust < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for CertificateAuthorityArns
          def CertificateAuthorityArns(values)
            dsl_list_attribute(:CertificateAuthorityArns, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for CertificateAuthorityArns
          def CertificateAuthorityArn(value, fn_if: nil)
            dsl_push_attribute(:CertificateAuthorityArns, value, fn_if: fn_if)
          end
        end

        # Property Definition ClientPolicy
        class ClientPolicy < PropertyType
          #   @param [ClientPolicyTls|JSONable] value
          #     The value to use for TLS
          # @@overload TLS(&block)
          #   Set :TLS from block via instance eval of a new ClientPolicyTls
          def TLS(value = nil, **value_hash, &block)
            dsl_attribute(:TLS, value, attr_class: ClientPolicyTls, **value_hash, &block)
          end
        end

        # Property Definition FileAccessLog
        class FileAccessLog < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Path
          def Path(value)
            dsl_attribute(:Path, value)
          end
        end

        # Property Definition Listener
        class Listener < PropertyType
          #   @param [HealthCheck|JSONable] value
          #     The value to use for HealthCheck
          # @@overload HealthCheck(&block)
          #   Set :HealthCheck from block via instance eval of a new HealthCheck
          def HealthCheck(value = nil, **value_hash, &block)
            dsl_attribute(:HealthCheck, value, attr_class: HealthCheck, **value_hash, &block)
          end

          #   @param [ListenerTls|JSONable] value
          #     The value to use for TLS
          # @@overload TLS(&block)
          #   Set :TLS from block via instance eval of a new ListenerTls
          def TLS(value = nil, **value_hash, &block)
            dsl_attribute(:TLS, value, attr_class: ListenerTls, **value_hash, &block)
          end

          #   @param [PortMapping|JSONable] value
          #     The value to use for PortMapping
          # @@overload PortMapping(&block)
          #   Set :PortMapping from block via instance eval of a new PortMapping
          def PortMapping(value = nil, **value_hash, &block)
            dsl_attribute(:PortMapping, value, attr_class: PortMapping, **value_hash, &block)
          end

          #   @param [ListenerTimeout|JSONable] value
          #     The value to use for Timeout
          # @@overload Timeout(&block)
          #   Set :Timeout from block via instance eval of a new ListenerTimeout
          def Timeout(value = nil, **value_hash, &block)
            dsl_attribute(:Timeout, value, attr_class: ListenerTimeout, **value_hash, &block)
          end
        end

        # Property Definition TlsValidationContextTrust
        class TlsValidationContextTrust < PropertyType
          #   @param [TlsValidationContextFileTrust|JSONable] value
          #     The value to use for File
          # @@overload File(&block)
          #   Set :File from block via instance eval of a new TlsValidationContextFileTrust
          def File(value = nil, **value_hash, &block)
            dsl_attribute(:File, value, attr_class: TlsValidationContextFileTrust, **value_hash, &block)
          end

          #   @param [TlsValidationContextAcmTrust|JSONable] value
          #     The value to use for ACM
          # @@overload ACM(&block)
          #   Set :ACM from block via instance eval of a new TlsValidationContextAcmTrust
          def ACM(value = nil, **value_hash, &block)
            dsl_attribute(:ACM, value, attr_class: TlsValidationContextAcmTrust, **value_hash, &block)
          end
        end

        # Property Definition HealthCheck
        class HealthCheck < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Path
          def Path(value)
            dsl_attribute(:Path, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for UnhealthyThreshold
          def UnhealthyThreshold(value)
            dsl_attribute(:UnhealthyThreshold, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for Port
          def Port(value)
            dsl_attribute(:Port, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for HealthyThreshold
          def HealthyThreshold(value)
            dsl_attribute(:HealthyThreshold, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for TimeoutMillis
          def TimeoutMillis(value)
            dsl_attribute(:TimeoutMillis, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Protocol
          def Protocol(value)
            dsl_attribute(:Protocol, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for IntervalMillis
          def IntervalMillis(value)
            dsl_attribute(:IntervalMillis, value)
          end
        end

        # Property Definition GrpcTimeout
        class GrpcTimeout < PropertyType
          #   @param [Duration|JSONable] value
          #     The value to use for PerRequest
          # @@overload PerRequest(&block)
          #   Set :PerRequest from block via instance eval of a new Duration
          def PerRequest(value = nil, **value_hash, &block)
            dsl_attribute(:PerRequest, value, attr_class: Duration, **value_hash, &block)
          end

          #   @param [Duration|JSONable] value
          #     The value to use for Idle
          # @@overload Idle(&block)
          #   Set :Idle from block via instance eval of a new Duration
          def Idle(value = nil, **value_hash, &block)
            dsl_attribute(:Idle, value, attr_class: Duration, **value_hash, &block)
          end
        end

        # Property Definition TlsValidationContextFileTrust
        class TlsValidationContextFileTrust < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for CertificateChain
          def CertificateChain(value)
            dsl_attribute(:CertificateChain, value)
          end
        end

        # Property Definition ListenerTlsFileCertificate
        class ListenerTlsFileCertificate < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for CertificateChain
          def CertificateChain(value)
            dsl_attribute(:CertificateChain, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for PrivateKey
          def PrivateKey(value)
            dsl_attribute(:PrivateKey, value)
          end
        end

        # Property Definition ListenerTlsCertificate
        class ListenerTlsCertificate < PropertyType
          #   @param [ListenerTlsFileCertificate|JSONable] value
          #     The value to use for File
          # @@overload File(&block)
          #   Set :File from block via instance eval of a new ListenerTlsFileCertificate
          def File(value = nil, **value_hash, &block)
            dsl_attribute(:File, value, attr_class: ListenerTlsFileCertificate, **value_hash, &block)
          end

          #   @param [ListenerTlsAcmCertificate|JSONable] value
          #     The value to use for ACM
          # @@overload ACM(&block)
          #   Set :ACM from block via instance eval of a new ListenerTlsAcmCertificate
          def ACM(value = nil, **value_hash, &block)
            dsl_attribute(:ACM, value, attr_class: ListenerTlsAcmCertificate, **value_hash, &block)
          end
        end

        # Property Definition PortMapping
        class PortMapping < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Protocol
          def Protocol(value)
            dsl_attribute(:Protocol, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for Port
          def Port(value)
            dsl_attribute(:Port, value)
          end
        end

        # Property Definition TcpTimeout
        class TcpTimeout < PropertyType
          #   @param [Duration|JSONable] value
          #     The value to use for Idle
          # @@overload Idle(&block)
          #   Set :Idle from block via instance eval of a new Duration
          def Idle(value = nil, **value_hash, &block)
            dsl_attribute(:Idle, value, attr_class: Duration, **value_hash, &block)
          end
        end

        # Property Definition ListenerTls
        class ListenerTls < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Mode
          def Mode(value)
            dsl_attribute(:Mode, value)
          end

          #   @param [ListenerTlsCertificate|JSONable] value
          #     The value to use for Certificate
          # @@overload Certificate(&block)
          #   Set :Certificate from block via instance eval of a new ListenerTlsCertificate
          def Certificate(value = nil, **value_hash, &block)
            dsl_attribute(:Certificate, value, attr_class: ListenerTlsCertificate, **value_hash, &block)
          end
        end

        # Property Definition HttpTimeout
        class HttpTimeout < PropertyType
          #   @param [Duration|JSONable] value
          #     The value to use for PerRequest
          # @@overload PerRequest(&block)
          #   Set :PerRequest from block via instance eval of a new Duration
          def PerRequest(value = nil, **value_hash, &block)
            dsl_attribute(:PerRequest, value, attr_class: Duration, **value_hash, &block)
          end

          #   @param [Duration|JSONable] value
          #     The value to use for Idle
          # @@overload Idle(&block)
          #   Set :Idle from block via instance eval of a new Duration
          def Idle(value = nil, **value_hash, &block)
            dsl_attribute(:Idle, value, attr_class: Duration, **value_hash, &block)
          end
        end

        # Property Definition ServiceDiscovery
        class ServiceDiscovery < PropertyType
          #   @param [DnsServiceDiscovery|JSONable] value
          #     The value to use for DNS
          # @@overload DNS(&block)
          #   Set :DNS from block via instance eval of a new DnsServiceDiscovery
          def DNS(value = nil, **value_hash, &block)
            dsl_attribute(:DNS, value, attr_class: DnsServiceDiscovery, **value_hash, &block)
          end

          #   @param [AwsCloudMapServiceDiscovery|JSONable] value
          #     The value to use for AWSCloudMap
          # @@overload AWSCloudMap(&block)
          #   Set :AWSCloudMap from block via instance eval of a new AwsCloudMapServiceDiscovery
          def AWSCloudMap(value = nil, **value_hash, &block)
            dsl_attribute(:AWSCloudMap, value, attr_class: AwsCloudMapServiceDiscovery, **value_hash, &block)
          end
        end

        # Property Definition ListenerTlsAcmCertificate
        class ListenerTlsAcmCertificate < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for CertificateArn
          def CertificateArn(value)
            dsl_attribute(:CertificateArn, value)
          end
        end

        # Property Definition VirtualNodeSpec
        class VirtualNodeSpec < PropertyType
          #   @param [Logging|JSONable] value
          #     The value to use for Logging
          # @@overload Logging(&block)
          #   Set :Logging from block via instance eval of a new Logging
          def Logging(value = nil, **value_hash, &block)
            dsl_attribute(:Logging, value, attr_class: Logging, **value_hash, &block)
          end

          # @param [Array<Backend>|JSONable>] values
          #   The List of values to use for Backends
          def Backends(values)
            dsl_list_attribute(:Backends, values)
          end

          #  @param [Backend|JSONable] value  Append value to the List
          #    The List of values to use for Backends
          # @@overload Backend(&block)
          # Append value to the List from block via instance eval of a new Backend
          def Backend(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Backends, value, fn_if: fn_if, attr_class: Backend, **value_hash, &block)
          end

          # @param [Array<Listener>|JSONable>] values
          #   The List of values to use for Listeners
          def Listeners(values)
            dsl_list_attribute(:Listeners, values)
          end

          #  @param [Listener|JSONable] value  Append value to the List
          #    The List of values to use for Listeners
          # @@overload Listener(&block)
          # Append value to the List from block via instance eval of a new Listener
          def Listener(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Listeners, value, fn_if: fn_if, attr_class: Listener, **value_hash, &block)
          end

          #   @param [BackendDefaults|JSONable] value
          #     The value to use for BackendDefaults
          # @@overload BackendDefaults(&block)
          #   Set :BackendDefaults from block via instance eval of a new BackendDefaults
          def BackendDefaults(value = nil, **value_hash, &block)
            dsl_attribute(:BackendDefaults, value, attr_class: BackendDefaults, **value_hash, &block)
          end

          #   @param [ServiceDiscovery|JSONable] value
          #     The value to use for ServiceDiscovery
          # @@overload ServiceDiscovery(&block)
          #   Set :ServiceDiscovery from block via instance eval of a new ServiceDiscovery
          def ServiceDiscovery(value = nil, **value_hash, &block)
            dsl_attribute(:ServiceDiscovery, value, attr_class: ServiceDiscovery, **value_hash, &block)
          end
        end

        # Property Definition Logging
        class Logging < PropertyType
          #   @param [AccessLog|JSONable] value
          #     The value to use for AccessLog
          # @@overload AccessLog(&block)
          #   Set :AccessLog from block via instance eval of a new AccessLog
          def AccessLog(value = nil, **value_hash, &block)
            dsl_attribute(:AccessLog, value, attr_class: AccessLog, **value_hash, &block)
          end
        end

        # Property Definition DnsServiceDiscovery
        class DnsServiceDiscovery < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Hostname
          def Hostname(value)
            dsl_attribute(:Hostname, value)
          end
        end

        # Property Definition ClientPolicyTls
        class ClientPolicyTls < PropertyType
          #   @param [TlsValidationContext|JSONable] value
          #     The value to use for Validation
          # @@overload Validation(&block)
          #   Set :Validation from block via instance eval of a new TlsValidationContext
          def Validation(value = nil, **value_hash, &block)
            dsl_attribute(:Validation, value, attr_class: TlsValidationContext, **value_hash, &block)
          end

          # @param [Array<Integer>|JSONable>] values
          #   The List of values to use for Ports
          def Ports(values)
            dsl_list_attribute(:Ports, values)
          end

          #  @param [Integer|JSONable] value  Append value to the List
          #    The List of values to use for Ports
          def Port(value, fn_if: nil)
            dsl_push_attribute(:Ports, value, fn_if: fn_if)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for Enforce
          def Enforce(value)
            dsl_attribute(:Enforce, value)
          end
        end

        # Property Definition VirtualServiceBackend
        class VirtualServiceBackend < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for VirtualServiceName
          def VirtualServiceName(value)
            dsl_attribute(:VirtualServiceName, value)
          end

          #   @param [ClientPolicy|JSONable] value
          #     The value to use for ClientPolicy
          # @@overload ClientPolicy(&block)
          #   Set :ClientPolicy from block via instance eval of a new ClientPolicy
          def ClientPolicy(value = nil, **value_hash, &block)
            dsl_attribute(:ClientPolicy, value, attr_class: ClientPolicy, **value_hash, &block)
          end
        end

        # Property Definition AwsCloudMapServiceDiscovery
        class AwsCloudMapServiceDiscovery < PropertyType
          # @param [Array<AwsCloudMapInstanceAttribute>|JSONable>] values
          #   The List of values to use for Attributes
          def Attributes(values)
            dsl_list_attribute(:Attributes, values)
          end

          #  @param [AwsCloudMapInstanceAttribute|JSONable] value  Append value to the List
          #    The List of values to use for Attributes
          # @@overload Attribute(&block)
          # Append value to the List from block via instance eval of a new AwsCloudMapInstanceAttribute
          def Attribute(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Attributes, value, fn_if: fn_if, attr_class: AwsCloudMapInstanceAttribute, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for NamespaceName
          def NamespaceName(value)
            dsl_attribute(:NamespaceName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ServiceName
          def ServiceName(value)
            dsl_attribute(:ServiceName, value)
          end
        end

        # Property Definition TlsValidationContext
        class TlsValidationContext < PropertyType
          #   @param [TlsValidationContextTrust|JSONable] value
          #     The value to use for Trust
          # @@overload Trust(&block)
          #   Set :Trust from block via instance eval of a new TlsValidationContextTrust
          def Trust(value = nil, **value_hash, &block)
            dsl_attribute(:Trust, value, attr_class: TlsValidationContextTrust, **value_hash, &block)
          end
        end

        # Property Definition AwsCloudMapInstanceAttribute
        class AwsCloudMapInstanceAttribute < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end
        end

        # Property Definition BackendDefaults
        class BackendDefaults < PropertyType
          #   @param [ClientPolicy|JSONable] value
          #     The value to use for ClientPolicy
          # @@overload ClientPolicy(&block)
          #   Set :ClientPolicy from block via instance eval of a new ClientPolicy
          def ClientPolicy(value = nil, **value_hash, &block)
            dsl_attribute(:ClientPolicy, value, attr_class: ClientPolicy, **value_hash, &block)
          end
        end

        # Property Definition Duration
        class Duration < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Unit
          def Unit(value)
            dsl_attribute(:Unit, value)
          end
        end

        # Property Definition Backend
        class Backend < PropertyType
          #   @param [VirtualServiceBackend|JSONable] value
          #     The value to use for VirtualService
          # @@overload VirtualService(&block)
          #   Set :VirtualService from block via instance eval of a new VirtualServiceBackend
          def VirtualService(value = nil, **value_hash, &block)
            dsl_attribute(:VirtualService, value, attr_class: VirtualServiceBackend, **value_hash, &block)
          end
        end

        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for Uid
        def Uid(value)
          dsl_attribute(:Uid, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for MeshName
        def MeshName(value)
          dsl_attribute(:MeshName, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for MeshOwner
        def MeshOwner(value)
          dsl_attribute(:MeshOwner, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for ResourceOwner
        def ResourceOwner(value)
          dsl_attribute(:ResourceOwner, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Arn
        def Arn(value)
          dsl_attribute(:Arn, value)
        end

        #   @param [VirtualNodeSpec|JSONable] value
        #     The value to use for Spec
        # @@overload Spec(&block)
        #   Set :Spec from block via instance eval of a new VirtualNodeSpec
        def Spec(value = nil, **value_hash, &block)
          dsl_attribute(:Spec, value, attr_class: VirtualNodeSpec, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for VirtualNodeName
        def VirtualNodeName(value)
          dsl_attribute(:VirtualNodeName, value)
        end

        # @param [Array<Tag>|JSONable>] values
        #   The List of values to use for Tags
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    The List of values to use for Tags
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::AppMesh::VirtualNode]
    def AWS_AppMesh_VirtualNode(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::AppMesh::VirtualNode, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
