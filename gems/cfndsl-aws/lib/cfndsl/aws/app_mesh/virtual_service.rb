# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module AppMesh
      # Resource Type definition for AWS::AppMesh::VirtualService
      class VirtualService < ResourceType
        # Property Definition VirtualNodeServiceProvider
        class VirtualNodeServiceProvider < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for VirtualNodeName
          def VirtualNodeName(value)
            dsl_attribute(:VirtualNodeName, value)
          end
        end

        # Property Definition VirtualServiceProvider
        class VirtualServiceProvider < PropertyType
          #   @param [VirtualNodeServiceProvider|JSONable] value
          #     The value to use for VirtualNode
          # @@overload VirtualNode(&block)
          #   Set :VirtualNode from block via instance eval of a new VirtualNodeServiceProvider
          def VirtualNode(value = nil, **value_hash, &block)
            dsl_attribute(:VirtualNode, value, attr_class: VirtualNodeServiceProvider, **value_hash, &block)
          end

          #   @param [VirtualRouterServiceProvider|JSONable] value
          #     The value to use for VirtualRouter
          # @@overload VirtualRouter(&block)
          #   Set :VirtualRouter from block via instance eval of a new VirtualRouterServiceProvider
          def VirtualRouter(value = nil, **value_hash, &block)
            dsl_attribute(:VirtualRouter, value, attr_class: VirtualRouterServiceProvider, **value_hash, &block)
          end
        end

        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end
        end

        # Property Definition VirtualServiceSpec
        class VirtualServiceSpec < PropertyType
          #   @param [VirtualServiceProvider|JSONable] value
          #     The value to use for Provider
          # @@overload Provider(&block)
          #   Set :Provider from block via instance eval of a new VirtualServiceProvider
          def Provider(value = nil, **value_hash, &block)
            dsl_attribute(:Provider, value, attr_class: VirtualServiceProvider, **value_hash, &block)
          end
        end

        # Property Definition VirtualRouterServiceProvider
        class VirtualRouterServiceProvider < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for VirtualRouterName
          def VirtualRouterName(value)
            dsl_attribute(:VirtualRouterName, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for Uid
        def Uid(value)
          dsl_attribute(:Uid, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for MeshName
        def MeshName(value)
          dsl_attribute(:MeshName, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for MeshOwner
        def MeshOwner(value)
          dsl_attribute(:MeshOwner, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for ResourceOwner
        def ResourceOwner(value)
          dsl_attribute(:ResourceOwner, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for VirtualServiceName
        def VirtualServiceName(value)
          dsl_attribute(:VirtualServiceName, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Arn
        def Arn(value)
          dsl_attribute(:Arn, value)
        end

        #   @param [VirtualServiceSpec|JSONable] value
        #     The value to use for Spec
        # @@overload Spec(&block)
        #   Set :Spec from block via instance eval of a new VirtualServiceSpec
        def Spec(value = nil, **value_hash, &block)
          dsl_attribute(:Spec, value, attr_class: VirtualServiceSpec, **value_hash, &block)
        end

        # @param [Array<Tag>|JSONable>] values
        #   The List of values to use for Tags
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    The List of values to use for Tags
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::AppMesh::VirtualService]
    def AWS_AppMesh_VirtualService(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::AppMesh::VirtualService, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
