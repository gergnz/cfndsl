# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module AppMesh
      # Resource Type definition for AWS::AppMesh::VirtualRouter
      class VirtualRouter < ResourceType
        # Property Definition VirtualRouterSpec
        class VirtualRouterSpec < PropertyType
          # @param [Array<VirtualRouterListener>|JSONable>] values
          #   The List of values to use for Listeners
          def Listeners(values)
            dsl_list_attribute(:Listeners, values)
          end

          #  @param [VirtualRouterListener|JSONable] value  Append value to the List
          #    The List of values to use for Listeners
          # @@overload Listener(&block)
          # Append value to the List from block via instance eval of a new VirtualRouterListener
          def Listener(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Listeners, value, fn_if: fn_if, attr_class: VirtualRouterListener, **value_hash, &block)
          end
        end

        # Property Definition VirtualRouterListener
        class VirtualRouterListener < PropertyType
          #   @param [PortMapping|JSONable] value
          #     The value to use for PortMapping
          # @@overload PortMapping(&block)
          #   Set :PortMapping from block via instance eval of a new PortMapping
          def PortMapping(value = nil, **value_hash, &block)
            dsl_attribute(:PortMapping, value, attr_class: PortMapping, **value_hash, &block)
          end
        end

        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end
        end

        # Property Definition PortMapping
        class PortMapping < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Protocol
          def Protocol(value)
            dsl_attribute(:Protocol, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for Port
          def Port(value)
            dsl_attribute(:Port, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for Uid
        def Uid(value)
          dsl_attribute(:Uid, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for MeshName
        def MeshName(value)
          dsl_attribute(:MeshName, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for VirtualRouterName
        def VirtualRouterName(value)
          dsl_attribute(:VirtualRouterName, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for MeshOwner
        def MeshOwner(value)
          dsl_attribute(:MeshOwner, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for ResourceOwner
        def ResourceOwner(value)
          dsl_attribute(:ResourceOwner, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Arn
        def Arn(value)
          dsl_attribute(:Arn, value)
        end

        #   @param [VirtualRouterSpec|JSONable] value
        #     The value to use for Spec
        # @@overload Spec(&block)
        #   Set :Spec from block via instance eval of a new VirtualRouterSpec
        def Spec(value = nil, **value_hash, &block)
          dsl_attribute(:Spec, value, attr_class: VirtualRouterSpec, **value_hash, &block)
        end

        # @param [Array<Tag>|JSONable>] values
        #   The List of values to use for Tags
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    The List of values to use for Tags
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::AppMesh::VirtualRouter]
    def AWS_AppMesh_VirtualRouter(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::AppMesh::VirtualRouter, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
