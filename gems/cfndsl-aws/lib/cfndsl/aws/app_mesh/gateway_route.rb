# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module AppMesh
      # Resource Type definition for AWS::AppMesh::GatewayRoute
      class GatewayRoute < ResourceType
        # Property Definition GrpcGatewayRouteAction
        class GrpcGatewayRouteAction < PropertyType
          #   @param [GatewayRouteTarget|JSONable] value
          #     The value to use for Target
          # @@overload Target(&block)
          #   Set :Target from block via instance eval of a new GatewayRouteTarget
          def Target(value = nil, **value_hash, &block)
            dsl_attribute(:Target, value, attr_class: GatewayRouteTarget, **value_hash, &block)
          end
        end

        # Property Definition GatewayRouteVirtualService
        class GatewayRouteVirtualService < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for VirtualServiceName
          def VirtualServiceName(value)
            dsl_attribute(:VirtualServiceName, value)
          end
        end

        # Property Definition GatewayRouteTarget
        class GatewayRouteTarget < PropertyType
          #   @param [GatewayRouteVirtualService|JSONable] value
          #     The value to use for VirtualService
          # @@overload VirtualService(&block)
          #   Set :VirtualService from block via instance eval of a new GatewayRouteVirtualService
          def VirtualService(value = nil, **value_hash, &block)
            dsl_attribute(:VirtualService, value, attr_class: GatewayRouteVirtualService, **value_hash, &block)
          end
        end

        # Property Definition GrpcGatewayRouteMatch
        class GrpcGatewayRouteMatch < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ServiceName
          def ServiceName(value)
            dsl_attribute(:ServiceName, value)
          end
        end

        # Property Definition GrpcGatewayRoute
        class GrpcGatewayRoute < PropertyType
          #   @param [GrpcGatewayRouteAction|JSONable] value
          #     The value to use for Action
          # @@overload Action(&block)
          #   Set :Action from block via instance eval of a new GrpcGatewayRouteAction
          def Action(value = nil, **value_hash, &block)
            dsl_attribute(:Action, value, attr_class: GrpcGatewayRouteAction, **value_hash, &block)
          end

          #   @param [GrpcGatewayRouteMatch|JSONable] value
          #     The value to use for Match
          # @@overload Match(&block)
          #   Set :Match from block via instance eval of a new GrpcGatewayRouteMatch
          def Match(value = nil, **value_hash, &block)
            dsl_attribute(:Match, value, attr_class: GrpcGatewayRouteMatch, **value_hash, &block)
          end
        end

        # Property Definition GatewayRouteSpec
        class GatewayRouteSpec < PropertyType
          #   @param [HttpGatewayRoute|JSONable] value
          #     The value to use for HttpRoute
          # @@overload HttpRoute(&block)
          #   Set :HttpRoute from block via instance eval of a new HttpGatewayRoute
          def HttpRoute(value = nil, **value_hash, &block)
            dsl_attribute(:HttpRoute, value, attr_class: HttpGatewayRoute, **value_hash, &block)
          end

          #   @param [HttpGatewayRoute|JSONable] value
          #     The value to use for Http2Route
          # @@overload Http2Route(&block)
          #   Set :Http2Route from block via instance eval of a new HttpGatewayRoute
          def Http2Route(value = nil, **value_hash, &block)
            dsl_attribute(:Http2Route, value, attr_class: HttpGatewayRoute, **value_hash, &block)
          end

          #   @param [GrpcGatewayRoute|JSONable] value
          #     The value to use for GrpcRoute
          # @@overload GrpcRoute(&block)
          #   Set :GrpcRoute from block via instance eval of a new GrpcGatewayRoute
          def GrpcRoute(value = nil, **value_hash, &block)
            dsl_attribute(:GrpcRoute, value, attr_class: GrpcGatewayRoute, **value_hash, &block)
          end
        end

        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end
        end

        # Property Definition HttpGatewayRouteMatch
        class HttpGatewayRouteMatch < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Prefix
          def Prefix(value)
            dsl_attribute(:Prefix, value)
          end
        end

        # Property Definition HttpGatewayRouteAction
        class HttpGatewayRouteAction < PropertyType
          #   @param [GatewayRouteTarget|JSONable] value
          #     The value to use for Target
          # @@overload Target(&block)
          #   Set :Target from block via instance eval of a new GatewayRouteTarget
          def Target(value = nil, **value_hash, &block)
            dsl_attribute(:Target, value, attr_class: GatewayRouteTarget, **value_hash, &block)
          end
        end

        # Property Definition HttpGatewayRoute
        class HttpGatewayRoute < PropertyType
          #   @param [HttpGatewayRouteAction|JSONable] value
          #     The value to use for Action
          # @@overload Action(&block)
          #   Set :Action from block via instance eval of a new HttpGatewayRouteAction
          def Action(value = nil, **value_hash, &block)
            dsl_attribute(:Action, value, attr_class: HttpGatewayRouteAction, **value_hash, &block)
          end

          #   @param [HttpGatewayRouteMatch|JSONable] value
          #     The value to use for Match
          # @@overload Match(&block)
          #   Set :Match from block via instance eval of a new HttpGatewayRouteMatch
          def Match(value = nil, **value_hash, &block)
            dsl_attribute(:Match, value, attr_class: HttpGatewayRouteMatch, **value_hash, &block)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for Uid
        def Uid(value)
          dsl_attribute(:Uid, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for MeshName
        def MeshName(value)
          dsl_attribute(:MeshName, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for VirtualGatewayName
        def VirtualGatewayName(value)
          dsl_attribute(:VirtualGatewayName, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for MeshOwner
        def MeshOwner(value)
          dsl_attribute(:MeshOwner, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for ResourceOwner
        def ResourceOwner(value)
          dsl_attribute(:ResourceOwner, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for GatewayRouteName
        def GatewayRouteName(value)
          dsl_attribute(:GatewayRouteName, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Arn
        def Arn(value)
          dsl_attribute(:Arn, value)
        end

        #   @param [GatewayRouteSpec|JSONable] value
        #     The value to use for Spec
        # @@overload Spec(&block)
        #   Set :Spec from block via instance eval of a new GatewayRouteSpec
        def Spec(value = nil, **value_hash, &block)
          dsl_attribute(:Spec, value, attr_class: GatewayRouteSpec, **value_hash, &block)
        end

        # @param [Array<Tag>|JSONable>] values
        #   The List of values to use for Tags
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    The List of values to use for Tags
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::AppMesh::GatewayRoute]
    def AWS_AppMesh_GatewayRoute(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::AppMesh::GatewayRoute, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
