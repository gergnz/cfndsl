# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module Synthetics
      # Resource Type definition for AWS::Synthetics::Canary
      # @see https://github.com/aws-cloudformation/aws-cloudformation-resource-providers-synthetics
      class Canary < ResourceType
        # Property Definition Schedule
        class Schedule < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Expression
          def Expression(value)
            dsl_attribute(:Expression, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for DurationInSeconds
          def DurationInSeconds(value)
            dsl_attribute(:DurationInSeconds, value)
          end
        end

        # Property Definition Code
        class Code < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for S3Bucket
          def S3Bucket(value)
            dsl_attribute(:S3Bucket, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for S3Key
          def S3Key(value)
            dsl_attribute(:S3Key, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for S3ObjectVersion
          def S3ObjectVersion(value)
            dsl_attribute(:S3ObjectVersion, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Script
          def Script(value)
            dsl_attribute(:Script, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Handler
          def Handler(value)
            dsl_attribute(:Handler, value)
          end
        end

        # A key-value pair to associate with a resource.
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
          def Key(value)
            dsl_attribute(:Key, value)
          end

          #   @param [String|JSONable] value
          #     The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        # Property Definition VPCConfig
        class VPCConfig < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for VpcId
          def VpcId(value)
            dsl_attribute(:VpcId, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for SubnetIds
          def SubnetIds(values)
            dsl_list_attribute(:SubnetIds, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for SubnetIds
          def SubnetId(value, fn_if: nil)
            dsl_push_attribute(:SubnetIds, value, fn_if: fn_if)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for SecurityGroupIds
          def SecurityGroupIds(values)
            dsl_list_attribute(:SecurityGroupIds, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for SecurityGroupIds
          def SecurityGroupId(value, fn_if: nil)
            dsl_push_attribute(:SecurityGroupIds, value, fn_if: fn_if)
          end
        end

        # Property Definition RunConfig
        class RunConfig < PropertyType
          #   @param [Integer|JSONable] value
          #     Provide maximum canary timeout per run in seconds
          def TimeoutInSeconds(value)
            dsl_attribute(:TimeoutInSeconds, value)
          end

          #   @param [Integer|JSONable] value
          #     Provide maximum memory available for canary in MB
          def MemoryInMB(value)
            dsl_attribute(:MemoryInMB, value)
          end

          #   @param [Boolean|JSONable] value
          #     Enable active tracing if set to true
          def ActiveTracing(value)
            dsl_attribute(:ActiveTracing, value)
          end

          #   @param [Object|JSONable] value
          #     Environment variable key-value pairs.
          def EnvironmentVariables(value)
            dsl_attribute(:EnvironmentVariables, value)
          end
        end

        #   @param [String|JSONable] value
        #     Name of the canary.
        def Name(value)
          dsl_attribute(:Name, value)
        end

        #   @param [String|JSONable] value
        #     Id of the canary
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     State of the canary
        def State(value)
          dsl_attribute(:State, value)
        end

        #   @param [Code|JSONable] value
        #     Provide the canary script source
        # @@overload Code(&block)
        #   Set :Code from block via instance eval of a new Code
        def Code(value = nil, **value_hash, &block)
          dsl_attribute(:Code, value, attr_class: Code, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     Provide the s3 bucket output location for test results
        def ArtifactS3Location(value)
          dsl_attribute(:ArtifactS3Location, value)
        end

        #   @param [Schedule|JSONable] value
        #     Frequency to run your canaries
        # @@overload Schedule(&block)
        #   Set :Schedule from block via instance eval of a new Schedule
        def Schedule(value = nil, **value_hash, &block)
          dsl_attribute(:Schedule, value, attr_class: Schedule, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     Lambda Execution role used to run your canaries
        def ExecutionRoleArn(value)
          dsl_attribute(:ExecutionRoleArn, value)
        end

        #   @param [String|JSONable] value
        #     Runtime version of Synthetics Library
        def RuntimeVersion(value)
          dsl_attribute(:RuntimeVersion, value)
        end

        #   @param [Integer|JSONable] value
        #     Retention period of successful canary runs represented in number of days
        def SuccessRetentionPeriod(value)
          dsl_attribute(:SuccessRetentionPeriod, value)
        end

        #   @param [Integer|JSONable] value
        #     Retention period of failed canary runs represented in number of days
        def FailureRetentionPeriod(value)
          dsl_attribute(:FailureRetentionPeriod, value)
        end

        # @param [Array<Tag>|JSONable>] values
        #   The List of values to use for Tags
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    The List of values to use for Tags
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end

        #   @param [VPCConfig|JSONable] value
        #     Provide VPC Configuration if enabled.
        # @@overload VPCConfig(&block)
        #   Set :VPCConfig from block via instance eval of a new VPCConfig
        def VPCConfig(value = nil, **value_hash, &block)
          dsl_attribute(:VPCConfig, value, attr_class: VPCConfig, **value_hash, &block)
        end

        #   @param [RunConfig|JSONable] value
        #     Provide canary run configuration
        # @@overload RunConfig(&block)
        #   Set :RunConfig from block via instance eval of a new RunConfig
        def RunConfig(value = nil, **value_hash, &block)
          dsl_attribute(:RunConfig, value, attr_class: RunConfig, **value_hash, &block)
        end

        #   @param [Boolean|JSONable] value
        #     Runs canary if set to True. Default is False
        def StartCanaryAfterCreation(value)
          dsl_attribute(:StartCanaryAfterCreation, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::Synthetics::Canary]
    def AWS_Synthetics_Canary(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::Synthetics::Canary, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
