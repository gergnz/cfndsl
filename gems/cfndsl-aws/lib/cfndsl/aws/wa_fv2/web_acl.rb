# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module WAFv2
      # Contains the Rules that identify the requests that you want to allow, block, or count. In a WebACL, you also specify a default action (ALLOW or BLOCK), and the action for each Rule that you add to a WebACL, for example, block requests from specified IP addresses or block requests from specified referrers. You also associate the WebACL with a CloudFront distribution to identify the requests that you want AWS WAF to filter. If you add more than one Rule to a WebACL, a request needs to match only one of the specifications to be allowed, blocked, or counted.
      # @see https://github.com/aws-cloudformation/aws-cloudformation-resource-providers-wafv2.git
      class WebACL < ResourceType
        # Property Definition AndStatementOne
        class AndStatementOne < PropertyType
          # @param [Array<StatementTwo>|JSONable>] values
          #   The List of values to use for Statements
          def Statements(values)
            dsl_list_attribute(:Statements, values)
          end

          #  @param [StatementTwo|JSONable] value  Append value to the List
          #    The List of values to use for Statements
          # @@overload Statement(&block)
          # Append value to the List from block via instance eval of a new StatementTwo
          def Statement(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Statements, value, fn_if: fn_if, attr_class: StatementTwo, **value_hash, &block)
          end
        end

        # Property Definition AndStatementTwo
        class AndStatementTwo < PropertyType
          # @param [Array<StatementThree>|JSONable>] values
          #   The List of values to use for Statements
          def Statements(values)
            dsl_list_attribute(:Statements, values)
          end

          #  @param [StatementThree|JSONable] value  Append value to the List
          #    The List of values to use for Statements
          # @@overload Statement(&block)
          # Append value to the List from block via instance eval of a new StatementThree
          def Statement(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Statements, value, fn_if: fn_if, attr_class: StatementThree, **value_hash, &block)
          end
        end

        # Property Definition Body
        class Body < PropertyType
        end

        # Byte Match statement.
        class ByteMatchStatement < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for SearchString
          def SearchString(value)
            dsl_attribute(:SearchString, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for SearchStringBase64
          def SearchStringBase64(value)
            dsl_attribute(:SearchStringBase64, value)
          end

          #   @param [FieldToMatch|JSONable] value
          #     The value to use for FieldToMatch
          # @@overload FieldToMatch(&block)
          #   Set :FieldToMatch from block via instance eval of a new FieldToMatch
          def FieldToMatch(value = nil, **value_hash, &block)
            dsl_attribute(:FieldToMatch, value, attr_class: FieldToMatch, **value_hash, &block)
          end

          # @param [Array<TextTransformation>|JSONable>] values
          #   The List of values to use for TextTransformations
          def TextTransformations(values)
            dsl_list_attribute(:TextTransformations, values)
          end

          #  @param [TextTransformation|JSONable] value  Append value to the List
          #    The List of values to use for TextTransformations
          # @@overload TextTransformation(&block)
          # Append value to the List from block via instance eval of a new TextTransformation
          def TextTransformation(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:TextTransformations, value, fn_if: fn_if, attr_class: TextTransformation, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for PositionalConstraint
          def PositionalConstraint(value)
            dsl_attribute(:PositionalConstraint, value)
          end
        end

        # Default Action WebACL will take against ingress traffic when there is no matching Rule.
        class DefaultAction < PropertyType
          #   @param [AllowAction|JSONable] value
          #     The value to use for Allow
          # @@overload Allow(&block)
          #   Set :Allow from block via instance eval of a new AllowAction
          def Allow(value = nil, **value_hash, &block)
            dsl_attribute(:Allow, value, attr_class: AllowAction, **value_hash, &block)
          end

          #   @param [BlockAction|JSONable] value
          #     The value to use for Block
          # @@overload Block(&block)
          #   Set :Block from block via instance eval of a new BlockAction
          def Block(value = nil, **value_hash, &block)
            dsl_attribute(:Block, value, attr_class: BlockAction, **value_hash, &block)
          end
        end

        # Excluded Rule in the RuleGroup or ManagedRuleGroup will not be evaluated.
        class ExcludedRule < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end
        end

        # Field of the request to match.
        class FieldToMatch < PropertyType
          #   @param [Object|JSONable] value
          #     The value to use for SingleHeader
          def SingleHeader(value)
            dsl_attribute(:SingleHeader, value)
          end

          #   @param [Object|JSONable] value
          #     One query argument in a web request, identified by name, for example UserName or SalesRegion. The name can be up to 30 characters long and isn't case sensitive.
          def SingleQueryArgument(value)
            dsl_attribute(:SingleQueryArgument, value)
          end

          #   @param [Object|JSONable] value
          #     All query arguments of a web request.
          def AllQueryArguments(value)
            dsl_attribute(:AllQueryArguments, value)
          end

          #   @param [Object|JSONable] value
          #     The path component of the URI of a web request. This is the part of a web request that identifies a resource, for example, /images/daily-ad.jpg.
          def UriPath(value)
            dsl_attribute(:UriPath, value)
          end

          #   @param [Object|JSONable] value
          #     The query string of a web request. This is the part of a URL that appears after a ? character, if any.
          def QueryString(value)
            dsl_attribute(:QueryString, value)
          end

          #   @param [Object|JSONable] value
          #     The body of a web request. This immediately follows the request headers.
          def Body(value)
            dsl_attribute(:Body, value)
          end

          #   @param [Object|JSONable] value
          #     The HTTP method of a web request. The method indicates the type of operation that the request is asking the origin to perform.
          def Method(value)
            dsl_attribute(:Method, value)
          end
        end

        # Property Definition GeoMatchStatement
        class GeoMatchStatement < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for CountryCodes
          def CountryCodes(values)
            dsl_list_attribute(:CountryCodes, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for CountryCodes
          def CountryCode(value, fn_if: nil)
            dsl_push_attribute(:CountryCodes, value, fn_if: fn_if)
          end

          #   @param [ForwardedIPConfiguration|JSONable] value
          #     The value to use for ForwardedIPConfig
          # @@overload ForwardedIPConfig(&block)
          #   Set :ForwardedIPConfig from block via instance eval of a new ForwardedIPConfiguration
          def ForwardedIPConfig(value = nil, **value_hash, &block)
            dsl_attribute(:ForwardedIPConfig, value, attr_class: ForwardedIPConfiguration, **value_hash, &block)
          end
        end

        # Property Definition IPSetReferenceStatement
        class IPSetReferenceStatement < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Arn
          def Arn(value)
            dsl_attribute(:Arn, value)
          end

          #   @param [IPSetForwardedIPConfiguration|JSONable] value
          #     The value to use for IPSetForwardedIPConfig
          # @@overload IPSetForwardedIPConfig(&block)
          #   Set :IPSetForwardedIPConfig from block via instance eval of a new IPSetForwardedIPConfiguration
          def IPSetForwardedIPConfig(value = nil, **value_hash, &block)
            dsl_attribute(:IPSetForwardedIPConfig, value, attr_class: IPSetForwardedIPConfiguration, **value_hash, &block)
          end
        end

        # Property Definition ManagedRuleGroupStatement
        class ManagedRuleGroupStatement < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for VendorName
          def VendorName(value)
            dsl_attribute(:VendorName, value)
          end

          # @param [Array<ExcludedRule>|JSONable>] values
          #   The List of values to use for ExcludedRules
          def ExcludedRules(values)
            dsl_list_attribute(:ExcludedRules, values)
          end

          #  @param [ExcludedRule|JSONable] value  Append value to the List
          #    The List of values to use for ExcludedRules
          # @@overload ExcludedRule(&block)
          # Append value to the List from block via instance eval of a new ExcludedRule
          def ExcludedRule(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:ExcludedRules, value, fn_if: fn_if, attr_class: ExcludedRule, **value_hash, &block)
          end
        end

        # Property Definition Method
        class Method < PropertyType
        end

        # Property Definition NotStatementOne
        class NotStatementOne < PropertyType
          #   @param [StatementTwo|JSONable] value
          #     The value to use for Statement
          # @@overload Statement(&block)
          #   Set :Statement from block via instance eval of a new StatementTwo
          def Statement(value = nil, **value_hash, &block)
            dsl_attribute(:Statement, value, attr_class: StatementTwo, **value_hash, &block)
          end
        end

        # Property Definition NotStatementTwo
        class NotStatementTwo < PropertyType
          #   @param [StatementThree|JSONable] value
          #     The value to use for Statement
          # @@overload Statement(&block)
          #   Set :Statement from block via instance eval of a new StatementThree
          def Statement(value = nil, **value_hash, &block)
            dsl_attribute(:Statement, value, attr_class: StatementThree, **value_hash, &block)
          end
        end

        # Property Definition OrStatementOne
        class OrStatementOne < PropertyType
          # @param [Array<StatementTwo>|JSONable>] values
          #   The List of values to use for Statements
          def Statements(values)
            dsl_list_attribute(:Statements, values)
          end

          #  @param [StatementTwo|JSONable] value  Append value to the List
          #    The List of values to use for Statements
          # @@overload Statement(&block)
          # Append value to the List from block via instance eval of a new StatementTwo
          def Statement(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Statements, value, fn_if: fn_if, attr_class: StatementTwo, **value_hash, &block)
          end
        end

        # Property Definition OrStatementTwo
        class OrStatementTwo < PropertyType
          # @param [Array<StatementThree>|JSONable>] values
          #   The List of values to use for Statements
          def Statements(values)
            dsl_list_attribute(:Statements, values)
          end

          #  @param [StatementThree|JSONable] value  Append value to the List
          #    The List of values to use for Statements
          # @@overload Statement(&block)
          # Append value to the List from block via instance eval of a new StatementThree
          def Statement(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Statements, value, fn_if: fn_if, attr_class: StatementThree, **value_hash, &block)
          end
        end

        # Override a RuleGroup or ManagedRuleGroup behavior. This can only be applied to Rule that has RuleGroupReferenceStatement or ManagedRuleGroupReferenceStatement.
        class OverrideAction < PropertyType
          #   @param [Object|JSONable] value
          #     Count traffic towards application.
          def Count(value)
            dsl_attribute(:Count, value)
          end

          #   @param [Object|JSONable] value
          #     Keep the RuleGroup or ManagedRuleGroup behavior as is.
          def None(value)
            dsl_attribute(:None, value)
          end
        end

        # Property Definition QueryString
        class QueryString < PropertyType
        end

        # Property Definition RateBasedStatementOne
        class RateBasedStatementOne < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for Limit
          def Limit(value)
            dsl_attribute(:Limit, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for AggregateKeyType
          def AggregateKeyType(value)
            dsl_attribute(:AggregateKeyType, value)
          end

          #   @param [StatementTwo|JSONable] value
          #     The value to use for ScopeDownStatement
          # @@overload ScopeDownStatement(&block)
          #   Set :ScopeDownStatement from block via instance eval of a new StatementTwo
          def ScopeDownStatement(value = nil, **value_hash, &block)
            dsl_attribute(:ScopeDownStatement, value, attr_class: StatementTwo, **value_hash, &block)
          end

          #   @param [ForwardedIPConfiguration|JSONable] value
          #     The value to use for ForwardedIPConfig
          # @@overload ForwardedIPConfig(&block)
          #   Set :ForwardedIPConfig from block via instance eval of a new ForwardedIPConfiguration
          def ForwardedIPConfig(value = nil, **value_hash, &block)
            dsl_attribute(:ForwardedIPConfig, value, attr_class: ForwardedIPConfiguration, **value_hash, &block)
          end
        end

        # Property Definition RateBasedStatementTwo
        class RateBasedStatementTwo < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for Limit
          def Limit(value)
            dsl_attribute(:Limit, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for AggregateKeyType
          def AggregateKeyType(value)
            dsl_attribute(:AggregateKeyType, value)
          end

          #   @param [StatementThree|JSONable] value
          #     The value to use for ScopeDownStatement
          # @@overload ScopeDownStatement(&block)
          #   Set :ScopeDownStatement from block via instance eval of a new StatementThree
          def ScopeDownStatement(value = nil, **value_hash, &block)
            dsl_attribute(:ScopeDownStatement, value, attr_class: StatementThree, **value_hash, &block)
          end

          #   @param [ForwardedIPConfiguration|JSONable] value
          #     The value to use for ForwardedIPConfig
          # @@overload ForwardedIPConfig(&block)
          #   Set :ForwardedIPConfig from block via instance eval of a new ForwardedIPConfiguration
          def ForwardedIPConfig(value = nil, **value_hash, &block)
            dsl_attribute(:ForwardedIPConfig, value, attr_class: ForwardedIPConfiguration, **value_hash, &block)
          end
        end

        # Property Definition RegexPatternSetReferenceStatement
        class RegexPatternSetReferenceStatement < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Arn
          def Arn(value)
            dsl_attribute(:Arn, value)
          end

          #   @param [FieldToMatch|JSONable] value
          #     The value to use for FieldToMatch
          # @@overload FieldToMatch(&block)
          #   Set :FieldToMatch from block via instance eval of a new FieldToMatch
          def FieldToMatch(value = nil, **value_hash, &block)
            dsl_attribute(:FieldToMatch, value, attr_class: FieldToMatch, **value_hash, &block)
          end

          # @param [Array<TextTransformation>|JSONable>] values
          #   The List of values to use for TextTransformations
          def TextTransformations(values)
            dsl_list_attribute(:TextTransformations, values)
          end

          #  @param [TextTransformation|JSONable] value  Append value to the List
          #    The List of values to use for TextTransformations
          # @@overload TextTransformation(&block)
          # Append value to the List from block via instance eval of a new TextTransformation
          def TextTransformation(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:TextTransformations, value, fn_if: fn_if, attr_class: TextTransformation, **value_hash, &block)
          end
        end

        # Property Definition ForwardedIPConfiguration
        class ForwardedIPConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for HeaderName
          def HeaderName(value)
            dsl_attribute(:HeaderName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for FallbackBehavior
          def FallbackBehavior(value)
            dsl_attribute(:FallbackBehavior, value)
          end
        end

        # Property Definition IPSetForwardedIPConfiguration
        class IPSetForwardedIPConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for HeaderName
          def HeaderName(value)
            dsl_attribute(:HeaderName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for FallbackBehavior
          def FallbackBehavior(value)
            dsl_attribute(:FallbackBehavior, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Position
          def Position(value)
            dsl_attribute(:Position, value)
          end
        end

        # Rule of WebACL that contains condition and action.
        class Rule < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for Priority
          def Priority(value)
            dsl_attribute(:Priority, value)
          end

          #   @param [StatementOne|JSONable] value
          #     The value to use for Statement
          # @@overload Statement(&block)
          #   Set :Statement from block via instance eval of a new StatementOne
          def Statement(value = nil, **value_hash, &block)
            dsl_attribute(:Statement, value, attr_class: StatementOne, **value_hash, &block)
          end

          #   @param [RuleAction|JSONable] value
          #     The value to use for Action
          # @@overload Action(&block)
          #   Set :Action from block via instance eval of a new RuleAction
          def Action(value = nil, **value_hash, &block)
            dsl_attribute(:Action, value, attr_class: RuleAction, **value_hash, &block)
          end

          #   @param [OverrideAction|JSONable] value
          #     The value to use for OverrideAction
          # @@overload OverrideAction(&block)
          #   Set :OverrideAction from block via instance eval of a new OverrideAction
          def OverrideAction(value = nil, **value_hash, &block)
            dsl_attribute(:OverrideAction, value, attr_class: OverrideAction, **value_hash, &block)
          end

          #   @param [VisibilityConfig|JSONable] value
          #     The value to use for VisibilityConfig
          # @@overload VisibilityConfig(&block)
          #   Set :VisibilityConfig from block via instance eval of a new VisibilityConfig
          def VisibilityConfig(value = nil, **value_hash, &block)
            dsl_attribute(:VisibilityConfig, value, attr_class: VisibilityConfig, **value_hash, &block)
          end
        end

        # Action taken when Rule matches its condition.
        class RuleAction < PropertyType
          #   @param [AllowAction|JSONable] value
          #     The value to use for Allow
          # @@overload Allow(&block)
          #   Set :Allow from block via instance eval of a new AllowAction
          def Allow(value = nil, **value_hash, &block)
            dsl_attribute(:Allow, value, attr_class: AllowAction, **value_hash, &block)
          end

          #   @param [BlockAction|JSONable] value
          #     The value to use for Block
          # @@overload Block(&block)
          #   Set :Block from block via instance eval of a new BlockAction
          def Block(value = nil, **value_hash, &block)
            dsl_attribute(:Block, value, attr_class: BlockAction, **value_hash, &block)
          end

          #   @param [CountAction|JSONable] value
          #     The value to use for Count
          # @@overload Count(&block)
          #   Set :Count from block via instance eval of a new CountAction
          def Count(value = nil, **value_hash, &block)
            dsl_attribute(:Count, value, attr_class: CountAction, **value_hash, &block)
          end
        end

        # Allow traffic towards application.
        class AllowAction < PropertyType
          #   @param [CustomRequestHandling|JSONable] value
          #     The value to use for CustomRequestHandling
          # @@overload CustomRequestHandling(&block)
          #   Set :CustomRequestHandling from block via instance eval of a new CustomRequestHandling
          def CustomRequestHandling(value = nil, **value_hash, &block)
            dsl_attribute(:CustomRequestHandling, value, attr_class: CustomRequestHandling, **value_hash, &block)
          end
        end

        # Allow traffic towards application.
        class CountAction < PropertyType
          #   @param [CustomRequestHandling|JSONable] value
          #     The value to use for CustomRequestHandling
          # @@overload CustomRequestHandling(&block)
          #   Set :CustomRequestHandling from block via instance eval of a new CustomRequestHandling
          def CustomRequestHandling(value = nil, **value_hash, &block)
            dsl_attribute(:CustomRequestHandling, value, attr_class: CustomRequestHandling, **value_hash, &block)
          end
        end

        # Block traffic towards application.
        class BlockAction < PropertyType
          #   @param [CustomResponse|JSONable] value
          #     The value to use for CustomResponse
          # @@overload CustomResponse(&block)
          #   Set :CustomResponse from block via instance eval of a new CustomResponse
          def CustomResponse(value = nil, **value_hash, &block)
            dsl_attribute(:CustomResponse, value, attr_class: CustomResponse, **value_hash, &block)
          end
        end

        # HTTP header.
        class CustomHTTPHeader < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        # Custom request handling.
        class CustomRequestHandling < PropertyType
          # @param [Array<CustomHTTPHeader>|JSONable>] values
          #   Collection of HTTP headers.
          def InsertHeaders(values)
            dsl_list_attribute(:InsertHeaders, values)
          end

          #  @param [CustomHTTPHeader|JSONable] value  Append value to the List
          #    Collection of HTTP headers.
          # @@overload InsertHeader(&block)
          # Append value to the List from block via instance eval of a new CustomHTTPHeader
          def InsertHeader(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:InsertHeaders, value, fn_if: fn_if, attr_class: CustomHTTPHeader, **value_hash, &block)
          end
        end

        # Custom response body.
        class CustomResponseBody < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ContentType
          def ContentType(value)
            dsl_attribute(:ContentType, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Content
          def Content(value)
            dsl_attribute(:Content, value)
          end
        end

        # Custom response.
        class CustomResponse < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for ResponseCode
          def ResponseCode(value)
            dsl_attribute(:ResponseCode, value)
          end

          #   @param [String|JSONable] value
          #     Custom response body key.
          def CustomResponseBodyKey(value)
            dsl_attribute(:CustomResponseBodyKey, value)
          end

          # @param [Array<CustomHTTPHeader>|JSONable>] values
          #   Collection of HTTP headers.
          def ResponseHeaders(values)
            dsl_list_attribute(:ResponseHeaders, values)
          end

          #  @param [CustomHTTPHeader|JSONable] value  Append value to the List
          #    Collection of HTTP headers.
          # @@overload ResponseHeader(&block)
          # Append value to the List from block via instance eval of a new CustomHTTPHeader
          def ResponseHeader(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:ResponseHeaders, value, fn_if: fn_if, attr_class: CustomHTTPHeader, **value_hash, &block)
          end
        end

        # Custom response key and body map.
        class CustomResponseBodies < PropertyType
        end

        # Property Definition RuleGroupReferenceStatement
        class RuleGroupReferenceStatement < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Arn
          def Arn(value)
            dsl_attribute(:Arn, value)
          end

          # @param [Array<ExcludedRule>|JSONable>] values
          #   The List of values to use for ExcludedRules
          def ExcludedRules(values)
            dsl_list_attribute(:ExcludedRules, values)
          end

          #  @param [ExcludedRule|JSONable] value  Append value to the List
          #    The List of values to use for ExcludedRules
          # @@overload ExcludedRule(&block)
          # Append value to the List from block via instance eval of a new ExcludedRule
          def ExcludedRule(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:ExcludedRules, value, fn_if: fn_if, attr_class: ExcludedRule, **value_hash, &block)
          end
        end

        # Property Definition SingleHeader
        class SingleHeader < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end
        end

        # Property Definition SingleQueryArgument
        class SingleQueryArgument < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end
        end

        # Size Constraint statement.
        class SizeConstraintStatement < PropertyType
          #   @param [FieldToMatch|JSONable] value
          #     The value to use for FieldToMatch
          # @@overload FieldToMatch(&block)
          #   Set :FieldToMatch from block via instance eval of a new FieldToMatch
          def FieldToMatch(value = nil, **value_hash, &block)
            dsl_attribute(:FieldToMatch, value, attr_class: FieldToMatch, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for ComparisonOperator
          def ComparisonOperator(value)
            dsl_attribute(:ComparisonOperator, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for Size
          def Size(value)
            dsl_attribute(:Size, value)
          end

          # @param [Array<TextTransformation>|JSONable>] values
          #   The List of values to use for TextTransformations
          def TextTransformations(values)
            dsl_list_attribute(:TextTransformations, values)
          end

          #  @param [TextTransformation|JSONable] value  Append value to the List
          #    The List of values to use for TextTransformations
          # @@overload TextTransformation(&block)
          # Append value to the List from block via instance eval of a new TextTransformation
          def TextTransformation(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:TextTransformations, value, fn_if: fn_if, attr_class: TextTransformation, **value_hash, &block)
          end
        end

        # Sqli Match Statement.
        class SqliMatchStatement < PropertyType
          #   @param [FieldToMatch|JSONable] value
          #     The value to use for FieldToMatch
          # @@overload FieldToMatch(&block)
          #   Set :FieldToMatch from block via instance eval of a new FieldToMatch
          def FieldToMatch(value = nil, **value_hash, &block)
            dsl_attribute(:FieldToMatch, value, attr_class: FieldToMatch, **value_hash, &block)
          end

          # @param [Array<TextTransformation>|JSONable>] values
          #   The List of values to use for TextTransformations
          def TextTransformations(values)
            dsl_list_attribute(:TextTransformations, values)
          end

          #  @param [TextTransformation|JSONable] value  Append value to the List
          #    The List of values to use for TextTransformations
          # @@overload TextTransformation(&block)
          # Append value to the List from block via instance eval of a new TextTransformation
          def TextTransformation(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:TextTransformations, value, fn_if: fn_if, attr_class: TextTransformation, **value_hash, &block)
          end
        end

        # First level statement that contains conditions, such as ByteMatch, SizeConstraint, etc
        class StatementOne < PropertyType
          #   @param [ByteMatchStatement|JSONable] value
          #     The value to use for ByteMatchStatement
          # @@overload ByteMatchStatement(&block)
          #   Set :ByteMatchStatement from block via instance eval of a new ByteMatchStatement
          def ByteMatchStatement(value = nil, **value_hash, &block)
            dsl_attribute(:ByteMatchStatement, value, attr_class: ByteMatchStatement, **value_hash, &block)
          end

          #   @param [SqliMatchStatement|JSONable] value
          #     The value to use for SqliMatchStatement
          # @@overload SqliMatchStatement(&block)
          #   Set :SqliMatchStatement from block via instance eval of a new SqliMatchStatement
          def SqliMatchStatement(value = nil, **value_hash, &block)
            dsl_attribute(:SqliMatchStatement, value, attr_class: SqliMatchStatement, **value_hash, &block)
          end

          #   @param [XssMatchStatement|JSONable] value
          #     The value to use for XssMatchStatement
          # @@overload XssMatchStatement(&block)
          #   Set :XssMatchStatement from block via instance eval of a new XssMatchStatement
          def XssMatchStatement(value = nil, **value_hash, &block)
            dsl_attribute(:XssMatchStatement, value, attr_class: XssMatchStatement, **value_hash, &block)
          end

          #   @param [SizeConstraintStatement|JSONable] value
          #     The value to use for SizeConstraintStatement
          # @@overload SizeConstraintStatement(&block)
          #   Set :SizeConstraintStatement from block via instance eval of a new SizeConstraintStatement
          def SizeConstraintStatement(value = nil, **value_hash, &block)
            dsl_attribute(:SizeConstraintStatement, value, attr_class: SizeConstraintStatement, **value_hash, &block)
          end

          #   @param [GeoMatchStatement|JSONable] value
          #     The value to use for GeoMatchStatement
          # @@overload GeoMatchStatement(&block)
          #   Set :GeoMatchStatement from block via instance eval of a new GeoMatchStatement
          def GeoMatchStatement(value = nil, **value_hash, &block)
            dsl_attribute(:GeoMatchStatement, value, attr_class: GeoMatchStatement, **value_hash, &block)
          end

          #   @param [RuleGroupReferenceStatement|JSONable] value
          #     The value to use for RuleGroupReferenceStatement
          # @@overload RuleGroupReferenceStatement(&block)
          #   Set :RuleGroupReferenceStatement from block via instance eval of a new RuleGroupReferenceStatement
          def RuleGroupReferenceStatement(value = nil, **value_hash, &block)
            dsl_attribute(:RuleGroupReferenceStatement, value, attr_class: RuleGroupReferenceStatement, **value_hash, &block)
          end

          #   @param [IPSetReferenceStatement|JSONable] value
          #     The value to use for IPSetReferenceStatement
          # @@overload IPSetReferenceStatement(&block)
          #   Set :IPSetReferenceStatement from block via instance eval of a new IPSetReferenceStatement
          def IPSetReferenceStatement(value = nil, **value_hash, &block)
            dsl_attribute(:IPSetReferenceStatement, value, attr_class: IPSetReferenceStatement, **value_hash, &block)
          end

          #   @param [RegexPatternSetReferenceStatement|JSONable] value
          #     The value to use for RegexPatternSetReferenceStatement
          # @@overload RegexPatternSetReferenceStatement(&block)
          #   Set :RegexPatternSetReferenceStatement from block via instance eval of a new RegexPatternSetReferenceStatement
          def RegexPatternSetReferenceStatement(value = nil, **value_hash, &block)
            dsl_attribute(:RegexPatternSetReferenceStatement, value, attr_class: RegexPatternSetReferenceStatement, **value_hash, &block)
          end

          #   @param [ManagedRuleGroupStatement|JSONable] value
          #     The value to use for ManagedRuleGroupStatement
          # @@overload ManagedRuleGroupStatement(&block)
          #   Set :ManagedRuleGroupStatement from block via instance eval of a new ManagedRuleGroupStatement
          def ManagedRuleGroupStatement(value = nil, **value_hash, &block)
            dsl_attribute(:ManagedRuleGroupStatement, value, attr_class: ManagedRuleGroupStatement, **value_hash, &block)
          end

          #   @param [RateBasedStatementOne|JSONable] value
          #     The value to use for RateBasedStatement
          # @@overload RateBasedStatement(&block)
          #   Set :RateBasedStatement from block via instance eval of a new RateBasedStatementOne
          def RateBasedStatement(value = nil, **value_hash, &block)
            dsl_attribute(:RateBasedStatement, value, attr_class: RateBasedStatementOne, **value_hash, &block)
          end

          #   @param [AndStatementOne|JSONable] value
          #     The value to use for AndStatement
          # @@overload AndStatement(&block)
          #   Set :AndStatement from block via instance eval of a new AndStatementOne
          def AndStatement(value = nil, **value_hash, &block)
            dsl_attribute(:AndStatement, value, attr_class: AndStatementOne, **value_hash, &block)
          end

          #   @param [OrStatementOne|JSONable] value
          #     The value to use for OrStatement
          # @@overload OrStatement(&block)
          #   Set :OrStatement from block via instance eval of a new OrStatementOne
          def OrStatement(value = nil, **value_hash, &block)
            dsl_attribute(:OrStatement, value, attr_class: OrStatementOne, **value_hash, &block)
          end

          #   @param [NotStatementOne|JSONable] value
          #     The value to use for NotStatement
          # @@overload NotStatement(&block)
          #   Set :NotStatement from block via instance eval of a new NotStatementOne
          def NotStatement(value = nil, **value_hash, &block)
            dsl_attribute(:NotStatement, value, attr_class: NotStatementOne, **value_hash, &block)
          end
        end

        # Property Definition StatementTwo
        class StatementTwo < PropertyType
          #   @param [ByteMatchStatement|JSONable] value
          #     The value to use for ByteMatchStatement
          # @@overload ByteMatchStatement(&block)
          #   Set :ByteMatchStatement from block via instance eval of a new ByteMatchStatement
          def ByteMatchStatement(value = nil, **value_hash, &block)
            dsl_attribute(:ByteMatchStatement, value, attr_class: ByteMatchStatement, **value_hash, &block)
          end

          #   @param [SqliMatchStatement|JSONable] value
          #     The value to use for SqliMatchStatement
          # @@overload SqliMatchStatement(&block)
          #   Set :SqliMatchStatement from block via instance eval of a new SqliMatchStatement
          def SqliMatchStatement(value = nil, **value_hash, &block)
            dsl_attribute(:SqliMatchStatement, value, attr_class: SqliMatchStatement, **value_hash, &block)
          end

          #   @param [XssMatchStatement|JSONable] value
          #     The value to use for XssMatchStatement
          # @@overload XssMatchStatement(&block)
          #   Set :XssMatchStatement from block via instance eval of a new XssMatchStatement
          def XssMatchStatement(value = nil, **value_hash, &block)
            dsl_attribute(:XssMatchStatement, value, attr_class: XssMatchStatement, **value_hash, &block)
          end

          #   @param [SizeConstraintStatement|JSONable] value
          #     The value to use for SizeConstraintStatement
          # @@overload SizeConstraintStatement(&block)
          #   Set :SizeConstraintStatement from block via instance eval of a new SizeConstraintStatement
          def SizeConstraintStatement(value = nil, **value_hash, &block)
            dsl_attribute(:SizeConstraintStatement, value, attr_class: SizeConstraintStatement, **value_hash, &block)
          end

          #   @param [GeoMatchStatement|JSONable] value
          #     The value to use for GeoMatchStatement
          # @@overload GeoMatchStatement(&block)
          #   Set :GeoMatchStatement from block via instance eval of a new GeoMatchStatement
          def GeoMatchStatement(value = nil, **value_hash, &block)
            dsl_attribute(:GeoMatchStatement, value, attr_class: GeoMatchStatement, **value_hash, &block)
          end

          #   @param [RuleGroupReferenceStatement|JSONable] value
          #     The value to use for RuleGroupReferenceStatement
          # @@overload RuleGroupReferenceStatement(&block)
          #   Set :RuleGroupReferenceStatement from block via instance eval of a new RuleGroupReferenceStatement
          def RuleGroupReferenceStatement(value = nil, **value_hash, &block)
            dsl_attribute(:RuleGroupReferenceStatement, value, attr_class: RuleGroupReferenceStatement, **value_hash, &block)
          end

          #   @param [IPSetReferenceStatement|JSONable] value
          #     The value to use for IPSetReferenceStatement
          # @@overload IPSetReferenceStatement(&block)
          #   Set :IPSetReferenceStatement from block via instance eval of a new IPSetReferenceStatement
          def IPSetReferenceStatement(value = nil, **value_hash, &block)
            dsl_attribute(:IPSetReferenceStatement, value, attr_class: IPSetReferenceStatement, **value_hash, &block)
          end

          #   @param [RegexPatternSetReferenceStatement|JSONable] value
          #     The value to use for RegexPatternSetReferenceStatement
          # @@overload RegexPatternSetReferenceStatement(&block)
          #   Set :RegexPatternSetReferenceStatement from block via instance eval of a new RegexPatternSetReferenceStatement
          def RegexPatternSetReferenceStatement(value = nil, **value_hash, &block)
            dsl_attribute(:RegexPatternSetReferenceStatement, value, attr_class: RegexPatternSetReferenceStatement, **value_hash, &block)
          end

          #   @param [ManagedRuleGroupStatement|JSONable] value
          #     The value to use for ManagedRuleGroupStatement
          # @@overload ManagedRuleGroupStatement(&block)
          #   Set :ManagedRuleGroupStatement from block via instance eval of a new ManagedRuleGroupStatement
          def ManagedRuleGroupStatement(value = nil, **value_hash, &block)
            dsl_attribute(:ManagedRuleGroupStatement, value, attr_class: ManagedRuleGroupStatement, **value_hash, &block)
          end

          #   @param [RateBasedStatementTwo|JSONable] value
          #     The value to use for RateBasedStatement
          # @@overload RateBasedStatement(&block)
          #   Set :RateBasedStatement from block via instance eval of a new RateBasedStatementTwo
          def RateBasedStatement(value = nil, **value_hash, &block)
            dsl_attribute(:RateBasedStatement, value, attr_class: RateBasedStatementTwo, **value_hash, &block)
          end

          #   @param [AndStatementTwo|JSONable] value
          #     The value to use for AndStatement
          # @@overload AndStatement(&block)
          #   Set :AndStatement from block via instance eval of a new AndStatementTwo
          def AndStatement(value = nil, **value_hash, &block)
            dsl_attribute(:AndStatement, value, attr_class: AndStatementTwo, **value_hash, &block)
          end

          #   @param [OrStatementTwo|JSONable] value
          #     The value to use for OrStatement
          # @@overload OrStatement(&block)
          #   Set :OrStatement from block via instance eval of a new OrStatementTwo
          def OrStatement(value = nil, **value_hash, &block)
            dsl_attribute(:OrStatement, value, attr_class: OrStatementTwo, **value_hash, &block)
          end

          #   @param [NotStatementTwo|JSONable] value
          #     The value to use for NotStatement
          # @@overload NotStatement(&block)
          #   Set :NotStatement from block via instance eval of a new NotStatementTwo
          def NotStatement(value = nil, **value_hash, &block)
            dsl_attribute(:NotStatement, value, attr_class: NotStatementTwo, **value_hash, &block)
          end
        end

        # Property Definition StatementThree
        class StatementThree < PropertyType
          #   @param [ByteMatchStatement|JSONable] value
          #     The value to use for ByteMatchStatement
          # @@overload ByteMatchStatement(&block)
          #   Set :ByteMatchStatement from block via instance eval of a new ByteMatchStatement
          def ByteMatchStatement(value = nil, **value_hash, &block)
            dsl_attribute(:ByteMatchStatement, value, attr_class: ByteMatchStatement, **value_hash, &block)
          end

          #   @param [SqliMatchStatement|JSONable] value
          #     The value to use for SqliMatchStatement
          # @@overload SqliMatchStatement(&block)
          #   Set :SqliMatchStatement from block via instance eval of a new SqliMatchStatement
          def SqliMatchStatement(value = nil, **value_hash, &block)
            dsl_attribute(:SqliMatchStatement, value, attr_class: SqliMatchStatement, **value_hash, &block)
          end

          #   @param [XssMatchStatement|JSONable] value
          #     The value to use for XssMatchStatement
          # @@overload XssMatchStatement(&block)
          #   Set :XssMatchStatement from block via instance eval of a new XssMatchStatement
          def XssMatchStatement(value = nil, **value_hash, &block)
            dsl_attribute(:XssMatchStatement, value, attr_class: XssMatchStatement, **value_hash, &block)
          end

          #   @param [SizeConstraintStatement|JSONable] value
          #     The value to use for SizeConstraintStatement
          # @@overload SizeConstraintStatement(&block)
          #   Set :SizeConstraintStatement from block via instance eval of a new SizeConstraintStatement
          def SizeConstraintStatement(value = nil, **value_hash, &block)
            dsl_attribute(:SizeConstraintStatement, value, attr_class: SizeConstraintStatement, **value_hash, &block)
          end

          #   @param [GeoMatchStatement|JSONable] value
          #     The value to use for GeoMatchStatement
          # @@overload GeoMatchStatement(&block)
          #   Set :GeoMatchStatement from block via instance eval of a new GeoMatchStatement
          def GeoMatchStatement(value = nil, **value_hash, &block)
            dsl_attribute(:GeoMatchStatement, value, attr_class: GeoMatchStatement, **value_hash, &block)
          end

          #   @param [RuleGroupReferenceStatement|JSONable] value
          #     The value to use for RuleGroupReferenceStatement
          # @@overload RuleGroupReferenceStatement(&block)
          #   Set :RuleGroupReferenceStatement from block via instance eval of a new RuleGroupReferenceStatement
          def RuleGroupReferenceStatement(value = nil, **value_hash, &block)
            dsl_attribute(:RuleGroupReferenceStatement, value, attr_class: RuleGroupReferenceStatement, **value_hash, &block)
          end

          #   @param [IPSetReferenceStatement|JSONable] value
          #     The value to use for IPSetReferenceStatement
          # @@overload IPSetReferenceStatement(&block)
          #   Set :IPSetReferenceStatement from block via instance eval of a new IPSetReferenceStatement
          def IPSetReferenceStatement(value = nil, **value_hash, &block)
            dsl_attribute(:IPSetReferenceStatement, value, attr_class: IPSetReferenceStatement, **value_hash, &block)
          end

          #   @param [RegexPatternSetReferenceStatement|JSONable] value
          #     The value to use for RegexPatternSetReferenceStatement
          # @@overload RegexPatternSetReferenceStatement(&block)
          #   Set :RegexPatternSetReferenceStatement from block via instance eval of a new RegexPatternSetReferenceStatement
          def RegexPatternSetReferenceStatement(value = nil, **value_hash, &block)
            dsl_attribute(:RegexPatternSetReferenceStatement, value, attr_class: RegexPatternSetReferenceStatement, **value_hash, &block)
          end

          #   @param [ManagedRuleGroupStatement|JSONable] value
          #     The value to use for ManagedRuleGroupStatement
          # @@overload ManagedRuleGroupStatement(&block)
          #   Set :ManagedRuleGroupStatement from block via instance eval of a new ManagedRuleGroupStatement
          def ManagedRuleGroupStatement(value = nil, **value_hash, &block)
            dsl_attribute(:ManagedRuleGroupStatement, value, attr_class: ManagedRuleGroupStatement, **value_hash, &block)
          end
        end

        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        # Text Transformation on the Search String before match.
        class TextTransformation < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for Priority
          def Priority(value)
            dsl_attribute(:Priority, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Type
          def Type(value)
            dsl_attribute(:Type, value)
          end
        end

        # Property Definition UriPath
        class UriPath < PropertyType
        end

        # Visibility Metric of the WebACL.
        class VisibilityConfig < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for SampledRequestsEnabled
          def SampledRequestsEnabled(value)
            dsl_attribute(:SampledRequestsEnabled, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for CloudWatchMetricsEnabled
          def CloudWatchMetricsEnabled(value)
            dsl_attribute(:CloudWatchMetricsEnabled, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for MetricName
          def MetricName(value)
            dsl_attribute(:MetricName, value)
          end
        end

        # Xss Match Statement.
        class XssMatchStatement < PropertyType
          #   @param [FieldToMatch|JSONable] value
          #     The value to use for FieldToMatch
          # @@overload FieldToMatch(&block)
          #   Set :FieldToMatch from block via instance eval of a new FieldToMatch
          def FieldToMatch(value = nil, **value_hash, &block)
            dsl_attribute(:FieldToMatch, value, attr_class: FieldToMatch, **value_hash, &block)
          end

          # @param [Array<TextTransformation>|JSONable>] values
          #   The List of values to use for TextTransformations
          def TextTransformations(values)
            dsl_list_attribute(:TextTransformations, values)
          end

          #  @param [TextTransformation|JSONable] value  Append value to the List
          #    The List of values to use for TextTransformations
          # @@overload TextTransformation(&block)
          # Append value to the List from block via instance eval of a new TextTransformation
          def TextTransformation(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:TextTransformations, value, fn_if: fn_if, attr_class: TextTransformation, **value_hash, &block)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for Arn
        def Arn(value)
          dsl_attribute(:Arn, value)
        end

        #   @param [Integer|JSONable] value
        #     The value to use for Capacity
        def Capacity(value)
          dsl_attribute(:Capacity, value)
        end

        #   @param [DefaultAction|JSONable] value
        #     The value to use for DefaultAction
        # @@overload DefaultAction(&block)
        #   Set :DefaultAction from block via instance eval of a new DefaultAction
        def DefaultAction(value = nil, **value_hash, &block)
          dsl_attribute(:DefaultAction, value, attr_class: DefaultAction, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Description
        def Description(value)
          dsl_attribute(:Description, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Name
        def Name(value)
          dsl_attribute(:Name, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Scope
        def Scope(value)
          dsl_attribute(:Scope, value)
        end

        # @param [Array<Rule>|JSONable>] values
        #   Collection of Rules.
        def Rules(values)
          dsl_list_attribute(:Rules, values)
        end

        #  @param [Rule|JSONable] value  Append value to the List
        #    Collection of Rules.
        # @@overload Rule(&block)
        # Append value to the List from block via instance eval of a new Rule
        def Rule(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Rules, value, fn_if: fn_if, attr_class: Rule, **value_hash, &block)
        end

        #   @param [VisibilityConfig|JSONable] value
        #     The value to use for VisibilityConfig
        # @@overload VisibilityConfig(&block)
        #   Set :VisibilityConfig from block via instance eval of a new VisibilityConfig
        def VisibilityConfig(value = nil, **value_hash, &block)
          dsl_attribute(:VisibilityConfig, value, attr_class: VisibilityConfig, **value_hash, &block)
        end

        # @param [Array<Tag>|JSONable>] values
        #   The List of values to use for Tags
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    The List of values to use for Tags
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end

        #   @param [CustomResponseBodies|JSONable] value
        #     The value to use for CustomResponseBodies
        # @@overload CustomResponseBodies(&block)
        #   Set :CustomResponseBodies from block via instance eval of a new CustomResponseBodies
        def CustomResponseBodies(value = nil, **value_hash, &block)
          dsl_attribute(:CustomResponseBodies, value, attr_class: CustomResponseBodies, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::WAFv2::WebACL]
    def AWS_WAFv2_WebACL(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::WAFv2::WebACL, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
