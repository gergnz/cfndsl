# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module DMS
      # Resource Type definition for AWS::DMS::Endpoint
      class Endpoint < ResourceType
        # Property Definition KinesisSettings
        class KinesisSettings < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for MessageFormat
          def MessageFormat(value)
            dsl_attribute(:MessageFormat, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for StreamArn
          def StreamArn(value)
            dsl_attribute(:StreamArn, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ServiceAccessRoleArn
          def ServiceAccessRoleArn(value)
            dsl_attribute(:ServiceAccessRoleArn, value)
          end
        end

        # Property Definition KafkaSettings
        class KafkaSettings < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Topic
          def Topic(value)
            dsl_attribute(:Topic, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Broker
          def Broker(value)
            dsl_attribute(:Broker, value)
          end
        end

        # Property Definition NeptuneSettings
        class NeptuneSettings < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for MaxRetryCount
          def MaxRetryCount(value)
            dsl_attribute(:MaxRetryCount, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for MaxFileSize
          def MaxFileSize(value)
            dsl_attribute(:MaxFileSize, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for S3BucketFolder
          def S3BucketFolder(value)
            dsl_attribute(:S3BucketFolder, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for ErrorRetryDuration
          def ErrorRetryDuration(value)
            dsl_attribute(:ErrorRetryDuration, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for IamAuthEnabled
          def IamAuthEnabled(value)
            dsl_attribute(:IamAuthEnabled, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for S3BucketName
          def S3BucketName(value)
            dsl_attribute(:S3BucketName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ServiceAccessRoleArn
          def ServiceAccessRoleArn(value)
            dsl_attribute(:ServiceAccessRoleArn, value)
          end
        end

        # Property Definition ElasticsearchSettings
        class ElasticsearchSettings < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for EndpointUri
          def EndpointUri(value)
            dsl_attribute(:EndpointUri, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for ErrorRetryDuration
          def ErrorRetryDuration(value)
            dsl_attribute(:ErrorRetryDuration, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for FullLoadErrorPercentage
          def FullLoadErrorPercentage(value)
            dsl_attribute(:FullLoadErrorPercentage, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ServiceAccessRoleArn
          def ServiceAccessRoleArn(value)
            dsl_attribute(:ServiceAccessRoleArn, value)
          end
        end

        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end
        end

        # Property Definition S3Settings
        class S3Settings < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ExternalTableDefinition
          def ExternalTableDefinition(value)
            dsl_attribute(:ExternalTableDefinition, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for BucketName
          def BucketName(value)
            dsl_attribute(:BucketName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for BucketFolder
          def BucketFolder(value)
            dsl_attribute(:BucketFolder, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for CsvRowDelimiter
          def CsvRowDelimiter(value)
            dsl_attribute(:CsvRowDelimiter, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for CsvDelimiter
          def CsvDelimiter(value)
            dsl_attribute(:CsvDelimiter, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ServiceAccessRoleArn
          def ServiceAccessRoleArn(value)
            dsl_attribute(:ServiceAccessRoleArn, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for CompressionType
          def CompressionType(value)
            dsl_attribute(:CompressionType, value)
          end
        end

        # Property Definition DynamoDbSettings
        class DynamoDbSettings < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ServiceAccessRoleArn
          def ServiceAccessRoleArn(value)
            dsl_attribute(:ServiceAccessRoleArn, value)
          end
        end

        # Property Definition MongoDbSettings
        class MongoDbSettings < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for AuthSource
          def AuthSource(value)
            dsl_attribute(:AuthSource, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for AuthMechanism
          def AuthMechanism(value)
            dsl_attribute(:AuthMechanism, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Username
          def Username(value)
            dsl_attribute(:Username, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for DocsToInvestigate
          def DocsToInvestigate(value)
            dsl_attribute(:DocsToInvestigate, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ServerName
          def ServerName(value)
            dsl_attribute(:ServerName, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for Port
          def Port(value)
            dsl_attribute(:Port, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ExtractDocId
          def ExtractDocId(value)
            dsl_attribute(:ExtractDocId, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for DatabaseName
          def DatabaseName(value)
            dsl_attribute(:DatabaseName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for AuthType
          def AuthType(value)
            dsl_attribute(:AuthType, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Password
          def Password(value)
            dsl_attribute(:Password, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for NestingLevel
          def NestingLevel(value)
            dsl_attribute(:NestingLevel, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for KmsKeyId
        def KmsKeyId(value)
          dsl_attribute(:KmsKeyId, value)
        end

        #   @param [KafkaSettings|JSONable] value
        #     The value to use for KafkaSettings
        # @@overload KafkaSettings(&block)
        #   Set :KafkaSettings from block via instance eval of a new KafkaSettings
        def KafkaSettings(value = nil, **value_hash, &block)
          dsl_attribute(:KafkaSettings, value, attr_class: KafkaSettings, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for ExternalId
        def ExternalId(value)
          dsl_attribute(:ExternalId, value)
        end

        #   @param [Integer|JSONable] value
        #     The value to use for Port
        def Port(value)
          dsl_attribute(:Port, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for DatabaseName
        def DatabaseName(value)
          dsl_attribute(:DatabaseName, value)
        end

        #   @param [NeptuneSettings|JSONable] value
        #     The value to use for NeptuneSettings
        # @@overload NeptuneSettings(&block)
        #   Set :NeptuneSettings from block via instance eval of a new NeptuneSettings
        def NeptuneSettings(value = nil, **value_hash, &block)
          dsl_attribute(:NeptuneSettings, value, attr_class: NeptuneSettings, **value_hash, &block)
        end

        #   @param [ElasticsearchSettings|JSONable] value
        #     The value to use for ElasticsearchSettings
        # @@overload ElasticsearchSettings(&block)
        #   Set :ElasticsearchSettings from block via instance eval of a new ElasticsearchSettings
        def ElasticsearchSettings(value = nil, **value_hash, &block)
          dsl_attribute(:ElasticsearchSettings, value, attr_class: ElasticsearchSettings, **value_hash, &block)
        end

        #   @param [S3Settings|JSONable] value
        #     The value to use for S3Settings
        # @@overload S3Settings(&block)
        #   Set :S3Settings from block via instance eval of a new S3Settings
        def S3Settings(value = nil, **value_hash, &block)
          dsl_attribute(:S3Settings, value, attr_class: S3Settings, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for EngineName
        def EngineName(value)
          dsl_attribute(:EngineName, value)
        end

        #   @param [DynamoDbSettings|JSONable] value
        #     The value to use for DynamoDbSettings
        # @@overload DynamoDbSettings(&block)
        #   Set :DynamoDbSettings from block via instance eval of a new DynamoDbSettings
        def DynamoDbSettings(value = nil, **value_hash, &block)
          dsl_attribute(:DynamoDbSettings, value, attr_class: DynamoDbSettings, **value_hash, &block)
        end

        #   @param [KinesisSettings|JSONable] value
        #     The value to use for KinesisSettings
        # @@overload KinesisSettings(&block)
        #   Set :KinesisSettings from block via instance eval of a new KinesisSettings
        def KinesisSettings(value = nil, **value_hash, &block)
          dsl_attribute(:KinesisSettings, value, attr_class: KinesisSettings, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Username
        def Username(value)
          dsl_attribute(:Username, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for SslMode
        def SslMode(value)
          dsl_attribute(:SslMode, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for ServerName
        def ServerName(value)
          dsl_attribute(:ServerName, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for ExtraConnectionAttributes
        def ExtraConnectionAttributes(value)
          dsl_attribute(:ExtraConnectionAttributes, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for EndpointType
        def EndpointType(value)
          dsl_attribute(:EndpointType, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        # @param [Array<Tag>|JSONable>] values
        #   The List of values to use for Tags
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    The List of values to use for Tags
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for EndpointIdentifier
        def EndpointIdentifier(value)
          dsl_attribute(:EndpointIdentifier, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Password
        def Password(value)
          dsl_attribute(:Password, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for CertificateArn
        def CertificateArn(value)
          dsl_attribute(:CertificateArn, value)
        end

        #   @param [MongoDbSettings|JSONable] value
        #     The value to use for MongoDbSettings
        # @@overload MongoDbSettings(&block)
        #   Set :MongoDbSettings from block via instance eval of a new MongoDbSettings
        def MongoDbSettings(value = nil, **value_hash, &block)
          dsl_attribute(:MongoDbSettings, value, attr_class: MongoDbSettings, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::DMS::Endpoint]
    def AWS_DMS_Endpoint(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::DMS::Endpoint, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
