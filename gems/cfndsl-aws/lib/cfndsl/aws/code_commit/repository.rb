# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module CodeCommit
      # Resource Type definition for AWS::CodeCommit::Repository
      class Repository < ResourceType
        # Property Definition S3
        class S3 < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ObjectVersion
          def ObjectVersion(value)
            dsl_attribute(:ObjectVersion, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Bucket
          def Bucket(value)
            dsl_attribute(:Bucket, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end
        end

        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end
        end

        # Property Definition RepositoryTrigger
        class RepositoryTrigger < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for CustomData
          def CustomData(value)
            dsl_attribute(:CustomData, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Events
          def Events(values)
            dsl_list_attribute(:Events, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Events
          def Event(value, fn_if: nil)
            dsl_push_attribute(:Events, value, fn_if: fn_if)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Branches
          def Branches(values)
            dsl_list_attribute(:Branches, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Branches
          def Branch(value, fn_if: nil)
            dsl_push_attribute(:Branches, value, fn_if: fn_if)
          end

          #   @param [String|JSONable] value
          #     The value to use for DestinationArn
          def DestinationArn(value)
            dsl_attribute(:DestinationArn, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end
        end

        # Property Definition Code
        class Code < PropertyType
          #   @param [S3|JSONable] value
          #     The value to use for S3
          # @@overload S3(&block)
          #   Set :S3 from block via instance eval of a new S3
          def S3(value = nil, **value_hash, &block)
            dsl_attribute(:S3, value, attr_class: S3, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for BranchName
          def BranchName(value)
            dsl_attribute(:BranchName, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for CloneUrlHttp
        def CloneUrlHttp(value)
          dsl_attribute(:CloneUrlHttp, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for CloneUrlSsh
        def CloneUrlSsh(value)
          dsl_attribute(:CloneUrlSsh, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for RepositoryName
        def RepositoryName(value)
          dsl_attribute(:RepositoryName, value)
        end

        # @param [Array<RepositoryTrigger>|JSONable>] values
        #   The List of values to use for Triggers
        def Triggers(values)
          dsl_list_attribute(:Triggers, values)
        end

        #  @param [RepositoryTrigger|JSONable] value  Append value to the List
        #    The List of values to use for Triggers
        # @@overload Trigger(&block)
        # Append value to the List from block via instance eval of a new RepositoryTrigger
        def Trigger(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Triggers, value, fn_if: fn_if, attr_class: RepositoryTrigger, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Arn
        def Arn(value)
          dsl_attribute(:Arn, value)
        end

        #   @param [Code|JSONable] value
        #     The value to use for Code
        # @@overload Code(&block)
        #   Set :Code from block via instance eval of a new Code
        def Code(value = nil, **value_hash, &block)
          dsl_attribute(:Code, value, attr_class: Code, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for RepositoryDescription
        def RepositoryDescription(value)
          dsl_attribute(:RepositoryDescription, value)
        end

        # @param [Array<Tag>|JSONable>] values
        #   The List of values to use for Tags
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    The List of values to use for Tags
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Name
        def Name(value)
          dsl_attribute(:Name, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::CodeCommit::Repository]
    def AWS_CodeCommit_Repository(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::CodeCommit::Repository, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
