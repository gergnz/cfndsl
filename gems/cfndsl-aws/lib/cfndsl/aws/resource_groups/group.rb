# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module ResourceGroups
      # Schema for ResourceGroups::Group
      # @see https://github.com/aws-cloudformation/aws-cloudformation-rpdk.git
      class Group < ResourceType
        # Property Definition ResourceQuery
        class ResourceQuery < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Type
          def Type(value)
            dsl_attribute(:Type, value)
          end

          #   @param [Query|JSONable] value
          #     The value to use for Query
          # @@overload Query(&block)
          #   Set :Query from block via instance eval of a new Query
          def Query(value = nil, **value_hash, &block)
            dsl_attribute(:Query, value, attr_class: Query, **value_hash, &block)
          end
        end

        # Property Definition Query
        class Query < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for ResourceTypeFilters
          def ResourceTypeFilters(values)
            dsl_list_attribute(:ResourceTypeFilters, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for ResourceTypeFilters
          def ResourceTypeFilter(value, fn_if: nil)
            dsl_push_attribute(:ResourceTypeFilters, value, fn_if: fn_if)
          end

          #   @param [String|JSONable] value
          #     The value to use for StackIdentifier
          def StackIdentifier(value)
            dsl_attribute(:StackIdentifier, value)
          end

          # @param [Array<TagFilter>|JSONable>] values
          #   The List of values to use for TagFilters
          def TagFilters(values)
            dsl_list_attribute(:TagFilters, values)
          end

          #  @param [TagFilter|JSONable] value  Append value to the List
          #    The List of values to use for TagFilters
          # @@overload TagFilter(&block)
          # Append value to the List from block via instance eval of a new TagFilter
          def TagFilter(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:TagFilters, value, fn_if: fn_if, attr_class: TagFilter, **value_hash, &block)
          end
        end

        # Property Definition TagFilter
        class TagFilter < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Values
          def Values(values)
            dsl_list_attribute(:Values, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Values
          def Value(value, fn_if: nil)
            dsl_push_attribute(:Values, value, fn_if: fn_if)
          end
        end

        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        #   @param [String|JSONable] value
        #     The name of the resource group
        def Name(value)
          dsl_attribute(:Name, value)
        end

        #   @param [String|JSONable] value
        #     The description of the resource group
        def Description(value)
          dsl_attribute(:Description, value)
        end

        #   @param [ResourceQuery|JSONable] value
        #     The value to use for ResourceQuery
        # @@overload ResourceQuery(&block)
        #   Set :ResourceQuery from block via instance eval of a new ResourceQuery
        def ResourceQuery(value = nil, **value_hash, &block)
          dsl_attribute(:ResourceQuery, value, attr_class: ResourceQuery, **value_hash, &block)
        end

        # @param [Array<Tag>|JSONable>] values
        #   The List of values to use for Tags
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    The List of values to use for Tags
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The Resource Group ARN.
        def Arn(value)
          dsl_attribute(:Arn, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::ResourceGroups::Group]
    def AWS_ResourceGroups_Group(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::ResourceGroups::Group, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
