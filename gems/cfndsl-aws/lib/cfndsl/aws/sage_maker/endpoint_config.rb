# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module SageMaker
      # Resource Type definition for AWS::SageMaker::EndpointConfig
      class EndpointConfig < ResourceType
        # Property Definition DataCaptureConfig
        class DataCaptureConfig < PropertyType
          # @param [Array<CaptureOption>|JSONable>] values
          #   The List of values to use for CaptureOptions
          def CaptureOptions(values)
            dsl_list_attribute(:CaptureOptions, values)
          end

          #  @param [CaptureOption|JSONable] value  Append value to the List
          #    The List of values to use for CaptureOptions
          # @@overload CaptureOption(&block)
          # Append value to the List from block via instance eval of a new CaptureOption
          def CaptureOption(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:CaptureOptions, value, fn_if: fn_if, attr_class: CaptureOption, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for KmsKeyId
          def KmsKeyId(value)
            dsl_attribute(:KmsKeyId, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for DestinationS3Uri
          def DestinationS3Uri(value)
            dsl_attribute(:DestinationS3Uri, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for InitialSamplingPercentage
          def InitialSamplingPercentage(value)
            dsl_attribute(:InitialSamplingPercentage, value)
          end

          #   @param [CaptureContentTypeHeader|JSONable] value
          #     The value to use for CaptureContentTypeHeader
          # @@overload CaptureContentTypeHeader(&block)
          #   Set :CaptureContentTypeHeader from block via instance eval of a new CaptureContentTypeHeader
          def CaptureContentTypeHeader(value = nil, **value_hash, &block)
            dsl_attribute(:CaptureContentTypeHeader, value, attr_class: CaptureContentTypeHeader, **value_hash, &block)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for EnableCapture
          def EnableCapture(value)
            dsl_attribute(:EnableCapture, value)
          end
        end

        # Property Definition ProductionVariant
        class ProductionVariant < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ModelName
          def ModelName(value)
            dsl_attribute(:ModelName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for VariantName
          def VariantName(value)
            dsl_attribute(:VariantName, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for InitialInstanceCount
          def InitialInstanceCount(value)
            dsl_attribute(:InitialInstanceCount, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for InstanceType
          def InstanceType(value)
            dsl_attribute(:InstanceType, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for AcceleratorType
          def AcceleratorType(value)
            dsl_attribute(:AcceleratorType, value)
          end

          #   @param [Number|JSONable] value
          #     The value to use for InitialVariantWeight
          def InitialVariantWeight(value)
            dsl_attribute(:InitialVariantWeight, value)
          end
        end

        # Property Definition CaptureContentTypeHeader
        class CaptureContentTypeHeader < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for CsvContentTypes
          def CsvContentTypes(values)
            dsl_list_attribute(:CsvContentTypes, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for CsvContentTypes
          def CsvContentTyp(value, fn_if: nil)
            dsl_push_attribute(:CsvContentTypes, value, fn_if: fn_if)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for JsonContentTypes
          def JsonContentTypes(values)
            dsl_list_attribute(:JsonContentTypes, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for JsonContentTypes
          def JsonContentTyp(value, fn_if: nil)
            dsl_push_attribute(:JsonContentTypes, value, fn_if: fn_if)
          end
        end

        # Property Definition CaptureOption
        class CaptureOption < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for CaptureMode
          def CaptureMode(value)
            dsl_attribute(:CaptureMode, value)
          end
        end

        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end
        end

        #   @param [DataCaptureConfig|JSONable] value
        #     The value to use for DataCaptureConfig
        # @@overload DataCaptureConfig(&block)
        #   Set :DataCaptureConfig from block via instance eval of a new DataCaptureConfig
        def DataCaptureConfig(value = nil, **value_hash, &block)
          dsl_attribute(:DataCaptureConfig, value, attr_class: DataCaptureConfig, **value_hash, &block)
        end

        # @param [Array<ProductionVariant>|JSONable>] values
        #   The List of values to use for ProductionVariants
        def ProductionVariants(values)
          dsl_list_attribute(:ProductionVariants, values)
        end

        #  @param [ProductionVariant|JSONable] value  Append value to the List
        #    The List of values to use for ProductionVariants
        # @@overload ProductionVariant(&block)
        # Append value to the List from block via instance eval of a new ProductionVariant
        def ProductionVariant(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:ProductionVariants, value, fn_if: fn_if, attr_class: ProductionVariant, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for KmsKeyId
        def KmsKeyId(value)
          dsl_attribute(:KmsKeyId, value)
        end

        # @param [Array<Tag>|JSONable>] values
        #   The List of values to use for Tags
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    The List of values to use for Tags
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for EndpointConfigName
        def EndpointConfigName(value)
          dsl_attribute(:EndpointConfigName, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::SageMaker::EndpointConfig]
    def AWS_SageMaker_EndpointConfig(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::SageMaker::EndpointConfig, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
