# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module SageMaker
      # Resource Type definition for AWS::SageMaker::Model
      class Model < ResourceType
        # Property Definition VpcConfig
        class VpcConfig < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for SecurityGroupIds
          def SecurityGroupIds(values)
            dsl_list_attribute(:SecurityGroupIds, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for SecurityGroupIds
          def SecurityGroupId(value, fn_if: nil)
            dsl_push_attribute(:SecurityGroupIds, value, fn_if: fn_if)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Subnets
          def Subnets(values)
            dsl_list_attribute(:Subnets, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Subnets
          def Subnet(value, fn_if: nil)
            dsl_push_attribute(:Subnets, value, fn_if: fn_if)
          end
        end

        # Property Definition ContainerDefinition
        class ContainerDefinition < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ContainerHostname
          def ContainerHostname(value)
            dsl_attribute(:ContainerHostname, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ModelPackageName
          def ModelPackageName(value)
            dsl_attribute(:ModelPackageName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Mode
          def Mode(value)
            dsl_attribute(:Mode, value)
          end

          #   @param [Object|JSONable] value
          #     The value to use for Environment
          def Environment(value)
            dsl_attribute(:Environment, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ModelDataUrl
          def ModelDataUrl(value)
            dsl_attribute(:ModelDataUrl, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Image
          def Image(value)
            dsl_attribute(:Image, value)
          end
        end

        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for ExecutionRoleArn
        def ExecutionRoleArn(value)
          dsl_attribute(:ExecutionRoleArn, value)
        end

        #   @param [ContainerDefinition|JSONable] value
        #     The value to use for PrimaryContainer
        # @@overload PrimaryContainer(&block)
        #   Set :PrimaryContainer from block via instance eval of a new ContainerDefinition
        def PrimaryContainer(value = nil, **value_hash, &block)
          dsl_attribute(:PrimaryContainer, value, attr_class: ContainerDefinition, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for ModelName
        def ModelName(value)
          dsl_attribute(:ModelName, value)
        end

        #   @param [VpcConfig|JSONable] value
        #     The value to use for VpcConfig
        # @@overload VpcConfig(&block)
        #   Set :VpcConfig from block via instance eval of a new VpcConfig
        def VpcConfig(value = nil, **value_hash, &block)
          dsl_attribute(:VpcConfig, value, attr_class: VpcConfig, **value_hash, &block)
        end

        # @param [Array<ContainerDefinition>|JSONable>] values
        #   The List of values to use for Containers
        def Containers(values)
          dsl_list_attribute(:Containers, values)
        end

        #  @param [ContainerDefinition|JSONable] value  Append value to the List
        #    The List of values to use for Containers
        # @@overload Container(&block)
        # Append value to the List from block via instance eval of a new ContainerDefinition
        def Container(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Containers, value, fn_if: fn_if, attr_class: ContainerDefinition, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        # @param [Array<Tag>|JSONable>] values
        #   The List of values to use for Tags
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    The List of values to use for Tags
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::SageMaker::Model]
    def AWS_SageMaker_Model(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::SageMaker::Model, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
