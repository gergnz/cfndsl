# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module SageMaker
      # Resource Type definition for AWS::SageMaker::MonitoringSchedule
      class MonitoringSchedule < ResourceType
        # The configuration object that specifies the monitoring schedule and defines the monitoring job.
        class MonitoringScheduleConfig < PropertyType
          #   @param [MonitoringJobDefinition|JSONable] value
          #     The value to use for MonitoringJobDefinition
          # @@overload MonitoringJobDefinition(&block)
          #   Set :MonitoringJobDefinition from block via instance eval of a new MonitoringJobDefinition
          def MonitoringJobDefinition(value = nil, **value_hash, &block)
            dsl_attribute(:MonitoringJobDefinition, value, attr_class: MonitoringJobDefinition, **value_hash, &block)
          end

          #   @param [ScheduleConfig|JSONable] value
          #     The value to use for ScheduleConfig
          # @@overload ScheduleConfig(&block)
          #   Set :ScheduleConfig from block via instance eval of a new ScheduleConfig
          def ScheduleConfig(value = nil, **value_hash, &block)
            dsl_attribute(:ScheduleConfig, value, attr_class: ScheduleConfig, **value_hash, &block)
          end
        end

        # Defines the monitoring job.
        class MonitoringJobDefinition < PropertyType
          #   @param [BaselineConfig|JSONable] value
          #     The value to use for BaselineConfig
          # @@overload BaselineConfig(&block)
          #   Set :BaselineConfig from block via instance eval of a new BaselineConfig
          def BaselineConfig(value = nil, **value_hash, &block)
            dsl_attribute(:BaselineConfig, value, attr_class: BaselineConfig, **value_hash, &block)
          end

          #   @param [Environment|JSONable] value
          #     The value to use for Environment
          # @@overload Environment(&block)
          #   Set :Environment from block via instance eval of a new Environment
          def Environment(value = nil, **value_hash, &block)
            dsl_attribute(:Environment, value, attr_class: Environment, **value_hash, &block)
          end

          #   @param [MonitoringAppSpecification|JSONable] value
          #     The value to use for MonitoringAppSpecification
          # @@overload MonitoringAppSpecification(&block)
          #   Set :MonitoringAppSpecification from block via instance eval of a new MonitoringAppSpecification
          def MonitoringAppSpecification(value = nil, **value_hash, &block)
            dsl_attribute(:MonitoringAppSpecification, value, attr_class: MonitoringAppSpecification, **value_hash, &block)
          end

          # @param [Array<MonitoringInput>|JSONable>] values
          #   The List of values to use for MonitoringInputs
          def MonitoringInputs(values)
            dsl_list_attribute(:MonitoringInputs, values)
          end

          #  @param [MonitoringInput|JSONable] value  Append value to the List
          #    The List of values to use for MonitoringInputs
          # @@overload MonitoringInput(&block)
          # Append value to the List from block via instance eval of a new MonitoringInput
          def MonitoringInput(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:MonitoringInputs, value, fn_if: fn_if, attr_class: MonitoringInput, **value_hash, &block)
          end

          #   @param [MonitoringOutputConfig|JSONable] value
          #     The value to use for MonitoringOutputConfig
          # @@overload MonitoringOutputConfig(&block)
          #   Set :MonitoringOutputConfig from block via instance eval of a new MonitoringOutputConfig
          def MonitoringOutputConfig(value = nil, **value_hash, &block)
            dsl_attribute(:MonitoringOutputConfig, value, attr_class: MonitoringOutputConfig, **value_hash, &block)
          end

          #   @param [MonitoringResources|JSONable] value
          #     The value to use for MonitoringResources
          # @@overload MonitoringResources(&block)
          #   Set :MonitoringResources from block via instance eval of a new MonitoringResources
          def MonitoringResources(value = nil, **value_hash, &block)
            dsl_attribute(:MonitoringResources, value, attr_class: MonitoringResources, **value_hash, &block)
          end

          #   @param [NetworkConfig|JSONable] value
          #     The value to use for NetworkConfig
          # @@overload NetworkConfig(&block)
          #   Set :NetworkConfig from block via instance eval of a new NetworkConfig
          def NetworkConfig(value = nil, **value_hash, &block)
            dsl_attribute(:NetworkConfig, value, attr_class: NetworkConfig, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.
          def RoleArn(value)
            dsl_attribute(:RoleArn, value)
          end

          #   @param [StoppingCondition|JSONable] value
          #     The value to use for StoppingCondition
          # @@overload StoppingCondition(&block)
          #   Set :StoppingCondition from block via instance eval of a new StoppingCondition
          def StoppingCondition(value = nil, **value_hash, &block)
            dsl_attribute(:StoppingCondition, value, attr_class: StoppingCondition, **value_hash, &block)
          end
        end

        # Baseline configuration used to validate that the data conforms to the specified constraints and statistics.
        class BaselineConfig < PropertyType
          #   @param [ConstraintsResource|JSONable] value
          #     The value to use for ConstraintsResource
          # @@overload ConstraintsResource(&block)
          #   Set :ConstraintsResource from block via instance eval of a new ConstraintsResource
          def ConstraintsResource(value = nil, **value_hash, &block)
            dsl_attribute(:ConstraintsResource, value, attr_class: ConstraintsResource, **value_hash, &block)
          end

          #   @param [StatisticsResource|JSONable] value
          #     The value to use for StatisticsResource
          # @@overload StatisticsResource(&block)
          #   Set :StatisticsResource from block via instance eval of a new StatisticsResource
          def StatisticsResource(value = nil, **value_hash, &block)
            dsl_attribute(:StatisticsResource, value, attr_class: StatisticsResource, **value_hash, &block)
          end
        end

        # The baseline constraints resource for a monitoring job.
        class ConstraintsResource < PropertyType
          #   @param [String|JSONable] value
          #     The Amazon S3 URI for baseline constraint file in Amazon S3 that the current monitoring job should validated against.
          def S3Uri(value)
            dsl_attribute(:S3Uri, value)
          end
        end

        # The baseline statistics resource for a monitoring job.
        class StatisticsResource < PropertyType
          #   @param [String|JSONable] value
          #     The Amazon S3 URI for the baseline statistics file in Amazon S3 that the current monitoring job should be validated against.
          def S3Uri(value)
            dsl_attribute(:S3Uri, value)
          end
        end

        # Sets the environment variables in the Docker container
        class Environment < PropertyType
        end

        # Container image configuration object for the monitoring job.
        class MonitoringAppSpecification < PropertyType
          # @param [Array<String>|JSONable>] values
          #   An array of arguments for the container used to run the monitoring job.
          def ContainerArguments(values)
            dsl_list_attribute(:ContainerArguments, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    An array of arguments for the container used to run the monitoring job.
          def ContainerArgument(value, fn_if: nil)
            dsl_push_attribute(:ContainerArguments, value, fn_if: fn_if)
          end

          # @param [Array<String>|JSONable>] values
          #   Specifies the entrypoint for a container used to run the monitoring job.
          def ContainerEntrypoints(values)
            dsl_list_attribute(:ContainerEntrypoint, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    Specifies the entrypoint for a container used to run the monitoring job.
          def ContainerEntrypoint(value, fn_if: nil)
            dsl_push_attribute(:ContainerEntrypoint, value, fn_if: fn_if)
          end

          #   @param [String|JSONable] value
          #     The container image to be run by the monitoring job.
          def ImageUri(value)
            dsl_attribute(:ImageUri, value)
          end

          #   @param [String|JSONable] value
          #     An Amazon S3 URI to a script that is called after analysis has been performed. Applicable only for the built-in (first party) containers.
          def PostAnalyticsProcessorSourceUri(value)
            dsl_attribute(:PostAnalyticsProcessorSourceUri, value)
          end

          #   @param [String|JSONable] value
          #     An Amazon S3 URI to a script that is called per row prior to running analysis. It can base64 decode the payload and convert it into a flatted json so that the built-in container can use the converted data. Applicable only for the built-in (first party) containers
          def RecordPreprocessorSourceUri(value)
            dsl_attribute(:RecordPreprocessorSourceUri, value)
          end
        end

        # The inputs for a monitoring job.
        class MonitoringInput < PropertyType
          #   @param [EndpointInput|JSONable] value
          #     The value to use for EndpointInput
          # @@overload EndpointInput(&block)
          #   Set :EndpointInput from block via instance eval of a new EndpointInput
          def EndpointInput(value = nil, **value_hash, &block)
            dsl_attribute(:EndpointInput, value, attr_class: EndpointInput, **value_hash, &block)
          end
        end

        # The endpoint for a monitoring job.
        class EndpointInput < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for EndpointName
          def EndpointName(value)
            dsl_attribute(:EndpointName, value)
          end

          #   @param [String|JSONable] value
          #     Path to the filesystem where the endpoint data is available to the container.
          def LocalPath(value)
            dsl_attribute(:LocalPath, value)
          end

          #   @param [String|JSONable] value
          #     Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
          def S3DataDistributionType(value)
            dsl_attribute(:S3DataDistributionType, value)
          end

          #   @param [String|JSONable] value
          #     Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
          def S3InputMode(value)
            dsl_attribute(:S3InputMode, value)
          end
        end

        # The output configuration for monitoring jobs.
        class MonitoringOutputConfig < PropertyType
          #   @param [String|JSONable] value
          #     The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.
          def KmsKeyId(value)
            dsl_attribute(:KmsKeyId, value)
          end

          # @param [Array<MonitoringOutput>|JSONable>] values
          #   Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded.
          def MonitoringOutputs(values)
            dsl_list_attribute(:MonitoringOutputs, values)
          end

          #  @param [MonitoringOutput|JSONable] value  Append value to the List
          #    Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded.
          # @@overload MonitoringOutput(&block)
          # Append value to the List from block via instance eval of a new MonitoringOutput
          def MonitoringOutput(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:MonitoringOutputs, value, fn_if: fn_if, attr_class: MonitoringOutput, **value_hash, &block)
          end
        end

        # The output object for a monitoring job.
        class MonitoringOutput < PropertyType
          #   @param [S3Output|JSONable] value
          #     The value to use for S3Output
          # @@overload S3Output(&block)
          #   Set :S3Output from block via instance eval of a new S3Output
          def S3Output(value = nil, **value_hash, &block)
            dsl_attribute(:S3Output, value, attr_class: S3Output, **value_hash, &block)
          end
        end

        # Information about where and how to store the results of a monitoring job.
        class S3Output < PropertyType
          #   @param [String|JSONable] value
          #     The local path to the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job. LocalPath is an absolute path for the output data.
          def LocalPath(value)
            dsl_attribute(:LocalPath, value)
          end

          #   @param [String|JSONable] value
          #     Whether to upload the results of the monitoring job continuously or after the job completes.
          def S3UploadMode(value)
            dsl_attribute(:S3UploadMode, value)
          end

          #   @param [String|JSONable] value
          #     A URI that identifies the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job.
          def S3Uri(value)
            dsl_attribute(:S3Uri, value)
          end
        end

        # Identifies the resources to deploy for a monitoring job.
        class MonitoringResources < PropertyType
          #   @param [ClusterConfig|JSONable] value
          #     The value to use for ClusterConfig
          # @@overload ClusterConfig(&block)
          #   Set :ClusterConfig from block via instance eval of a new ClusterConfig
          def ClusterConfig(value = nil, **value_hash, &block)
            dsl_attribute(:ClusterConfig, value, attr_class: ClusterConfig, **value_hash, &block)
          end
        end

        # Configuration for the cluster used to run model monitoring jobs.
        class ClusterConfig < PropertyType
          #   @param [Integer|JSONable] value
          #     The number of ML compute instances to use in the model monitoring job. For distributed processing jobs, specify a value greater than 1. The default value is 1.
          def InstanceCount(value)
            dsl_attribute(:InstanceCount, value)
          end

          #   @param [String|JSONable] value
          #     The ML compute instance type for the processing job.
          def InstanceType(value)
            dsl_attribute(:InstanceType, value)
          end

          #   @param [String|JSONable] value
          #     The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job.
          def VolumeKmsKeyId(value)
            dsl_attribute(:VolumeKmsKeyId, value)
          end

          #   @param [Integer|JSONable] value
          #     The size of the ML storage volume, in gigabytes, that you want to provision. You must specify sufficient ML storage for your scenario.
          def VolumeSizeInGB(value)
            dsl_attribute(:VolumeSizeInGB, value)
          end
        end

        # Networking options for a job, such as network traffic encryption between containers, whether to allow inbound and outbound network calls to and from containers, and the VPC subnets and security groups to use for VPC-enabled jobs.
        class NetworkConfig < PropertyType
          #   @param [Boolean|JSONable] value
          #     Whether to encrypt all communications between distributed processing jobs. Choose True to encrypt communications. Encryption provides greater security for distributed processing jobs, but the processing might take longer.
          def EnableInterContainerTrafficEncryption(value)
            dsl_attribute(:EnableInterContainerTrafficEncryption, value)
          end

          #   @param [Boolean|JSONable] value
          #     Whether to allow inbound and outbound network calls to and from the containers used for the processing job.
          def EnableNetworkIsolation(value)
            dsl_attribute(:EnableNetworkIsolation, value)
          end

          #   @param [VpcConfig|JSONable] value
          #     The value to use for VpcConfig
          # @@overload VpcConfig(&block)
          #   Set :VpcConfig from block via instance eval of a new VpcConfig
          def VpcConfig(value = nil, **value_hash, &block)
            dsl_attribute(:VpcConfig, value, attr_class: VpcConfig, **value_hash, &block)
          end
        end

        # Specifies a VPC that your training jobs and hosted models have access to. Control access to and from your training and model containers by configuring the VPC.
        class VpcConfig < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The VPC security group IDs, in the form sg-xxxxxxxx. Specify the security groups for the VPC that is specified in the Subnets field.
          def SecurityGroupIds(values)
            dsl_list_attribute(:SecurityGroupIds, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The VPC security group IDs, in the form sg-xxxxxxxx. Specify the security groups for the VPC that is specified in the Subnets field.
          def SecurityGroupId(value, fn_if: nil)
            dsl_push_attribute(:SecurityGroupIds, value, fn_if: fn_if)
          end

          # @param [Array<String>|JSONable>] values
          #   The ID of the subnets in the VPC to which you want to connect to your monitoring jobs.
          def Subnets(values)
            dsl_list_attribute(:Subnets, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The ID of the subnets in the VPC to which you want to connect to your monitoring jobs.
          def Subnet(value, fn_if: nil)
            dsl_push_attribute(:Subnets, value, fn_if: fn_if)
          end
        end

        # Specifies a time limit for how long the monitoring job is allowed to run.
        class StoppingCondition < PropertyType
          #   @param [Integer|JSONable] value
          #     The maximum runtime allowed in seconds.
          def MaxRuntimeInSeconds(value)
            dsl_attribute(:MaxRuntimeInSeconds, value)
          end
        end

        # Configuration details about the monitoring schedule.
        class ScheduleConfig < PropertyType
          #   @param [String|JSONable] value
          #     A cron expression that describes details about the monitoring schedule.
          def ScheduleExpression(value)
            dsl_attribute(:ScheduleExpression, value)
          end
        end

        # A key-value pair to associate with a resource.
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
          def Key(value)
            dsl_attribute(:Key, value)
          end

          #   @param [String|JSONable] value
          #     The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        # Summary of information about monitoring job
        class MonitoringExecutionSummary < PropertyType
          #   @param [String|JSONable] value
          #     The time at which the monitoring job was created.
          def CreationTime(value)
            dsl_attribute(:CreationTime, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for EndpointName
          def EndpointName(value)
            dsl_attribute(:EndpointName, value)
          end

          #   @param [String|JSONable] value
          #     Contains the reason a monitoring job failed, if it failed.
          def FailureReason(value)
            dsl_attribute(:FailureReason, value)
          end

          #   @param [String|JSONable] value
          #     A timestamp that indicates the last time the monitoring job was modified.
          def LastModifiedTime(value)
            dsl_attribute(:LastModifiedTime, value)
          end

          #   @param [String|JSONable] value
          #     The status of the monitoring job.
          def MonitoringExecutionStatus(value)
            dsl_attribute(:MonitoringExecutionStatus, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for MonitoringScheduleName
          def MonitoringScheduleName(value)
            dsl_attribute(:MonitoringScheduleName, value)
          end

          #   @param [String|JSONable] value
          #     The Amazon Resource Name (ARN) of the monitoring job.
          def ProcessingJobArn(value)
            dsl_attribute(:ProcessingJobArn, value)
          end

          #   @param [String|JSONable] value
          #     The time the monitoring job was scheduled.
          def ScheduledTime(value)
            dsl_attribute(:ScheduledTime, value)
          end
        end

        #   @param [String|JSONable] value
        #     The Amazon Resource Name (ARN) of the monitoring schedule.
        def MonitoringScheduleArn(value)
          dsl_attribute(:MonitoringScheduleArn, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for MonitoringScheduleName
        def MonitoringScheduleName(value)
          dsl_attribute(:MonitoringScheduleName, value)
        end

        #   @param [MonitoringScheduleConfig|JSONable] value
        #     The value to use for MonitoringScheduleConfig
        # @@overload MonitoringScheduleConfig(&block)
        #   Set :MonitoringScheduleConfig from block via instance eval of a new MonitoringScheduleConfig
        def MonitoringScheduleConfig(value = nil, **value_hash, &block)
          dsl_attribute(:MonitoringScheduleConfig, value, attr_class: MonitoringScheduleConfig, **value_hash, &block)
        end

        # @param [Array<Tag>|JSONable>] values
        #   An array of key-value pairs to apply to this resource.
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    An array of key-value pairs to apply to this resource.
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The time at which the schedule was created.
        def CreationTime(value)
          dsl_attribute(:CreationTime, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for EndpointName
        def EndpointName(value)
          dsl_attribute(:EndpointName, value)
        end

        #   @param [String|JSONable] value
        #     Contains the reason a monitoring job failed, if it failed.
        def FailureReason(value)
          dsl_attribute(:FailureReason, value)
        end

        #   @param [String|JSONable] value
        #     A timestamp that indicates the last time the monitoring job was modified.
        def LastModifiedTime(value)
          dsl_attribute(:LastModifiedTime, value)
        end

        #   @param [MonitoringExecutionSummary|JSONable] value
        #     Describes metadata on the last execution to run, if there was one.
        # @@overload LastMonitoringExecutionSummary(&block)
        #   Set :LastMonitoringExecutionSummary from block via instance eval of a new MonitoringExecutionSummary
        def LastMonitoringExecutionSummary(value = nil, **value_hash, &block)
          dsl_attribute(:LastMonitoringExecutionSummary, value, attr_class: MonitoringExecutionSummary, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The status of a schedule job.
        def MonitoringScheduleStatus(value)
          dsl_attribute(:MonitoringScheduleStatus, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::SageMaker::MonitoringSchedule]
    def AWS_SageMaker_MonitoringSchedule(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::SageMaker::MonitoringSchedule, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
