# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module SageMaker
      # Resource Type definition for AWS::SageMaker::NotebookInstance
      class NotebookInstance < ResourceType
        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for NotebookInstanceName
        def NotebookInstanceName(value)
          dsl_attribute(:NotebookInstanceName, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for KmsKeyId
        def KmsKeyId(value)
          dsl_attribute(:KmsKeyId, value)
        end

        #   @param [Integer|JSONable] value
        #     The value to use for VolumeSizeInGB
        def VolumeSizeInGB(value)
          dsl_attribute(:VolumeSizeInGB, value)
        end

        # @param [Array<String>|JSONable>] values
        #   The List of values to use for AdditionalCodeRepositories
        def AdditionalCodeRepositories(values)
          dsl_list_attribute(:AdditionalCodeRepositories, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for AdditionalCodeRepositories
        def AdditionalCodeRepository(value, fn_if: nil)
          dsl_push_attribute(:AdditionalCodeRepositories, value, fn_if: fn_if)
        end

        #   @param [String|JSONable] value
        #     The value to use for DefaultCodeRepository
        def DefaultCodeRepository(value)
          dsl_attribute(:DefaultCodeRepository, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for DirectInternetAccess
        def DirectInternetAccess(value)
          dsl_attribute(:DirectInternetAccess, value)
        end

        # @param [Array<String>|JSONable>] values
        #   The List of values to use for AcceleratorTypes
        def AcceleratorTypes(values)
          dsl_list_attribute(:AcceleratorTypes, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for AcceleratorTypes
        def AcceleratorTyp(value, fn_if: nil)
          dsl_push_attribute(:AcceleratorTypes, value, fn_if: fn_if)
        end

        #   @param [String|JSONable] value
        #     The value to use for SubnetId
        def SubnetId(value)
          dsl_attribute(:SubnetId, value)
        end

        # @param [Array<String>|JSONable>] values
        #   The List of values to use for SecurityGroupIds
        def SecurityGroupIds(values)
          dsl_list_attribute(:SecurityGroupIds, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for SecurityGroupIds
        def SecurityGroupId(value, fn_if: nil)
          dsl_push_attribute(:SecurityGroupIds, value, fn_if: fn_if)
        end

        #   @param [String|JSONable] value
        #     The value to use for RoleArn
        def RoleArn(value)
          dsl_attribute(:RoleArn, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for RootAccess
        def RootAccess(value)
          dsl_attribute(:RootAccess, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for InstanceType
        def InstanceType(value)
          dsl_attribute(:InstanceType, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for LifecycleConfigName
        def LifecycleConfigName(value)
          dsl_attribute(:LifecycleConfigName, value)
        end

        # @param [Array<Tag>|JSONable>] values
        #   The List of values to use for Tags
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    The List of values to use for Tags
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::SageMaker::NotebookInstance]
    def AWS_SageMaker_NotebookInstance(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::SageMaker::NotebookInstance, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
