# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module AppSync
      # Resource Type definition for AWS::AppSync::DataSource
      class DataSource < ResourceType
        # Property Definition RdsHttpEndpointConfig
        class RdsHttpEndpointConfig < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for DatabaseName
          def DatabaseName(value)
            dsl_attribute(:DatabaseName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for AwsRegion
          def AwsRegion(value)
            dsl_attribute(:AwsRegion, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for DbClusterIdentifier
          def DbClusterIdentifier(value)
            dsl_attribute(:DbClusterIdentifier, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for AwsSecretStoreArn
          def AwsSecretStoreArn(value)
            dsl_attribute(:AwsSecretStoreArn, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Schema
          def Schema(value)
            dsl_attribute(:Schema, value)
          end
        end

        # Property Definition AwsIamConfig
        class AwsIamConfig < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for SigningRegion
          def SigningRegion(value)
            dsl_attribute(:SigningRegion, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for SigningServiceName
          def SigningServiceName(value)
            dsl_attribute(:SigningServiceName, value)
          end
        end

        # Property Definition AuthorizationConfig
        class AuthorizationConfig < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for AuthorizationType
          def AuthorizationType(value)
            dsl_attribute(:AuthorizationType, value)
          end

          #   @param [AwsIamConfig|JSONable] value
          #     The value to use for AwsIamConfig
          # @@overload AwsIamConfig(&block)
          #   Set :AwsIamConfig from block via instance eval of a new AwsIamConfig
          def AwsIamConfig(value = nil, **value_hash, &block)
            dsl_attribute(:AwsIamConfig, value, attr_class: AwsIamConfig, **value_hash, &block)
          end
        end

        # Property Definition DeltaSyncConfig
        class DeltaSyncConfig < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for BaseTableTTL
          def BaseTableTTL(value)
            dsl_attribute(:BaseTableTTL, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for DeltaSyncTableTTL
          def DeltaSyncTableTTL(value)
            dsl_attribute(:DeltaSyncTableTTL, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for DeltaSyncTableName
          def DeltaSyncTableName(value)
            dsl_attribute(:DeltaSyncTableName, value)
          end
        end

        # Property Definition RelationalDatabaseConfig
        class RelationalDatabaseConfig < PropertyType
          #   @param [RdsHttpEndpointConfig|JSONable] value
          #     The value to use for RdsHttpEndpointConfig
          # @@overload RdsHttpEndpointConfig(&block)
          #   Set :RdsHttpEndpointConfig from block via instance eval of a new RdsHttpEndpointConfig
          def RdsHttpEndpointConfig(value = nil, **value_hash, &block)
            dsl_attribute(:RdsHttpEndpointConfig, value, attr_class: RdsHttpEndpointConfig, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for RelationalDatabaseSourceType
          def RelationalDatabaseSourceType(value)
            dsl_attribute(:RelationalDatabaseSourceType, value)
          end
        end

        # Property Definition HttpConfig
        class HttpConfig < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Endpoint
          def Endpoint(value)
            dsl_attribute(:Endpoint, value)
          end

          #   @param [AuthorizationConfig|JSONable] value
          #     The value to use for AuthorizationConfig
          # @@overload AuthorizationConfig(&block)
          #   Set :AuthorizationConfig from block via instance eval of a new AuthorizationConfig
          def AuthorizationConfig(value = nil, **value_hash, &block)
            dsl_attribute(:AuthorizationConfig, value, attr_class: AuthorizationConfig, **value_hash, &block)
          end
        end

        # Property Definition LambdaConfig
        class LambdaConfig < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for LambdaFunctionArn
          def LambdaFunctionArn(value)
            dsl_attribute(:LambdaFunctionArn, value)
          end
        end

        # Property Definition ElasticsearchConfig
        class ElasticsearchConfig < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for AwsRegion
          def AwsRegion(value)
            dsl_attribute(:AwsRegion, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Endpoint
          def Endpoint(value)
            dsl_attribute(:Endpoint, value)
          end
        end

        # Property Definition DynamoDBConfig
        class DynamoDBConfig < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for TableName
          def TableName(value)
            dsl_attribute(:TableName, value)
          end

          #   @param [DeltaSyncConfig|JSONable] value
          #     The value to use for DeltaSyncConfig
          # @@overload DeltaSyncConfig(&block)
          #   Set :DeltaSyncConfig from block via instance eval of a new DeltaSyncConfig
          def DeltaSyncConfig(value = nil, **value_hash, &block)
            dsl_attribute(:DeltaSyncConfig, value, attr_class: DeltaSyncConfig, **value_hash, &block)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for UseCallerCredentials
          def UseCallerCredentials(value)
            dsl_attribute(:UseCallerCredentials, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for AwsRegion
          def AwsRegion(value)
            dsl_attribute(:AwsRegion, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for Versioned
          def Versioned(value)
            dsl_attribute(:Versioned, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for DataSourceArn
        def DataSourceArn(value)
          dsl_attribute(:DataSourceArn, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Type
        def Type(value)
          dsl_attribute(:Type, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Description
        def Description(value)
          dsl_attribute(:Description, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for ServiceRoleArn
        def ServiceRoleArn(value)
          dsl_attribute(:ServiceRoleArn, value)
        end

        #   @param [HttpConfig|JSONable] value
        #     The value to use for HttpConfig
        # @@overload HttpConfig(&block)
        #   Set :HttpConfig from block via instance eval of a new HttpConfig
        def HttpConfig(value = nil, **value_hash, &block)
          dsl_attribute(:HttpConfig, value, attr_class: HttpConfig, **value_hash, &block)
        end

        #   @param [RelationalDatabaseConfig|JSONable] value
        #     The value to use for RelationalDatabaseConfig
        # @@overload RelationalDatabaseConfig(&block)
        #   Set :RelationalDatabaseConfig from block via instance eval of a new RelationalDatabaseConfig
        def RelationalDatabaseConfig(value = nil, **value_hash, &block)
          dsl_attribute(:RelationalDatabaseConfig, value, attr_class: RelationalDatabaseConfig, **value_hash, &block)
        end

        #   @param [LambdaConfig|JSONable] value
        #     The value to use for LambdaConfig
        # @@overload LambdaConfig(&block)
        #   Set :LambdaConfig from block via instance eval of a new LambdaConfig
        def LambdaConfig(value = nil, **value_hash, &block)
          dsl_attribute(:LambdaConfig, value, attr_class: LambdaConfig, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for ApiId
        def ApiId(value)
          dsl_attribute(:ApiId, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Name
        def Name(value)
          dsl_attribute(:Name, value)
        end

        #   @param [DynamoDBConfig|JSONable] value
        #     The value to use for DynamoDBConfig
        # @@overload DynamoDBConfig(&block)
        #   Set :DynamoDBConfig from block via instance eval of a new DynamoDBConfig
        def DynamoDBConfig(value = nil, **value_hash, &block)
          dsl_attribute(:DynamoDBConfig, value, attr_class: DynamoDBConfig, **value_hash, &block)
        end

        #   @param [ElasticsearchConfig|JSONable] value
        #     The value to use for ElasticsearchConfig
        # @@overload ElasticsearchConfig(&block)
        #   Set :ElasticsearchConfig from block via instance eval of a new ElasticsearchConfig
        def ElasticsearchConfig(value = nil, **value_hash, &block)
          dsl_attribute(:ElasticsearchConfig, value, attr_class: ElasticsearchConfig, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::AppSync::DataSource]
    def AWS_AppSync_DataSource(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::AppSync::DataSource, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
