# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module AppSync
      # Resource Type definition for AWS::AppSync::Resolver
      class Resolver < ResourceType
        # Property Definition PipelineConfig
        class PipelineConfig < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Functions
          def Functions(values)
            dsl_list_attribute(:Functions, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Functions
          def Function(value, fn_if: nil)
            dsl_push_attribute(:Functions, value, fn_if: fn_if)
          end
        end

        # Property Definition CachingConfig
        class CachingConfig < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for CachingKeys
          def CachingKeys(values)
            dsl_list_attribute(:CachingKeys, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for CachingKeys
          def CachingKey(value, fn_if: nil)
            dsl_push_attribute(:CachingKeys, value, fn_if: fn_if)
          end

          #   @param [Number|JSONable] value
          #     The value to use for Ttl
          def Ttl(value)
            dsl_attribute(:Ttl, value)
          end
        end

        # Property Definition SyncConfig
        class SyncConfig < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ConflictHandler
          def ConflictHandler(value)
            dsl_attribute(:ConflictHandler, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ConflictDetection
          def ConflictDetection(value)
            dsl_attribute(:ConflictDetection, value)
          end

          #   @param [LambdaConflictHandlerConfig|JSONable] value
          #     The value to use for LambdaConflictHandlerConfig
          # @@overload LambdaConflictHandlerConfig(&block)
          #   Set :LambdaConflictHandlerConfig from block via instance eval of a new LambdaConflictHandlerConfig
          def LambdaConflictHandlerConfig(value = nil, **value_hash, &block)
            dsl_attribute(:LambdaConflictHandlerConfig, value, attr_class: LambdaConflictHandlerConfig, **value_hash, &block)
          end
        end

        # Property Definition LambdaConflictHandlerConfig
        class LambdaConflictHandlerConfig < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for LambdaConflictHandlerArn
          def LambdaConflictHandlerArn(value)
            dsl_attribute(:LambdaConflictHandlerArn, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for TypeName
        def TypeName(value)
          dsl_attribute(:TypeName, value)
        end

        #   @param [PipelineConfig|JSONable] value
        #     The value to use for PipelineConfig
        # @@overload PipelineConfig(&block)
        #   Set :PipelineConfig from block via instance eval of a new PipelineConfig
        def PipelineConfig(value = nil, **value_hash, &block)
          dsl_attribute(:PipelineConfig, value, attr_class: PipelineConfig, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for RequestMappingTemplate
        def RequestMappingTemplate(value)
          dsl_attribute(:RequestMappingTemplate, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for ResponseMappingTemplate
        def ResponseMappingTemplate(value)
          dsl_attribute(:ResponseMappingTemplate, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for ResolverArn
        def ResolverArn(value)
          dsl_attribute(:ResolverArn, value)
        end

        #   @param [SyncConfig|JSONable] value
        #     The value to use for SyncConfig
        # @@overload SyncConfig(&block)
        #   Set :SyncConfig from block via instance eval of a new SyncConfig
        def SyncConfig(value = nil, **value_hash, &block)
          dsl_attribute(:SyncConfig, value, attr_class: SyncConfig, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for ResponseMappingTemplateS3Location
        def ResponseMappingTemplateS3Location(value)
          dsl_attribute(:ResponseMappingTemplateS3Location, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for DataSourceName
        def DataSourceName(value)
          dsl_attribute(:DataSourceName, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Kind
        def Kind(value)
          dsl_attribute(:Kind, value)
        end

        #   @param [CachingConfig|JSONable] value
        #     The value to use for CachingConfig
        # @@overload CachingConfig(&block)
        #   Set :CachingConfig from block via instance eval of a new CachingConfig
        def CachingConfig(value = nil, **value_hash, &block)
          dsl_attribute(:CachingConfig, value, attr_class: CachingConfig, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for RequestMappingTemplateS3Location
        def RequestMappingTemplateS3Location(value)
          dsl_attribute(:RequestMappingTemplateS3Location, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for FieldName
        def FieldName(value)
          dsl_attribute(:FieldName, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for ApiId
        def ApiId(value)
          dsl_attribute(:ApiId, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::AppSync::Resolver]
    def AWS_AppSync_Resolver(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::AppSync::Resolver, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
