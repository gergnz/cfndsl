# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module AmazonMQ
      # Resource Type definition for AWS::AmazonMQ::Broker
      class Broker < ResourceType
        # Property Definition LogList
        class LogList < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for Audit
          def Audit(value)
            dsl_attribute(:Audit, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for General
          def General(value)
            dsl_attribute(:General, value)
          end
        end

        # Property Definition LdapServerMetadata
        class LdapServerMetadata < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Hosts
          def Hosts(values)
            dsl_list_attribute(:Hosts, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Hosts
          def Host(value, fn_if: nil)
            dsl_push_attribute(:Hosts, value, fn_if: fn_if)
          end

          #   @param [String|JSONable] value
          #     The value to use for UserRoleName
          def UserRoleName(value)
            dsl_attribute(:UserRoleName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for UserSearchMatching
          def UserSearchMatching(value)
            dsl_attribute(:UserSearchMatching, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for RoleName
          def RoleName(value)
            dsl_attribute(:RoleName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for UserBase
          def UserBase(value)
            dsl_attribute(:UserBase, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for UserSearchSubtree
          def UserSearchSubtree(value)
            dsl_attribute(:UserSearchSubtree, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for RoleSearchMatching
          def RoleSearchMatching(value)
            dsl_attribute(:RoleSearchMatching, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ServiceAccountUsername
          def ServiceAccountUsername(value)
            dsl_attribute(:ServiceAccountUsername, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for RoleBase
          def RoleBase(value)
            dsl_attribute(:RoleBase, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ServiceAccountPassword
          def ServiceAccountPassword(value)
            dsl_attribute(:ServiceAccountPassword, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for RoleSearchSubtree
          def RoleSearchSubtree(value)
            dsl_attribute(:RoleSearchSubtree, value)
          end
        end

        # Property Definition User
        class User < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for ConsoleAccess
          def ConsoleAccess(value)
            dsl_attribute(:ConsoleAccess, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Username
          def Username(value)
            dsl_attribute(:Username, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Groups
          def Groups(values)
            dsl_list_attribute(:Groups, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Groups
          def Group(value, fn_if: nil)
            dsl_push_attribute(:Groups, value, fn_if: fn_if)
          end

          #   @param [String|JSONable] value
          #     The value to use for Password
          def Password(value)
            dsl_attribute(:Password, value)
          end
        end

        # Property Definition InterBrokerCred
        class InterBrokerCred < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Username
          def Username(value)
            dsl_attribute(:Username, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Password
          def Password(value)
            dsl_attribute(:Password, value)
          end
        end

        # Property Definition ServerMetadata
        class ServerMetadata < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Hosts
          def Hosts(values)
            dsl_list_attribute(:Hosts, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Hosts
          def Host(value, fn_if: nil)
            dsl_push_attribute(:Hosts, value, fn_if: fn_if)
          end

          #   @param [String|JSONable] value
          #     The value to use for UserRoleName
          def UserRoleName(value)
            dsl_attribute(:UserRoleName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for UserSearchMatching
          def UserSearchMatching(value)
            dsl_attribute(:UserSearchMatching, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for RoleName
          def RoleName(value)
            dsl_attribute(:RoleName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for UserBase
          def UserBase(value)
            dsl_attribute(:UserBase, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for UserSearchSubtree
          def UserSearchSubtree(value)
            dsl_attribute(:UserSearchSubtree, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for RoleSearchMatching
          def RoleSearchMatching(value)
            dsl_attribute(:RoleSearchMatching, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ServiceAccountUsername
          def ServiceAccountUsername(value)
            dsl_attribute(:ServiceAccountUsername, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for RoleBase
          def RoleBase(value)
            dsl_attribute(:RoleBase, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ServiceAccountPassword
          def ServiceAccountPassword(value)
            dsl_attribute(:ServiceAccountPassword, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for RoleSearchSubtree
          def RoleSearchSubtree(value)
            dsl_attribute(:RoleSearchSubtree, value)
          end
        end

        # Property Definition LdapMetadata
        class LdapMetadata < PropertyType
          # @param [Array<InterBrokerCred>|JSONable>] values
          #   The List of values to use for InterBrokerCreds
          def InterBrokerCreds(values)
            dsl_list_attribute(:InterBrokerCreds, values)
          end

          #  @param [InterBrokerCred|JSONable] value  Append value to the List
          #    The List of values to use for InterBrokerCreds
          # @@overload InterBrokerCred(&block)
          # Append value to the List from block via instance eval of a new InterBrokerCred
          def InterBrokerCred(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:InterBrokerCreds, value, fn_if: fn_if, attr_class: InterBrokerCred, **value_hash, &block)
          end

          #   @param [ServerMetadata|JSONable] value
          #     The value to use for ServerMetadata
          # @@overload ServerMetadata(&block)
          #   Set :ServerMetadata from block via instance eval of a new ServerMetadata
          def ServerMetadata(value = nil, **value_hash, &block)
            dsl_attribute(:ServerMetadata, value, attr_class: ServerMetadata, **value_hash, &block)
          end
        end

        # Property Definition MaintenanceWindow
        class MaintenanceWindow < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for DayOfWeek
          def DayOfWeek(value)
            dsl_attribute(:DayOfWeek, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for TimeOfDay
          def TimeOfDay(value)
            dsl_attribute(:TimeOfDay, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for TimeZone
          def TimeZone(value)
            dsl_attribute(:TimeZone, value)
          end
        end

        # Property Definition TagsEntry
        class TagsEntry < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end
        end

        # Property Definition EncryptionOptions
        class EncryptionOptions < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for KmsKeyId
          def KmsKeyId(value)
            dsl_attribute(:KmsKeyId, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for UseAwsOwnedKey
          def UseAwsOwnedKey(value)
            dsl_attribute(:UseAwsOwnedKey, value)
          end
        end

        # Property Definition ConfigurationId
        class ConfigurationId < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for Revision
          def Revision(value)
            dsl_attribute(:Revision, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Id
          def Id(value)
            dsl_attribute(:Id, value)
          end
        end

        # @param [Array<String>|JSONable>] values
        #   The List of values to use for SecurityGroups
        def SecurityGroups(values)
          dsl_list_attribute(:SecurityGroups, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for SecurityGroups
        def SecurityGroup(value, fn_if: nil)
          dsl_push_attribute(:SecurityGroups, value, fn_if: fn_if)
        end

        #   @param [ConfigurationId|JSONable] value
        #     The value to use for Configuration
        # @@overload Configuration(&block)
        #   Set :Configuration from block via instance eval of a new ConfigurationId
        def Configuration(value = nil, **value_hash, &block)
          dsl_attribute(:Configuration, value, attr_class: ConfigurationId, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for AuthenticationStrategy
        def AuthenticationStrategy(value)
          dsl_attribute(:AuthenticationStrategy, value)
        end

        #   @param [LdapMetadata|JSONable] value
        #     The value to use for LdapMetadata
        # @@overload LdapMetadata(&block)
        #   Set :LdapMetadata from block via instance eval of a new LdapMetadata
        def LdapMetadata(value = nil, **value_hash, &block)
          dsl_attribute(:LdapMetadata, value, attr_class: LdapMetadata, **value_hash, &block)
        end

        # @param [Array<User>|JSONable>] values
        #   The List of values to use for Users
        def Users(values)
          dsl_list_attribute(:Users, values)
        end

        #  @param [User|JSONable] value  Append value to the List
        #    The List of values to use for Users
        # @@overload User(&block)
        # Append value to the List from block via instance eval of a new User
        def User(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Users, value, fn_if: fn_if, attr_class: User, **value_hash, &block)
        end

        # @param [Array<String>|JSONable>] values
        #   The List of values to use for SubnetIds
        def SubnetIds(values)
          dsl_list_attribute(:SubnetIds, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for SubnetIds
        def SubnetId(value, fn_if: nil)
          dsl_push_attribute(:SubnetIds, value, fn_if: fn_if)
        end

        # @param [Array<String>|JSONable>] values
        #   The List of values to use for StompEndpoints
        def StompEndpoints(values)
          dsl_list_attribute(:StompEndpoints, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for StompEndpoints
        def StompEndpoint(value, fn_if: nil)
          dsl_push_attribute(:StompEndpoints, value, fn_if: fn_if)
        end

        # @param [Array<String>|JSONable>] values
        #   The List of values to use for MqttEndpoints
        def MqttEndpoints(values)
          dsl_list_attribute(:MqttEndpoints, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for MqttEndpoints
        def MqttEndpoint(value, fn_if: nil)
          dsl_push_attribute(:MqttEndpoints, value, fn_if: fn_if)
        end

        # @param [Array<String>|JSONable>] values
        #   The List of values to use for AmqpEndpoints
        def AmqpEndpoints(values)
          dsl_list_attribute(:AmqpEndpoints, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for AmqpEndpoints
        def AmqpEndpoint(value, fn_if: nil)
          dsl_push_attribute(:AmqpEndpoints, value, fn_if: fn_if)
        end

        #   @param [String|JSONable] value
        #     The value to use for DeploymentMode
        def DeploymentMode(value)
          dsl_attribute(:DeploymentMode, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for EngineType
        def EngineType(value)
          dsl_attribute(:EngineType, value)
        end

        #   @param [EncryptionOptions|JSONable] value
        #     The value to use for EncryptionOptions
        # @@overload EncryptionOptions(&block)
        #   Set :EncryptionOptions from block via instance eval of a new EncryptionOptions
        def EncryptionOptions(value = nil, **value_hash, &block)
          dsl_attribute(:EncryptionOptions, value, attr_class: EncryptionOptions, **value_hash, &block)
        end

        # @param [Array<TagsEntry>|JSONable>] values
        #   The List of values to use for Tags
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [TagsEntry|JSONable] value  Append value to the List
        #    The List of values to use for Tags
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new TagsEntry
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: TagsEntry, **value_hash, &block)
        end

        #   @param [Integer|JSONable] value
        #     The value to use for ConfigurationRevision
        def ConfigurationRevision(value)
          dsl_attribute(:ConfigurationRevision, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for StorageType
        def StorageType(value)
          dsl_attribute(:StorageType, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for EngineVersion
        def EngineVersion(value)
          dsl_attribute(:EngineVersion, value)
        end

        #   @param [MaintenanceWindow|JSONable] value
        #     The value to use for MaintenanceWindowStartTime
        # @@overload MaintenanceWindowStartTime(&block)
        #   Set :MaintenanceWindowStartTime from block via instance eval of a new MaintenanceWindow
        def MaintenanceWindowStartTime(value = nil, **value_hash, &block)
          dsl_attribute(:MaintenanceWindowStartTime, value, attr_class: MaintenanceWindow, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for HostInstanceType
        def HostInstanceType(value)
          dsl_attribute(:HostInstanceType, value)
        end

        #   @param [Boolean|JSONable] value
        #     The value to use for AutoMinorVersionUpgrade
        def AutoMinorVersionUpgrade(value)
          dsl_attribute(:AutoMinorVersionUpgrade, value)
        end

        #   @param [LogList|JSONable] value
        #     The value to use for Logs
        # @@overload Logs(&block)
        #   Set :Logs from block via instance eval of a new LogList
        def Logs(value = nil, **value_hash, &block)
          dsl_attribute(:Logs, value, attr_class: LogList, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for ConfigurationId
        def ConfigurationId(value)
          dsl_attribute(:ConfigurationId, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for BrokerName
        def BrokerName(value)
          dsl_attribute(:BrokerName, value)
        end

        # @param [Array<String>|JSONable>] values
        #   The List of values to use for WssEndpoints
        def WssEndpoints(values)
          dsl_list_attribute(:WssEndpoints, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for WssEndpoints
        def WssEndpoint(value, fn_if: nil)
          dsl_push_attribute(:WssEndpoints, value, fn_if: fn_if)
        end

        # @param [Array<String>|JSONable>] values
        #   The List of values to use for IpAddresses
        def IpAddresses(values)
          dsl_list_attribute(:IpAddresses, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for IpAddresses
        def IpAddress(value, fn_if: nil)
          dsl_push_attribute(:IpAddresses, value, fn_if: fn_if)
        end

        # @param [Array<String>|JSONable>] values
        #   The List of values to use for OpenWireEndpoints
        def OpenWireEndpoints(values)
          dsl_list_attribute(:OpenWireEndpoints, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for OpenWireEndpoints
        def OpenWireEndpoint(value, fn_if: nil)
          dsl_push_attribute(:OpenWireEndpoints, value, fn_if: fn_if)
        end

        #   @param [LdapServerMetadata|JSONable] value
        #     The value to use for LdapServerMetadata
        # @@overload LdapServerMetadata(&block)
        #   Set :LdapServerMetadata from block via instance eval of a new LdapServerMetadata
        def LdapServerMetadata(value = nil, **value_hash, &block)
          dsl_attribute(:LdapServerMetadata, value, attr_class: LdapServerMetadata, **value_hash, &block)
        end

        #   @param [Boolean|JSONable] value
        #     The value to use for PubliclyAccessible
        def PubliclyAccessible(value)
          dsl_attribute(:PubliclyAccessible, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Arn
        def Arn(value)
          dsl_attribute(:Arn, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::AmazonMQ::Broker]
    def AWS_AmazonMQ_Broker(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::AmazonMQ::Broker, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
