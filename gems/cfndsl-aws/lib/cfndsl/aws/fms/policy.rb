# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module FMS
      # Creates an AWS Firewall Manager policy.
      # @see https://github.com/aws-cloudformation/aws-cloudformation-resource-providers-fms.git
      class Policy < ResourceType
        # An FMS includeMap or excludeMap.
        class IEMap < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for ACCOUNT
          def ACCOUNTs(values)
            dsl_list_attribute(:ACCOUNT, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for ACCOUNT
          def ACCOUNT(value, fn_if: nil)
            dsl_push_attribute(:ACCOUNT, value, fn_if: fn_if)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for ORGUNIT
          def ORGUNITs(values)
            dsl_list_attribute(:ORGUNIT, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for ORGUNIT
          def ORGUNIT(value, fn_if: nil)
            dsl_push_attribute(:ORGUNIT, value, fn_if: fn_if)
          end
        end

        # A policy tag.
        class PolicyTag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        # A resource tag.
        class ResourceTag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        #   @param [IEMap|JSONable] value
        #     The value to use for ExcludeMap
        # @@overload ExcludeMap(&block)
        #   Set :ExcludeMap from block via instance eval of a new IEMap
        def ExcludeMap(value = nil, **value_hash, &block)
          dsl_attribute(:ExcludeMap, value, attr_class: IEMap, **value_hash, &block)
        end

        #   @param [Boolean|JSONable] value
        #     The value to use for ExcludeResourceTags
        def ExcludeResourceTags(value)
          dsl_attribute(:ExcludeResourceTags, value)
        end

        #   @param [IEMap|JSONable] value
        #     The value to use for IncludeMap
        # @@overload IncludeMap(&block)
        #   Set :IncludeMap from block via instance eval of a new IEMap
        def IncludeMap(value = nil, **value_hash, &block)
          dsl_attribute(:IncludeMap, value, attr_class: IEMap, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for PolicyName
        def PolicyName(value)
          dsl_attribute(:PolicyName, value)
        end

        #   @param [Boolean|JSONable] value
        #     The value to use for RemediationEnabled
        def RemediationEnabled(value)
          dsl_attribute(:RemediationEnabled, value)
        end

        # @param [Array<ResourceTag>|JSONable>] values
        #   The List of values to use for ResourceTags
        def ResourceTags(values)
          dsl_list_attribute(:ResourceTags, values)
        end

        #  @param [ResourceTag|JSONable] value  Append value to the List
        #    The List of values to use for ResourceTags
        # @@overload ResourceTag(&block)
        # Append value to the List from block via instance eval of a new ResourceTag
        def ResourceTag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:ResourceTags, value, fn_if: fn_if, attr_class: ResourceTag, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for ResourceType
        def ResourceType(value)
          dsl_attribute(:ResourceType, value)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for ResourceTypeList
        def ResourceTypeList(value, fn_if: nil)
          dsl_push_attribute(:ResourceTypeList, value, fn_if: fn_if)
        end

        #   @param [Object|JSONable] value
        #     The value to use for SecurityServicePolicyData
        def SecurityServicePolicyData(value)
          dsl_attribute(:SecurityServicePolicyData, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Arn
        def Arn(value)
          dsl_attribute(:Arn, value)
        end

        #   @param [Boolean|JSONable] value
        #     The value to use for DeleteAllPolicyResources
        def DeleteAllPolicyResources(value)
          dsl_attribute(:DeleteAllPolicyResources, value)
        end

        # @param [Array<PolicyTag>|JSONable>] values
        #   The List of values to use for Tags
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [PolicyTag|JSONable] value  Append value to the List
        #    The List of values to use for Tags
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new PolicyTag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: PolicyTag, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::FMS::Policy]
    def AWS_FMS_Policy(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::FMS::Policy, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
