# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module ElasticLoadBalancing
      # Resource Type definition for AWS::ElasticLoadBalancing::LoadBalancer
      class LoadBalancer < ResourceType
        # Property Definition Listeners
        class Listeners < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for PolicyNames
          def PolicyNames(values)
            dsl_list_attribute(:PolicyNames, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for PolicyNames
          def PolicyName(value, fn_if: nil)
            dsl_push_attribute(:PolicyNames, value, fn_if: fn_if)
          end

          #   @param [String|JSONable] value
          #     The value to use for InstancePort
          def InstancePort(value)
            dsl_attribute(:InstancePort, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for LoadBalancerPort
          def LoadBalancerPort(value)
            dsl_attribute(:LoadBalancerPort, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Protocol
          def Protocol(value)
            dsl_attribute(:Protocol, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for SSLCertificateId
          def SSLCertificateId(value)
            dsl_attribute(:SSLCertificateId, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for InstanceProtocol
          def InstanceProtocol(value)
            dsl_attribute(:InstanceProtocol, value)
          end
        end

        # Property Definition ConnectionDrainingPolicy
        class ConnectionDrainingPolicy < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for Enabled
          def Enabled(value)
            dsl_attribute(:Enabled, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for Timeout
          def Timeout(value)
            dsl_attribute(:Timeout, value)
          end
        end

        # Property Definition Policies
        class Policies < PropertyType
          # @param [Array<Object>|JSONable>] values
          #   The List of values to use for Attributes
          def Attributes(values)
            dsl_list_attribute(:Attributes, values)
          end

          #  @param [Object|JSONable] value  Append value to the List
          #    The List of values to use for Attributes
          def Attribute(value, fn_if: nil)
            dsl_push_attribute(:Attributes, value, fn_if: fn_if)
          end

          #   @param [String|JSONable] value
          #     The value to use for PolicyType
          def PolicyType(value)
            dsl_attribute(:PolicyType, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for LoadBalancerPorts
          def LoadBalancerPorts(values)
            dsl_list_attribute(:LoadBalancerPorts, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for LoadBalancerPorts
          def LoadBalancerPort(value, fn_if: nil)
            dsl_push_attribute(:LoadBalancerPorts, value, fn_if: fn_if)
          end

          #   @param [String|JSONable] value
          #     The value to use for PolicyName
          def PolicyName(value)
            dsl_attribute(:PolicyName, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for InstancePorts
          def InstancePorts(values)
            dsl_list_attribute(:InstancePorts, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for InstancePorts
          def InstancePort(value, fn_if: nil)
            dsl_push_attribute(:InstancePorts, value, fn_if: fn_if)
          end
        end

        # Property Definition AppCookieStickinessPolicy
        class AppCookieStickinessPolicy < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for CookieName
          def CookieName(value)
            dsl_attribute(:CookieName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for PolicyName
          def PolicyName(value)
            dsl_attribute(:PolicyName, value)
          end
        end

        # Property Definition LBCookieStickinessPolicy
        class LBCookieStickinessPolicy < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for CookieExpirationPeriod
          def CookieExpirationPeriod(value)
            dsl_attribute(:CookieExpirationPeriod, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for PolicyName
          def PolicyName(value)
            dsl_attribute(:PolicyName, value)
          end
        end

        # Property Definition HealthCheck
        class HealthCheck < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Target
          def Target(value)
            dsl_attribute(:Target, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for UnhealthyThreshold
          def UnhealthyThreshold(value)
            dsl_attribute(:UnhealthyThreshold, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Timeout
          def Timeout(value)
            dsl_attribute(:Timeout, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for HealthyThreshold
          def HealthyThreshold(value)
            dsl_attribute(:HealthyThreshold, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Interval
          def Interval(value)
            dsl_attribute(:Interval, value)
          end
        end

        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end
        end

        # Property Definition AccessLoggingPolicy
        class AccessLoggingPolicy < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for Enabled
          def Enabled(value)
            dsl_attribute(:Enabled, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for S3BucketName
          def S3BucketName(value)
            dsl_attribute(:S3BucketName, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for EmitInterval
          def EmitInterval(value)
            dsl_attribute(:EmitInterval, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for S3BucketPrefix
          def S3BucketPrefix(value)
            dsl_attribute(:S3BucketPrefix, value)
          end
        end

        # Property Definition ConnectionSettings
        class ConnectionSettings < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for IdleTimeout
          def IdleTimeout(value)
            dsl_attribute(:IdleTimeout, value)
          end
        end

        # @param [Array<String>|JSONable>] values
        #   The List of values to use for SecurityGroups
        def SecurityGroups(values)
          dsl_list_attribute(:SecurityGroups, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for SecurityGroups
        def SecurityGroup(value, fn_if: nil)
          dsl_push_attribute(:SecurityGroups, value, fn_if: fn_if)
        end

        #   @param [ConnectionDrainingPolicy|JSONable] value
        #     The value to use for ConnectionDrainingPolicy
        # @@overload ConnectionDrainingPolicy(&block)
        #   Set :ConnectionDrainingPolicy from block via instance eval of a new ConnectionDrainingPolicy
        def ConnectionDrainingPolicy(value = nil, **value_hash, &block)
          dsl_attribute(:ConnectionDrainingPolicy, value, attr_class: ConnectionDrainingPolicy, **value_hash, &block)
        end

        # @param [Array<Policies>|JSONable>] values
        #   The List of values to use for Policies
        def Policies(values)
          dsl_list_attribute(:Policies, values)
        end

        #  @param [Policies|JSONable] value  Append value to the List
        #    The List of values to use for Policies
        # @@overload Policy(&block)
        # Append value to the List from block via instance eval of a new Policies
        def Policy(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Policies, value, fn_if: fn_if, attr_class: Policies, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Scheme
        def Scheme(value)
          dsl_attribute(:Scheme, value)
        end

        # @param [Array<String>|JSONable>] values
        #   The List of values to use for AvailabilityZones
        def AvailabilityZones(values)
          dsl_list_attribute(:AvailabilityZones, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for AvailabilityZones
        def AvailabilityZone(value, fn_if: nil)
          dsl_push_attribute(:AvailabilityZones, value, fn_if: fn_if)
        end

        #   @param [String|JSONable] value
        #     The value to use for SourceSecurityGroupOwnerAlias
        def SourceSecurityGroupOwnerAlias(value)
          dsl_attribute(:SourceSecurityGroupOwnerAlias, value)
        end

        #   @param [HealthCheck|JSONable] value
        #     The value to use for HealthCheck
        # @@overload HealthCheck(&block)
        #   Set :HealthCheck from block via instance eval of a new HealthCheck
        def HealthCheck(value = nil, **value_hash, &block)
          dsl_attribute(:HealthCheck, value, attr_class: HealthCheck, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for CanonicalHostedZoneNameID
        def CanonicalHostedZoneNameID(value)
          dsl_attribute(:CanonicalHostedZoneNameID, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for CanonicalHostedZoneName
        def CanonicalHostedZoneName(value)
          dsl_attribute(:CanonicalHostedZoneName, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for DNSName
        def DNSName(value)
          dsl_attribute(:DNSName, value)
        end

        #   @param [AccessLoggingPolicy|JSONable] value
        #     The value to use for AccessLoggingPolicy
        # @@overload AccessLoggingPolicy(&block)
        #   Set :AccessLoggingPolicy from block via instance eval of a new AccessLoggingPolicy
        def AccessLoggingPolicy(value = nil, **value_hash, &block)
          dsl_attribute(:AccessLoggingPolicy, value, attr_class: AccessLoggingPolicy, **value_hash, &block)
        end

        # @param [Array<String>|JSONable>] values
        #   The List of values to use for Instances
        def Instances(values)
          dsl_list_attribute(:Instances, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for Instances
        def Instanc(value, fn_if: nil)
          dsl_push_attribute(:Instances, value, fn_if: fn_if)
        end

        #   @param [String|JSONable] value
        #     The value to use for LoadBalancerName
        def LoadBalancerName(value)
          dsl_attribute(:LoadBalancerName, value)
        end

        # @param [Array<Listeners>|JSONable>] values
        #   The List of values to use for Listeners
        def Listeners(values)
          dsl_list_attribute(:Listeners, values)
        end

        #  @param [Listeners|JSONable] value  Append value to the List
        #    The List of values to use for Listeners
        # @@overload Listener(&block)
        # Append value to the List from block via instance eval of a new Listeners
        def Listener(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Listeners, value, fn_if: fn_if, attr_class: Listeners, **value_hash, &block)
        end

        # @param [Array<String>|JSONable>] values
        #   The List of values to use for Subnets
        def Subnets(values)
          dsl_list_attribute(:Subnets, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for Subnets
        def Subnet(value, fn_if: nil)
          dsl_push_attribute(:Subnets, value, fn_if: fn_if)
        end

        #   @param [Boolean|JSONable] value
        #     The value to use for CrossZone
        def CrossZone(value)
          dsl_attribute(:CrossZone, value)
        end

        # @param [Array<AppCookieStickinessPolicy>|JSONable>] values
        #   The List of values to use for AppCookieStickinessPolicy
        def AppCookieStickinessPolicies(values)
          dsl_list_attribute(:AppCookieStickinessPolicy, values)
        end

        #  @param [AppCookieStickinessPolicy|JSONable] value  Append value to the List
        #    The List of values to use for AppCookieStickinessPolicy
        # @@overload AppCookieStickinessPolicy(&block)
        # Append value to the List from block via instance eval of a new AppCookieStickinessPolicy
        def AppCookieStickinessPolicy(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:AppCookieStickinessPolicy, value, fn_if: fn_if, attr_class: AppCookieStickinessPolicy, **value_hash, &block)
        end

        # @param [Array<LBCookieStickinessPolicy>|JSONable>] values
        #   The List of values to use for LBCookieStickinessPolicy
        def LBCookieStickinessPolicies(values)
          dsl_list_attribute(:LBCookieStickinessPolicy, values)
        end

        #  @param [LBCookieStickinessPolicy|JSONable] value  Append value to the List
        #    The List of values to use for LBCookieStickinessPolicy
        # @@overload LBCookieStickinessPolicy(&block)
        # Append value to the List from block via instance eval of a new LBCookieStickinessPolicy
        def LBCookieStickinessPolicy(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:LBCookieStickinessPolicy, value, fn_if: fn_if, attr_class: LBCookieStickinessPolicy, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for SourceSecurityGroupGroupName
        def SourceSecurityGroupGroupName(value)
          dsl_attribute(:SourceSecurityGroupGroupName, value)
        end

        #   @param [ConnectionSettings|JSONable] value
        #     The value to use for ConnectionSettings
        # @@overload ConnectionSettings(&block)
        #   Set :ConnectionSettings from block via instance eval of a new ConnectionSettings
        def ConnectionSettings(value = nil, **value_hash, &block)
          dsl_attribute(:ConnectionSettings, value, attr_class: ConnectionSettings, **value_hash, &block)
        end

        # @param [Array<Tag>|JSONable>] values
        #   The List of values to use for Tags
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    The List of values to use for Tags
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::ElasticLoadBalancing::LoadBalancer]
    def AWS_ElasticLoadBalancing_LoadBalancer(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::ElasticLoadBalancing::LoadBalancer, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
