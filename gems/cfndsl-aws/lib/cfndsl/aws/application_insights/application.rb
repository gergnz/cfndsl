# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module ApplicationInsights
      # Resource schema for AWS::ApplicationInsights::Application
      # @see https://github.com/aws-cloudformation/aws-cloudformation-resource-providers-applicationinsights.git
      class Application < ResourceType
        # A key-value pair to associate with a resource.
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
          def Key(value)
            dsl_attribute(:Key, value)
          end

          #   @param [String|JSONable] value
          #     The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        # The custom grouped component.
        class CustomComponent < PropertyType
          #   @param [String|JSONable] value
          #     The name of the component.
          def ComponentName(value)
            dsl_attribute(:ComponentName, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The list of resource ARNs that belong to the component.
          def ResourceList(values)
            dsl_list_attribute(:ResourceList, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The list of resource ARNs that belong to the component.
          def Resource(value, fn_if: nil)
            dsl_push_attribute(:ResourceList, value, fn_if: fn_if)
          end
        end

        # The log pattern set.
        class LogPatternSet < PropertyType
          #   @param [String|JSONable] value
          #     The name of the log pattern set.
          def PatternSetName(value)
            dsl_attribute(:PatternSetName, value)
          end

          # @param [Array<LogPattern>|JSONable>] values
          #   The log patterns of a set.
          def LogPatterns(values)
            dsl_list_attribute(:LogPatterns, values)
          end

          #  @param [LogPattern|JSONable] value  Append value to the List
          #    The log patterns of a set.
          # @@overload LogPattern(&block)
          # Append value to the List from block via instance eval of a new LogPattern
          def LogPattern(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:LogPatterns, value, fn_if: fn_if, attr_class: LogPattern, **value_hash, &block)
          end
        end

        # The log pattern.
        class LogPattern < PropertyType
          #   @param [String|JSONable] value
          #     The name of the log pattern.
          def PatternName(value)
            dsl_attribute(:PatternName, value)
          end

          #   @param [String|JSONable] value
          #     The log pattern.
          def Pattern(value)
            dsl_attribute(:Pattern, value)
          end

          #   @param [Integer|JSONable] value
          #     Rank of the log pattern.
          def Rank(value)
            dsl_attribute(:Rank, value)
          end
        end

        # The monitoring setting of the component.
        class ComponentMonitoringSetting < PropertyType
          #   @param [String|JSONable] value
          #     The name of the component.
          def ComponentName(value)
            dsl_attribute(:ComponentName, value)
          end

          #   @param [String|JSONable] value
          #     The ARN of the compnonent.
          def ComponentARN(value)
            dsl_attribute(:ComponentARN, value)
          end

          #   @param [String|JSONable] value
          #     The tier of the application component.
          def Tier(value)
            dsl_attribute(:Tier, value)
          end

          #   @param [String|JSONable] value
          #     The component monitoring configuration mode.
          def ComponentConfigurationMode(value)
            dsl_attribute(:ComponentConfigurationMode, value)
          end

          #   @param [ComponentConfiguration|JSONable] value
          #     The overwritten settings on default component monitoring configuration.
          # @@overload DefaultOverwriteComponentConfiguration(&block)
          #   Set :DefaultOverwriteComponentConfiguration from block via instance eval of a new ComponentConfiguration
          def DefaultOverwriteComponentConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:DefaultOverwriteComponentConfiguration, value, attr_class: ComponentConfiguration, **value_hash, &block)
          end

          #   @param [ComponentConfiguration|JSONable] value
          #     The monitoring configuration of the component.
          # @@overload CustomComponentConfiguration(&block)
          #   Set :CustomComponentConfiguration from block via instance eval of a new ComponentConfiguration
          def CustomComponentConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:CustomComponentConfiguration, value, attr_class: ComponentConfiguration, **value_hash, &block)
          end
        end

        # The configuration settings of the component.
        class ComponentConfiguration < PropertyType
          #   @param [ConfigurationDetails|JSONable] value
          #     The configuration settings
          # @@overload ConfigurationDetails(&block)
          #   Set :ConfigurationDetails from block via instance eval of a new ConfigurationDetails
          def ConfigurationDetails(value = nil, **value_hash, &block)
            dsl_attribute(:ConfigurationDetails, value, attr_class: ConfigurationDetails, **value_hash, &block)
          end

          # @param [Array<SubComponentTypeConfiguration>|JSONable>] values
          #   Sub component configurations of the component.
          def SubComponentTypeConfigurations(values)
            dsl_list_attribute(:SubComponentTypeConfigurations, values)
          end

          #  @param [SubComponentTypeConfiguration|JSONable] value  Append value to the List
          #    Sub component configurations of the component.
          # @@overload SubComponentTypeConfiguration(&block)
          # Append value to the List from block via instance eval of a new SubComponentTypeConfiguration
          def SubComponentTypeConfiguration(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:SubComponentTypeConfigurations, value, fn_if: fn_if, attr_class: SubComponentTypeConfiguration, **value_hash, &block)
          end
        end

        # The configuration settings.
        class ConfigurationDetails < PropertyType
          # @param [Array<AlarmMetric>|JSONable>] values
          #   A list of metrics to monitor for the component.
          def AlarmMetrics(values)
            dsl_list_attribute(:AlarmMetrics, values)
          end

          #  @param [AlarmMetric|JSONable] value  Append value to the List
          #    A list of metrics to monitor for the component.
          # @@overload AlarmMetric(&block)
          # Append value to the List from block via instance eval of a new AlarmMetric
          def AlarmMetric(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:AlarmMetrics, value, fn_if: fn_if, attr_class: AlarmMetric, **value_hash, &block)
          end

          # @param [Array<Log>|JSONable>] values
          #   A list of logs to monitor for the component.
          def Logs(values)
            dsl_list_attribute(:Logs, values)
          end

          #  @param [Log|JSONable] value  Append value to the List
          #    A list of logs to monitor for the component.
          # @@overload Log(&block)
          # Append value to the List from block via instance eval of a new Log
          def Log(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Logs, value, fn_if: fn_if, attr_class: Log, **value_hash, &block)
          end

          # @param [Array<WindowsEvent>|JSONable>] values
          #   A list of Windows Events to log.
          def WindowsEvents(values)
            dsl_list_attribute(:WindowsEvents, values)
          end

          #  @param [WindowsEvent|JSONable] value  Append value to the List
          #    A list of Windows Events to log.
          # @@overload WindowsEvent(&block)
          # Append value to the List from block via instance eval of a new WindowsEvent
          def WindowsEvent(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:WindowsEvents, value, fn_if: fn_if, attr_class: WindowsEvent, **value_hash, &block)
          end

          # @param [Array<Alarm>|JSONable>] values
          #   A list of alarms to monitor for the component.
          def Alarms(values)
            dsl_list_attribute(:Alarms, values)
          end

          #  @param [Alarm|JSONable] value  Append value to the List
          #    A list of alarms to monitor for the component.
          # @@overload Alarm(&block)
          # Append value to the List from block via instance eval of a new Alarm
          def Alarm(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Alarms, value, fn_if: fn_if, attr_class: Alarm, **value_hash, &block)
          end
        end

        # The configuration settings of sub components.
        class SubComponentConfigurationDetails < PropertyType
          # @param [Array<AlarmMetric>|JSONable>] values
          #   A list of metrics to monitor for the component.
          def AlarmMetrics(values)
            dsl_list_attribute(:AlarmMetrics, values)
          end

          #  @param [AlarmMetric|JSONable] value  Append value to the List
          #    A list of metrics to monitor for the component.
          # @@overload AlarmMetric(&block)
          # Append value to the List from block via instance eval of a new AlarmMetric
          def AlarmMetric(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:AlarmMetrics, value, fn_if: fn_if, attr_class: AlarmMetric, **value_hash, &block)
          end

          # @param [Array<Log>|JSONable>] values
          #   A list of logs to monitor for the component.
          def Logs(values)
            dsl_list_attribute(:Logs, values)
          end

          #  @param [Log|JSONable] value  Append value to the List
          #    A list of logs to monitor for the component.
          # @@overload Log(&block)
          # Append value to the List from block via instance eval of a new Log
          def Log(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Logs, value, fn_if: fn_if, attr_class: Log, **value_hash, &block)
          end

          # @param [Array<WindowsEvent>|JSONable>] values
          #   A list of Windows Events to log.
          def WindowsEvents(values)
            dsl_list_attribute(:WindowsEvents, values)
          end

          #  @param [WindowsEvent|JSONable] value  Append value to the List
          #    A list of Windows Events to log.
          # @@overload WindowsEvent(&block)
          # Append value to the List from block via instance eval of a new WindowsEvent
          def WindowsEvent(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:WindowsEvents, value, fn_if: fn_if, attr_class: WindowsEvent, **value_hash, &block)
          end
        end

        # A metric to be monitored for the component.
        class AlarmMetric < PropertyType
          #   @param [String|JSONable] value
          #     The name of the metric to be monitored for the component.
          def AlarmMetricName(value)
            dsl_attribute(:AlarmMetricName, value)
          end
        end

        # A log to be monitored for the component.
        class Log < PropertyType
          #   @param [String|JSONable] value
          #     The CloudWatch log group name to be associated to the monitored log.
          def LogGroupName(value)
            dsl_attribute(:LogGroupName, value)
          end

          #   @param [String|JSONable] value
          #     The path of the logs to be monitored.
          def LogPath(value)
            dsl_attribute(:LogPath, value)
          end

          #   @param [String|JSONable] value
          #     The log type decides the log patterns against which Application Insights analyzes the log.
          def LogType(value)
            dsl_attribute(:LogType, value)
          end

          #   @param [String|JSONable] value
          #     The type of encoding of the logs to be monitored.
          def Encoding(value)
            dsl_attribute(:Encoding, value)
          end

          #   @param [String|JSONable] value
          #     The name of the log pattern set.
          def PatternSet(value)
            dsl_attribute(:PatternSet, value)
          end
        end

        # A Windows Event to be monitored for the component.
        class WindowsEvent < PropertyType
          #   @param [String|JSONable] value
          #     The CloudWatch log group name to be associated to the monitored log.
          def LogGroupName(value)
            dsl_attribute(:LogGroupName, value)
          end

          #   @param [String|JSONable] value
          #     The type of Windows Events to log.
          def EventName(value)
            dsl_attribute(:EventName, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The levels of event to log.
          def EventLevels(values)
            dsl_list_attribute(:EventLevels, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The levels of event to log.
          def EventLevel(value, fn_if: nil)
            dsl_push_attribute(:EventLevels, value, fn_if: fn_if)
          end

          #   @param [String|JSONable] value
          #     The name of the log pattern set.
          def PatternSet(value)
            dsl_attribute(:PatternSet, value)
          end
        end

        # A CloudWatch alarm to be monitored for the component.
        class Alarm < PropertyType
          #   @param [String|JSONable] value
          #     The name of the CloudWatch alarm to be monitored for the component.
          def AlarmName(value)
            dsl_attribute(:AlarmName, value)
          end

          #   @param [String|JSONable] value
          #     Indicates the degree of outage when the alarm goes off.
          def Severity(value)
            dsl_attribute(:Severity, value)
          end
        end

        # One type sub component configurations for the component.
        class SubComponentTypeConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     The sub component type.
          def SubComponentType(value)
            dsl_attribute(:SubComponentType, value)
          end

          #   @param [SubComponentConfigurationDetails|JSONable] value
          #     The configuration settings of sub components.
          # @@overload SubComponentConfigurationDetails(&block)
          #   Set :SubComponentConfigurationDetails from block via instance eval of a new SubComponentConfigurationDetails
          def SubComponentConfigurationDetails(value = nil, **value_hash, &block)
            dsl_attribute(:SubComponentConfigurationDetails, value, attr_class: SubComponentConfigurationDetails, **value_hash, &block)
          end
        end

        #   @param [String|JSONable] value
        #     The name of the resource group.
        def ResourceGroupName(value)
          dsl_attribute(:ResourceGroupName, value)
        end

        #   @param [String|JSONable] value
        #     The ARN of the ApplicationInsights application.
        def ApplicationARN(value)
          dsl_attribute(:ApplicationARN, value)
        end

        #   @param [Boolean|JSONable] value
        #     Indicates whether Application Insights can listen to CloudWatch events for the application resources.
        def CWEMonitorEnabled(value)
          dsl_attribute(:CWEMonitorEnabled, value)
        end

        #   @param [Boolean|JSONable] value
        #     When set to true, creates opsItems for any problems detected on an application.
        def OpsCenterEnabled(value)
          dsl_attribute(:OpsCenterEnabled, value)
        end

        #   @param [String|JSONable] value
        #     The SNS topic provided to Application Insights that is associated to the created opsItem.
        def OpsItemSNSTopicArn(value)
          dsl_attribute(:OpsItemSNSTopicArn, value)
        end

        # @param [Array<Tag>|JSONable>] values
        #   The tags of Application Insights application.
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    The tags of Application Insights application.
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end

        # @param [Array<CustomComponent>|JSONable>] values
        #   The custom grouped components.
        def CustomComponents(values)
          dsl_list_attribute(:CustomComponents, values)
        end

        #  @param [CustomComponent|JSONable] value  Append value to the List
        #    The custom grouped components.
        # @@overload CustomComponent(&block)
        # Append value to the List from block via instance eval of a new CustomComponent
        def CustomComponent(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:CustomComponents, value, fn_if: fn_if, attr_class: CustomComponent, **value_hash, &block)
        end

        # @param [Array<LogPatternSet>|JSONable>] values
        #   The log pattern sets.
        def LogPatternSets(values)
          dsl_list_attribute(:LogPatternSets, values)
        end

        #  @param [LogPatternSet|JSONable] value  Append value to the List
        #    The log pattern sets.
        # @@overload LogPatternSet(&block)
        # Append value to the List from block via instance eval of a new LogPatternSet
        def LogPatternSet(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:LogPatternSets, value, fn_if: fn_if, attr_class: LogPatternSet, **value_hash, &block)
        end

        #   @param [Boolean|JSONable] value
        #     If set to true, application will be configured with recommended monitoring configuration.
        def AutoConfigurationEnabled(value)
          dsl_attribute(:AutoConfigurationEnabled, value)
        end

        # @param [Array<ComponentMonitoringSetting>|JSONable>] values
        #   The monitoring settings of the components.
        def ComponentMonitoringSettings(values)
          dsl_list_attribute(:ComponentMonitoringSettings, values)
        end

        #  @param [ComponentMonitoringSetting|JSONable] value  Append value to the List
        #    The monitoring settings of the components.
        # @@overload ComponentMonitoringSetting(&block)
        # Append value to the List from block via instance eval of a new ComponentMonitoringSetting
        def ComponentMonitoringSetting(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:ComponentMonitoringSettings, value, fn_if: fn_if, attr_class: ComponentMonitoringSetting, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::ApplicationInsights::Application]
    def AWS_ApplicationInsights_Application(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::ApplicationInsights::Application, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
