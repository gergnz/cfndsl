# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module WorkSpaces
      # Resource Type definition for AWS::WorkSpaces::Workspace
      class Workspace < ResourceType
        # Property Definition WorkspaceProperties
        class WorkspaceProperties < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ComputeTypeName
          def ComputeTypeName(value)
            dsl_attribute(:ComputeTypeName, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for RootVolumeSizeGib
          def RootVolumeSizeGib(value)
            dsl_attribute(:RootVolumeSizeGib, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for RunningMode
          def RunningMode(value)
            dsl_attribute(:RunningMode, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for RunningModeAutoStopTimeoutInMinutes
          def RunningModeAutoStopTimeoutInMinutes(value)
            dsl_attribute(:RunningModeAutoStopTimeoutInMinutes, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for UserVolumeSizeGib
          def UserVolumeSizeGib(value)
            dsl_attribute(:UserVolumeSizeGib, value)
          end
        end

        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for BundleId
        def BundleId(value)
          dsl_attribute(:BundleId, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for DirectoryId
        def DirectoryId(value)
          dsl_attribute(:DirectoryId, value)
        end

        #   @param [Boolean|JSONable] value
        #     The value to use for RootVolumeEncryptionEnabled
        def RootVolumeEncryptionEnabled(value)
          dsl_attribute(:RootVolumeEncryptionEnabled, value)
        end

        # @param [Array<Tag>|JSONable>] values
        #   The List of values to use for Tags
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    The List of values to use for Tags
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for UserName
        def UserName(value)
          dsl_attribute(:UserName, value)
        end

        #   @param [Boolean|JSONable] value
        #     The value to use for UserVolumeEncryptionEnabled
        def UserVolumeEncryptionEnabled(value)
          dsl_attribute(:UserVolumeEncryptionEnabled, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for VolumeEncryptionKey
        def VolumeEncryptionKey(value)
          dsl_attribute(:VolumeEncryptionKey, value)
        end

        #   @param [WorkspaceProperties|JSONable] value
        #     The value to use for WorkspaceProperties
        # @@overload WorkspaceProperties(&block)
        #   Set :WorkspaceProperties from block via instance eval of a new WorkspaceProperties
        def WorkspaceProperties(value = nil, **value_hash, &block)
          dsl_attribute(:WorkspaceProperties, value, attr_class: WorkspaceProperties, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::WorkSpaces::Workspace]
    def AWS_WorkSpaces_Workspace(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::WorkSpaces::Workspace, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
