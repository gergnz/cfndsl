# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module Elasticsearch
      # Resource Type definition for AWS::Elasticsearch::Domain
      class Domain < ResourceType
        # Property Definition LogPublishingOption
        class LogPublishingOption < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for CloudWatchLogsLogGroupArn
          def CloudWatchLogsLogGroupArn(value)
            dsl_attribute(:CloudWatchLogsLogGroupArn, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for Enabled
          def Enabled(value)
            dsl_attribute(:Enabled, value)
          end
        end

        # Property Definition ElasticsearchClusterConfig
        class ElasticsearchClusterConfig < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for InstanceCount
          def InstanceCount(value)
            dsl_attribute(:InstanceCount, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for WarmEnabled
          def WarmEnabled(value)
            dsl_attribute(:WarmEnabled, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for WarmCount
          def WarmCount(value)
            dsl_attribute(:WarmCount, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for DedicatedMasterEnabled
          def DedicatedMasterEnabled(value)
            dsl_attribute(:DedicatedMasterEnabled, value)
          end

          #   @param [ZoneAwarenessConfig|JSONable] value
          #     The value to use for ZoneAwarenessConfig
          # @@overload ZoneAwarenessConfig(&block)
          #   Set :ZoneAwarenessConfig from block via instance eval of a new ZoneAwarenessConfig
          def ZoneAwarenessConfig(value = nil, **value_hash, &block)
            dsl_attribute(:ZoneAwarenessConfig, value, attr_class: ZoneAwarenessConfig, **value_hash, &block)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for DedicatedMasterCount
          def DedicatedMasterCount(value)
            dsl_attribute(:DedicatedMasterCount, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for InstanceType
          def InstanceType(value)
            dsl_attribute(:InstanceType, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for WarmType
          def WarmType(value)
            dsl_attribute(:WarmType, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for ZoneAwarenessEnabled
          def ZoneAwarenessEnabled(value)
            dsl_attribute(:ZoneAwarenessEnabled, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for DedicatedMasterType
          def DedicatedMasterType(value)
            dsl_attribute(:DedicatedMasterType, value)
          end
        end

        # Property Definition VPCOptions
        class VPCOptions < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for SecurityGroupIds
          def SecurityGroupIds(values)
            dsl_list_attribute(:SecurityGroupIds, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for SecurityGroupIds
          def SecurityGroupId(value, fn_if: nil)
            dsl_push_attribute(:SecurityGroupIds, value, fn_if: fn_if)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for SubnetIds
          def SubnetIds(values)
            dsl_list_attribute(:SubnetIds, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for SubnetIds
          def SubnetId(value, fn_if: nil)
            dsl_push_attribute(:SubnetIds, value, fn_if: fn_if)
          end
        end

        # Property Definition SnapshotOptions
        class SnapshotOptions < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for AutomatedSnapshotStartHour
          def AutomatedSnapshotStartHour(value)
            dsl_attribute(:AutomatedSnapshotStartHour, value)
          end
        end

        # Property Definition ZoneAwarenessConfig
        class ZoneAwarenessConfig < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for AvailabilityZoneCount
          def AvailabilityZoneCount(value)
            dsl_attribute(:AvailabilityZoneCount, value)
          end
        end

        # Property Definition NodeToNodeEncryptionOptions
        class NodeToNodeEncryptionOptions < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for Enabled
          def Enabled(value)
            dsl_attribute(:Enabled, value)
          end
        end

        # Property Definition DomainEndpointOptions
        class DomainEndpointOptions < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for EnforceHTTPS
          def EnforceHTTPS(value)
            dsl_attribute(:EnforceHTTPS, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for TLSSecurityPolicy
          def TLSSecurityPolicy(value)
            dsl_attribute(:TLSSecurityPolicy, value)
          end
        end

        # Property Definition CognitoOptions
        class CognitoOptions < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for Enabled
          def Enabled(value)
            dsl_attribute(:Enabled, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for IdentityPoolId
          def IdentityPoolId(value)
            dsl_attribute(:IdentityPoolId, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for UserPoolId
          def UserPoolId(value)
            dsl_attribute(:UserPoolId, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for RoleArn
          def RoleArn(value)
            dsl_attribute(:RoleArn, value)
          end
        end

        # Property Definition EBSOptions
        class EBSOptions < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for EBSEnabled
          def EBSEnabled(value)
            dsl_attribute(:EBSEnabled, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for VolumeType
          def VolumeType(value)
            dsl_attribute(:VolumeType, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for Iops
          def Iops(value)
            dsl_attribute(:Iops, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for VolumeSize
          def VolumeSize(value)
            dsl_attribute(:VolumeSize, value)
          end
        end

        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end
        end

        # Property Definition EncryptionAtRestOptions
        class EncryptionAtRestOptions < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for KmsKeyId
          def KmsKeyId(value)
            dsl_attribute(:KmsKeyId, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for Enabled
          def Enabled(value)
            dsl_attribute(:Enabled, value)
          end
        end

        # Property Definition MasterUserOptions
        class MasterUserOptions < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for MasterUserPassword
          def MasterUserPassword(value)
            dsl_attribute(:MasterUserPassword, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for MasterUserName
          def MasterUserName(value)
            dsl_attribute(:MasterUserName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for MasterUserARN
          def MasterUserARN(value)
            dsl_attribute(:MasterUserARN, value)
          end
        end

        # Property Definition AdvancedSecurityOptionsInput
        class AdvancedSecurityOptionsInput < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for Enabled
          def Enabled(value)
            dsl_attribute(:Enabled, value)
          end

          #   @param [MasterUserOptions|JSONable] value
          #     The value to use for MasterUserOptions
          # @@overload MasterUserOptions(&block)
          #   Set :MasterUserOptions from block via instance eval of a new MasterUserOptions
          def MasterUserOptions(value = nil, **value_hash, &block)
            dsl_attribute(:MasterUserOptions, value, attr_class: MasterUserOptions, **value_hash, &block)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for InternalUserDatabaseEnabled
          def InternalUserDatabaseEnabled(value)
            dsl_attribute(:InternalUserDatabaseEnabled, value)
          end
        end

        #   @param [ElasticsearchClusterConfig|JSONable] value
        #     The value to use for ElasticsearchClusterConfig
        # @@overload ElasticsearchClusterConfig(&block)
        #   Set :ElasticsearchClusterConfig from block via instance eval of a new ElasticsearchClusterConfig
        def ElasticsearchClusterConfig(value = nil, **value_hash, &block)
          dsl_attribute(:ElasticsearchClusterConfig, value, attr_class: ElasticsearchClusterConfig, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for DomainName
        def DomainName(value)
          dsl_attribute(:DomainName, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for ElasticsearchVersion
        def ElasticsearchVersion(value)
          dsl_attribute(:ElasticsearchVersion, value)
        end

        #   @param [Object|JSONable] value
        #     The value to use for LogPublishingOptions
        def LogPublishingOptions(value)
          dsl_attribute(:LogPublishingOptions, value)
        end

        #   @param [SnapshotOptions|JSONable] value
        #     The value to use for SnapshotOptions
        # @@overload SnapshotOptions(&block)
        #   Set :SnapshotOptions from block via instance eval of a new SnapshotOptions
        def SnapshotOptions(value = nil, **value_hash, &block)
          dsl_attribute(:SnapshotOptions, value, attr_class: SnapshotOptions, **value_hash, &block)
        end

        #   @param [VPCOptions|JSONable] value
        #     The value to use for VPCOptions
        # @@overload VPCOptions(&block)
        #   Set :VPCOptions from block via instance eval of a new VPCOptions
        def VPCOptions(value = nil, **value_hash, &block)
          dsl_attribute(:VPCOptions, value, attr_class: VPCOptions, **value_hash, &block)
        end

        #   @param [NodeToNodeEncryptionOptions|JSONable] value
        #     The value to use for NodeToNodeEncryptionOptions
        # @@overload NodeToNodeEncryptionOptions(&block)
        #   Set :NodeToNodeEncryptionOptions from block via instance eval of a new NodeToNodeEncryptionOptions
        def NodeToNodeEncryptionOptions(value = nil, **value_hash, &block)
          dsl_attribute(:NodeToNodeEncryptionOptions, value, attr_class: NodeToNodeEncryptionOptions, **value_hash, &block)
        end

        #   @param [Object|JSONable] value
        #     The value to use for AccessPolicies
        def AccessPolicies(value)
          dsl_attribute(:AccessPolicies, value)
        end

        #   @param [DomainEndpointOptions|JSONable] value
        #     The value to use for DomainEndpointOptions
        # @@overload DomainEndpointOptions(&block)
        #   Set :DomainEndpointOptions from block via instance eval of a new DomainEndpointOptions
        def DomainEndpointOptions(value = nil, **value_hash, &block)
          dsl_attribute(:DomainEndpointOptions, value, attr_class: DomainEndpointOptions, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for DomainArn
        def DomainArn(value)
          dsl_attribute(:DomainArn, value)
        end

        #   @param [CognitoOptions|JSONable] value
        #     The value to use for CognitoOptions
        # @@overload CognitoOptions(&block)
        #   Set :CognitoOptions from block via instance eval of a new CognitoOptions
        def CognitoOptions(value = nil, **value_hash, &block)
          dsl_attribute(:CognitoOptions, value, attr_class: CognitoOptions, **value_hash, &block)
        end

        #   @param [Object|JSONable] value
        #     The value to use for AdvancedOptions
        def AdvancedOptions(value)
          dsl_attribute(:AdvancedOptions, value)
        end

        #   @param [AdvancedSecurityOptionsInput|JSONable] value
        #     The value to use for AdvancedSecurityOptions
        # @@overload AdvancedSecurityOptions(&block)
        #   Set :AdvancedSecurityOptions from block via instance eval of a new AdvancedSecurityOptionsInput
        def AdvancedSecurityOptions(value = nil, **value_hash, &block)
          dsl_attribute(:AdvancedSecurityOptions, value, attr_class: AdvancedSecurityOptionsInput, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for DomainEndpoint
        def DomainEndpoint(value)
          dsl_attribute(:DomainEndpoint, value)
        end

        #   @param [EBSOptions|JSONable] value
        #     The value to use for EBSOptions
        # @@overload EBSOptions(&block)
        #   Set :EBSOptions from block via instance eval of a new EBSOptions
        def EBSOptions(value = nil, **value_hash, &block)
          dsl_attribute(:EBSOptions, value, attr_class: EBSOptions, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Arn
        def Arn(value)
          dsl_attribute(:Arn, value)
        end

        #   @param [EncryptionAtRestOptions|JSONable] value
        #     The value to use for EncryptionAtRestOptions
        # @@overload EncryptionAtRestOptions(&block)
        #   Set :EncryptionAtRestOptions from block via instance eval of a new EncryptionAtRestOptions
        def EncryptionAtRestOptions(value = nil, **value_hash, &block)
          dsl_attribute(:EncryptionAtRestOptions, value, attr_class: EncryptionAtRestOptions, **value_hash, &block)
        end

        # @param [Array<Tag>|JSONable>] values
        #   The List of values to use for Tags
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    The List of values to use for Tags
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::Elasticsearch::Domain]
    def AWS_Elasticsearch_Domain(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::Elasticsearch::Domain, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
