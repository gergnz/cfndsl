# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module KinesisAnalyticsV2
      # Resource Type definition for AWS::KinesisAnalyticsV2::Application
      class Application < ResourceType
        # Property Definition ApplicationCodeConfiguration
        class ApplicationCodeConfiguration < PropertyType
          #   @param [CodeContent|JSONable] value
          #     The value to use for CodeContent
          # @@overload CodeContent(&block)
          #   Set :CodeContent from block via instance eval of a new CodeContent
          def CodeContent(value = nil, **value_hash, &block)
            dsl_attribute(:CodeContent, value, attr_class: CodeContent, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for CodeContentType
          def CodeContentType(value)
            dsl_attribute(:CodeContentType, value)
          end
        end

        # Property Definition EnvironmentProperties
        class EnvironmentProperties < PropertyType
          # @param [Array<PropertyGroup>|JSONable>] values
          #   The List of values to use for PropertyGroups
          def PropertyGroups(values)
            dsl_list_attribute(:PropertyGroups, values)
          end

          #  @param [PropertyGroup|JSONable] value  Append value to the List
          #    The List of values to use for PropertyGroups
          # @@overload PropertyGroup(&block)
          # Append value to the List from block via instance eval of a new PropertyGroup
          def PropertyGroup(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:PropertyGroups, value, fn_if: fn_if, attr_class: PropertyGroup, **value_hash, &block)
          end
        end

        # Property Definition PropertyGroup
        class PropertyGroup < PropertyType
          #   @param [Object|JSONable] value
          #     The value to use for PropertyMap
          def PropertyMap(value)
            dsl_attribute(:PropertyMap, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for PropertyGroupId
          def PropertyGroupId(value)
            dsl_attribute(:PropertyGroupId, value)
          end
        end

        # Property Definition KinesisFirehoseInput
        class KinesisFirehoseInput < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ResourceARN
          def ResourceARN(value)
            dsl_attribute(:ResourceARN, value)
          end
        end

        # Property Definition SqlApplicationConfiguration
        class SqlApplicationConfiguration < PropertyType
          # @param [Array<Input>|JSONable>] values
          #   The List of values to use for Inputs
          def Inputs(values)
            dsl_list_attribute(:Inputs, values)
          end

          #  @param [Input|JSONable] value  Append value to the List
          #    The List of values to use for Inputs
          # @@overload Input(&block)
          # Append value to the List from block via instance eval of a new Input
          def Input(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Inputs, value, fn_if: fn_if, attr_class: Input, **value_hash, &block)
          end
        end

        # Property Definition JSONMappingParameters
        class JSONMappingParameters < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for RecordRowPath
          def RecordRowPath(value)
            dsl_attribute(:RecordRowPath, value)
          end
        end

        # Property Definition ApplicationSnapshotConfiguration
        class ApplicationSnapshotConfiguration < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for SnapshotsEnabled
          def SnapshotsEnabled(value)
            dsl_attribute(:SnapshotsEnabled, value)
          end
        end

        # Property Definition Input
        class Input < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for NamePrefix
          def NamePrefix(value)
            dsl_attribute(:NamePrefix, value)
          end

          #   @param [InputSchema|JSONable] value
          #     The value to use for InputSchema
          # @@overload InputSchema(&block)
          #   Set :InputSchema from block via instance eval of a new InputSchema
          def InputSchema(value = nil, **value_hash, &block)
            dsl_attribute(:InputSchema, value, attr_class: InputSchema, **value_hash, &block)
          end

          #   @param [KinesisStreamsInput|JSONable] value
          #     The value to use for KinesisStreamsInput
          # @@overload KinesisStreamsInput(&block)
          #   Set :KinesisStreamsInput from block via instance eval of a new KinesisStreamsInput
          def KinesisStreamsInput(value = nil, **value_hash, &block)
            dsl_attribute(:KinesisStreamsInput, value, attr_class: KinesisStreamsInput, **value_hash, &block)
          end

          #   @param [KinesisFirehoseInput|JSONable] value
          #     The value to use for KinesisFirehoseInput
          # @@overload KinesisFirehoseInput(&block)
          #   Set :KinesisFirehoseInput from block via instance eval of a new KinesisFirehoseInput
          def KinesisFirehoseInput(value = nil, **value_hash, &block)
            dsl_attribute(:KinesisFirehoseInput, value, attr_class: KinesisFirehoseInput, **value_hash, &block)
          end

          #   @param [InputProcessingConfiguration|JSONable] value
          #     The value to use for InputProcessingConfiguration
          # @@overload InputProcessingConfiguration(&block)
          #   Set :InputProcessingConfiguration from block via instance eval of a new InputProcessingConfiguration
          def InputProcessingConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:InputProcessingConfiguration, value, attr_class: InputProcessingConfiguration, **value_hash, &block)
          end

          #   @param [InputParallelism|JSONable] value
          #     The value to use for InputParallelism
          # @@overload InputParallelism(&block)
          #   Set :InputParallelism from block via instance eval of a new InputParallelism
          def InputParallelism(value = nil, **value_hash, &block)
            dsl_attribute(:InputParallelism, value, attr_class: InputParallelism, **value_hash, &block)
          end
        end

        # Property Definition InputSchema
        class InputSchema < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for RecordEncoding
          def RecordEncoding(value)
            dsl_attribute(:RecordEncoding, value)
          end

          # @param [Array<RecordColumn>|JSONable>] values
          #   The List of values to use for RecordColumns
          def RecordColumns(values)
            dsl_list_attribute(:RecordColumns, values)
          end

          #  @param [RecordColumn|JSONable] value  Append value to the List
          #    The List of values to use for RecordColumns
          # @@overload RecordColumn(&block)
          # Append value to the List from block via instance eval of a new RecordColumn
          def RecordColumn(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:RecordColumns, value, fn_if: fn_if, attr_class: RecordColumn, **value_hash, &block)
          end

          #   @param [RecordFormat|JSONable] value
          #     The value to use for RecordFormat
          # @@overload RecordFormat(&block)
          #   Set :RecordFormat from block via instance eval of a new RecordFormat
          def RecordFormat(value = nil, **value_hash, &block)
            dsl_attribute(:RecordFormat, value, attr_class: RecordFormat, **value_hash, &block)
          end
        end

        # Property Definition KinesisStreamsInput
        class KinesisStreamsInput < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ResourceARN
          def ResourceARN(value)
            dsl_attribute(:ResourceARN, value)
          end
        end

        # Property Definition S3ContentLocation
        class S3ContentLocation < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for BucketARN
          def BucketARN(value)
            dsl_attribute(:BucketARN, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for FileKey
          def FileKey(value)
            dsl_attribute(:FileKey, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ObjectVersion
          def ObjectVersion(value)
            dsl_attribute(:ObjectVersion, value)
          end
        end

        # Property Definition ParallelismConfiguration
        class ParallelismConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ConfigurationType
          def ConfigurationType(value)
            dsl_attribute(:ConfigurationType, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for ParallelismPerKPU
          def ParallelismPerKPU(value)
            dsl_attribute(:ParallelismPerKPU, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for Parallelism
          def Parallelism(value)
            dsl_attribute(:Parallelism, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for AutoScalingEnabled
          def AutoScalingEnabled(value)
            dsl_attribute(:AutoScalingEnabled, value)
          end
        end

        # Property Definition CodeContent
        class CodeContent < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ZipFileContent
          def ZipFileContent(value)
            dsl_attribute(:ZipFileContent, value)
          end

          #   @param [S3ContentLocation|JSONable] value
          #     The value to use for S3ContentLocation
          # @@overload S3ContentLocation(&block)
          #   Set :S3ContentLocation from block via instance eval of a new S3ContentLocation
          def S3ContentLocation(value = nil, **value_hash, &block)
            dsl_attribute(:S3ContentLocation, value, attr_class: S3ContentLocation, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for TextContent
          def TextContent(value)
            dsl_attribute(:TextContent, value)
          end
        end

        # Property Definition MappingParameters
        class MappingParameters < PropertyType
          #   @param [CSVMappingParameters|JSONable] value
          #     The value to use for CSVMappingParameters
          # @@overload CSVMappingParameters(&block)
          #   Set :CSVMappingParameters from block via instance eval of a new CSVMappingParameters
          def CSVMappingParameters(value = nil, **value_hash, &block)
            dsl_attribute(:CSVMappingParameters, value, attr_class: CSVMappingParameters, **value_hash, &block)
          end

          #   @param [JSONMappingParameters|JSONable] value
          #     The value to use for JSONMappingParameters
          # @@overload JSONMappingParameters(&block)
          #   Set :JSONMappingParameters from block via instance eval of a new JSONMappingParameters
          def JSONMappingParameters(value = nil, **value_hash, &block)
            dsl_attribute(:JSONMappingParameters, value, attr_class: JSONMappingParameters, **value_hash, &block)
          end
        end

        # Property Definition InputParallelism
        class InputParallelism < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for Count
          def Count(value)
            dsl_attribute(:Count, value)
          end
        end

        # Property Definition ApplicationConfiguration
        class ApplicationConfiguration < PropertyType
          #   @param [ApplicationCodeConfiguration|JSONable] value
          #     The value to use for ApplicationCodeConfiguration
          # @@overload ApplicationCodeConfiguration(&block)
          #   Set :ApplicationCodeConfiguration from block via instance eval of a new ApplicationCodeConfiguration
          def ApplicationCodeConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:ApplicationCodeConfiguration, value, attr_class: ApplicationCodeConfiguration, **value_hash, &block)
          end

          #   @param [EnvironmentProperties|JSONable] value
          #     The value to use for EnvironmentProperties
          # @@overload EnvironmentProperties(&block)
          #   Set :EnvironmentProperties from block via instance eval of a new EnvironmentProperties
          def EnvironmentProperties(value = nil, **value_hash, &block)
            dsl_attribute(:EnvironmentProperties, value, attr_class: EnvironmentProperties, **value_hash, &block)
          end

          #   @param [FlinkApplicationConfiguration|JSONable] value
          #     The value to use for FlinkApplicationConfiguration
          # @@overload FlinkApplicationConfiguration(&block)
          #   Set :FlinkApplicationConfiguration from block via instance eval of a new FlinkApplicationConfiguration
          def FlinkApplicationConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:FlinkApplicationConfiguration, value, attr_class: FlinkApplicationConfiguration, **value_hash, &block)
          end

          #   @param [SqlApplicationConfiguration|JSONable] value
          #     The value to use for SqlApplicationConfiguration
          # @@overload SqlApplicationConfiguration(&block)
          #   Set :SqlApplicationConfiguration from block via instance eval of a new SqlApplicationConfiguration
          def SqlApplicationConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:SqlApplicationConfiguration, value, attr_class: SqlApplicationConfiguration, **value_hash, &block)
          end

          #   @param [ApplicationSnapshotConfiguration|JSONable] value
          #     The value to use for ApplicationSnapshotConfiguration
          # @@overload ApplicationSnapshotConfiguration(&block)
          #   Set :ApplicationSnapshotConfiguration from block via instance eval of a new ApplicationSnapshotConfiguration
          def ApplicationSnapshotConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:ApplicationSnapshotConfiguration, value, attr_class: ApplicationSnapshotConfiguration, **value_hash, &block)
          end
        end

        # Property Definition InputProcessingConfiguration
        class InputProcessingConfiguration < PropertyType
          #   @param [InputLambdaProcessor|JSONable] value
          #     The value to use for InputLambdaProcessor
          # @@overload InputLambdaProcessor(&block)
          #   Set :InputLambdaProcessor from block via instance eval of a new InputLambdaProcessor
          def InputLambdaProcessor(value = nil, **value_hash, &block)
            dsl_attribute(:InputLambdaProcessor, value, attr_class: InputLambdaProcessor, **value_hash, &block)
          end
        end

        # Property Definition RecordFormat
        class RecordFormat < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for RecordFormatType
          def RecordFormatType(value)
            dsl_attribute(:RecordFormatType, value)
          end

          #   @param [MappingParameters|JSONable] value
          #     The value to use for MappingParameters
          # @@overload MappingParameters(&block)
          #   Set :MappingParameters from block via instance eval of a new MappingParameters
          def MappingParameters(value = nil, **value_hash, &block)
            dsl_attribute(:MappingParameters, value, attr_class: MappingParameters, **value_hash, &block)
          end
        end

        # Property Definition MonitoringConfiguration
        class MonitoringConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ConfigurationType
          def ConfigurationType(value)
            dsl_attribute(:ConfigurationType, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for MetricsLevel
          def MetricsLevel(value)
            dsl_attribute(:MetricsLevel, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for LogLevel
          def LogLevel(value)
            dsl_attribute(:LogLevel, value)
          end
        end

        # Property Definition RecordColumn
        class RecordColumn < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Mapping
          def Mapping(value)
            dsl_attribute(:Mapping, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for SqlType
          def SqlType(value)
            dsl_attribute(:SqlType, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end
        end

        # Property Definition CSVMappingParameters
        class CSVMappingParameters < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for RecordColumnDelimiter
          def RecordColumnDelimiter(value)
            dsl_attribute(:RecordColumnDelimiter, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for RecordRowDelimiter
          def RecordRowDelimiter(value)
            dsl_attribute(:RecordRowDelimiter, value)
          end
        end

        # Property Definition CheckpointConfiguration
        class CheckpointConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ConfigurationType
          def ConfigurationType(value)
            dsl_attribute(:ConfigurationType, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for CheckpointInterval
          def CheckpointInterval(value)
            dsl_attribute(:CheckpointInterval, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for CheckpointingEnabled
          def CheckpointingEnabled(value)
            dsl_attribute(:CheckpointingEnabled, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for MinPauseBetweenCheckpoints
          def MinPauseBetweenCheckpoints(value)
            dsl_attribute(:MinPauseBetweenCheckpoints, value)
          end
        end

        # Property Definition FlinkApplicationConfiguration
        class FlinkApplicationConfiguration < PropertyType
          #   @param [MonitoringConfiguration|JSONable] value
          #     The value to use for MonitoringConfiguration
          # @@overload MonitoringConfiguration(&block)
          #   Set :MonitoringConfiguration from block via instance eval of a new MonitoringConfiguration
          def MonitoringConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:MonitoringConfiguration, value, attr_class: MonitoringConfiguration, **value_hash, &block)
          end

          #   @param [CheckpointConfiguration|JSONable] value
          #     The value to use for CheckpointConfiguration
          # @@overload CheckpointConfiguration(&block)
          #   Set :CheckpointConfiguration from block via instance eval of a new CheckpointConfiguration
          def CheckpointConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:CheckpointConfiguration, value, attr_class: CheckpointConfiguration, **value_hash, &block)
          end

          #   @param [ParallelismConfiguration|JSONable] value
          #     The value to use for ParallelismConfiguration
          # @@overload ParallelismConfiguration(&block)
          #   Set :ParallelismConfiguration from block via instance eval of a new ParallelismConfiguration
          def ParallelismConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:ParallelismConfiguration, value, attr_class: ParallelismConfiguration, **value_hash, &block)
          end
        end

        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end
        end

        # Property Definition InputLambdaProcessor
        class InputLambdaProcessor < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ResourceARN
          def ResourceARN(value)
            dsl_attribute(:ResourceARN, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for ApplicationName
        def ApplicationName(value)
          dsl_attribute(:ApplicationName, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for RuntimeEnvironment
        def RuntimeEnvironment(value)
          dsl_attribute(:RuntimeEnvironment, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [ApplicationConfiguration|JSONable] value
        #     The value to use for ApplicationConfiguration
        # @@overload ApplicationConfiguration(&block)
        #   Set :ApplicationConfiguration from block via instance eval of a new ApplicationConfiguration
        def ApplicationConfiguration(value = nil, **value_hash, &block)
          dsl_attribute(:ApplicationConfiguration, value, attr_class: ApplicationConfiguration, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for ApplicationDescription
        def ApplicationDescription(value)
          dsl_attribute(:ApplicationDescription, value)
        end

        # @param [Array<Tag>|JSONable>] values
        #   The List of values to use for Tags
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    The List of values to use for Tags
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for ServiceExecutionRole
        def ServiceExecutionRole(value)
          dsl_attribute(:ServiceExecutionRole, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::KinesisAnalyticsV2::Application]
    def AWS_KinesisAnalyticsV2_Application(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::KinesisAnalyticsV2::Application, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
