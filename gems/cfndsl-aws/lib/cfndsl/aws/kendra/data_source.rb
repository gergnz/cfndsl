# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module Kendra
      # Kendra DataSource
      # @see https://docs.aws.amazon.com/kendra/latest/dg/hiw-data-source.html
      class DataSource < ResourceType
        # A label for tagging Kendra resources
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     A string used to identify this tag
          def Key(value)
            dsl_attribute(:Key, value)
          end

          #   @param [String|JSONable] value
          #     A string containing the value for the tag
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        # Property Definition S3Path
        class S3Path < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Bucket
          def Bucket(value)
            dsl_attribute(:Bucket, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end
        end

        # Property Definition DocumentsMetadataConfiguration
        class DocumentsMetadataConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for S3Prefix
          def S3Prefix(value)
            dsl_attribute(:S3Prefix, value)
          end
        end

        # Property Definition AccessControlListConfiguration
        class AccessControlListConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for KeyPath
          def KeyPath(value)
            dsl_attribute(:KeyPath, value)
          end
        end

        # S3 data source configuration
        class S3DataSourceConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for BucketName
          def BucketName(value)
            dsl_attribute(:BucketName, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for InclusionPrefixes
          def InclusionPrefixes(values)
            dsl_list_attribute(:InclusionPrefixes, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for InclusionPrefixes
          def InclusionPrefixe(value, fn_if: nil)
            dsl_push_attribute(:InclusionPrefixes, value, fn_if: fn_if)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for ExclusionPatterns
          def ExclusionPatterns(values)
            dsl_list_attribute(:ExclusionPatterns, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for ExclusionPatterns
          def ExclusionPattern(value, fn_if: nil)
            dsl_push_attribute(:ExclusionPatterns, value, fn_if: fn_if)
          end

          #   @param [DocumentsMetadataConfiguration|JSONable] value
          #     The value to use for DocumentsMetadataConfiguration
          # @@overload DocumentsMetadataConfiguration(&block)
          #   Set :DocumentsMetadataConfiguration from block via instance eval of a new DocumentsMetadataConfiguration
          def DocumentsMetadataConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:DocumentsMetadataConfiguration, value, attr_class: DocumentsMetadataConfiguration, **value_hash, &block)
          end

          #   @param [AccessControlListConfiguration|JSONable] value
          #     The value to use for AccessControlListConfiguration
          # @@overload AccessControlListConfiguration(&block)
          #   Set :AccessControlListConfiguration from block via instance eval of a new AccessControlListConfiguration
          def AccessControlListConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:AccessControlListConfiguration, value, attr_class: AccessControlListConfiguration, **value_hash, &block)
          end
        end

        # Property Definition DataSourceVpcConfiguration
        class DataSourceVpcConfiguration < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for SubnetIds
          def SubnetIds(values)
            dsl_list_attribute(:SubnetIds, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for SubnetIds
          def SubnetId(value, fn_if: nil)
            dsl_push_attribute(:SubnetIds, value, fn_if: fn_if)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for SecurityGroupIds
          def SecurityGroupIds(values)
            dsl_list_attribute(:SecurityGroupIds, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for SecurityGroupIds
          def SecurityGroupId(value, fn_if: nil)
            dsl_push_attribute(:SecurityGroupIds, value, fn_if: fn_if)
          end
        end

        # Property Definition DataSourceToIndexFieldMapping
        class DataSourceToIndexFieldMapping < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for DataSourceFieldName
          def DataSourceFieldName(value)
            dsl_attribute(:DataSourceFieldName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for DateFieldFormat
          def DateFieldFormat(value)
            dsl_attribute(:DateFieldFormat, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for IndexFieldName
          def IndexFieldName(value)
            dsl_attribute(:IndexFieldName, value)
          end
        end

        # SharePoint configuration
        class SharePointConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for SharePointVersion
          def SharePointVersion(value)
            dsl_attribute(:SharePointVersion, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Urls
          def Urls(values)
            dsl_list_attribute(:Urls, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Urls
          def Url(value, fn_if: nil)
            dsl_push_attribute(:Urls, value, fn_if: fn_if)
          end

          #   @param [String|JSONable] value
          #     The value to use for SecretArn
          def SecretArn(value)
            dsl_attribute(:SecretArn, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for CrawlAttachments
          def CrawlAttachments(value)
            dsl_attribute(:CrawlAttachments, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for UseChangeLog
          def UseChangeLog(value)
            dsl_attribute(:UseChangeLog, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for InclusionPatterns
          def InclusionPatterns(values)
            dsl_list_attribute(:InclusionPatterns, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for InclusionPatterns
          def InclusionPattern(value, fn_if: nil)
            dsl_push_attribute(:InclusionPatterns, value, fn_if: fn_if)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for ExclusionPatterns
          def ExclusionPatterns(values)
            dsl_list_attribute(:ExclusionPatterns, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for ExclusionPatterns
          def ExclusionPattern(value, fn_if: nil)
            dsl_push_attribute(:ExclusionPatterns, value, fn_if: fn_if)
          end

          #   @param [DataSourceVpcConfiguration|JSONable] value
          #     The value to use for VpcConfiguration
          # @@overload VpcConfiguration(&block)
          #   Set :VpcConfiguration from block via instance eval of a new DataSourceVpcConfiguration
          def VpcConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:VpcConfiguration, value, attr_class: DataSourceVpcConfiguration, **value_hash, &block)
          end

          # @param [Array<DataSourceToIndexFieldMapping>|JSONable>] values
          #   The List of values to use for FieldMappings
          def FieldMappings(values)
            dsl_list_attribute(:FieldMappings, values)
          end

          #  @param [DataSourceToIndexFieldMapping|JSONable] value  Append value to the List
          #    The List of values to use for FieldMappings
          # @@overload FieldMapping(&block)
          # Append value to the List from block via instance eval of a new DataSourceToIndexFieldMapping
          def FieldMapping(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:FieldMappings, value, fn_if: fn_if, attr_class: DataSourceToIndexFieldMapping, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for DocumentTitleFieldName
          def DocumentTitleFieldName(value)
            dsl_attribute(:DocumentTitleFieldName, value)
          end
        end

        # Property Definition SalesforceConfiguration
        class SalesforceConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ServerUrl
          def ServerUrl(value)
            dsl_attribute(:ServerUrl, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for SecretArn
          def SecretArn(value)
            dsl_attribute(:SecretArn, value)
          end

          # @param [Array<SalesforceStandardObjectConfiguration>|JSONable>] values
          #   The List of values to use for StandardObjectConfigurations
          def StandardObjectConfigurations(values)
            dsl_list_attribute(:StandardObjectConfigurations, values)
          end

          #  @param [SalesforceStandardObjectConfiguration|JSONable] value  Append value to the List
          #    The List of values to use for StandardObjectConfigurations
          # @@overload StandardObjectConfiguration(&block)
          # Append value to the List from block via instance eval of a new SalesforceStandardObjectConfiguration
          def StandardObjectConfiguration(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:StandardObjectConfigurations, value, fn_if: fn_if, attr_class: SalesforceStandardObjectConfiguration, **value_hash, &block)
          end

          #   @param [SalesforceKnowledgeArticleConfiguration|JSONable] value
          #     The value to use for KnowledgeArticleConfiguration
          # @@overload KnowledgeArticleConfiguration(&block)
          #   Set :KnowledgeArticleConfiguration from block via instance eval of a new SalesforceKnowledgeArticleConfiguration
          def KnowledgeArticleConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:KnowledgeArticleConfiguration, value, attr_class: SalesforceKnowledgeArticleConfiguration, **value_hash, &block)
          end

          #   @param [SalesforceChatterFeedConfiguration|JSONable] value
          #     The value to use for ChatterFeedConfiguration
          # @@overload ChatterFeedConfiguration(&block)
          #   Set :ChatterFeedConfiguration from block via instance eval of a new SalesforceChatterFeedConfiguration
          def ChatterFeedConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:ChatterFeedConfiguration, value, attr_class: SalesforceChatterFeedConfiguration, **value_hash, &block)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for CrawlAttachments
          def CrawlAttachments(value)
            dsl_attribute(:CrawlAttachments, value)
          end

          #   @param [SalesforceStandardObjectAttachmentConfiguration|JSONable] value
          #     The value to use for StandardObjectAttachmentConfiguration
          # @@overload StandardObjectAttachmentConfiguration(&block)
          #   Set :StandardObjectAttachmentConfiguration from block via instance eval of a new SalesforceStandardObjectAttachmentConfiguration
          def StandardObjectAttachmentConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:StandardObjectAttachmentConfiguration, value, attr_class: SalesforceStandardObjectAttachmentConfiguration, **value_hash, &block)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for IncludeAttachmentFilePatterns
          def IncludeAttachmentFilePatterns(values)
            dsl_list_attribute(:IncludeAttachmentFilePatterns, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for IncludeAttachmentFilePatterns
          def IncludeAttachmentFilePattern(value, fn_if: nil)
            dsl_push_attribute(:IncludeAttachmentFilePatterns, value, fn_if: fn_if)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for ExcludeAttachmentFilePatterns
          def ExcludeAttachmentFilePatterns(values)
            dsl_list_attribute(:ExcludeAttachmentFilePatterns, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for ExcludeAttachmentFilePatterns
          def ExcludeAttachmentFilePattern(value, fn_if: nil)
            dsl_push_attribute(:ExcludeAttachmentFilePatterns, value, fn_if: fn_if)
          end
        end

        # Property Definition SalesforceStandardObjectConfiguration
        class SalesforceStandardObjectConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for DocumentDataFieldName
          def DocumentDataFieldName(value)
            dsl_attribute(:DocumentDataFieldName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for DocumentTitleFieldName
          def DocumentTitleFieldName(value)
            dsl_attribute(:DocumentTitleFieldName, value)
          end

          # @param [Array<DataSourceToIndexFieldMapping>|JSONable>] values
          #   The List of values to use for FieldMappings
          def FieldMappings(values)
            dsl_list_attribute(:FieldMappings, values)
          end

          #  @param [DataSourceToIndexFieldMapping|JSONable] value  Append value to the List
          #    The List of values to use for FieldMappings
          # @@overload FieldMapping(&block)
          # Append value to the List from block via instance eval of a new DataSourceToIndexFieldMapping
          def FieldMapping(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:FieldMappings, value, fn_if: fn_if, attr_class: DataSourceToIndexFieldMapping, **value_hash, &block)
          end
        end

        # Property Definition SalesforceKnowledgeArticleConfiguration
        class SalesforceKnowledgeArticleConfiguration < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for IncludedStates
          def IncludedStates(values)
            dsl_list_attribute(:IncludedStates, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for IncludedStates
          def IncludedState(value, fn_if: nil)
            dsl_push_attribute(:IncludedStates, value, fn_if: fn_if)
          end

          #   @param [SalesforceStandardKnowledgeArticleTypeConfiguration|JSONable] value
          #     The value to use for StandardKnowledgeArticleTypeConfiguration
          # @@overload StandardKnowledgeArticleTypeConfiguration(&block)
          #   Set :StandardKnowledgeArticleTypeConfiguration from block via instance eval of a new SalesforceStandardKnowledgeArticleTypeConfiguration
          def StandardKnowledgeArticleTypeConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:StandardKnowledgeArticleTypeConfiguration, value, attr_class: SalesforceStandardKnowledgeArticleTypeConfiguration, **value_hash, &block)
          end

          # @param [Array<SalesforceCustomKnowledgeArticleTypeConfiguration>|JSONable>] values
          #   The List of values to use for CustomKnowledgeArticleTypeConfigurations
          def CustomKnowledgeArticleTypeConfigurations(values)
            dsl_list_attribute(:CustomKnowledgeArticleTypeConfigurations, values)
          end

          #  @param [SalesforceCustomKnowledgeArticleTypeConfiguration|JSONable] value  Append value to the List
          #    The List of values to use for CustomKnowledgeArticleTypeConfigurations
          # @@overload CustomKnowledgeArticleTypeConfiguration(&block)
          # Append value to the List from block via instance eval of a new SalesforceCustomKnowledgeArticleTypeConfiguration
          def CustomKnowledgeArticleTypeConfiguration(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:CustomKnowledgeArticleTypeConfigurations, value, fn_if: fn_if, attr_class: SalesforceCustomKnowledgeArticleTypeConfiguration, **value_hash, &block)
          end
        end

        # Property Definition SalesforceStandardKnowledgeArticleTypeConfiguration
        class SalesforceStandardKnowledgeArticleTypeConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for DocumentDataFieldName
          def DocumentDataFieldName(value)
            dsl_attribute(:DocumentDataFieldName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for DocumentTitleFieldName
          def DocumentTitleFieldName(value)
            dsl_attribute(:DocumentTitleFieldName, value)
          end

          # @param [Array<DataSourceToIndexFieldMapping>|JSONable>] values
          #   The List of values to use for FieldMappings
          def FieldMappings(values)
            dsl_list_attribute(:FieldMappings, values)
          end

          #  @param [DataSourceToIndexFieldMapping|JSONable] value  Append value to the List
          #    The List of values to use for FieldMappings
          # @@overload FieldMapping(&block)
          # Append value to the List from block via instance eval of a new DataSourceToIndexFieldMapping
          def FieldMapping(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:FieldMappings, value, fn_if: fn_if, attr_class: DataSourceToIndexFieldMapping, **value_hash, &block)
          end
        end

        # Property Definition SalesforceCustomKnowledgeArticleTypeConfiguration
        class SalesforceCustomKnowledgeArticleTypeConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for DocumentDataFieldName
          def DocumentDataFieldName(value)
            dsl_attribute(:DocumentDataFieldName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for DocumentTitleFieldName
          def DocumentTitleFieldName(value)
            dsl_attribute(:DocumentTitleFieldName, value)
          end

          # @param [Array<DataSourceToIndexFieldMapping>|JSONable>] values
          #   The List of values to use for FieldMappings
          def FieldMappings(values)
            dsl_list_attribute(:FieldMappings, values)
          end

          #  @param [DataSourceToIndexFieldMapping|JSONable] value  Append value to the List
          #    The List of values to use for FieldMappings
          # @@overload FieldMapping(&block)
          # Append value to the List from block via instance eval of a new DataSourceToIndexFieldMapping
          def FieldMapping(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:FieldMappings, value, fn_if: fn_if, attr_class: DataSourceToIndexFieldMapping, **value_hash, &block)
          end
        end

        # Property Definition SalesforceChatterFeedConfiguration
        class SalesforceChatterFeedConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for DocumentDataFieldName
          def DocumentDataFieldName(value)
            dsl_attribute(:DocumentDataFieldName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for DocumentTitleFieldName
          def DocumentTitleFieldName(value)
            dsl_attribute(:DocumentTitleFieldName, value)
          end

          # @param [Array<DataSourceToIndexFieldMapping>|JSONable>] values
          #   The List of values to use for FieldMappings
          def FieldMappings(values)
            dsl_list_attribute(:FieldMappings, values)
          end

          #  @param [DataSourceToIndexFieldMapping|JSONable] value  Append value to the List
          #    The List of values to use for FieldMappings
          # @@overload FieldMapping(&block)
          # Append value to the List from block via instance eval of a new DataSourceToIndexFieldMapping
          def FieldMapping(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:FieldMappings, value, fn_if: fn_if, attr_class: DataSourceToIndexFieldMapping, **value_hash, &block)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for IncludeFilterTypes
          def IncludeFilterTypes(values)
            dsl_list_attribute(:IncludeFilterTypes, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for IncludeFilterTypes
          def IncludeFilterTyp(value, fn_if: nil)
            dsl_push_attribute(:IncludeFilterTypes, value, fn_if: fn_if)
          end
        end

        # Property Definition SalesforceStandardObjectAttachmentConfiguration
        class SalesforceStandardObjectAttachmentConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for DocumentTitleFieldName
          def DocumentTitleFieldName(value)
            dsl_attribute(:DocumentTitleFieldName, value)
          end

          # @param [Array<DataSourceToIndexFieldMapping>|JSONable>] values
          #   The List of values to use for FieldMappings
          def FieldMappings(values)
            dsl_list_attribute(:FieldMappings, values)
          end

          #  @param [DataSourceToIndexFieldMapping|JSONable] value  Append value to the List
          #    The List of values to use for FieldMappings
          # @@overload FieldMapping(&block)
          # Append value to the List from block via instance eval of a new DataSourceToIndexFieldMapping
          def FieldMapping(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:FieldMappings, value, fn_if: fn_if, attr_class: DataSourceToIndexFieldMapping, **value_hash, &block)
          end
        end

        # Property Definition DatabaseConfiguration
        class DatabaseConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for DatabaseEngineType
          def DatabaseEngineType(value)
            dsl_attribute(:DatabaseEngineType, value)
          end

          #   @param [ConnectionConfiguration|JSONable] value
          #     The value to use for ConnectionConfiguration
          # @@overload ConnectionConfiguration(&block)
          #   Set :ConnectionConfiguration from block via instance eval of a new ConnectionConfiguration
          def ConnectionConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:ConnectionConfiguration, value, attr_class: ConnectionConfiguration, **value_hash, &block)
          end

          #   @param [DataSourceVpcConfiguration|JSONable] value
          #     The value to use for VpcConfiguration
          # @@overload VpcConfiguration(&block)
          #   Set :VpcConfiguration from block via instance eval of a new DataSourceVpcConfiguration
          def VpcConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:VpcConfiguration, value, attr_class: DataSourceVpcConfiguration, **value_hash, &block)
          end

          #   @param [ColumnConfiguration|JSONable] value
          #     The value to use for ColumnConfiguration
          # @@overload ColumnConfiguration(&block)
          #   Set :ColumnConfiguration from block via instance eval of a new ColumnConfiguration
          def ColumnConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:ColumnConfiguration, value, attr_class: ColumnConfiguration, **value_hash, &block)
          end

          #   @param [AclConfiguration|JSONable] value
          #     The value to use for AclConfiguration
          # @@overload AclConfiguration(&block)
          #   Set :AclConfiguration from block via instance eval of a new AclConfiguration
          def AclConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:AclConfiguration, value, attr_class: AclConfiguration, **value_hash, &block)
          end

          #   @param [SqlConfiguration|JSONable] value
          #     The value to use for SqlConfiguration
          # @@overload SqlConfiguration(&block)
          #   Set :SqlConfiguration from block via instance eval of a new SqlConfiguration
          def SqlConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:SqlConfiguration, value, attr_class: SqlConfiguration, **value_hash, &block)
          end
        end

        # Property Definition ConnectionConfiguration
        class ConnectionConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for DatabaseHost
          def DatabaseHost(value)
            dsl_attribute(:DatabaseHost, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for DatabasePort
          def DatabasePort(value)
            dsl_attribute(:DatabasePort, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for DatabaseName
          def DatabaseName(value)
            dsl_attribute(:DatabaseName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for TableName
          def TableName(value)
            dsl_attribute(:TableName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for SecretArn
          def SecretArn(value)
            dsl_attribute(:SecretArn, value)
          end
        end

        # Property Definition ColumnConfiguration
        class ColumnConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for DocumentIdColumnName
          def DocumentIdColumnName(value)
            dsl_attribute(:DocumentIdColumnName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for DocumentDataColumnName
          def DocumentDataColumnName(value)
            dsl_attribute(:DocumentDataColumnName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for DocumentTitleColumnName
          def DocumentTitleColumnName(value)
            dsl_attribute(:DocumentTitleColumnName, value)
          end

          # @param [Array<DataSourceToIndexFieldMapping>|JSONable>] values
          #   The List of values to use for FieldMappings
          def FieldMappings(values)
            dsl_list_attribute(:FieldMappings, values)
          end

          #  @param [DataSourceToIndexFieldMapping|JSONable] value  Append value to the List
          #    The List of values to use for FieldMappings
          # @@overload FieldMapping(&block)
          # Append value to the List from block via instance eval of a new DataSourceToIndexFieldMapping
          def FieldMapping(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:FieldMappings, value, fn_if: fn_if, attr_class: DataSourceToIndexFieldMapping, **value_hash, &block)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for ChangeDetectingColumns
          def ChangeDetectingColumns(values)
            dsl_list_attribute(:ChangeDetectingColumns, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for ChangeDetectingColumns
          def ChangeDetectingColumn(value, fn_if: nil)
            dsl_push_attribute(:ChangeDetectingColumns, value, fn_if: fn_if)
          end
        end

        # Property Definition SqlConfiguration
        class SqlConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for QueryIdentifiersEnclosingOption
          def QueryIdentifiersEnclosingOption(value)
            dsl_attribute(:QueryIdentifiersEnclosingOption, value)
          end
        end

        # Property Definition AclConfiguration
        class AclConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for AllowedGroupsColumnName
          def AllowedGroupsColumnName(value)
            dsl_attribute(:AllowedGroupsColumnName, value)
          end
        end

        # Property Definition OneDriveConfiguration
        class OneDriveConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for TenantDomain
          def TenantDomain(value)
            dsl_attribute(:TenantDomain, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for SecretArn
          def SecretArn(value)
            dsl_attribute(:SecretArn, value)
          end

          #   @param [OneDriveUsers|JSONable] value
          #     The value to use for OneDriveUsers
          # @@overload OneDriveUsers(&block)
          #   Set :OneDriveUsers from block via instance eval of a new OneDriveUsers
          def OneDriveUsers(value = nil, **value_hash, &block)
            dsl_attribute(:OneDriveUsers, value, attr_class: OneDriveUsers, **value_hash, &block)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for InclusionPatterns
          def InclusionPatterns(values)
            dsl_list_attribute(:InclusionPatterns, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for InclusionPatterns
          def InclusionPattern(value, fn_if: nil)
            dsl_push_attribute(:InclusionPatterns, value, fn_if: fn_if)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for ExclusionPatterns
          def ExclusionPatterns(values)
            dsl_list_attribute(:ExclusionPatterns, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for ExclusionPatterns
          def ExclusionPattern(value, fn_if: nil)
            dsl_push_attribute(:ExclusionPatterns, value, fn_if: fn_if)
          end

          # @param [Array<DataSourceToIndexFieldMapping>|JSONable>] values
          #   The List of values to use for FieldMappings
          def FieldMappings(values)
            dsl_list_attribute(:FieldMappings, values)
          end

          #  @param [DataSourceToIndexFieldMapping|JSONable] value  Append value to the List
          #    The List of values to use for FieldMappings
          # @@overload FieldMapping(&block)
          # Append value to the List from block via instance eval of a new DataSourceToIndexFieldMapping
          def FieldMapping(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:FieldMappings, value, fn_if: fn_if, attr_class: DataSourceToIndexFieldMapping, **value_hash, &block)
          end
        end

        # Property Definition OneDriveUsers
        class OneDriveUsers < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for OneDriveUserList
          def OneDriveUserList(values)
            dsl_list_attribute(:OneDriveUserList, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for OneDriveUserList
          def OneDriveUser(value, fn_if: nil)
            dsl_push_attribute(:OneDriveUserList, value, fn_if: fn_if)
          end

          #   @param [S3Path|JSONable] value
          #     The value to use for OneDriveUserS3Path
          # @@overload OneDriveUserS3Path(&block)
          #   Set :OneDriveUserS3Path from block via instance eval of a new S3Path
          def OneDriveUserS3Path(value = nil, **value_hash, &block)
            dsl_attribute(:OneDriveUserS3Path, value, attr_class: S3Path, **value_hash, &block)
          end
        end

        # Property Definition ServiceNowConfiguration
        class ServiceNowConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for HostUrl
          def HostUrl(value)
            dsl_attribute(:HostUrl, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for SecretArn
          def SecretArn(value)
            dsl_attribute(:SecretArn, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ServiceNowBuildVersion
          def ServiceNowBuildVersion(value)
            dsl_attribute(:ServiceNowBuildVersion, value)
          end

          #   @param [ServiceNowKnowledgeArticleConfiguration|JSONable] value
          #     The value to use for KnowledgeArticleConfiguration
          # @@overload KnowledgeArticleConfiguration(&block)
          #   Set :KnowledgeArticleConfiguration from block via instance eval of a new ServiceNowKnowledgeArticleConfiguration
          def KnowledgeArticleConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:KnowledgeArticleConfiguration, value, attr_class: ServiceNowKnowledgeArticleConfiguration, **value_hash, &block)
          end

          #   @param [ServiceNowServiceCatalogConfiguration|JSONable] value
          #     The value to use for ServiceCatalogConfiguration
          # @@overload ServiceCatalogConfiguration(&block)
          #   Set :ServiceCatalogConfiguration from block via instance eval of a new ServiceNowServiceCatalogConfiguration
          def ServiceCatalogConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:ServiceCatalogConfiguration, value, attr_class: ServiceNowServiceCatalogConfiguration, **value_hash, &block)
          end
        end

        # Property Definition ServiceNowServiceCatalogConfiguration
        class ServiceNowServiceCatalogConfiguration < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for CrawlAttachments
          def CrawlAttachments(value)
            dsl_attribute(:CrawlAttachments, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for IncludeAttachmentFilePatterns
          def IncludeAttachmentFilePatterns(values)
            dsl_list_attribute(:IncludeAttachmentFilePatterns, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for IncludeAttachmentFilePatterns
          def IncludeAttachmentFilePattern(value, fn_if: nil)
            dsl_push_attribute(:IncludeAttachmentFilePatterns, value, fn_if: fn_if)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for ExcludeAttachmentFilePatterns
          def ExcludeAttachmentFilePatterns(values)
            dsl_list_attribute(:ExcludeAttachmentFilePatterns, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for ExcludeAttachmentFilePatterns
          def ExcludeAttachmentFilePattern(value, fn_if: nil)
            dsl_push_attribute(:ExcludeAttachmentFilePatterns, value, fn_if: fn_if)
          end

          #   @param [String|JSONable] value
          #     The value to use for DocumentDataFieldName
          def DocumentDataFieldName(value)
            dsl_attribute(:DocumentDataFieldName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for DocumentTitleFieldName
          def DocumentTitleFieldName(value)
            dsl_attribute(:DocumentTitleFieldName, value)
          end

          # @param [Array<DataSourceToIndexFieldMapping>|JSONable>] values
          #   The List of values to use for FieldMappings
          def FieldMappings(values)
            dsl_list_attribute(:FieldMappings, values)
          end

          #  @param [DataSourceToIndexFieldMapping|JSONable] value  Append value to the List
          #    The List of values to use for FieldMappings
          # @@overload FieldMapping(&block)
          # Append value to the List from block via instance eval of a new DataSourceToIndexFieldMapping
          def FieldMapping(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:FieldMappings, value, fn_if: fn_if, attr_class: DataSourceToIndexFieldMapping, **value_hash, &block)
          end
        end

        # Property Definition ServiceNowKnowledgeArticleConfiguration
        class ServiceNowKnowledgeArticleConfiguration < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for CrawlAttachments
          def CrawlAttachments(value)
            dsl_attribute(:CrawlAttachments, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for IncludeAttachmentFilePatterns
          def IncludeAttachmentFilePatterns(values)
            dsl_list_attribute(:IncludeAttachmentFilePatterns, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for IncludeAttachmentFilePatterns
          def IncludeAttachmentFilePattern(value, fn_if: nil)
            dsl_push_attribute(:IncludeAttachmentFilePatterns, value, fn_if: fn_if)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for ExcludeAttachmentFilePatterns
          def ExcludeAttachmentFilePatterns(values)
            dsl_list_attribute(:ExcludeAttachmentFilePatterns, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for ExcludeAttachmentFilePatterns
          def ExcludeAttachmentFilePattern(value, fn_if: nil)
            dsl_push_attribute(:ExcludeAttachmentFilePatterns, value, fn_if: fn_if)
          end

          #   @param [String|JSONable] value
          #     The value to use for DocumentDataFieldName
          def DocumentDataFieldName(value)
            dsl_attribute(:DocumentDataFieldName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for DocumentTitleFieldName
          def DocumentTitleFieldName(value)
            dsl_attribute(:DocumentTitleFieldName, value)
          end

          # @param [Array<DataSourceToIndexFieldMapping>|JSONable>] values
          #   The List of values to use for FieldMappings
          def FieldMappings(values)
            dsl_list_attribute(:FieldMappings, values)
          end

          #  @param [DataSourceToIndexFieldMapping|JSONable] value  Append value to the List
          #    The List of values to use for FieldMappings
          # @@overload FieldMapping(&block)
          # Append value to the List from block via instance eval of a new DataSourceToIndexFieldMapping
          def FieldMapping(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:FieldMappings, value, fn_if: fn_if, attr_class: DataSourceToIndexFieldMapping, **value_hash, &block)
          end
        end

        # Property Definition DataSourceConfiguration
        class DataSourceConfiguration < PropertyType
          #   @param [S3DataSourceConfiguration|JSONable] value
          #     The value to use for S3Configuration
          # @@overload S3Configuration(&block)
          #   Set :S3Configuration from block via instance eval of a new S3DataSourceConfiguration
          def S3Configuration(value = nil, **value_hash, &block)
            dsl_attribute(:S3Configuration, value, attr_class: S3DataSourceConfiguration, **value_hash, &block)
          end

          #   @param [SharePointConfiguration|JSONable] value
          #     The value to use for SharePointConfiguration
          # @@overload SharePointConfiguration(&block)
          #   Set :SharePointConfiguration from block via instance eval of a new SharePointConfiguration
          def SharePointConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:SharePointConfiguration, value, attr_class: SharePointConfiguration, **value_hash, &block)
          end

          #   @param [SalesforceConfiguration|JSONable] value
          #     The value to use for SalesforceConfiguration
          # @@overload SalesforceConfiguration(&block)
          #   Set :SalesforceConfiguration from block via instance eval of a new SalesforceConfiguration
          def SalesforceConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:SalesforceConfiguration, value, attr_class: SalesforceConfiguration, **value_hash, &block)
          end

          #   @param [OneDriveConfiguration|JSONable] value
          #     The value to use for OneDriveConfiguration
          # @@overload OneDriveConfiguration(&block)
          #   Set :OneDriveConfiguration from block via instance eval of a new OneDriveConfiguration
          def OneDriveConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:OneDriveConfiguration, value, attr_class: OneDriveConfiguration, **value_hash, &block)
          end

          #   @param [ServiceNowConfiguration|JSONable] value
          #     The value to use for ServiceNowConfiguration
          # @@overload ServiceNowConfiguration(&block)
          #   Set :ServiceNowConfiguration from block via instance eval of a new ServiceNowConfiguration
          def ServiceNowConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:ServiceNowConfiguration, value, attr_class: ServiceNowConfiguration, **value_hash, &block)
          end

          #   @param [DatabaseConfiguration|JSONable] value
          #     The value to use for DatabaseConfiguration
          # @@overload DatabaseConfiguration(&block)
          #   Set :DatabaseConfiguration from block via instance eval of a new DatabaseConfiguration
          def DatabaseConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:DatabaseConfiguration, value, attr_class: DatabaseConfiguration, **value_hash, &block)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Arn
        def Arn(value)
          dsl_attribute(:Arn, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Name
        def Name(value)
          dsl_attribute(:Name, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for IndexId
        def IndexId(value)
          dsl_attribute(:IndexId, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Type
        def Type(value)
          dsl_attribute(:Type, value)
        end

        #   @param [DataSourceConfiguration|JSONable] value
        #     The value to use for DataSourceConfiguration
        # @@overload DataSourceConfiguration(&block)
        #   Set :DataSourceConfiguration from block via instance eval of a new DataSourceConfiguration
        def DataSourceConfiguration(value = nil, **value_hash, &block)
          dsl_attribute(:DataSourceConfiguration, value, attr_class: DataSourceConfiguration, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Description
        def Description(value)
          dsl_attribute(:Description, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Schedule
        def Schedule(value)
          dsl_attribute(:Schedule, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for RoleArn
        def RoleArn(value)
          dsl_attribute(:RoleArn, value)
        end

        # @param [Array<Tag>|JSONable>] values
        #   Tags for labeling the data source
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    Tags for labeling the data source
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::Kendra::DataSource]
    def AWS_Kendra_DataSource(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::Kendra::DataSource, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
