# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module IoTEvents
      # Resource Type definition for AWS::IoTEvents::DetectorModel
      class DetectorModel < ResourceType
        # Property Definition Action
        class Action < PropertyType
          #   @param [IotEvents|JSONable] value
          #     The value to use for IotEvents
          # @@overload IotEvents(&block)
          #   Set :IotEvents from block via instance eval of a new IotEvents
          def IotEvents(value = nil, **value_hash, &block)
            dsl_attribute(:IotEvents, value, attr_class: IotEvents, **value_hash, &block)
          end

          #   @param [Firehose|JSONable] value
          #     The value to use for Firehose
          # @@overload Firehose(&block)
          #   Set :Firehose from block via instance eval of a new Firehose
          def Firehose(value = nil, **value_hash, &block)
            dsl_attribute(:Firehose, value, attr_class: Firehose, **value_hash, &block)
          end

          #   @param [IotTopicPublish|JSONable] value
          #     The value to use for IotTopicPublish
          # @@overload IotTopicPublish(&block)
          #   Set :IotTopicPublish from block via instance eval of a new IotTopicPublish
          def IotTopicPublish(value = nil, **value_hash, &block)
            dsl_attribute(:IotTopicPublish, value, attr_class: IotTopicPublish, **value_hash, &block)
          end

          #   @param [DynamoDB|JSONable] value
          #     The value to use for DynamoDB
          # @@overload DynamoDB(&block)
          #   Set :DynamoDB from block via instance eval of a new DynamoDB
          def DynamoDB(value = nil, **value_hash, &block)
            dsl_attribute(:DynamoDB, value, attr_class: DynamoDB, **value_hash, &block)
          end

          #   @param [DynamoDBv2|JSONable] value
          #     The value to use for DynamoDBv2
          # @@overload DynamoDBv2(&block)
          #   Set :DynamoDBv2 from block via instance eval of a new DynamoDBv2
          def DynamoDBv2(value = nil, **value_hash, &block)
            dsl_attribute(:DynamoDBv2, value, attr_class: DynamoDBv2, **value_hash, &block)
          end

          #   @param [IotSiteWise|JSONable] value
          #     The value to use for IotSiteWise
          # @@overload IotSiteWise(&block)
          #   Set :IotSiteWise from block via instance eval of a new IotSiteWise
          def IotSiteWise(value = nil, **value_hash, &block)
            dsl_attribute(:IotSiteWise, value, attr_class: IotSiteWise, **value_hash, &block)
          end

          #   @param [ResetTimer|JSONable] value
          #     The value to use for ResetTimer
          # @@overload ResetTimer(&block)
          #   Set :ResetTimer from block via instance eval of a new ResetTimer
          def ResetTimer(value = nil, **value_hash, &block)
            dsl_attribute(:ResetTimer, value, attr_class: ResetTimer, **value_hash, &block)
          end

          #   @param [Sqs|JSONable] value
          #     The value to use for Sqs
          # @@overload Sqs(&block)
          #   Set :Sqs from block via instance eval of a new Sqs
          def Sqs(value = nil, **value_hash, &block)
            dsl_attribute(:Sqs, value, attr_class: Sqs, **value_hash, &block)
          end

          #   @param [Sns|JSONable] value
          #     The value to use for Sns
          # @@overload Sns(&block)
          #   Set :Sns from block via instance eval of a new Sns
          def Sns(value = nil, **value_hash, &block)
            dsl_attribute(:Sns, value, attr_class: Sns, **value_hash, &block)
          end

          #   @param [SetTimer|JSONable] value
          #     The value to use for SetTimer
          # @@overload SetTimer(&block)
          #   Set :SetTimer from block via instance eval of a new SetTimer
          def SetTimer(value = nil, **value_hash, &block)
            dsl_attribute(:SetTimer, value, attr_class: SetTimer, **value_hash, &block)
          end

          #   @param [ClearTimer|JSONable] value
          #     The value to use for ClearTimer
          # @@overload ClearTimer(&block)
          #   Set :ClearTimer from block via instance eval of a new ClearTimer
          def ClearTimer(value = nil, **value_hash, &block)
            dsl_attribute(:ClearTimer, value, attr_class: ClearTimer, **value_hash, &block)
          end

          #   @param [Lambda|JSONable] value
          #     The value to use for Lambda
          # @@overload Lambda(&block)
          #   Set :Lambda from block via instance eval of a new Lambda
          def Lambda(value = nil, **value_hash, &block)
            dsl_attribute(:Lambda, value, attr_class: Lambda, **value_hash, &block)
          end

          #   @param [SetVariable|JSONable] value
          #     The value to use for SetVariable
          # @@overload SetVariable(&block)
          #   Set :SetVariable from block via instance eval of a new SetVariable
          def SetVariable(value = nil, **value_hash, &block)
            dsl_attribute(:SetVariable, value, attr_class: SetVariable, **value_hash, &block)
          end
        end

        # Property Definition IotEvents
        class IotEvents < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for InputName
          def InputName(value)
            dsl_attribute(:InputName, value)
          end

          #   @param [Payload|JSONable] value
          #     The value to use for Payload
          # @@overload Payload(&block)
          #   Set :Payload from block via instance eval of a new Payload
          def Payload(value = nil, **value_hash, &block)
            dsl_attribute(:Payload, value, attr_class: Payload, **value_hash, &block)
          end
        end

        # Property Definition OnExit
        class OnExit < PropertyType
          # @param [Array<Event>|JSONable>] values
          #   The List of values to use for Events
          def Events(values)
            dsl_list_attribute(:Events, values)
          end

          #  @param [Event|JSONable] value  Append value to the List
          #    The List of values to use for Events
          # @@overload Event(&block)
          # Append value to the List from block via instance eval of a new Event
          def Event(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Events, value, fn_if: fn_if, attr_class: Event, **value_hash, &block)
          end
        end

        # Property Definition DynamoDBv2
        class DynamoDBv2 < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for TableName
          def TableName(value)
            dsl_attribute(:TableName, value)
          end

          #   @param [Payload|JSONable] value
          #     The value to use for Payload
          # @@overload Payload(&block)
          #   Set :Payload from block via instance eval of a new Payload
          def Payload(value = nil, **value_hash, &block)
            dsl_attribute(:Payload, value, attr_class: Payload, **value_hash, &block)
          end
        end

        # Property Definition ResetTimer
        class ResetTimer < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for TimerName
          def TimerName(value)
            dsl_attribute(:TimerName, value)
          end
        end

        # Property Definition AssetPropertyTimestamp
        class AssetPropertyTimestamp < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for TimeInSeconds
          def TimeInSeconds(value)
            dsl_attribute(:TimeInSeconds, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for OffsetInNanos
          def OffsetInNanos(value)
            dsl_attribute(:OffsetInNanos, value)
          end
        end

        # Property Definition OnEnter
        class OnEnter < PropertyType
          # @param [Array<Event>|JSONable>] values
          #   The List of values to use for Events
          def Events(values)
            dsl_list_attribute(:Events, values)
          end

          #  @param [Event|JSONable] value  Append value to the List
          #    The List of values to use for Events
          # @@overload Event(&block)
          # Append value to the List from block via instance eval of a new Event
          def Event(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Events, value, fn_if: fn_if, attr_class: Event, **value_hash, &block)
          end
        end

        # Property Definition Sns
        class Sns < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for TargetArn
          def TargetArn(value)
            dsl_attribute(:TargetArn, value)
          end

          #   @param [Payload|JSONable] value
          #     The value to use for Payload
          # @@overload Payload(&block)
          #   Set :Payload from block via instance eval of a new Payload
          def Payload(value = nil, **value_hash, &block)
            dsl_attribute(:Payload, value, attr_class: Payload, **value_hash, &block)
          end
        end

        # Property Definition AssetPropertyVariant
        class AssetPropertyVariant < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for StringValue
          def StringValue(value)
            dsl_attribute(:StringValue, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for DoubleValue
          def DoubleValue(value)
            dsl_attribute(:DoubleValue, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for IntegerValue
          def IntegerValue(value)
            dsl_attribute(:IntegerValue, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for BooleanValue
          def BooleanValue(value)
            dsl_attribute(:BooleanValue, value)
          end
        end

        # Property Definition ClearTimer
        class ClearTimer < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for TimerName
          def TimerName(value)
            dsl_attribute(:TimerName, value)
          end
        end

        # Property Definition Lambda
        class Lambda < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for FunctionArn
          def FunctionArn(value)
            dsl_attribute(:FunctionArn, value)
          end

          #   @param [Payload|JSONable] value
          #     The value to use for Payload
          # @@overload Payload(&block)
          #   Set :Payload from block via instance eval of a new Payload
          def Payload(value = nil, **value_hash, &block)
            dsl_attribute(:Payload, value, attr_class: Payload, **value_hash, &block)
          end
        end

        # Property Definition SetVariable
        class SetVariable < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for VariableName
          def VariableName(value)
            dsl_attribute(:VariableName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        # Property Definition DetectorModelDefinition
        class DetectorModelDefinition < PropertyType
          # @param [Array<State>|JSONable>] values
          #   The List of values to use for States
          def States(values)
            dsl_list_attribute(:States, values)
          end

          #  @param [State|JSONable] value  Append value to the List
          #    The List of values to use for States
          # @@overload State(&block)
          # Append value to the List from block via instance eval of a new State
          def State(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:States, value, fn_if: fn_if, attr_class: State, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for InitialStateName
          def InitialStateName(value)
            dsl_attribute(:InitialStateName, value)
          end
        end

        # Property Definition Firehose
        class Firehose < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for DeliveryStreamName
          def DeliveryStreamName(value)
            dsl_attribute(:DeliveryStreamName, value)
          end

          #   @param [Payload|JSONable] value
          #     The value to use for Payload
          # @@overload Payload(&block)
          #   Set :Payload from block via instance eval of a new Payload
          def Payload(value = nil, **value_hash, &block)
            dsl_attribute(:Payload, value, attr_class: Payload, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for Separator
          def Separator(value)
            dsl_attribute(:Separator, value)
          end
        end

        # Property Definition TransitionEvent
        class TransitionEvent < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Condition
          def Condition(value)
            dsl_attribute(:Condition, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for NextState
          def NextState(value)
            dsl_attribute(:NextState, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for EventName
          def EventName(value)
            dsl_attribute(:EventName, value)
          end

          # @param [Array<Action>|JSONable>] values
          #   The List of values to use for Actions
          def Actions(values)
            dsl_list_attribute(:Actions, values)
          end

          #  @param [Action|JSONable] value  Append value to the List
          #    The List of values to use for Actions
          # @@overload Action(&block)
          # Append value to the List from block via instance eval of a new Action
          def Action(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Actions, value, fn_if: fn_if, attr_class: Action, **value_hash, &block)
          end
        end

        # Property Definition IotTopicPublish
        class IotTopicPublish < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for MqttTopic
          def MqttTopic(value)
            dsl_attribute(:MqttTopic, value)
          end

          #   @param [Payload|JSONable] value
          #     The value to use for Payload
          # @@overload Payload(&block)
          #   Set :Payload from block via instance eval of a new Payload
          def Payload(value = nil, **value_hash, &block)
            dsl_attribute(:Payload, value, attr_class: Payload, **value_hash, &block)
          end
        end

        # Property Definition DynamoDB
        class DynamoDB < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for TableName
          def TableName(value)
            dsl_attribute(:TableName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for PayloadField
          def PayloadField(value)
            dsl_attribute(:PayloadField, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for RangeKeyField
          def RangeKeyField(value)
            dsl_attribute(:RangeKeyField, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for HashKeyField
          def HashKeyField(value)
            dsl_attribute(:HashKeyField, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for RangeKeyValue
          def RangeKeyValue(value)
            dsl_attribute(:RangeKeyValue, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for RangeKeyType
          def RangeKeyType(value)
            dsl_attribute(:RangeKeyType, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for HashKeyType
          def HashKeyType(value)
            dsl_attribute(:HashKeyType, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for HashKeyValue
          def HashKeyValue(value)
            dsl_attribute(:HashKeyValue, value)
          end

          #   @param [Payload|JSONable] value
          #     The value to use for Payload
          # @@overload Payload(&block)
          #   Set :Payload from block via instance eval of a new Payload
          def Payload(value = nil, **value_hash, &block)
            dsl_attribute(:Payload, value, attr_class: Payload, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for Operation
          def Operation(value)
            dsl_attribute(:Operation, value)
          end
        end

        # Property Definition AssetPropertyValue
        class AssetPropertyValue < PropertyType
          #   @param [AssetPropertyVariant|JSONable] value
          #     The value to use for Value
          # @@overload Value(&block)
          #   Set :Value from block via instance eval of a new AssetPropertyVariant
          def Value(value = nil, **value_hash, &block)
            dsl_attribute(:Value, value, attr_class: AssetPropertyVariant, **value_hash, &block)
          end

          #   @param [AssetPropertyTimestamp|JSONable] value
          #     The value to use for Timestamp
          # @@overload Timestamp(&block)
          #   Set :Timestamp from block via instance eval of a new AssetPropertyTimestamp
          def Timestamp(value = nil, **value_hash, &block)
            dsl_attribute(:Timestamp, value, attr_class: AssetPropertyTimestamp, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for Quality
          def Quality(value)
            dsl_attribute(:Quality, value)
          end
        end

        # Property Definition OnInput
        class OnInput < PropertyType
          # @param [Array<Event>|JSONable>] values
          #   The List of values to use for Events
          def Events(values)
            dsl_list_attribute(:Events, values)
          end

          #  @param [Event|JSONable] value  Append value to the List
          #    The List of values to use for Events
          # @@overload Event(&block)
          # Append value to the List from block via instance eval of a new Event
          def Event(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Events, value, fn_if: fn_if, attr_class: Event, **value_hash, &block)
          end

          # @param [Array<TransitionEvent>|JSONable>] values
          #   The List of values to use for TransitionEvents
          def TransitionEvents(values)
            dsl_list_attribute(:TransitionEvents, values)
          end

          #  @param [TransitionEvent|JSONable] value  Append value to the List
          #    The List of values to use for TransitionEvents
          # @@overload TransitionEvent(&block)
          # Append value to the List from block via instance eval of a new TransitionEvent
          def TransitionEvent(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:TransitionEvents, value, fn_if: fn_if, attr_class: TransitionEvent, **value_hash, &block)
          end
        end

        # Property Definition IotSiteWise
        class IotSiteWise < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for PropertyAlias
          def PropertyAlias(value)
            dsl_attribute(:PropertyAlias, value)
          end

          #   @param [AssetPropertyValue|JSONable] value
          #     The value to use for PropertyValue
          # @@overload PropertyValue(&block)
          #   Set :PropertyValue from block via instance eval of a new AssetPropertyValue
          def PropertyValue(value = nil, **value_hash, &block)
            dsl_attribute(:PropertyValue, value, attr_class: AssetPropertyValue, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for AssetId
          def AssetId(value)
            dsl_attribute(:AssetId, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for EntryId
          def EntryId(value)
            dsl_attribute(:EntryId, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for PropertyId
          def PropertyId(value)
            dsl_attribute(:PropertyId, value)
          end
        end

        # Property Definition Sqs
        class Sqs < PropertyType
          #   @param [Payload|JSONable] value
          #     The value to use for Payload
          # @@overload Payload(&block)
          #   Set :Payload from block via instance eval of a new Payload
          def Payload(value = nil, **value_hash, &block)
            dsl_attribute(:Payload, value, attr_class: Payload, **value_hash, &block)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for UseBase64
          def UseBase64(value)
            dsl_attribute(:UseBase64, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for QueueUrl
          def QueueUrl(value)
            dsl_attribute(:QueueUrl, value)
          end
        end

        # Property Definition State
        class State < PropertyType
          #   @param [OnEnter|JSONable] value
          #     The value to use for OnEnter
          # @@overload OnEnter(&block)
          #   Set :OnEnter from block via instance eval of a new OnEnter
          def OnEnter(value = nil, **value_hash, &block)
            dsl_attribute(:OnEnter, value, attr_class: OnEnter, **value_hash, &block)
          end

          #   @param [OnInput|JSONable] value
          #     The value to use for OnInput
          # @@overload OnInput(&block)
          #   Set :OnInput from block via instance eval of a new OnInput
          def OnInput(value = nil, **value_hash, &block)
            dsl_attribute(:OnInput, value, attr_class: OnInput, **value_hash, &block)
          end

          #   @param [OnExit|JSONable] value
          #     The value to use for OnExit
          # @@overload OnExit(&block)
          #   Set :OnExit from block via instance eval of a new OnExit
          def OnExit(value = nil, **value_hash, &block)
            dsl_attribute(:OnExit, value, attr_class: OnExit, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for StateName
          def StateName(value)
            dsl_attribute(:StateName, value)
          end
        end

        # Property Definition Event
        class Event < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Condition
          def Condition(value)
            dsl_attribute(:Condition, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for EventName
          def EventName(value)
            dsl_attribute(:EventName, value)
          end

          # @param [Array<Action>|JSONable>] values
          #   The List of values to use for Actions
          def Actions(values)
            dsl_list_attribute(:Actions, values)
          end

          #  @param [Action|JSONable] value  Append value to the List
          #    The List of values to use for Actions
          # @@overload Action(&block)
          # Append value to the List from block via instance eval of a new Action
          def Action(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Actions, value, fn_if: fn_if, attr_class: Action, **value_hash, &block)
          end
        end

        # Property Definition SetTimer
        class SetTimer < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for Seconds
          def Seconds(value)
            dsl_attribute(:Seconds, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for TimerName
          def TimerName(value)
            dsl_attribute(:TimerName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for DurationExpression
          def DurationExpression(value)
            dsl_attribute(:DurationExpression, value)
          end
        end

        # Property Definition Payload
        class Payload < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ContentExpression
          def ContentExpression(value)
            dsl_attribute(:ContentExpression, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Type
          def Type(value)
            dsl_attribute(:Type, value)
          end
        end

        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end
        end

        #   @param [DetectorModelDefinition|JSONable] value
        #     The value to use for DetectorModelDefinition
        # @@overload DetectorModelDefinition(&block)
        #   Set :DetectorModelDefinition from block via instance eval of a new DetectorModelDefinition
        def DetectorModelDefinition(value = nil, **value_hash, &block)
          dsl_attribute(:DetectorModelDefinition, value, attr_class: DetectorModelDefinition, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for EvaluationMethod
        def EvaluationMethod(value)
          dsl_attribute(:EvaluationMethod, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for DetectorModelName
        def DetectorModelName(value)
          dsl_attribute(:DetectorModelName, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for DetectorModelDescription
        def DetectorModelDescription(value)
          dsl_attribute(:DetectorModelDescription, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Key
        def Key(value)
          dsl_attribute(:Key, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for RoleArn
        def RoleArn(value)
          dsl_attribute(:RoleArn, value)
        end

        # @param [Array<Tag>|JSONable>] values
        #   The List of values to use for Tags
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    The List of values to use for Tags
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::IoTEvents::DetectorModel]
    def AWS_IoTEvents_DetectorModel(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::IoTEvents::DetectorModel, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
