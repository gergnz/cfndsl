# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module OpsWorks
      # Resource Type definition for AWS::OpsWorks::Layer
      class Layer < ResourceType
        # Property Definition LifecycleEventConfiguration
        class LifecycleEventConfiguration < PropertyType
          #   @param [ShutdownEventConfiguration|JSONable] value
          #     The value to use for ShutdownEventConfiguration
          # @@overload ShutdownEventConfiguration(&block)
          #   Set :ShutdownEventConfiguration from block via instance eval of a new ShutdownEventConfiguration
          def ShutdownEventConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:ShutdownEventConfiguration, value, attr_class: ShutdownEventConfiguration, **value_hash, &block)
          end
        end

        # Property Definition LoadBasedAutoScaling
        class LoadBasedAutoScaling < PropertyType
          #   @param [AutoScalingThresholds|JSONable] value
          #     The value to use for DownScaling
          # @@overload DownScaling(&block)
          #   Set :DownScaling from block via instance eval of a new AutoScalingThresholds
          def DownScaling(value = nil, **value_hash, &block)
            dsl_attribute(:DownScaling, value, attr_class: AutoScalingThresholds, **value_hash, &block)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for Enable
          def Enable(value)
            dsl_attribute(:Enable, value)
          end

          #   @param [AutoScalingThresholds|JSONable] value
          #     The value to use for UpScaling
          # @@overload UpScaling(&block)
          #   Set :UpScaling from block via instance eval of a new AutoScalingThresholds
          def UpScaling(value = nil, **value_hash, &block)
            dsl_attribute(:UpScaling, value, attr_class: AutoScalingThresholds, **value_hash, &block)
          end
        end

        # Property Definition Recipes
        class Recipes < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Configure
          def Configures(values)
            dsl_list_attribute(:Configure, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Configure
          def Configure(value, fn_if: nil)
            dsl_push_attribute(:Configure, value, fn_if: fn_if)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Deploy
          def Deploys(values)
            dsl_list_attribute(:Deploy, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Deploy
          def Deploy(value, fn_if: nil)
            dsl_push_attribute(:Deploy, value, fn_if: fn_if)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Setup
          def Setups(values)
            dsl_list_attribute(:Setup, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Setup
          def Setup(value, fn_if: nil)
            dsl_push_attribute(:Setup, value, fn_if: fn_if)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Shutdown
          def Shutdowns(values)
            dsl_list_attribute(:Shutdown, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Shutdown
          def Shutdown(value, fn_if: nil)
            dsl_push_attribute(:Shutdown, value, fn_if: fn_if)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Undeploy
          def Undeploys(values)
            dsl_list_attribute(:Undeploy, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Undeploy
          def Undeploy(value, fn_if: nil)
            dsl_push_attribute(:Undeploy, value, fn_if: fn_if)
          end
        end

        # Property Definition VolumeConfiguration
        class VolumeConfiguration < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for Encrypted
          def Encrypted(value)
            dsl_attribute(:Encrypted, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for Iops
          def Iops(value)
            dsl_attribute(:Iops, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for MountPoint
          def MountPoint(value)
            dsl_attribute(:MountPoint, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for NumberOfDisks
          def NumberOfDisks(value)
            dsl_attribute(:NumberOfDisks, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for RaidLevel
          def RaidLevel(value)
            dsl_attribute(:RaidLevel, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for Size
          def Size(value)
            dsl_attribute(:Size, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for VolumeType
          def VolumeType(value)
            dsl_attribute(:VolumeType, value)
          end
        end

        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        # Property Definition ShutdownEventConfiguration
        class ShutdownEventConfiguration < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for DelayUntilElbConnectionsDrained
          def DelayUntilElbConnectionsDrained(value)
            dsl_attribute(:DelayUntilElbConnectionsDrained, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for ExecutionTimeout
          def ExecutionTimeout(value)
            dsl_attribute(:ExecutionTimeout, value)
          end
        end

        # Property Definition AutoScalingThresholds
        class AutoScalingThresholds < PropertyType
          #   @param [Number|JSONable] value
          #     The value to use for CpuThreshold
          def CpuThreshold(value)
            dsl_attribute(:CpuThreshold, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for IgnoreMetricsTime
          def IgnoreMetricsTime(value)
            dsl_attribute(:IgnoreMetricsTime, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for InstanceCount
          def InstanceCount(value)
            dsl_attribute(:InstanceCount, value)
          end

          #   @param [Number|JSONable] value
          #     The value to use for LoadThreshold
          def LoadThreshold(value)
            dsl_attribute(:LoadThreshold, value)
          end

          #   @param [Number|JSONable] value
          #     The value to use for MemoryThreshold
          def MemoryThreshold(value)
            dsl_attribute(:MemoryThreshold, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for ThresholdsWaitTime
          def ThresholdsWaitTime(value)
            dsl_attribute(:ThresholdsWaitTime, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [Object|JSONable] value
        #     The value to use for Attributes
        def Attributes(value)
          dsl_attribute(:Attributes, value)
        end

        #   @param [Boolean|JSONable] value
        #     The value to use for AutoAssignElasticIps
        def AutoAssignElasticIps(value)
          dsl_attribute(:AutoAssignElasticIps, value)
        end

        #   @param [Boolean|JSONable] value
        #     The value to use for AutoAssignPublicIps
        def AutoAssignPublicIps(value)
          dsl_attribute(:AutoAssignPublicIps, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for CustomInstanceProfileArn
        def CustomInstanceProfileArn(value)
          dsl_attribute(:CustomInstanceProfileArn, value)
        end

        #   @param [Object|JSONable] value
        #     The value to use for CustomJson
        def CustomJson(value)
          dsl_attribute(:CustomJson, value)
        end

        #   @param [Recipes|JSONable] value
        #     The value to use for CustomRecipes
        # @@overload CustomRecipes(&block)
        #   Set :CustomRecipes from block via instance eval of a new Recipes
        def CustomRecipes(value = nil, **value_hash, &block)
          dsl_attribute(:CustomRecipes, value, attr_class: Recipes, **value_hash, &block)
        end

        # @param [Array<String>|JSONable>] values
        #   The List of values to use for CustomSecurityGroupIds
        def CustomSecurityGroupIds(values)
          dsl_list_attribute(:CustomSecurityGroupIds, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for CustomSecurityGroupIds
        def CustomSecurityGroupId(value, fn_if: nil)
          dsl_push_attribute(:CustomSecurityGroupIds, value, fn_if: fn_if)
        end

        #   @param [Boolean|JSONable] value
        #     The value to use for EnableAutoHealing
        def EnableAutoHealing(value)
          dsl_attribute(:EnableAutoHealing, value)
        end

        #   @param [Boolean|JSONable] value
        #     The value to use for InstallUpdatesOnBoot
        def InstallUpdatesOnBoot(value)
          dsl_attribute(:InstallUpdatesOnBoot, value)
        end

        #   @param [LifecycleEventConfiguration|JSONable] value
        #     The value to use for LifecycleEventConfiguration
        # @@overload LifecycleEventConfiguration(&block)
        #   Set :LifecycleEventConfiguration from block via instance eval of a new LifecycleEventConfiguration
        def LifecycleEventConfiguration(value = nil, **value_hash, &block)
          dsl_attribute(:LifecycleEventConfiguration, value, attr_class: LifecycleEventConfiguration, **value_hash, &block)
        end

        #   @param [LoadBasedAutoScaling|JSONable] value
        #     The value to use for LoadBasedAutoScaling
        # @@overload LoadBasedAutoScaling(&block)
        #   Set :LoadBasedAutoScaling from block via instance eval of a new LoadBasedAutoScaling
        def LoadBasedAutoScaling(value = nil, **value_hash, &block)
          dsl_attribute(:LoadBasedAutoScaling, value, attr_class: LoadBasedAutoScaling, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Name
        def Name(value)
          dsl_attribute(:Name, value)
        end

        # @param [Array<String>|JSONable>] values
        #   The List of values to use for Packages
        def Packages(values)
          dsl_list_attribute(:Packages, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for Packages
        def Package(value, fn_if: nil)
          dsl_push_attribute(:Packages, value, fn_if: fn_if)
        end

        #   @param [String|JSONable] value
        #     The value to use for Shortname
        def Shortname(value)
          dsl_attribute(:Shortname, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for StackId
        def StackId(value)
          dsl_attribute(:StackId, value)
        end

        # @param [Array<Tag>|JSONable>] values
        #   The List of values to use for Tags
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    The List of values to use for Tags
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Type
        def Type(value)
          dsl_attribute(:Type, value)
        end

        #   @param [Boolean|JSONable] value
        #     The value to use for UseEbsOptimizedInstances
        def UseEbsOptimizedInstances(value)
          dsl_attribute(:UseEbsOptimizedInstances, value)
        end

        # @param [Array<VolumeConfiguration>|JSONable>] values
        #   The List of values to use for VolumeConfigurations
        def VolumeConfigurations(values)
          dsl_list_attribute(:VolumeConfigurations, values)
        end

        #  @param [VolumeConfiguration|JSONable] value  Append value to the List
        #    The List of values to use for VolumeConfigurations
        # @@overload VolumeConfiguration(&block)
        # Append value to the List from block via instance eval of a new VolumeConfiguration
        def VolumeConfiguration(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:VolumeConfigurations, value, fn_if: fn_if, attr_class: VolumeConfiguration, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::OpsWorks::Layer]
    def AWS_OpsWorks_Layer(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::OpsWorks::Layer, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
