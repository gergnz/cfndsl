# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module OpsWorks
      # Resource Type definition for AWS::OpsWorks::Instance
      class Instance < ResourceType
        # Property Definition BlockDeviceMapping
        class BlockDeviceMapping < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for DeviceName
          def DeviceName(value)
            dsl_attribute(:DeviceName, value)
          end

          #   @param [EbsBlockDevice|JSONable] value
          #     The value to use for Ebs
          # @@overload Ebs(&block)
          #   Set :Ebs from block via instance eval of a new EbsBlockDevice
          def Ebs(value = nil, **value_hash, &block)
            dsl_attribute(:Ebs, value, attr_class: EbsBlockDevice, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for NoDevice
          def NoDevice(value)
            dsl_attribute(:NoDevice, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for VirtualName
          def VirtualName(value)
            dsl_attribute(:VirtualName, value)
          end
        end

        # Property Definition TimeBasedAutoScaling
        class TimeBasedAutoScaling < PropertyType
          #   @param [Object|JSONable] value
          #     The value to use for Friday
          def Friday(value)
            dsl_attribute(:Friday, value)
          end

          #   @param [Object|JSONable] value
          #     The value to use for Monday
          def Monday(value)
            dsl_attribute(:Monday, value)
          end

          #   @param [Object|JSONable] value
          #     The value to use for Saturday
          def Saturday(value)
            dsl_attribute(:Saturday, value)
          end

          #   @param [Object|JSONable] value
          #     The value to use for Sunday
          def Sunday(value)
            dsl_attribute(:Sunday, value)
          end

          #   @param [Object|JSONable] value
          #     The value to use for Thursday
          def Thursday(value)
            dsl_attribute(:Thursday, value)
          end

          #   @param [Object|JSONable] value
          #     The value to use for Tuesday
          def Tuesday(value)
            dsl_attribute(:Tuesday, value)
          end

          #   @param [Object|JSONable] value
          #     The value to use for Wednesday
          def Wednesday(value)
            dsl_attribute(:Wednesday, value)
          end
        end

        # Property Definition EbsBlockDevice
        class EbsBlockDevice < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for DeleteOnTermination
          def DeleteOnTermination(value)
            dsl_attribute(:DeleteOnTermination, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for Iops
          def Iops(value)
            dsl_attribute(:Iops, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for SnapshotId
          def SnapshotId(value)
            dsl_attribute(:SnapshotId, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for VolumeSize
          def VolumeSize(value)
            dsl_attribute(:VolumeSize, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for VolumeType
          def VolumeType(value)
            dsl_attribute(:VolumeType, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for AvailabilityZone
        def AvailabilityZone(value)
          dsl_attribute(:AvailabilityZone, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for PrivateDnsName
        def PrivateDnsName(value)
          dsl_attribute(:PrivateDnsName, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for PrivateIp
        def PrivateIp(value)
          dsl_attribute(:PrivateIp, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for PublicDnsName
        def PublicDnsName(value)
          dsl_attribute(:PublicDnsName, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for PublicIp
        def PublicIp(value)
          dsl_attribute(:PublicIp, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for AgentVersion
        def AgentVersion(value)
          dsl_attribute(:AgentVersion, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for AmiId
        def AmiId(value)
          dsl_attribute(:AmiId, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Architecture
        def Architecture(value)
          dsl_attribute(:Architecture, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for AutoScalingType
        def AutoScalingType(value)
          dsl_attribute(:AutoScalingType, value)
        end

        # @param [Array<BlockDeviceMapping>|JSONable>] values
        #   The List of values to use for BlockDeviceMappings
        def BlockDeviceMappings(values)
          dsl_list_attribute(:BlockDeviceMappings, values)
        end

        #  @param [BlockDeviceMapping|JSONable] value  Append value to the List
        #    The List of values to use for BlockDeviceMappings
        # @@overload BlockDeviceMapping(&block)
        # Append value to the List from block via instance eval of a new BlockDeviceMapping
        def BlockDeviceMapping(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:BlockDeviceMappings, value, fn_if: fn_if, attr_class: BlockDeviceMapping, **value_hash, &block)
        end

        #   @param [Boolean|JSONable] value
        #     The value to use for EbsOptimized
        def EbsOptimized(value)
          dsl_attribute(:EbsOptimized, value)
        end

        # @param [Array<String>|JSONable>] values
        #   The List of values to use for ElasticIps
        def ElasticIps(values)
          dsl_list_attribute(:ElasticIps, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for ElasticIps
        def ElasticIp(value, fn_if: nil)
          dsl_push_attribute(:ElasticIps, value, fn_if: fn_if)
        end

        #   @param [String|JSONable] value
        #     The value to use for Hostname
        def Hostname(value)
          dsl_attribute(:Hostname, value)
        end

        #   @param [Boolean|JSONable] value
        #     The value to use for InstallUpdatesOnBoot
        def InstallUpdatesOnBoot(value)
          dsl_attribute(:InstallUpdatesOnBoot, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for InstanceType
        def InstanceType(value)
          dsl_attribute(:InstanceType, value)
        end

        # @param [Array<String>|JSONable>] values
        #   The List of values to use for LayerIds
        def LayerIds(values)
          dsl_list_attribute(:LayerIds, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for LayerIds
        def LayerId(value, fn_if: nil)
          dsl_push_attribute(:LayerIds, value, fn_if: fn_if)
        end

        #   @param [String|JSONable] value
        #     The value to use for Os
        def Os(value)
          dsl_attribute(:Os, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for RootDeviceType
        def RootDeviceType(value)
          dsl_attribute(:RootDeviceType, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for SshKeyName
        def SshKeyName(value)
          dsl_attribute(:SshKeyName, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for StackId
        def StackId(value)
          dsl_attribute(:StackId, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for SubnetId
        def SubnetId(value)
          dsl_attribute(:SubnetId, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Tenancy
        def Tenancy(value)
          dsl_attribute(:Tenancy, value)
        end

        #   @param [TimeBasedAutoScaling|JSONable] value
        #     The value to use for TimeBasedAutoScaling
        # @@overload TimeBasedAutoScaling(&block)
        #   Set :TimeBasedAutoScaling from block via instance eval of a new TimeBasedAutoScaling
        def TimeBasedAutoScaling(value = nil, **value_hash, &block)
          dsl_attribute(:TimeBasedAutoScaling, value, attr_class: TimeBasedAutoScaling, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for VirtualizationType
        def VirtualizationType(value)
          dsl_attribute(:VirtualizationType, value)
        end

        # @param [Array<String>|JSONable>] values
        #   The List of values to use for Volumes
        def Volumes(values)
          dsl_list_attribute(:Volumes, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for Volumes
        def Volume(value, fn_if: nil)
          dsl_push_attribute(:Volumes, value, fn_if: fn_if)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::OpsWorks::Instance]
    def AWS_OpsWorks_Instance(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::OpsWorks::Instance, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
