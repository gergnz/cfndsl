# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module Lambda
      # Resource Type definition for AWS::Lambda::CodeSigningConfig.
      class CodeSigningConfig < ResourceType
        # When the CodeSigningConfig is later on attached to a function, the function code will be expected to be signed by profiles from this list
        class AllowedPublishers < PropertyType
          # @param [Array<String>|JSONable>] values
          #   List of Signing profile version Arns
          def SigningProfileVersionArns(values)
            dsl_list_attribute(:SigningProfileVersionArns, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    List of Signing profile version Arns
          def SigningProfileVersionArn(value, fn_if: nil)
            dsl_push_attribute(:SigningProfileVersionArns, value, fn_if: fn_if)
          end
        end

        # Policies to control how to act if a signature is invalid
        class CodeSigningPolicies < PropertyType
          #   @param [String|JSONable] value
          #     Indicates how Lambda operations involve updating the code artifact will operate. Default to Warn if not provided
          def UntrustedArtifactOnDeployment(value)
            dsl_attribute(:UntrustedArtifactOnDeployment, value)
          end
        end

        #   @param [String|JSONable] value
        #     A description of the CodeSigningConfig
        def Description(value)
          dsl_attribute(:Description, value)
        end

        #   @param [AllowedPublishers|JSONable] value
        #     When the CodeSigningConfig is later on attached to a function, the function code will be expected to be signed by profiles from this list
        # @@overload AllowedPublishers(&block)
        #   Set :AllowedPublishers from block via instance eval of a new AllowedPublishers
        def AllowedPublishers(value = nil, **value_hash, &block)
          dsl_attribute(:AllowedPublishers, value, attr_class: AllowedPublishers, **value_hash, &block)
        end

        #   @param [CodeSigningPolicies|JSONable] value
        #     Policies to control how to act if a signature is invalid
        # @@overload CodeSigningPolicies(&block)
        #   Set :CodeSigningPolicies from block via instance eval of a new CodeSigningPolicies
        def CodeSigningPolicies(value = nil, **value_hash, &block)
          dsl_attribute(:CodeSigningPolicies, value, attr_class: CodeSigningPolicies, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     A unique identifier for CodeSigningConfig resource
        def CodeSigningConfigId(value)
          dsl_attribute(:CodeSigningConfigId, value)
        end

        #   @param [String|JSONable] value
        #     A unique Arn for CodeSigningConfig resource
        def CodeSigningConfigArn(value)
          dsl_attribute(:CodeSigningConfigArn, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::Lambda::CodeSigningConfig]
    def AWS_Lambda_CodeSigningConfig(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::Lambda::CodeSigningConfig, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
