# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module Lambda
      # Resource Type definition for AWS::Lambda::LayerVersion
      class LayerVersion < ResourceType
        # Property Definition Content
        class Content < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for S3ObjectVersion
          def S3ObjectVersion(value)
            dsl_attribute(:S3ObjectVersion, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for S3Bucket
          def S3Bucket(value)
            dsl_attribute(:S3Bucket, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for S3Key
          def S3Key(value)
            dsl_attribute(:S3Key, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        # @param [Array<String>|JSONable>] values
        #   The List of values to use for CompatibleRuntimes
        def CompatibleRuntimes(values)
          dsl_list_attribute(:CompatibleRuntimes, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for CompatibleRuntimes
        def CompatibleRuntime(value, fn_if: nil)
          dsl_push_attribute(:CompatibleRuntimes, value, fn_if: fn_if)
        end

        #   @param [String|JSONable] value
        #     The value to use for LicenseInfo
        def LicenseInfo(value)
          dsl_attribute(:LicenseInfo, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Description
        def Description(value)
          dsl_attribute(:Description, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for LayerName
        def LayerName(value)
          dsl_attribute(:LayerName, value)
        end

        #   @param [Content|JSONable] value
        #     The value to use for Content
        # @@overload Content(&block)
        #   Set :Content from block via instance eval of a new Content
        def Content(value = nil, **value_hash, &block)
          dsl_attribute(:Content, value, attr_class: Content, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::Lambda::LayerVersion]
    def AWS_Lambda_LayerVersion(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::Lambda::LayerVersion, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
