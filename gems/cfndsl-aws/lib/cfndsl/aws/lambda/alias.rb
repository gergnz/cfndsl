# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module Lambda
      # Resource Type definition for AWS::Lambda::Alias
      class Alias < ResourceType
        # Property Definition ProvisionedConcurrencyConfiguration
        class ProvisionedConcurrencyConfiguration < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for ProvisionedConcurrentExecutions
          def ProvisionedConcurrentExecutions(value)
            dsl_attribute(:ProvisionedConcurrentExecutions, value)
          end
        end

        # Property Definition VersionWeight
        class VersionWeight < PropertyType
          #   @param [Number|JSONable] value
          #     The value to use for FunctionWeight
          def FunctionWeight(value)
            dsl_attribute(:FunctionWeight, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for FunctionVersion
          def FunctionVersion(value)
            dsl_attribute(:FunctionVersion, value)
          end
        end

        # Property Definition AliasRoutingConfiguration
        class AliasRoutingConfiguration < PropertyType
          # @param [Array<VersionWeight>|JSONable>] values
          #   The List of values to use for AdditionalVersionWeights
          def AdditionalVersionWeights(values)
            dsl_list_attribute(:AdditionalVersionWeights, values)
          end

          #  @param [VersionWeight|JSONable] value  Append value to the List
          #    The List of values to use for AdditionalVersionWeights
          # @@overload AdditionalVersionWeight(&block)
          # Append value to the List from block via instance eval of a new VersionWeight
          def AdditionalVersionWeight(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:AdditionalVersionWeights, value, fn_if: fn_if, attr_class: VersionWeight, **value_hash, &block)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for FunctionName
        def FunctionName(value)
          dsl_attribute(:FunctionName, value)
        end

        #   @param [ProvisionedConcurrencyConfiguration|JSONable] value
        #     The value to use for ProvisionedConcurrencyConfig
        # @@overload ProvisionedConcurrencyConfig(&block)
        #   Set :ProvisionedConcurrencyConfig from block via instance eval of a new ProvisionedConcurrencyConfiguration
        def ProvisionedConcurrencyConfig(value = nil, **value_hash, &block)
          dsl_attribute(:ProvisionedConcurrencyConfig, value, attr_class: ProvisionedConcurrencyConfiguration, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Description
        def Description(value)
          dsl_attribute(:Description, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for FunctionVersion
        def FunctionVersion(value)
          dsl_attribute(:FunctionVersion, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [AliasRoutingConfiguration|JSONable] value
        #     The value to use for RoutingConfig
        # @@overload RoutingConfig(&block)
        #   Set :RoutingConfig from block via instance eval of a new AliasRoutingConfiguration
        def RoutingConfig(value = nil, **value_hash, &block)
          dsl_attribute(:RoutingConfig, value, attr_class: AliasRoutingConfiguration, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Name
        def Name(value)
          dsl_attribute(:Name, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::Lambda::Alias]
    def AWS_Lambda_Alias(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::Lambda::Alias, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
