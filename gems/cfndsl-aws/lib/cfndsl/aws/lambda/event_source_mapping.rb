# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module Lambda
      # Resource Type definition for AWS::Lambda::EventSourceMapping
      class EventSourceMapping < ResourceType
        # (Streams) An Amazon SQS queue or Amazon SNS topic destination for discarded records.
        class DestinationConfig < PropertyType
          #   @param [OnFailure|JSONable] value
          #     The destination configuration for failed invocations.
          # @@overload OnFailure(&block)
          #   Set :OnFailure from block via instance eval of a new OnFailure
          def OnFailure(value = nil, **value_hash, &block)
            dsl_attribute(:OnFailure, value, attr_class: OnFailure, **value_hash, &block)
          end
        end

        # A destination for events that failed processing.
        class OnFailure < PropertyType
          #   @param [String|JSONable] value
          #     The Amazon Resource Name (ARN) of the destination resource.
          def Destination(value)
            dsl_attribute(:Destination, value)
          end
        end

        #   @param [String|JSONable] value
        #     Event Source Mapping Identifier UUID.
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [Integer|JSONable] value
        #     The maximum number of items to retrieve in a single batch.
        def BatchSize(value)
          dsl_attribute(:BatchSize, value)
        end

        #   @param [Boolean|JSONable] value
        #     (Streams) If the function returns an error, split the batch in two and retry.
        def BisectBatchOnFunctionError(value)
          dsl_attribute(:BisectBatchOnFunctionError, value)
        end

        #   @param [DestinationConfig|JSONable] value
        #     (Streams) An Amazon SQS queue or Amazon SNS topic destination for discarded records.
        # @@overload DestinationConfig(&block)
        #   Set :DestinationConfig from block via instance eval of a new DestinationConfig
        def DestinationConfig(value = nil, **value_hash, &block)
          dsl_attribute(:DestinationConfig, value, attr_class: DestinationConfig, **value_hash, &block)
        end

        #   @param [Boolean|JSONable] value
        #     Disables the event source mapping to pause polling and invocation.
        def Enabled(value)
          dsl_attribute(:Enabled, value)
        end

        #   @param [String|JSONable] value
        #     The Amazon Resource Name (ARN) of the event source.
        def EventSourceArn(value)
          dsl_attribute(:EventSourceArn, value)
        end

        #   @param [String|JSONable] value
        #     The name of the Lambda function.
        def FunctionName(value)
          dsl_attribute(:FunctionName, value)
        end

        #   @param [Integer|JSONable] value
        #     (Streams) The maximum amount of time to gather records before invoking the function, in seconds.
        def MaximumBatchingWindowInSeconds(value)
          dsl_attribute(:MaximumBatchingWindowInSeconds, value)
        end

        #   @param [Integer|JSONable] value
        #     (Streams) The maximum age of a record that Lambda sends to a function for processing.
        def MaximumRecordAgeInSeconds(value)
          dsl_attribute(:MaximumRecordAgeInSeconds, value)
        end

        #   @param [Integer|JSONable] value
        #     (Streams) The maximum number of times to retry when the function returns an error.
        def MaximumRetryAttempts(value)
          dsl_attribute(:MaximumRetryAttempts, value)
        end

        #   @param [Integer|JSONable] value
        #     (Streams) The number of batches to process from each shard concurrently.
        def ParallelizationFactor(value)
          dsl_attribute(:ParallelizationFactor, value)
        end

        #   @param [String|JSONable] value
        #     The position in a stream from which to start reading. Required for Amazon Kinesis and Amazon DynamoDB Streams sources.
        def StartingPosition(value)
          dsl_attribute(:StartingPosition, value)
        end

        # @param [Array<String>|JSONable>] values
        #   (Kafka) A list of Kafka topics.
        def Topics(values)
          dsl_list_attribute(:Topics, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    (Kafka) A list of Kafka topics.
        def Topic(value, fn_if: nil)
          dsl_push_attribute(:Topics, value, fn_if: fn_if)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::Lambda::EventSourceMapping]
    def AWS_Lambda_EventSourceMapping(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::Lambda::EventSourceMapping, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
