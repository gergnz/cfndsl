# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module Lambda
      # Resource Type definition for AWS::Lambda::Function
      class Function < ResourceType
        # Property Definition VpcConfig
        class VpcConfig < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for SecurityGroupIds
          def SecurityGroupIds(values)
            dsl_list_attribute(:SecurityGroupIds, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for SecurityGroupIds
          def SecurityGroupId(value, fn_if: nil)
            dsl_push_attribute(:SecurityGroupIds, value, fn_if: fn_if)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for SubnetIds
          def SubnetIds(values)
            dsl_list_attribute(:SubnetIds, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for SubnetIds
          def SubnetId(value, fn_if: nil)
            dsl_push_attribute(:SubnetIds, value, fn_if: fn_if)
          end
        end

        # Property Definition TracingConfig
        class TracingConfig < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Mode
          def Mode(value)
            dsl_attribute(:Mode, value)
          end
        end

        # Property Definition DeadLetterConfig
        class DeadLetterConfig < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for TargetArn
          def TargetArn(value)
            dsl_attribute(:TargetArn, value)
          end
        end

        # Property Definition Environment
        class Environment < PropertyType
          #   @param [Object|JSONable] value
          #     The value to use for Variables
          def Variables(value)
            dsl_attribute(:Variables, value)
          end
        end

        # Property Definition FileSystemConfig
        class FileSystemConfig < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Arn
          def Arn(value)
            dsl_attribute(:Arn, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for LocalMountPath
          def LocalMountPath(value)
            dsl_attribute(:LocalMountPath, value)
          end
        end

        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end
        end

        # Property Definition Code
        class Code < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for S3ObjectVersion
          def S3ObjectVersion(value)
            dsl_attribute(:S3ObjectVersion, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for S3Bucket
          def S3Bucket(value)
            dsl_attribute(:S3Bucket, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ZipFile
          def ZipFile(value)
            dsl_attribute(:ZipFile, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for S3Key
          def S3Key(value)
            dsl_attribute(:S3Key, value)
          end
        end

        #   @param [Integer|JSONable] value
        #     The value to use for MemorySize
        def MemorySize(value)
          dsl_attribute(:MemorySize, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Description
        def Description(value)
          dsl_attribute(:Description, value)
        end

        #   @param [TracingConfig|JSONable] value
        #     The value to use for TracingConfig
        # @@overload TracingConfig(&block)
        #   Set :TracingConfig from block via instance eval of a new TracingConfig
        def TracingConfig(value = nil, **value_hash, &block)
          dsl_attribute(:TracingConfig, value, attr_class: TracingConfig, **value_hash, &block)
        end

        #   @param [VpcConfig|JSONable] value
        #     The value to use for VpcConfig
        # @@overload VpcConfig(&block)
        #   Set :VpcConfig from block via instance eval of a new VpcConfig
        def VpcConfig(value = nil, **value_hash, &block)
          dsl_attribute(:VpcConfig, value, attr_class: VpcConfig, **value_hash, &block)
        end

        #   @param [DeadLetterConfig|JSONable] value
        #     The value to use for DeadLetterConfig
        # @@overload DeadLetterConfig(&block)
        #   Set :DeadLetterConfig from block via instance eval of a new DeadLetterConfig
        def DeadLetterConfig(value = nil, **value_hash, &block)
          dsl_attribute(:DeadLetterConfig, value, attr_class: DeadLetterConfig, **value_hash, &block)
        end

        #   @param [Integer|JSONable] value
        #     The value to use for Timeout
        def Timeout(value)
          dsl_attribute(:Timeout, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Handler
        def Handler(value)
          dsl_attribute(:Handler, value)
        end

        #   @param [Integer|JSONable] value
        #     The value to use for ReservedConcurrentExecutions
        def ReservedConcurrentExecutions(value)
          dsl_attribute(:ReservedConcurrentExecutions, value)
        end

        #   @param [Code|JSONable] value
        #     The value to use for Code
        # @@overload Code(&block)
        #   Set :Code from block via instance eval of a new Code
        def Code(value = nil, **value_hash, &block)
          dsl_attribute(:Code, value, attr_class: Code, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Role
        def Role(value)
          dsl_attribute(:Role, value)
        end

        # @param [Array<FileSystemConfig>|JSONable>] values
        #   The List of values to use for FileSystemConfigs
        def FileSystemConfigs(values)
          dsl_list_attribute(:FileSystemConfigs, values)
        end

        #  @param [FileSystemConfig|JSONable] value  Append value to the List
        #    The List of values to use for FileSystemConfigs
        # @@overload FileSystemConfig(&block)
        # Append value to the List from block via instance eval of a new FileSystemConfig
        def FileSystemConfig(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:FileSystemConfigs, value, fn_if: fn_if, attr_class: FileSystemConfig, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for FunctionName
        def FunctionName(value)
          dsl_attribute(:FunctionName, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Runtime
        def Runtime(value)
          dsl_attribute(:Runtime, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for KmsKeyArn
        def KmsKeyArn(value)
          dsl_attribute(:KmsKeyArn, value)
        end

        #   @param [Environment|JSONable] value
        #     The value to use for Environment
        # @@overload Environment(&block)
        #   Set :Environment from block via instance eval of a new Environment
        def Environment(value = nil, **value_hash, &block)
          dsl_attribute(:Environment, value, attr_class: Environment, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Arn
        def Arn(value)
          dsl_attribute(:Arn, value)
        end

        # @param [Array<String>|JSONable>] values
        #   The List of values to use for Layers
        def Layers(values)
          dsl_list_attribute(:Layers, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for Layers
        def Layer(value, fn_if: nil)
          dsl_push_attribute(:Layers, value, fn_if: fn_if)
        end

        # @param [Array<Tag>|JSONable>] values
        #   The List of values to use for Tags
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    The List of values to use for Tags
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::Lambda::Function]
    def AWS_Lambda_Function(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::Lambda::Function, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
