# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module ElasticBeanstalk
      # Resource Type definition for AWS::ElasticBeanstalk::ConfigurationTemplate
      class ConfigurationTemplate < ResourceType
        # Property Definition SourceConfiguration
        class SourceConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ApplicationName
          def ApplicationName(value)
            dsl_attribute(:ApplicationName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for TemplateName
          def TemplateName(value)
            dsl_attribute(:TemplateName, value)
          end
        end

        # Property Definition ConfigurationOptionSetting
        class ConfigurationOptionSetting < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Namespace
          def Namespace(value)
            dsl_attribute(:Namespace, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for OptionName
          def OptionName(value)
            dsl_attribute(:OptionName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ResourceName
          def ResourceName(value)
            dsl_attribute(:ResourceName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for ApplicationName
        def ApplicationName(value)
          dsl_attribute(:ApplicationName, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Description
        def Description(value)
          dsl_attribute(:Description, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for EnvironmentId
        def EnvironmentId(value)
          dsl_attribute(:EnvironmentId, value)
        end

        # @param [Array<ConfigurationOptionSetting>|JSONable>] values
        #   The List of values to use for OptionSettings
        def OptionSettings(values)
          dsl_list_attribute(:OptionSettings, values)
        end

        #  @param [ConfigurationOptionSetting|JSONable] value  Append value to the List
        #    The List of values to use for OptionSettings
        # @@overload OptionSetting(&block)
        # Append value to the List from block via instance eval of a new ConfigurationOptionSetting
        def OptionSetting(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:OptionSettings, value, fn_if: fn_if, attr_class: ConfigurationOptionSetting, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for PlatformArn
        def PlatformArn(value)
          dsl_attribute(:PlatformArn, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for SolutionStackName
        def SolutionStackName(value)
          dsl_attribute(:SolutionStackName, value)
        end

        #   @param [SourceConfiguration|JSONable] value
        #     The value to use for SourceConfiguration
        # @@overload SourceConfiguration(&block)
        #   Set :SourceConfiguration from block via instance eval of a new SourceConfiguration
        def SourceConfiguration(value = nil, **value_hash, &block)
          dsl_attribute(:SourceConfiguration, value, attr_class: SourceConfiguration, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::ElasticBeanstalk::ConfigurationTemplate]
    def AWS_ElasticBeanstalk_ConfigurationTemplate(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::ElasticBeanstalk::ConfigurationTemplate, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
