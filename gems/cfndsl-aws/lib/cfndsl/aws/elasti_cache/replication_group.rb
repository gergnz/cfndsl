# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module ElastiCache
      # Resource Type definition for AWS::ElastiCache::ReplicationGroup
      class ReplicationGroup < ResourceType
        # Property Definition NodeGroupConfiguration
        class NodeGroupConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Slots
          def Slots(value)
            dsl_attribute(:Slots, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for PrimaryAvailabilityZone
          def PrimaryAvailabilityZone(value)
            dsl_attribute(:PrimaryAvailabilityZone, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for ReplicaAvailabilityZones
          def ReplicaAvailabilityZones(values)
            dsl_list_attribute(:ReplicaAvailabilityZones, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for ReplicaAvailabilityZones
          def ReplicaAvailabilityZone(value, fn_if: nil)
            dsl_push_attribute(:ReplicaAvailabilityZones, value, fn_if: fn_if)
          end

          #   @param [String|JSONable] value
          #     The value to use for NodeGroupId
          def NodeGroupId(value)
            dsl_attribute(:NodeGroupId, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for ReplicaCount
          def ReplicaCount(value)
            dsl_attribute(:ReplicaCount, value)
          end
        end

        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end
        end

        # @param [Array<String>|JSONable>] values
        #   The List of values to use for PreferredCacheClusterAZs
        def PreferredCacheClusterAZs(values)
          dsl_list_attribute(:PreferredCacheClusterAZs, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for PreferredCacheClusterAZs
        def PreferredCacheClusterAZ(value, fn_if: nil)
          dsl_push_attribute(:PreferredCacheClusterAZs, value, fn_if: fn_if)
        end

        #   @param [String|JSONable] value
        #     The value to use for PrimaryEndPointPort
        def PrimaryEndPointPort(value)
          dsl_attribute(:PrimaryEndPointPort, value)
        end

        # @param [Array<String>|JSONable>] values
        #   The List of values to use for CacheSecurityGroupNames
        def CacheSecurityGroupNames(values)
          dsl_list_attribute(:CacheSecurityGroupNames, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for CacheSecurityGroupNames
        def CacheSecurityGroupName(value, fn_if: nil)
          dsl_push_attribute(:CacheSecurityGroupNames, value, fn_if: fn_if)
        end

        #   @param [String|JSONable] value
        #     The value to use for ReaderEndPointPort
        def ReaderEndPointPort(value)
          dsl_attribute(:ReaderEndPointPort, value)
        end

        # @param [Array<NodeGroupConfiguration>|JSONable>] values
        #   The List of values to use for NodeGroupConfiguration
        def NodeGroupConfigurations(values)
          dsl_list_attribute(:NodeGroupConfiguration, values)
        end

        #  @param [NodeGroupConfiguration|JSONable] value  Append value to the List
        #    The List of values to use for NodeGroupConfiguration
        # @@overload NodeGroupConfiguration(&block)
        # Append value to the List from block via instance eval of a new NodeGroupConfiguration
        def NodeGroupConfiguration(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:NodeGroupConfiguration, value, fn_if: fn_if, attr_class: NodeGroupConfiguration, **value_hash, &block)
        end

        # @param [Array<String>|JSONable>] values
        #   The List of values to use for SnapshotArns
        def SnapshotArns(values)
          dsl_list_attribute(:SnapshotArns, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for SnapshotArns
        def SnapshotArn(value, fn_if: nil)
          dsl_push_attribute(:SnapshotArns, value, fn_if: fn_if)
        end

        #   @param [String|JSONable] value
        #     The value to use for ConfigurationEndPointPort
        def ConfigurationEndPointPort(value)
          dsl_attribute(:ConfigurationEndPointPort, value)
        end

        #   @param [Integer|JSONable] value
        #     The value to use for Port
        def Port(value)
          dsl_attribute(:Port, value)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for ReadEndPointPortsList
        def ReadEndPointPortsList(value, fn_if: nil)
          dsl_push_attribute(:ReadEndPointPortsList, value, fn_if: fn_if)
        end

        #   @param [Integer|JSONable] value
        #     The value to use for NumNodeGroups
        def NumNodeGroups(value)
          dsl_attribute(:NumNodeGroups, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for NotificationTopicArn
        def NotificationTopicArn(value)
          dsl_attribute(:NotificationTopicArn, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for SnapshotName
        def SnapshotName(value)
          dsl_attribute(:SnapshotName, value)
        end

        #   @param [Boolean|JSONable] value
        #     The value to use for AutomaticFailoverEnabled
        def AutomaticFailoverEnabled(value)
          dsl_attribute(:AutomaticFailoverEnabled, value)
        end

        #   @param [Integer|JSONable] value
        #     The value to use for ReplicasPerNodeGroup
        def ReplicasPerNodeGroup(value)
          dsl_attribute(:ReplicasPerNodeGroup, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for ReplicationGroupDescription
        def ReplicationGroupDescription(value)
          dsl_attribute(:ReplicationGroupDescription, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for ReaderEndPointAddress
        def ReaderEndPointAddress(value)
          dsl_attribute(:ReaderEndPointAddress, value)
        end

        #   @param [Boolean|JSONable] value
        #     The value to use for MultiAZEnabled
        def MultiAZEnabled(value)
          dsl_attribute(:MultiAZEnabled, value)
        end

        #   @param [Boolean|JSONable] value
        #     The value to use for TransitEncryptionEnabled
        def TransitEncryptionEnabled(value)
          dsl_attribute(:TransitEncryptionEnabled, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for ReplicationGroupId
        def ReplicationGroupId(value)
          dsl_attribute(:ReplicationGroupId, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Engine
        def Engine(value)
          dsl_attribute(:Engine, value)
        end

        # @param [Array<Tag>|JSONable>] values
        #   The List of values to use for Tags
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    The List of values to use for Tags
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end

        #   @param [Integer|JSONable] value
        #     The value to use for NumCacheClusters
        def NumCacheClusters(value)
          dsl_attribute(:NumCacheClusters, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for PrimaryEndPointAddress
        def PrimaryEndPointAddress(value)
          dsl_attribute(:PrimaryEndPointAddress, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for ConfigurationEndPointAddress
        def ConfigurationEndPointAddress(value)
          dsl_attribute(:ConfigurationEndPointAddress, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for EngineVersion
        def EngineVersion(value)
          dsl_attribute(:EngineVersion, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for KmsKeyId
        def KmsKeyId(value)
          dsl_attribute(:KmsKeyId, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for CacheSubnetGroupName
        def CacheSubnetGroupName(value)
          dsl_attribute(:CacheSubnetGroupName, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for CacheParameterGroupName
        def CacheParameterGroupName(value)
          dsl_attribute(:CacheParameterGroupName, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for PreferredMaintenanceWindow
        def PreferredMaintenanceWindow(value)
          dsl_attribute(:PreferredMaintenanceWindow, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for PrimaryClusterId
        def PrimaryClusterId(value)
          dsl_attribute(:PrimaryClusterId, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for ReadEndPointPorts
        def ReadEndPointPorts(value)
          dsl_attribute(:ReadEndPointPorts, value)
        end

        #   @param [Boolean|JSONable] value
        #     The value to use for AtRestEncryptionEnabled
        def AtRestEncryptionEnabled(value)
          dsl_attribute(:AtRestEncryptionEnabled, value)
        end

        #   @param [Boolean|JSONable] value
        #     The value to use for AutoMinorVersionUpgrade
        def AutoMinorVersionUpgrade(value)
          dsl_attribute(:AutoMinorVersionUpgrade, value)
        end

        # @param [Array<String>|JSONable>] values
        #   The List of values to use for SecurityGroupIds
        def SecurityGroupIds(values)
          dsl_list_attribute(:SecurityGroupIds, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for SecurityGroupIds
        def SecurityGroupId(value, fn_if: nil)
          dsl_push_attribute(:SecurityGroupIds, value, fn_if: fn_if)
        end

        #   @param [String|JSONable] value
        #     The value to use for SnapshotWindow
        def SnapshotWindow(value)
          dsl_attribute(:SnapshotWindow, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for CacheNodeType
        def CacheNodeType(value)
          dsl_attribute(:CacheNodeType, value)
        end

        #   @param [Integer|JSONable] value
        #     The value to use for SnapshotRetentionLimit
        def SnapshotRetentionLimit(value)
          dsl_attribute(:SnapshotRetentionLimit, value)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for ReadEndPointAddressesList
        def ReadEndPointAddressesList(value, fn_if: nil)
          dsl_push_attribute(:ReadEndPointAddressesList, value, fn_if: fn_if)
        end

        #   @param [String|JSONable] value
        #     The value to use for SnapshottingClusterId
        def SnapshottingClusterId(value)
          dsl_attribute(:SnapshottingClusterId, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for AuthToken
        def AuthToken(value)
          dsl_attribute(:AuthToken, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for ReadEndPointAddresses
        def ReadEndPointAddresses(value)
          dsl_attribute(:ReadEndPointAddresses, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::ElastiCache::ReplicationGroup]
    def AWS_ElastiCache_ReplicationGroup(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::ElastiCache::ReplicationGroup, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
