# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module Budgets
      # Resource Type definition for AWS::Budgets::Budget
      class Budget < ResourceType
        # Property Definition BudgetData
        class BudgetData < PropertyType
          #   @param [Spend|JSONable] value
          #     The value to use for BudgetLimit
          # @@overload BudgetLimit(&block)
          #   Set :BudgetLimit from block via instance eval of a new Spend
          def BudgetLimit(value = nil, **value_hash, &block)
            dsl_attribute(:BudgetLimit, value, attr_class: Spend, **value_hash, &block)
          end

          #   @param [TimePeriod|JSONable] value
          #     The value to use for TimePeriod
          # @@overload TimePeriod(&block)
          #   Set :TimePeriod from block via instance eval of a new TimePeriod
          def TimePeriod(value = nil, **value_hash, &block)
            dsl_attribute(:TimePeriod, value, attr_class: TimePeriod, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for TimeUnit
          def TimeUnit(value)
            dsl_attribute(:TimeUnit, value)
          end

          #   @param [Object|JSONable] value
          #     The value to use for PlannedBudgetLimits
          def PlannedBudgetLimits(value)
            dsl_attribute(:PlannedBudgetLimits, value)
          end

          #   @param [Object|JSONable] value
          #     The value to use for CostFilters
          def CostFilters(value)
            dsl_attribute(:CostFilters, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for BudgetName
          def BudgetName(value)
            dsl_attribute(:BudgetName, value)
          end

          #   @param [CostTypes|JSONable] value
          #     The value to use for CostTypes
          # @@overload CostTypes(&block)
          #   Set :CostTypes from block via instance eval of a new CostTypes
          def CostTypes(value = nil, **value_hash, &block)
            dsl_attribute(:CostTypes, value, attr_class: CostTypes, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for BudgetType
          def BudgetType(value)
            dsl_attribute(:BudgetType, value)
          end
        end

        # Property Definition NotificationWithSubscribers
        class NotificationWithSubscribers < PropertyType
          # @param [Array<Subscriber>|JSONable>] values
          #   The List of values to use for Subscribers
          def Subscribers(values)
            dsl_list_attribute(:Subscribers, values)
          end

          #  @param [Subscriber|JSONable] value  Append value to the List
          #    The List of values to use for Subscribers
          # @@overload Subscriber(&block)
          # Append value to the List from block via instance eval of a new Subscriber
          def Subscriber(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Subscribers, value, fn_if: fn_if, attr_class: Subscriber, **value_hash, &block)
          end

          #   @param [Notification|JSONable] value
          #     The value to use for Notification
          # @@overload Notification(&block)
          #   Set :Notification from block via instance eval of a new Notification
          def Notification(value = nil, **value_hash, &block)
            dsl_attribute(:Notification, value, attr_class: Notification, **value_hash, &block)
          end
        end

        # Property Definition Notification
        class Notification < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ComparisonOperator
          def ComparisonOperator(value)
            dsl_attribute(:ComparisonOperator, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for NotificationType
          def NotificationType(value)
            dsl_attribute(:NotificationType, value)
          end

          #   @param [Number|JSONable] value
          #     The value to use for Threshold
          def Threshold(value)
            dsl_attribute(:Threshold, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ThresholdType
          def ThresholdType(value)
            dsl_attribute(:ThresholdType, value)
          end
        end

        # Property Definition Spend
        class Spend < PropertyType
          #   @param [Number|JSONable] value
          #     The value to use for Amount
          def Amount(value)
            dsl_attribute(:Amount, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Unit
          def Unit(value)
            dsl_attribute(:Unit, value)
          end
        end

        # Property Definition CostTypes
        class CostTypes < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for IncludeSupport
          def IncludeSupport(value)
            dsl_attribute(:IncludeSupport, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for IncludeOtherSubscription
          def IncludeOtherSubscription(value)
            dsl_attribute(:IncludeOtherSubscription, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for IncludeTax
          def IncludeTax(value)
            dsl_attribute(:IncludeTax, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for IncludeSubscription
          def IncludeSubscription(value)
            dsl_attribute(:IncludeSubscription, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for UseBlended
          def UseBlended(value)
            dsl_attribute(:UseBlended, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for IncludeUpfront
          def IncludeUpfront(value)
            dsl_attribute(:IncludeUpfront, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for IncludeDiscount
          def IncludeDiscount(value)
            dsl_attribute(:IncludeDiscount, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for IncludeCredit
          def IncludeCredit(value)
            dsl_attribute(:IncludeCredit, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for IncludeRecurring
          def IncludeRecurring(value)
            dsl_attribute(:IncludeRecurring, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for UseAmortized
          def UseAmortized(value)
            dsl_attribute(:UseAmortized, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for IncludeRefund
          def IncludeRefund(value)
            dsl_attribute(:IncludeRefund, value)
          end
        end

        # Property Definition Subscriber
        class Subscriber < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for SubscriptionType
          def SubscriptionType(value)
            dsl_attribute(:SubscriptionType, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Address
          def Address(value)
            dsl_attribute(:Address, value)
          end
        end

        # Property Definition TimePeriod
        class TimePeriod < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Start
          def Start(value)
            dsl_attribute(:Start, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for End
          def End(value)
            dsl_attribute(:End, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        # @param [Array<NotificationWithSubscribers>|JSONable>] values
        #   The List of values to use for NotificationsWithSubscribers
        def NotificationsWithSubscribers(values)
          dsl_list_attribute(:NotificationsWithSubscribers, values)
        end

        #  @param [NotificationWithSubscribers|JSONable] value  Append value to the List
        #    The List of values to use for NotificationsWithSubscribers
        # @@overload NotificationsWithSubscriber(&block)
        # Append value to the List from block via instance eval of a new NotificationWithSubscribers
        def NotificationsWithSubscriber(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:NotificationsWithSubscribers, value, fn_if: fn_if, attr_class: NotificationWithSubscribers, **value_hash, &block)
        end

        #   @param [BudgetData|JSONable] value
        #     The value to use for Budget
        # @@overload Budget(&block)
        #   Set :Budget from block via instance eval of a new BudgetData
        def Budget(value = nil, **value_hash, &block)
          dsl_attribute(:Budget, value, attr_class: BudgetData, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::Budgets::Budget]
    def AWS_Budgets_Budget(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::Budgets::Budget, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
