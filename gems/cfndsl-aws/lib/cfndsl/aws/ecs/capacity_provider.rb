# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module ECS
      # Resource Type definition for AWS::ECS::CapacityProvider.
      class CapacityProvider < ResourceType
        # The managed scaling settings for the Auto Scaling group capacity provider.
        class ManagedScaling < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for MinimumScalingStepSize
          def MinimumScalingStepSize(value)
            dsl_attribute(:MinimumScalingStepSize, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for MaximumScalingStepSize
          def MaximumScalingStepSize(value)
            dsl_attribute(:MaximumScalingStepSize, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Status
          def Status(value)
            dsl_attribute(:Status, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for TargetCapacity
          def TargetCapacity(value)
            dsl_attribute(:TargetCapacity, value)
          end
        end

        # Property Definition AutoScalingGroupProvider
        class AutoScalingGroupProvider < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for AutoScalingGroupArn
          def AutoScalingGroupArn(value)
            dsl_attribute(:AutoScalingGroupArn, value)
          end

          #   @param [ManagedScaling|JSONable] value
          #     The value to use for ManagedScaling
          # @@overload ManagedScaling(&block)
          #   Set :ManagedScaling from block via instance eval of a new ManagedScaling
          def ManagedScaling(value = nil, **value_hash, &block)
            dsl_attribute(:ManagedScaling, value, attr_class: ManagedScaling, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for ManagedTerminationProtection
          def ManagedTerminationProtection(value)
            dsl_attribute(:ManagedTerminationProtection, value)
          end
        end

        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        #   @param [AutoScalingGroupProvider|JSONable] value
        #     The value to use for AutoScalingGroupProvider
        # @@overload AutoScalingGroupProvider(&block)
        #   Set :AutoScalingGroupProvider from block via instance eval of a new AutoScalingGroupProvider
        def AutoScalingGroupProvider(value = nil, **value_hash, &block)
          dsl_attribute(:AutoScalingGroupProvider, value, attr_class: AutoScalingGroupProvider, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Name
        def Name(value)
          dsl_attribute(:Name, value)
        end

        # @param [Array<Tag>|JSONable>] values
        #   The List of values to use for Tags
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    The List of values to use for Tags
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::ECS::CapacityProvider]
    def AWS_ECS_CapacityProvider(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::ECS::CapacityProvider, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
