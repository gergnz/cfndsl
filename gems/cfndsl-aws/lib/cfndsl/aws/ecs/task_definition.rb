# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module ECS
      # Resource Schema describing various properties for ECS TaskDefinition
      # @see https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html
      class TaskDefinition < ResourceType
        # List of container definitions that are passed to the Docker daemon on a container instance
        class ContainerDefinition < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Command
          def Commands(values)
            dsl_list_attribute(:Command, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Command
          def Command(value, fn_if: nil)
            dsl_push_attribute(:Command, value, fn_if: fn_if)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for Cpu
          def Cpu(value)
            dsl_attribute(:Cpu, value)
          end

          # @param [Array<ContainerDependency>|JSONable>] values
          #   The List of values to use for DependsOn
          def DependsOns(values)
            dsl_list_attribute(:DependsOn, values)
          end

          #  @param [ContainerDependency|JSONable] value  Append value to the List
          #    The List of values to use for DependsOn
          # @@overload DependsOn(&block)
          # Append value to the List from block via instance eval of a new ContainerDependency
          def DependsOn(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:DependsOn, value, fn_if: fn_if, attr_class: ContainerDependency, **value_hash, &block)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for DisableNetworking
          def DisableNetworking(value)
            dsl_attribute(:DisableNetworking, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for DnsSearchDomains
          def DnsSearchDomains(values)
            dsl_list_attribute(:DnsSearchDomains, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for DnsSearchDomains
          def DnsSearchDomain(value, fn_if: nil)
            dsl_push_attribute(:DnsSearchDomains, value, fn_if: fn_if)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for DnsServers
          def DnsServers(values)
            dsl_list_attribute(:DnsServers, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for DnsServers
          def DnsServer(value, fn_if: nil)
            dsl_push_attribute(:DnsServers, value, fn_if: fn_if)
          end

          #   @param [Object|JSONable] value
          #     The value to use for DockerLabels
          def DockerLabels(value)
            dsl_attribute(:DockerLabels, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for DockerSecurityOptions
          def DockerSecurityOptions(values)
            dsl_list_attribute(:DockerSecurityOptions, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for DockerSecurityOptions
          def DockerSecurityOption(value, fn_if: nil)
            dsl_push_attribute(:DockerSecurityOptions, value, fn_if: fn_if)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for EntryPoint
          def EntryPoints(values)
            dsl_list_attribute(:EntryPoint, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for EntryPoint
          def EntryPoint(value, fn_if: nil)
            dsl_push_attribute(:EntryPoint, value, fn_if: fn_if)
          end

          # @param [Array<KeyValuePair>|JSONable>] values
          #   The environment variables to pass to a container
          def Environments(values)
            dsl_list_attribute(:Environment, values)
          end

          #  @param [KeyValuePair|JSONable] value  Append value to the List
          #    The environment variables to pass to a container
          # @@overload Environment(&block)
          # Append value to the List from block via instance eval of a new KeyValuePair
          def Environment(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Environment, value, fn_if: fn_if, attr_class: KeyValuePair, **value_hash, &block)
          end

          # @param [Array<EnvironmentFile>|JSONable>] values
          #   The list of one or more files that contain the environment variables to pass to a container
          def EnvironmentFiles(values)
            dsl_list_attribute(:EnvironmentFiles, values)
          end

          #  @param [EnvironmentFile|JSONable] value  Append value to the List
          #    The list of one or more files that contain the environment variables to pass to a container
          # @@overload EnvironmentFile(&block)
          # Append value to the List from block via instance eval of a new EnvironmentFile
          def EnvironmentFile(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:EnvironmentFiles, value, fn_if: fn_if, attr_class: EnvironmentFile, **value_hash, &block)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for Essential
          def Essential(value)
            dsl_attribute(:Essential, value)
          end

          # @param [Array<HostEntry>|JSONable>] values
          #   The List of values to use for ExtraHosts
          def ExtraHosts(values)
            dsl_list_attribute(:ExtraHosts, values)
          end

          #  @param [HostEntry|JSONable] value  Append value to the List
          #    The List of values to use for ExtraHosts
          # @@overload ExtraHost(&block)
          # Append value to the List from block via instance eval of a new HostEntry
          def ExtraHost(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:ExtraHosts, value, fn_if: fn_if, attr_class: HostEntry, **value_hash, &block)
          end

          #   @param [FirelensConfiguration|JSONable] value
          #     The value to use for FirelensConfiguration
          # @@overload FirelensConfiguration(&block)
          #   Set :FirelensConfiguration from block via instance eval of a new FirelensConfiguration
          def FirelensConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:FirelensConfiguration, value, attr_class: FirelensConfiguration, **value_hash, &block)
          end

          #   @param [HealthCheck|JSONable] value
          #     The value to use for HealthCheck
          # @@overload HealthCheck(&block)
          #   Set :HealthCheck from block via instance eval of a new HealthCheck
          def HealthCheck(value = nil, **value_hash, &block)
            dsl_attribute(:HealthCheck, value, attr_class: HealthCheck, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for Hostname
          def Hostname(value)
            dsl_attribute(:Hostname, value)
          end

          #   @param [String|JSONable] value
          #     The image used to start a container. This string is passed directly to the Docker daemon.
          def Image(value)
            dsl_attribute(:Image, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Links
          def Links(values)
            dsl_list_attribute(:Links, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Links
          def Link(value, fn_if: nil)
            dsl_push_attribute(:Links, value, fn_if: fn_if)
          end

          #   @param [LinuxParameters|JSONable] value
          #     The value to use for LinuxParameters
          # @@overload LinuxParameters(&block)
          #   Set :LinuxParameters from block via instance eval of a new LinuxParameters
          def LinuxParameters(value = nil, **value_hash, &block)
            dsl_attribute(:LinuxParameters, value, attr_class: LinuxParameters, **value_hash, &block)
          end

          #   @param [LogConfiguration|JSONable] value
          #     The value to use for LogConfiguration
          # @@overload LogConfiguration(&block)
          #   Set :LogConfiguration from block via instance eval of a new LogConfiguration
          def LogConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:LogConfiguration, value, attr_class: LogConfiguration, **value_hash, &block)
          end

          #   @param [Integer|JSONable] value
          #     The amount (in MiB) of memory to present to the container. If your container attempts to exceed the memory specified here, the container is killed.
          def Memory(value)
            dsl_attribute(:Memory, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for MemoryReservation
          def MemoryReservation(value)
            dsl_attribute(:MemoryReservation, value)
          end

          # @param [Array<MountPoint>|JSONable>] values
          #   The List of values to use for MountPoints
          def MountPoints(values)
            dsl_list_attribute(:MountPoints, values)
          end

          #  @param [MountPoint|JSONable] value  Append value to the List
          #    The List of values to use for MountPoints
          # @@overload MountPoint(&block)
          # Append value to the List from block via instance eval of a new MountPoint
          def MountPoint(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:MountPoints, value, fn_if: fn_if, attr_class: MountPoint, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The name of a container. Up to 255 letters (uppercase and lowercase), numbers, hyphens, and underscores are allowed
          def Name(value)
            dsl_attribute(:Name, value)
          end

          # @param [Array<PortMapping>|JSONable>] values
          #   Port mappings allow containers to access ports on the host container instance to send or receive traffic.
          def PortMappings(values)
            dsl_list_attribute(:PortMappings, values)
          end

          #  @param [PortMapping|JSONable] value  Append value to the List
          #    Port mappings allow containers to access ports on the host container instance to send or receive traffic.
          # @@overload PortMapping(&block)
          # Append value to the List from block via instance eval of a new PortMapping
          def PortMapping(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:PortMappings, value, fn_if: fn_if, attr_class: PortMapping, **value_hash, &block)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for Privileged
          def Privileged(value)
            dsl_attribute(:Privileged, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for ReadonlyRootFilesystem
          def ReadonlyRootFilesystem(value)
            dsl_attribute(:ReadonlyRootFilesystem, value)
          end

          #   @param [RepositoryCredentials|JSONable] value
          #     The value to use for RepositoryCredentials
          # @@overload RepositoryCredentials(&block)
          #   Set :RepositoryCredentials from block via instance eval of a new RepositoryCredentials
          def RepositoryCredentials(value = nil, **value_hash, &block)
            dsl_attribute(:RepositoryCredentials, value, attr_class: RepositoryCredentials, **value_hash, &block)
          end

          # @param [Array<ResourceRequirement>|JSONable>] values
          #   The List of values to use for ResourceRequirements
          def ResourceRequirements(values)
            dsl_list_attribute(:ResourceRequirements, values)
          end

          #  @param [ResourceRequirement|JSONable] value  Append value to the List
          #    The List of values to use for ResourceRequirements
          # @@overload ResourceRequirement(&block)
          # Append value to the List from block via instance eval of a new ResourceRequirement
          def ResourceRequirement(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:ResourceRequirements, value, fn_if: fn_if, attr_class: ResourceRequirement, **value_hash, &block)
          end

          # @param [Array<Secret>|JSONable>] values
          #   The List of values to use for Secrets
          def Secrets(values)
            dsl_list_attribute(:Secrets, values)
          end

          #  @param [Secret|JSONable] value  Append value to the List
          #    The List of values to use for Secrets
          # @@overload Secret(&block)
          # Append value to the List from block via instance eval of a new Secret
          def Secret(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Secrets, value, fn_if: fn_if, attr_class: Secret, **value_hash, &block)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for StartTimeout
          def StartTimeout(value)
            dsl_attribute(:StartTimeout, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for StopTimeout
          def StopTimeout(value)
            dsl_attribute(:StopTimeout, value)
          end

          # @param [Array<Ulimit>|JSONable>] values
          #   The List of values to use for Ulimits
          def Ulimits(values)
            dsl_list_attribute(:Ulimits, values)
          end

          #  @param [Ulimit|JSONable] value  Append value to the List
          #    The List of values to use for Ulimits
          # @@overload Ulimit(&block)
          # Append value to the List from block via instance eval of a new Ulimit
          def Ulimit(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Ulimits, value, fn_if: fn_if, attr_class: Ulimit, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for User
          def User(value)
            dsl_attribute(:User, value)
          end

          # @param [Array<VolumeFrom>|JSONable>] values
          #   The List of values to use for VolumesFrom
          def VolumesFroms(values)
            dsl_list_attribute(:VolumesFrom, values)
          end

          #  @param [VolumeFrom|JSONable] value  Append value to the List
          #    The List of values to use for VolumesFrom
          # @@overload VolumesFrom(&block)
          # Append value to the List from block via instance eval of a new VolumeFrom
          def VolumesFrom(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:VolumesFrom, value, fn_if: fn_if, attr_class: VolumeFrom, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for WorkingDirectory
          def WorkingDirectory(value)
            dsl_attribute(:WorkingDirectory, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for Interactive
          def Interactive(value)
            dsl_attribute(:Interactive, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for PseudoTerminal
          def PseudoTerminal(value)
            dsl_attribute(:PseudoTerminal, value)
          end

          # @param [Array<SystemControl>|JSONable>] values
          #   The List of values to use for SystemControls
          def SystemControls(values)
            dsl_list_attribute(:SystemControls, values)
          end

          #  @param [SystemControl|JSONable] value  Append value to the List
          #    The List of values to use for SystemControls
          # @@overload SystemControl(&block)
          # Append value to the List from block via instance eval of a new SystemControl
          def SystemControl(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:SystemControls, value, fn_if: fn_if, attr_class: SystemControl, **value_hash, &block)
          end
        end

        # Property Definition SystemControl
        class SystemControl < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Namespace
          def Namespace(value)
            dsl_attribute(:Namespace, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        # Property Definition ContainerDependency
        class ContainerDependency < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ContainerName
          def ContainerName(value)
            dsl_attribute(:ContainerName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Condition
          def Condition(value)
            dsl_attribute(:Condition, value)
          end
        end

        # Property Definition Device
        class Device < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ContainerPath
          def ContainerPath(value)
            dsl_attribute(:ContainerPath, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for HostPath
          def HostPath(value)
            dsl_attribute(:HostPath, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Permissions
          def Permissions(values)
            dsl_list_attribute(:Permissions, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Permissions
          def Permission(value, fn_if: nil)
            dsl_push_attribute(:Permissions, value, fn_if: fn_if)
          end
        end

        # Property Definition DockerVolumeConfiguration
        class DockerVolumeConfiguration < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for Autoprovision
          def Autoprovision(value)
            dsl_attribute(:Autoprovision, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Driver
          def Driver(value)
            dsl_attribute(:Driver, value)
          end

          #   @param [Object|JSONable] value
          #     The value to use for DriverOpts
          def DriverOpts(value)
            dsl_attribute(:DriverOpts, value)
          end

          #   @param [Object|JSONable] value
          #     The value to use for Labels
          def Labels(value)
            dsl_attribute(:Labels, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Scope
          def Scope(value)
            dsl_attribute(:Scope, value)
          end
        end

        # Property Definition AuthorizationConfig
        class AuthorizationConfig < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for IAM
          def IAM(value)
            dsl_attribute(:IAM, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for AccessPointId
          def AccessPointId(value)
            dsl_attribute(:AccessPointId, value)
          end
        end

        # Property Definition EFSVolumeConfiguration
        class EFSVolumeConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for FilesystemId
          def FilesystemId(value)
            dsl_attribute(:FilesystemId, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for RootDirectory
          def RootDirectory(value)
            dsl_attribute(:RootDirectory, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for TransitEncryption
          def TransitEncryption(value)
            dsl_attribute(:TransitEncryption, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for TransitEncryptionPort
          def TransitEncryptionPort(value)
            dsl_attribute(:TransitEncryptionPort, value)
          end

          #   @param [AuthorizationConfig|JSONable] value
          #     The value to use for AuthorizationConfig
          # @@overload AuthorizationConfig(&block)
          #   Set :AuthorizationConfig from block via instance eval of a new AuthorizationConfig
          def AuthorizationConfig(value = nil, **value_hash, &block)
            dsl_attribute(:AuthorizationConfig, value, attr_class: AuthorizationConfig, **value_hash, &block)
          end
        end

        # Property Definition EnvironmentFile
        class EnvironmentFile < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Type
          def Type(value)
            dsl_attribute(:Type, value)
          end
        end

        # Property Definition FirelensConfiguration
        class FirelensConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Type
          def Type(value)
            dsl_attribute(:Type, value)
          end

          #   @param [Object|JSONable] value
          #     The value to use for Options
          def Options(value)
            dsl_attribute(:Options, value)
          end
        end

        # The health check command and associated configuration parameters for the container.
        class HealthCheck < PropertyType
          # @param [Array<String>|JSONable>] values
          #   A string array representing the command that the container runs to determine if it is healthy.
          def Commands(values)
            dsl_list_attribute(:Command, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    A string array representing the command that the container runs to determine if it is healthy.
          def Command(value, fn_if: nil)
            dsl_push_attribute(:Command, value, fn_if: fn_if)
          end

          #   @param [Integer|JSONable] value
          #     The time period in seconds between each health check execution. You may specify between 5 and 300 seconds. The default value is 30 seconds.
          def Interval(value)
            dsl_attribute(:Interval, value)
          end

          #   @param [Integer|JSONable] value
          #     The time period in seconds to wait for a health check to succeed before it is considered a failure. You may specify between 2 and 60 seconds. The default value is 5 seconds.
          def Timeout(value)
            dsl_attribute(:Timeout, value)
          end

          #   @param [Integer|JSONable] value
          #     The number of times to retry a failed health check before the container is considered unhealthy. You may specify between 1 and 10 retries. The default value is three retries.
          def Retries(value)
            dsl_attribute(:Retries, value)
          end

          #   @param [Integer|JSONable] value
          #     The optional grace period within which to provide containers time to bootstrap before failed health checks count towards the maximum number of retries. You may specify between 0 and 300 seconds. The startPeriod is disabled by default.
          def StartPeriod(value)
            dsl_attribute(:StartPeriod, value)
          end
        end

        # Property Definition HostEntry
        class HostEntry < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Hostname
          def Hostname(value)
            dsl_attribute(:Hostname, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for IpAddress
          def IpAddress(value)
            dsl_attribute(:IpAddress, value)
          end
        end

        # Property Definition HostVolumeProperties
        class HostVolumeProperties < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for SourcePath
          def SourcePath(value)
            dsl_attribute(:SourcePath, value)
          end
        end

        # Property Definition InferenceAccelerator
        class InferenceAccelerator < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for DeviceName
          def DeviceName(value)
            dsl_attribute(:DeviceName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for DeviceType
          def DeviceType(value)
            dsl_attribute(:DeviceType, value)
          end
        end

        # Property Definition KernelCapabilities
        class KernelCapabilities < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Add
          def Adds(values)
            dsl_list_attribute(:Add, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Add
          def Add(value, fn_if: nil)
            dsl_push_attribute(:Add, value, fn_if: fn_if)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Drop
          def Drops(values)
            dsl_list_attribute(:Drop, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Drop
          def Drop(value, fn_if: nil)
            dsl_push_attribute(:Drop, value, fn_if: fn_if)
          end
        end

        # Property Definition KeyValuePair
        class KeyValuePair < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        # Property Definition LinuxParameters
        class LinuxParameters < PropertyType
          #   @param [KernelCapabilities|JSONable] value
          #     The value to use for Capabilities
          # @@overload Capabilities(&block)
          #   Set :Capabilities from block via instance eval of a new KernelCapabilities
          def Capabilities(value = nil, **value_hash, &block)
            dsl_attribute(:Capabilities, value, attr_class: KernelCapabilities, **value_hash, &block)
          end

          # @param [Array<Device>|JSONable>] values
          #   The List of values to use for Devices
          def Devices(values)
            dsl_list_attribute(:Devices, values)
          end

          #  @param [Device|JSONable] value  Append value to the List
          #    The List of values to use for Devices
          # @@overload Device(&block)
          # Append value to the List from block via instance eval of a new Device
          def Device(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Devices, value, fn_if: fn_if, attr_class: Device, **value_hash, &block)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for InitProcessEnabled
          def InitProcessEnabled(value)
            dsl_attribute(:InitProcessEnabled, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for MaxSwap
          def MaxSwap(value)
            dsl_attribute(:MaxSwap, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for SharedMemorySize
          def SharedMemorySize(value)
            dsl_attribute(:SharedMemorySize, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for Swappiness
          def Swappiness(value)
            dsl_attribute(:Swappiness, value)
          end

          # @param [Array<Tmpfs>|JSONable>] values
          #   The List of values to use for Tmpfs
          def Tmpfs(values)
            dsl_list_attribute(:Tmpfs, values)
          end

          #  @param [Tmpfs|JSONable] value  Append value to the List
          #    The List of values to use for Tmpfs
          # @@overload Tmpf(&block)
          # Append value to the List from block via instance eval of a new Tmpfs
          def Tmpf(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Tmpfs, value, fn_if: fn_if, attr_class: Tmpfs, **value_hash, &block)
          end
        end

        # Property Definition LogConfiguration
        class LogConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for LogDriver
          def LogDriver(value)
            dsl_attribute(:LogDriver, value)
          end

          #   @param [Object|JSONable] value
          #     The value to use for Options
          def Options(value)
            dsl_attribute(:Options, value)
          end

          # @param [Array<Secret>|JSONable>] values
          #   The List of values to use for SecretOptions
          def SecretOptions(values)
            dsl_list_attribute(:SecretOptions, values)
          end

          #  @param [Secret|JSONable] value  Append value to the List
          #    The List of values to use for SecretOptions
          # @@overload SecretOption(&block)
          # Append value to the List from block via instance eval of a new Secret
          def SecretOption(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:SecretOptions, value, fn_if: fn_if, attr_class: Secret, **value_hash, &block)
          end
        end

        # Property Definition PortMapping
        class PortMapping < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for ContainerPort
          def ContainerPort(value)
            dsl_attribute(:ContainerPort, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for HostPort
          def HostPort(value)
            dsl_attribute(:HostPort, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Protocol
          def Protocol(value)
            dsl_attribute(:Protocol, value)
          end
        end

        # Property Definition MountPoint
        class MountPoint < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ContainerPath
          def ContainerPath(value)
            dsl_attribute(:ContainerPath, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for ReadOnly
          def ReadOnly(value)
            dsl_attribute(:ReadOnly, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for SourceVolume
          def SourceVolume(value)
            dsl_attribute(:SourceVolume, value)
          end
        end

        # Property Definition ProxyConfiguration
        class ProxyConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ContainerName
          def ContainerName(value)
            dsl_attribute(:ContainerName, value)
          end

          # @param [Array<KeyValuePair>|JSONable>] values
          #   The List of values to use for ProxyConfigurationProperties
          def ProxyConfigurationProperties(values)
            dsl_list_attribute(:ProxyConfigurationProperties, values)
          end

          #  @param [KeyValuePair|JSONable] value  Append value to the List
          #    The List of values to use for ProxyConfigurationProperties
          # @@overload ProxyConfigurationProperty(&block)
          # Append value to the List from block via instance eval of a new KeyValuePair
          def ProxyConfigurationProperty(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:ProxyConfigurationProperties, value, fn_if: fn_if, attr_class: KeyValuePair, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for Type
          def Type(value)
            dsl_attribute(:Type, value)
          end
        end

        # Property Definition RepositoryCredentials
        class RepositoryCredentials < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for CredentialsParameter
          def CredentialsParameter(value)
            dsl_attribute(:CredentialsParameter, value)
          end
        end

        # Property Definition ResourceRequirement
        class ResourceRequirement < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Type
          def Type(value)
            dsl_attribute(:Type, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        # Property Definition Secret
        class Secret < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ValueFrom
          def ValueFrom(value)
            dsl_attribute(:ValueFrom, value)
          end
        end

        # Property Definition TaskDefinitionPlacementConstraint
        class TaskDefinitionPlacementConstraint < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Type
          def Type(value)
            dsl_attribute(:Type, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Expression
          def Expression(value)
            dsl_attribute(:Expression, value)
          end
        end

        # Property Definition Tmpfs
        class Tmpfs < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ContainerPath
          def ContainerPath(value)
            dsl_attribute(:ContainerPath, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for MountOptions
          def MountOptions(values)
            dsl_list_attribute(:MountOptions, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for MountOptions
          def MountOption(value, fn_if: nil)
            dsl_push_attribute(:MountOptions, value, fn_if: fn_if)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for Size
          def Size(value)
            dsl_attribute(:Size, value)
          end
        end

        # Property Definition Ulimit
        class Ulimit < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for HardLimit
          def HardLimit(value)
            dsl_attribute(:HardLimit, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for SoftLimit
          def SoftLimit(value)
            dsl_attribute(:SoftLimit, value)
          end
        end

        # Property Definition Volume
        class Volume < PropertyType
          #   @param [DockerVolumeConfiguration|JSONable] value
          #     The value to use for DockerVolumeConfiguration
          # @@overload DockerVolumeConfiguration(&block)
          #   Set :DockerVolumeConfiguration from block via instance eval of a new DockerVolumeConfiguration
          def DockerVolumeConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:DockerVolumeConfiguration, value, attr_class: DockerVolumeConfiguration, **value_hash, &block)
          end

          #   @param [EFSVolumeConfiguration|JSONable] value
          #     The value to use for EFSVolumeConfiguration
          # @@overload EFSVolumeConfiguration(&block)
          #   Set :EFSVolumeConfiguration from block via instance eval of a new EFSVolumeConfiguration
          def EFSVolumeConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:EFSVolumeConfiguration, value, attr_class: EFSVolumeConfiguration, **value_hash, &block)
          end

          #   @param [HostVolumeProperties|JSONable] value
          #     The value to use for Host
          # @@overload Host(&block)
          #   Set :Host from block via instance eval of a new HostVolumeProperties
          def Host(value = nil, **value_hash, &block)
            dsl_attribute(:Host, value, attr_class: HostVolumeProperties, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end
        end

        # Property Definition VolumeFrom
        class VolumeFrom < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for ReadOnly
          def ReadOnly(value)
            dsl_attribute(:ReadOnly, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for SourceContainer
          def SourceContainer(value)
            dsl_attribute(:SourceContainer, value)
          end
        end

        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        #   @param [String|JSONable] value
        #     The Amazon Resource Name (ARN) of the Amazon ECS task definition
        def TaskDefinitionArn(value)
          dsl_attribute(:TaskDefinitionArn, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Family
        def Family(value)
          dsl_attribute(:Family, value)
        end

        # @param [Array<ContainerDefinition>|JSONable>] values
        #   The List of values to use for ContainerDefinitions
        def ContainerDefinitions(values)
          dsl_list_attribute(:ContainerDefinitions, values)
        end

        #  @param [ContainerDefinition|JSONable] value  Append value to the List
        #    The List of values to use for ContainerDefinitions
        # @@overload ContainerDefinition(&block)
        # Append value to the List from block via instance eval of a new ContainerDefinition
        def ContainerDefinition(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:ContainerDefinitions, value, fn_if: fn_if, attr_class: ContainerDefinition, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Cpu
        def Cpu(value)
          dsl_attribute(:Cpu, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for ExecutionRoleArn
        def ExecutionRoleArn(value)
          dsl_attribute(:ExecutionRoleArn, value)
        end

        # @param [Array<InferenceAccelerator>|JSONable>] values
        #   The List of values to use for InferenceAccelerators
        def InferenceAccelerators(values)
          dsl_list_attribute(:InferenceAccelerators, values)
        end

        #  @param [InferenceAccelerator|JSONable] value  Append value to the List
        #    The List of values to use for InferenceAccelerators
        # @@overload InferenceAccelerator(&block)
        # Append value to the List from block via instance eval of a new InferenceAccelerator
        def InferenceAccelerator(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:InferenceAccelerators, value, fn_if: fn_if, attr_class: InferenceAccelerator, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Memory
        def Memory(value)
          dsl_attribute(:Memory, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for NetworkMode
        def NetworkMode(value)
          dsl_attribute(:NetworkMode, value)
        end

        # @param [Array<TaskDefinitionPlacementConstraint>|JSONable>] values
        #   The List of values to use for PlacementConstraints
        def PlacementConstraints(values)
          dsl_list_attribute(:PlacementConstraints, values)
        end

        #  @param [TaskDefinitionPlacementConstraint|JSONable] value  Append value to the List
        #    The List of values to use for PlacementConstraints
        # @@overload PlacementConstraint(&block)
        # Append value to the List from block via instance eval of a new TaskDefinitionPlacementConstraint
        def PlacementConstraint(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:PlacementConstraints, value, fn_if: fn_if, attr_class: TaskDefinitionPlacementConstraint, **value_hash, &block)
        end

        #   @param [ProxyConfiguration|JSONable] value
        #     The value to use for ProxyConfiguration
        # @@overload ProxyConfiguration(&block)
        #   Set :ProxyConfiguration from block via instance eval of a new ProxyConfiguration
        def ProxyConfiguration(value = nil, **value_hash, &block)
          dsl_attribute(:ProxyConfiguration, value, attr_class: ProxyConfiguration, **value_hash, &block)
        end

        # @param [Array<String>|JSONable>] values
        #   The List of values to use for RequiresCompatibilities
        def RequiresCompatibilities(values)
          dsl_list_attribute(:RequiresCompatibilities, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for RequiresCompatibilities
        def RequiresCompatibility(value, fn_if: nil)
          dsl_push_attribute(:RequiresCompatibilities, value, fn_if: fn_if)
        end

        #   @param [String|JSONable] value
        #     The value to use for TaskRoleArn
        def TaskRoleArn(value)
          dsl_attribute(:TaskRoleArn, value)
        end

        # @param [Array<Volume>|JSONable>] values
        #   The List of values to use for Volumes
        def Volumes(values)
          dsl_list_attribute(:Volumes, values)
        end

        #  @param [Volume|JSONable] value  Append value to the List
        #    The List of values to use for Volumes
        # @@overload Volume(&block)
        # Append value to the List from block via instance eval of a new Volume
        def Volume(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Volumes, value, fn_if: fn_if, attr_class: Volume, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for PidMode
        def PidMode(value)
          dsl_attribute(:PidMode, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for IpcMode
        def IpcMode(value)
          dsl_attribute(:IpcMode, value)
        end

        # @param [Array<Tag>|JSONable>] values
        #   The List of values to use for Tags
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    The List of values to use for Tags
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::ECS::TaskDefinition]
    def AWS_ECS_TaskDefinition(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::ECS::TaskDefinition, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
