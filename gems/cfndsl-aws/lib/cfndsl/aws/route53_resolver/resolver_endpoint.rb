# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module Route53Resolver
      # Resource Type definition for AWS::Route53Resolver::ResolverEndpoint
      class ResolverEndpoint < ResourceType
        # Property Definition IpAddressRequest
        class IpAddressRequest < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Ip
          def Ip(value)
            dsl_attribute(:Ip, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for SubnetId
          def SubnetId(value)
            dsl_attribute(:SubnetId, value)
          end
        end

        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for ResolverEndpointId
        def ResolverEndpointId(value)
          dsl_attribute(:ResolverEndpointId, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for IpAddressCount
        def IpAddressCount(value)
          dsl_attribute(:IpAddressCount, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Arn
        def Arn(value)
          dsl_attribute(:Arn, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Direction
        def Direction(value)
          dsl_attribute(:Direction, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for HostVPCId
        def HostVPCId(value)
          dsl_attribute(:HostVPCId, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Name
        def Name(value)
          dsl_attribute(:Name, value)
        end

        # @param [Array<IpAddressRequest>|JSONable>] values
        #   The List of values to use for IpAddresses
        def IpAddresses(values)
          dsl_list_attribute(:IpAddresses, values)
        end

        #  @param [IpAddressRequest|JSONable] value  Append value to the List
        #    The List of values to use for IpAddresses
        # @@overload IpAddress(&block)
        # Append value to the List from block via instance eval of a new IpAddressRequest
        def IpAddress(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:IpAddresses, value, fn_if: fn_if, attr_class: IpAddressRequest, **value_hash, &block)
        end

        # @param [Array<String>|JSONable>] values
        #   The List of values to use for SecurityGroupIds
        def SecurityGroupIds(values)
          dsl_list_attribute(:SecurityGroupIds, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for SecurityGroupIds
        def SecurityGroupId(value, fn_if: nil)
          dsl_push_attribute(:SecurityGroupIds, value, fn_if: fn_if)
        end

        # @param [Array<Tag>|JSONable>] values
        #   The List of values to use for Tags
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    The List of values to use for Tags
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::Route53Resolver::ResolverEndpoint]
    def AWS_Route53Resolver_ResolverEndpoint(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::Route53Resolver::ResolverEndpoint, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
