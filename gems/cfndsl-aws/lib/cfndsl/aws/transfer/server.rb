# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module Transfer
      # Resource Type definition for AWS::Transfer::Server
      class Server < ResourceType
        # Property Definition IdentityProviderDetails
        class IdentityProviderDetails < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Url
          def Url(value)
            dsl_attribute(:Url, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for InvocationRole
          def InvocationRole(value)
            dsl_attribute(:InvocationRole, value)
          end
        end

        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end
        end

        # Property Definition Protocol
        class Protocol < PropertyType
        end

        # Property Definition EndpointDetails
        class EndpointDetails < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for AddressAllocationIds
          def AddressAllocationIds(values)
            dsl_list_attribute(:AddressAllocationIds, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for AddressAllocationIds
          def AddressAllocationId(value, fn_if: nil)
            dsl_push_attribute(:AddressAllocationIds, value, fn_if: fn_if)
          end

          #   @param [String|JSONable] value
          #     The value to use for VpcId
          def VpcId(value)
            dsl_attribute(:VpcId, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for VpcEndpointId
          def VpcEndpointId(value)
            dsl_attribute(:VpcEndpointId, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for SubnetIds
          def SubnetIds(values)
            dsl_list_attribute(:SubnetIds, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for SubnetIds
          def SubnetId(value, fn_if: nil)
            dsl_push_attribute(:SubnetIds, value, fn_if: fn_if)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for LoggingRole
        def LoggingRole(value)
          dsl_attribute(:LoggingRole, value)
        end

        # @param [Array<Protocol>|JSONable>] values
        #   The List of values to use for Protocols
        def Protocols(values)
          dsl_list_attribute(:Protocols, values)
        end

        #  @param [Protocol|JSONable] value  Append value to the List
        #    The List of values to use for Protocols
        # @@overload Protocol(&block)
        # Append value to the List from block via instance eval of a new Protocol
        def Protocol(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Protocols, value, fn_if: fn_if, attr_class: Protocol, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for ServerId
        def ServerId(value)
          dsl_attribute(:ServerId, value)
        end

        #   @param [IdentityProviderDetails|JSONable] value
        #     The value to use for IdentityProviderDetails
        # @@overload IdentityProviderDetails(&block)
        #   Set :IdentityProviderDetails from block via instance eval of a new IdentityProviderDetails
        def IdentityProviderDetails(value = nil, **value_hash, &block)
          dsl_attribute(:IdentityProviderDetails, value, attr_class: IdentityProviderDetails, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for EndpointType
        def EndpointType(value)
          dsl_attribute(:EndpointType, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for SecurityPolicyName
        def SecurityPolicyName(value)
          dsl_attribute(:SecurityPolicyName, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Arn
        def Arn(value)
          dsl_attribute(:Arn, value)
        end

        #   @param [EndpointDetails|JSONable] value
        #     The value to use for EndpointDetails
        # @@overload EndpointDetails(&block)
        #   Set :EndpointDetails from block via instance eval of a new EndpointDetails
        def EndpointDetails(value = nil, **value_hash, &block)
          dsl_attribute(:EndpointDetails, value, attr_class: EndpointDetails, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for IdentityProviderType
        def IdentityProviderType(value)
          dsl_attribute(:IdentityProviderType, value)
        end

        # @param [Array<Tag>|JSONable>] values
        #   The List of values to use for Tags
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    The List of values to use for Tags
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Certificate
        def Certificate(value)
          dsl_attribute(:Certificate, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::Transfer::Server]
    def AWS_Transfer_Server(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::Transfer::Server, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
