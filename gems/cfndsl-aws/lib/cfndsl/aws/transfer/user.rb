# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module Transfer
      # Resource Type definition for AWS::Transfer::User
      class User < ResourceType
        # Property Definition SshPublicKey
        class SshPublicKey < PropertyType
        end

        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end
        end

        # Property Definition HomeDirectoryMapEntry
        class HomeDirectoryMapEntry < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Entry
          def Entry(value)
            dsl_attribute(:Entry, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Target
          def Target(value)
            dsl_attribute(:Target, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for Policy
        def Policy(value)
          dsl_attribute(:Policy, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Role
        def Role(value)
          dsl_attribute(:Role, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for HomeDirectory
        def HomeDirectory(value)
          dsl_attribute(:HomeDirectory, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for HomeDirectoryType
        def HomeDirectoryType(value)
          dsl_attribute(:HomeDirectoryType, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for ServerId
        def ServerId(value)
          dsl_attribute(:ServerId, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for UserName
        def UserName(value)
          dsl_attribute(:UserName, value)
        end

        # @param [Array<HomeDirectoryMapEntry>|JSONable>] values
        #   The List of values to use for HomeDirectoryMappings
        def HomeDirectoryMappings(values)
          dsl_list_attribute(:HomeDirectoryMappings, values)
        end

        #  @param [HomeDirectoryMapEntry|JSONable] value  Append value to the List
        #    The List of values to use for HomeDirectoryMappings
        # @@overload HomeDirectoryMapping(&block)
        # Append value to the List from block via instance eval of a new HomeDirectoryMapEntry
        def HomeDirectoryMapping(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:HomeDirectoryMappings, value, fn_if: fn_if, attr_class: HomeDirectoryMapEntry, **value_hash, &block)
        end

        # @param [Array<SshPublicKey>|JSONable>] values
        #   The List of values to use for SshPublicKeys
        def SshPublicKeys(values)
          dsl_list_attribute(:SshPublicKeys, values)
        end

        #  @param [SshPublicKey|JSONable] value  Append value to the List
        #    The List of values to use for SshPublicKeys
        # @@overload SshPublicKey(&block)
        # Append value to the List from block via instance eval of a new SshPublicKey
        def SshPublicKey(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:SshPublicKeys, value, fn_if: fn_if, attr_class: SshPublicKey, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Arn
        def Arn(value)
          dsl_attribute(:Arn, value)
        end

        # @param [Array<Tag>|JSONable>] values
        #   The List of values to use for Tags
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    The List of values to use for Tags
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::Transfer::User]
    def AWS_Transfer_User(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::Transfer::User, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
