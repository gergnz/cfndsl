# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module NetworkFirewall
      # Resource type definition for AWS::NetworkFirewall::RuleGroup
      # @see https://github.com/aws-cloudformation/aws-cloudformation-resource-providers-networkfirewall.git
      class RuleGroup < ResourceType
        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        # Property Definition RuleGroup
        class RuleGroup < PropertyType
          #   @param [RuleVariables|JSONable] value
          #     The value to use for RuleVariables
          # @@overload RuleVariables(&block)
          #   Set :RuleVariables from block via instance eval of a new RuleVariables
          def RuleVariables(value = nil, **value_hash, &block)
            dsl_attribute(:RuleVariables, value, attr_class: RuleVariables, **value_hash, &block)
          end

          #   @param [RulesSource|JSONable] value
          #     The value to use for RulesSource
          # @@overload RulesSource(&block)
          #   Set :RulesSource from block via instance eval of a new RulesSource
          def RulesSource(value = nil, **value_hash, &block)
            dsl_attribute(:RulesSource, value, attr_class: RulesSource, **value_hash, &block)
          end
        end

        # Property Definition RuleVariables
        class RuleVariables < PropertyType
          #   @param [Object|JSONable] value
          #     The value to use for IPSets
          def IPSets(value)
            dsl_attribute(:IPSets, value)
          end

          #   @param [Object|JSONable] value
          #     The value to use for PortSets
          def PortSets(value)
            dsl_attribute(:PortSets, value)
          end
        end

        # Property Definition IPSet
        class IPSet < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Definition
          def Definitions(values)
            dsl_list_attribute(:Definition, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Definition
          def Definition(value, fn_if: nil)
            dsl_push_attribute(:Definition, value, fn_if: fn_if)
          end
        end

        # Property Definition PortSet
        class PortSet < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Definition
          def Definitions(values)
            dsl_list_attribute(:Definition, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Definition
          def Definition(value, fn_if: nil)
            dsl_push_attribute(:Definition, value, fn_if: fn_if)
          end
        end

        # Property Definition RulesSource
        class RulesSource < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for RulesString
          def RulesString(value)
            dsl_attribute(:RulesString, value)
          end

          #   @param [RulesSourceList|JSONable] value
          #     The value to use for RulesSourceList
          # @@overload RulesSourceList(&block)
          #   Set :RulesSourceList from block via instance eval of a new RulesSourceList
          def RulesSourceList(value = nil, **value_hash, &block)
            dsl_attribute(:RulesSourceList, value, attr_class: RulesSourceList, **value_hash, &block)
          end

          # @param [Array<StatefulRule>|JSONable>] values
          #   The List of values to use for StatefulRules
          def StatefulRules(values)
            dsl_list_attribute(:StatefulRules, values)
          end

          #  @param [StatefulRule|JSONable] value  Append value to the List
          #    The List of values to use for StatefulRules
          # @@overload StatefulRule(&block)
          # Append value to the List from block via instance eval of a new StatefulRule
          def StatefulRule(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:StatefulRules, value, fn_if: fn_if, attr_class: StatefulRule, **value_hash, &block)
          end

          #   @param [StatelessRulesAndCustomActions|JSONable] value
          #     The value to use for StatelessRulesAndCustomActions
          # @@overload StatelessRulesAndCustomActions(&block)
          #   Set :StatelessRulesAndCustomActions from block via instance eval of a new StatelessRulesAndCustomActions
          def StatelessRulesAndCustomActions(value = nil, **value_hash, &block)
            dsl_attribute(:StatelessRulesAndCustomActions, value, attr_class: StatelessRulesAndCustomActions, **value_hash, &block)
          end
        end

        # Property Definition RulesSourceList
        class RulesSourceList < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Targets
          def Targets(values)
            dsl_list_attribute(:Targets, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Targets
          def Target(value, fn_if: nil)
            dsl_push_attribute(:Targets, value, fn_if: fn_if)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for TargetTypes
          def TargetTypes(values)
            dsl_list_attribute(:TargetTypes, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for TargetTypes
          def TargetTyp(value, fn_if: nil)
            dsl_push_attribute(:TargetTypes, value, fn_if: fn_if)
          end

          #   @param [String|JSONable] value
          #     The value to use for GeneratedRulesType
          def GeneratedRulesType(value)
            dsl_attribute(:GeneratedRulesType, value)
          end
        end

        # Property Definition StatefulRule
        class StatefulRule < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Action
          def Action(value)
            dsl_attribute(:Action, value)
          end

          #   @param [Header|JSONable] value
          #     The value to use for Header
          # @@overload Header(&block)
          #   Set :Header from block via instance eval of a new Header
          def Header(value = nil, **value_hash, &block)
            dsl_attribute(:Header, value, attr_class: Header, **value_hash, &block)
          end

          # @param [Array<RuleOption>|JSONable>] values
          #   The List of values to use for RuleOptions
          def RuleOptions(values)
            dsl_list_attribute(:RuleOptions, values)
          end

          #  @param [RuleOption|JSONable] value  Append value to the List
          #    The List of values to use for RuleOptions
          # @@overload RuleOption(&block)
          # Append value to the List from block via instance eval of a new RuleOption
          def RuleOption(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:RuleOptions, value, fn_if: fn_if, attr_class: RuleOption, **value_hash, &block)
          end
        end

        # Property Definition Header
        class Header < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Protocol
          def Protocol(value)
            dsl_attribute(:Protocol, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Source
          def Source(value)
            dsl_attribute(:Source, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for SourcePort
          def SourcePort(value)
            dsl_attribute(:SourcePort, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Direction
          def Direction(value)
            dsl_attribute(:Direction, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Destination
          def Destination(value)
            dsl_attribute(:Destination, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for DestinationPort
          def DestinationPort(value)
            dsl_attribute(:DestinationPort, value)
          end
        end

        # Property Definition RuleOption
        class RuleOption < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Keyword
          def Keyword(value)
            dsl_attribute(:Keyword, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Settings
          def Settings(values)
            dsl_list_attribute(:Settings, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Settings
          def Setting(value, fn_if: nil)
            dsl_push_attribute(:Settings, value, fn_if: fn_if)
          end
        end

        # Property Definition StatelessRulesAndCustomActions
        class StatelessRulesAndCustomActions < PropertyType
          # @param [Array<StatelessRule>|JSONable>] values
          #   The List of values to use for StatelessRules
          def StatelessRules(values)
            dsl_list_attribute(:StatelessRules, values)
          end

          #  @param [StatelessRule|JSONable] value  Append value to the List
          #    The List of values to use for StatelessRules
          # @@overload StatelessRule(&block)
          # Append value to the List from block via instance eval of a new StatelessRule
          def StatelessRule(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:StatelessRules, value, fn_if: fn_if, attr_class: StatelessRule, **value_hash, &block)
          end

          # @param [Array<CustomAction>|JSONable>] values
          #   The List of values to use for CustomActions
          def CustomActions(values)
            dsl_list_attribute(:CustomActions, values)
          end

          #  @param [CustomAction|JSONable] value  Append value to the List
          #    The List of values to use for CustomActions
          # @@overload CustomAction(&block)
          # Append value to the List from block via instance eval of a new CustomAction
          def CustomAction(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:CustomActions, value, fn_if: fn_if, attr_class: CustomAction, **value_hash, &block)
          end
        end

        # Property Definition StatelessRule
        class StatelessRule < PropertyType
          #   @param [RuleDefinition|JSONable] value
          #     The value to use for RuleDefinition
          # @@overload RuleDefinition(&block)
          #   Set :RuleDefinition from block via instance eval of a new RuleDefinition
          def RuleDefinition(value = nil, **value_hash, &block)
            dsl_attribute(:RuleDefinition, value, attr_class: RuleDefinition, **value_hash, &block)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for Priority
          def Priority(value)
            dsl_attribute(:Priority, value)
          end
        end

        # Property Definition RuleDefinition
        class RuleDefinition < PropertyType
          #   @param [MatchAttributes|JSONable] value
          #     The value to use for MatchAttributes
          # @@overload MatchAttributes(&block)
          #   Set :MatchAttributes from block via instance eval of a new MatchAttributes
          def MatchAttributes(value = nil, **value_hash, &block)
            dsl_attribute(:MatchAttributes, value, attr_class: MatchAttributes, **value_hash, &block)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Actions
          def Actions(values)
            dsl_list_attribute(:Actions, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Actions
          def Action(value, fn_if: nil)
            dsl_push_attribute(:Actions, value, fn_if: fn_if)
          end
        end

        # Property Definition MatchAttributes
        class MatchAttributes < PropertyType
          # @param [Array<Address>|JSONable>] values
          #   The List of values to use for Sources
          def Sources(values)
            dsl_list_attribute(:Sources, values)
          end

          #  @param [Address|JSONable] value  Append value to the List
          #    The List of values to use for Sources
          # @@overload Sourc(&block)
          # Append value to the List from block via instance eval of a new Address
          def Sourc(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Sources, value, fn_if: fn_if, attr_class: Address, **value_hash, &block)
          end

          # @param [Array<Address>|JSONable>] values
          #   The List of values to use for Destinations
          def Destinations(values)
            dsl_list_attribute(:Destinations, values)
          end

          #  @param [Address|JSONable] value  Append value to the List
          #    The List of values to use for Destinations
          # @@overload Destination(&block)
          # Append value to the List from block via instance eval of a new Address
          def Destination(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Destinations, value, fn_if: fn_if, attr_class: Address, **value_hash, &block)
          end

          # @param [Array<PortRange>|JSONable>] values
          #   The List of values to use for SourcePorts
          def SourcePorts(values)
            dsl_list_attribute(:SourcePorts, values)
          end

          #  @param [PortRange|JSONable] value  Append value to the List
          #    The List of values to use for SourcePorts
          # @@overload SourcePort(&block)
          # Append value to the List from block via instance eval of a new PortRange
          def SourcePort(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:SourcePorts, value, fn_if: fn_if, attr_class: PortRange, **value_hash, &block)
          end

          # @param [Array<PortRange>|JSONable>] values
          #   The List of values to use for DestinationPorts
          def DestinationPorts(values)
            dsl_list_attribute(:DestinationPorts, values)
          end

          #  @param [PortRange|JSONable] value  Append value to the List
          #    The List of values to use for DestinationPorts
          # @@overload DestinationPort(&block)
          # Append value to the List from block via instance eval of a new PortRange
          def DestinationPort(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:DestinationPorts, value, fn_if: fn_if, attr_class: PortRange, **value_hash, &block)
          end

          # @param [Array<Integer>|JSONable>] values
          #   The List of values to use for Protocols
          def Protocols(values)
            dsl_list_attribute(:Protocols, values)
          end

          #  @param [Integer|JSONable] value  Append value to the List
          #    The List of values to use for Protocols
          def Protocol(value, fn_if: nil)
            dsl_push_attribute(:Protocols, value, fn_if: fn_if)
          end

          # @param [Array<TCPFlagField>|JSONable>] values
          #   The List of values to use for TCPFlags
          def TCPFlags(values)
            dsl_list_attribute(:TCPFlags, values)
          end

          #  @param [TCPFlagField|JSONable] value  Append value to the List
          #    The List of values to use for TCPFlags
          # @@overload TCPFlag(&block)
          # Append value to the List from block via instance eval of a new TCPFlagField
          def TCPFlag(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:TCPFlags, value, fn_if: fn_if, attr_class: TCPFlagField, **value_hash, &block)
          end
        end

        # Property Definition Address
        class Address < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for AddressDefinition
          def AddressDefinition(value)
            dsl_attribute(:AddressDefinition, value)
          end
        end

        # Property Definition PortRange
        class PortRange < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for FromPort
          def FromPort(value)
            dsl_attribute(:FromPort, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for ToPort
          def ToPort(value)
            dsl_attribute(:ToPort, value)
          end
        end

        # Property Definition TCPFlagField
        class TCPFlagField < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Flags
          def Flags(values)
            dsl_list_attribute(:Flags, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Flags
          def Flag(value, fn_if: nil)
            dsl_push_attribute(:Flags, value, fn_if: fn_if)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Masks
          def Masks(values)
            dsl_list_attribute(:Masks, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Masks
          def Mask(value, fn_if: nil)
            dsl_push_attribute(:Masks, value, fn_if: fn_if)
          end
        end

        # Property Definition CustomAction
        class CustomAction < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ActionName
          def ActionName(value)
            dsl_attribute(:ActionName, value)
          end

          #   @param [ActionDefinition|JSONable] value
          #     The value to use for ActionDefinition
          # @@overload ActionDefinition(&block)
          #   Set :ActionDefinition from block via instance eval of a new ActionDefinition
          def ActionDefinition(value = nil, **value_hash, &block)
            dsl_attribute(:ActionDefinition, value, attr_class: ActionDefinition, **value_hash, &block)
          end
        end

        # Property Definition ActionDefinition
        class ActionDefinition < PropertyType
          #   @param [PublishMetricAction|JSONable] value
          #     The value to use for PublishMetricAction
          # @@overload PublishMetricAction(&block)
          #   Set :PublishMetricAction from block via instance eval of a new PublishMetricAction
          def PublishMetricAction(value = nil, **value_hash, &block)
            dsl_attribute(:PublishMetricAction, value, attr_class: PublishMetricAction, **value_hash, &block)
          end
        end

        # Property Definition PublishMetricAction
        class PublishMetricAction < PropertyType
          # @param [Array<Dimension>|JSONable>] values
          #   The List of values to use for Dimensions
          def Dimensions(values)
            dsl_list_attribute(:Dimensions, values)
          end

          #  @param [Dimension|JSONable] value  Append value to the List
          #    The List of values to use for Dimensions
          # @@overload Dimension(&block)
          # Append value to the List from block via instance eval of a new Dimension
          def Dimension(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Dimensions, value, fn_if: fn_if, attr_class: Dimension, **value_hash, &block)
          end
        end

        # Property Definition Dimension
        class Dimension < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for RuleGroupName
        def RuleGroupName(value)
          dsl_attribute(:RuleGroupName, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for RuleGroupArn
        def RuleGroupArn(value)
          dsl_attribute(:RuleGroupArn, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for RuleGroupId
        def RuleGroupId(value)
          dsl_attribute(:RuleGroupId, value)
        end

        #   @param [RuleGroup|JSONable] value
        #     The value to use for RuleGroup
        # @@overload RuleGroup(&block)
        #   Set :RuleGroup from block via instance eval of a new RuleGroup
        def RuleGroup(value = nil, **value_hash, &block)
          dsl_attribute(:RuleGroup, value, attr_class: RuleGroup, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Type
        def Type(value)
          dsl_attribute(:Type, value)
        end

        #   @param [Integer|JSONable] value
        #     The value to use for Capacity
        def Capacity(value)
          dsl_attribute(:Capacity, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Description
        def Description(value)
          dsl_attribute(:Description, value)
        end

        # @param [Array<Tag>|JSONable>] values
        #   The List of values to use for Tags
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    The List of values to use for Tags
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::NetworkFirewall::RuleGroup]
    def AWS_NetworkFirewall_RuleGroup(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::NetworkFirewall::RuleGroup, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
