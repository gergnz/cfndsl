# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module NetworkFirewall
      # Resource type definition for AWS::NetworkFirewall::FirewallPolicy
      # @see https://github.com/aws-cloudformation/aws-cloudformation-resource-providers-networkfirewall.git
      class FirewallPolicy < ResourceType
        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        # Property Definition FirewallPolicy
        class FirewallPolicy < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for StatelessDefaultActions
          def StatelessDefaultActions(values)
            dsl_list_attribute(:StatelessDefaultActions, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for StatelessDefaultActions
          def StatelessDefaultAction(value, fn_if: nil)
            dsl_push_attribute(:StatelessDefaultActions, value, fn_if: fn_if)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for StatelessFragmentDefaultActions
          def StatelessFragmentDefaultActions(values)
            dsl_list_attribute(:StatelessFragmentDefaultActions, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for StatelessFragmentDefaultActions
          def StatelessFragmentDefaultAction(value, fn_if: nil)
            dsl_push_attribute(:StatelessFragmentDefaultActions, value, fn_if: fn_if)
          end

          # @param [Array<CustomAction>|JSONable>] values
          #   The List of values to use for StatelessCustomActions
          def StatelessCustomActions(values)
            dsl_list_attribute(:StatelessCustomActions, values)
          end

          #  @param [CustomAction|JSONable] value  Append value to the List
          #    The List of values to use for StatelessCustomActions
          # @@overload StatelessCustomAction(&block)
          # Append value to the List from block via instance eval of a new CustomAction
          def StatelessCustomAction(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:StatelessCustomActions, value, fn_if: fn_if, attr_class: CustomAction, **value_hash, &block)
          end

          # @param [Array<StatelessRuleGroupReference>|JSONable>] values
          #   The List of values to use for StatelessRuleGroupReferences
          def StatelessRuleGroupReferences(values)
            dsl_list_attribute(:StatelessRuleGroupReferences, values)
          end

          #  @param [StatelessRuleGroupReference|JSONable] value  Append value to the List
          #    The List of values to use for StatelessRuleGroupReferences
          # @@overload StatelessRuleGroupReferenc(&block)
          # Append value to the List from block via instance eval of a new StatelessRuleGroupReference
          def StatelessRuleGroupReferenc(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:StatelessRuleGroupReferences, value, fn_if: fn_if, attr_class: StatelessRuleGroupReference, **value_hash, &block)
          end

          # @param [Array<StatefulRuleGroupReference>|JSONable>] values
          #   The List of values to use for StatefulRuleGroupReferences
          def StatefulRuleGroupReferences(values)
            dsl_list_attribute(:StatefulRuleGroupReferences, values)
          end

          #  @param [StatefulRuleGroupReference|JSONable] value  Append value to the List
          #    The List of values to use for StatefulRuleGroupReferences
          # @@overload StatefulRuleGroupReferenc(&block)
          # Append value to the List from block via instance eval of a new StatefulRuleGroupReference
          def StatefulRuleGroupReferenc(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:StatefulRuleGroupReferences, value, fn_if: fn_if, attr_class: StatefulRuleGroupReference, **value_hash, &block)
          end
        end

        # Property Definition CustomAction
        class CustomAction < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ActionName
          def ActionName(value)
            dsl_attribute(:ActionName, value)
          end

          #   @param [ActionDefinition|JSONable] value
          #     The value to use for ActionDefinition
          # @@overload ActionDefinition(&block)
          #   Set :ActionDefinition from block via instance eval of a new ActionDefinition
          def ActionDefinition(value = nil, **value_hash, &block)
            dsl_attribute(:ActionDefinition, value, attr_class: ActionDefinition, **value_hash, &block)
          end
        end

        # Property Definition ActionDefinition
        class ActionDefinition < PropertyType
          #   @param [PublishMetricAction|JSONable] value
          #     The value to use for PublishMetricAction
          # @@overload PublishMetricAction(&block)
          #   Set :PublishMetricAction from block via instance eval of a new PublishMetricAction
          def PublishMetricAction(value = nil, **value_hash, &block)
            dsl_attribute(:PublishMetricAction, value, attr_class: PublishMetricAction, **value_hash, &block)
          end
        end

        # Property Definition PublishMetricAction
        class PublishMetricAction < PropertyType
          # @param [Array<Dimension>|JSONable>] values
          #   The List of values to use for Dimensions
          def Dimensions(values)
            dsl_list_attribute(:Dimensions, values)
          end

          #  @param [Dimension|JSONable] value  Append value to the List
          #    The List of values to use for Dimensions
          # @@overload Dimension(&block)
          # Append value to the List from block via instance eval of a new Dimension
          def Dimension(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Dimensions, value, fn_if: fn_if, attr_class: Dimension, **value_hash, &block)
          end
        end

        # Property Definition Dimension
        class Dimension < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        # Property Definition StatefulRuleGroupReference
        class StatefulRuleGroupReference < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ResourceArn
          def ResourceArn(value)
            dsl_attribute(:ResourceArn, value)
          end
        end

        # Property Definition StatelessRuleGroupReference
        class StatelessRuleGroupReference < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ResourceArn
          def ResourceArn(value)
            dsl_attribute(:ResourceArn, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for Priority
          def Priority(value)
            dsl_attribute(:Priority, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for FirewallPolicyName
        def FirewallPolicyName(value)
          dsl_attribute(:FirewallPolicyName, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for FirewallPolicyArn
        def FirewallPolicyArn(value)
          dsl_attribute(:FirewallPolicyArn, value)
        end

        #   @param [FirewallPolicy|JSONable] value
        #     The value to use for FirewallPolicy
        # @@overload FirewallPolicy(&block)
        #   Set :FirewallPolicy from block via instance eval of a new FirewallPolicy
        def FirewallPolicy(value = nil, **value_hash, &block)
          dsl_attribute(:FirewallPolicy, value, attr_class: FirewallPolicy, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for FirewallPolicyId
        def FirewallPolicyId(value)
          dsl_attribute(:FirewallPolicyId, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Description
        def Description(value)
          dsl_attribute(:Description, value)
        end

        # @param [Array<Tag>|JSONable>] values
        #   The List of values to use for Tags
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    The List of values to use for Tags
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::NetworkFirewall::FirewallPolicy]
    def AWS_NetworkFirewall_FirewallPolicy(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::NetworkFirewall::FirewallPolicy, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
