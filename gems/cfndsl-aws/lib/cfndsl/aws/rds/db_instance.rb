# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module RDS
      # Resource Type definition for AWS::RDS::DBInstance
      class DBInstance < ResourceType
        # Property Definition DBInstanceRole
        class DBInstanceRole < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for RoleArn
          def RoleArn(value)
            dsl_attribute(:RoleArn, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for FeatureName
          def FeatureName(value)
            dsl_attribute(:FeatureName, value)
          end
        end

        # Property Definition ProcessorFeature
        class ProcessorFeature < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end
        end

        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end
        end

        #   @param [Boolean|JSONable] value
        #     The value to use for StorageEncrypted
        def StorageEncrypted(value)
          dsl_attribute(:StorageEncrypted, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Timezone
        def Timezone(value)
          dsl_attribute(:Timezone, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Port
        def Port(value)
          dsl_attribute(:Port, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for DBClusterIdentifier
        def DBClusterIdentifier(value)
          dsl_attribute(:DBClusterIdentifier, value)
        end

        #   @param [Integer|JSONable] value
        #     The value to use for MonitoringInterval
        def MonitoringInterval(value)
          dsl_attribute(:MonitoringInterval, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for DBParameterGroupName
        def DBParameterGroupName(value)
          dsl_attribute(:DBParameterGroupName, value)
        end

        #   @param [Boolean|JSONable] value
        #     The value to use for MultiAZ
        def MultiAZ(value)
          dsl_attribute(:MultiAZ, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Engine
        def Engine(value)
          dsl_attribute(:Engine, value)
        end

        # @param [Array<Tag>|JSONable>] values
        #   The List of values to use for Tags
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    The List of values to use for Tags
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for EndpointAddress
        def EndpointAddress(value)
          dsl_attribute(:EndpointAddress, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for PerformanceInsightsKMSKeyId
        def PerformanceInsightsKMSKeyId(value)
          dsl_attribute(:PerformanceInsightsKMSKeyId, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for SourceDBInstanceIdentifier
        def SourceDBInstanceIdentifier(value)
          dsl_attribute(:SourceDBInstanceIdentifier, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for EngineVersion
        def EngineVersion(value)
          dsl_attribute(:EngineVersion, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for StorageType
        def StorageType(value)
          dsl_attribute(:StorageType, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for KmsKeyId
        def KmsKeyId(value)
          dsl_attribute(:KmsKeyId, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for DBInstanceClass
        def DBInstanceClass(value)
          dsl_attribute(:DBInstanceClass, value)
        end

        #   @param [Boolean|JSONable] value
        #     The value to use for DeleteAutomatedBackups
        def DeleteAutomatedBackups(value)
          dsl_attribute(:DeleteAutomatedBackups, value)
        end

        #   @param [Integer|JSONable] value
        #     The value to use for PerformanceInsightsRetentionPeriod
        def PerformanceInsightsRetentionPeriod(value)
          dsl_attribute(:PerformanceInsightsRetentionPeriod, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for AvailabilityZone
        def AvailabilityZone(value)
          dsl_attribute(:AvailabilityZone, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for OptionGroupName
        def OptionGroupName(value)
          dsl_attribute(:OptionGroupName, value)
        end

        #   @param [Boolean|JSONable] value
        #     The value to use for EnablePerformanceInsights
        def EnablePerformanceInsights(value)
          dsl_attribute(:EnablePerformanceInsights, value)
        end

        #   @param [Boolean|JSONable] value
        #     The value to use for AutoMinorVersionUpgrade
        def AutoMinorVersionUpgrade(value)
          dsl_attribute(:AutoMinorVersionUpgrade, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for DBSubnetGroupName
        def DBSubnetGroupName(value)
          dsl_attribute(:DBSubnetGroupName, value)
        end

        #   @param [Boolean|JSONable] value
        #     The value to use for DeletionProtection
        def DeletionProtection(value)
          dsl_attribute(:DeletionProtection, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for DBInstanceIdentifier
        def DBInstanceIdentifier(value)
          dsl_attribute(:DBInstanceIdentifier, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for AllocatedStorage
        def AllocatedStorage(value)
          dsl_attribute(:AllocatedStorage, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for MasterUserPassword
        def MasterUserPassword(value)
          dsl_attribute(:MasterUserPassword, value)
        end

        # @param [Array<String>|JSONable>] values
        #   The List of values to use for DBSecurityGroups
        def DBSecurityGroups(values)
          dsl_list_attribute(:DBSecurityGroups, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for DBSecurityGroups
        def DBSecurityGroup(value, fn_if: nil)
          dsl_push_attribute(:DBSecurityGroups, value, fn_if: fn_if)
        end

        #   @param [String|JSONable] value
        #     The value to use for MasterUsername
        def MasterUsername(value)
          dsl_attribute(:MasterUsername, value)
        end

        #   @param [Integer|JSONable] value
        #     The value to use for MaxAllocatedStorage
        def MaxAllocatedStorage(value)
          dsl_attribute(:MaxAllocatedStorage, value)
        end

        #   @param [Integer|JSONable] value
        #     The value to use for PromotionTier
        def PromotionTier(value)
          dsl_attribute(:PromotionTier, value)
        end

        #   @param [Boolean|JSONable] value
        #     The value to use for PubliclyAccessible
        def PubliclyAccessible(value)
          dsl_attribute(:PubliclyAccessible, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Domain
        def Domain(value)
          dsl_attribute(:Domain, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for CharacterSetName
        def CharacterSetName(value)
          dsl_attribute(:CharacterSetName, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for MonitoringRoleArn
        def MonitoringRoleArn(value)
          dsl_attribute(:MonitoringRoleArn, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for EndpointPort
        def EndpointPort(value)
          dsl_attribute(:EndpointPort, value)
        end

        # @param [Array<DBInstanceRole>|JSONable>] values
        #   The List of values to use for AssociatedRoles
        def AssociatedRoles(values)
          dsl_list_attribute(:AssociatedRoles, values)
        end

        #  @param [DBInstanceRole|JSONable] value  Append value to the List
        #    The List of values to use for AssociatedRoles
        # @@overload AssociatedRole(&block)
        # Append value to the List from block via instance eval of a new DBInstanceRole
        def AssociatedRole(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:AssociatedRoles, value, fn_if: fn_if, attr_class: DBInstanceRole, **value_hash, &block)
        end

        # @param [Array<ProcessorFeature>|JSONable>] values
        #   The List of values to use for ProcessorFeatures
        def ProcessorFeatures(values)
          dsl_list_attribute(:ProcessorFeatures, values)
        end

        #  @param [ProcessorFeature|JSONable] value  Append value to the List
        #    The List of values to use for ProcessorFeatures
        # @@overload ProcessorFeature(&block)
        # Append value to the List from block via instance eval of a new ProcessorFeature
        def ProcessorFeature(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:ProcessorFeatures, value, fn_if: fn_if, attr_class: ProcessorFeature, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for PreferredBackupWindow
        def PreferredBackupWindow(value)
          dsl_attribute(:PreferredBackupWindow, value)
        end

        #   @param [Boolean|JSONable] value
        #     The value to use for CopyTagsToSnapshot
        def CopyTagsToSnapshot(value)
          dsl_attribute(:CopyTagsToSnapshot, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for DomainIAMRoleName
        def DomainIAMRoleName(value)
          dsl_attribute(:DomainIAMRoleName, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for LicenseModel
        def LicenseModel(value)
          dsl_attribute(:LicenseModel, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for PreferredMaintenanceWindow
        def PreferredMaintenanceWindow(value)
          dsl_attribute(:PreferredMaintenanceWindow, value)
        end

        #   @param [Integer|JSONable] value
        #     The value to use for Iops
        def Iops(value)
          dsl_attribute(:Iops, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for SourceRegion
        def SourceRegion(value)
          dsl_attribute(:SourceRegion, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for CACertificateIdentifier
        def CACertificateIdentifier(value)
          dsl_attribute(:CACertificateIdentifier, value)
        end

        # @param [Array<String>|JSONable>] values
        #   The List of values to use for VPCSecurityGroups
        def VPCSecurityGroups(values)
          dsl_list_attribute(:VPCSecurityGroups, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for VPCSecurityGroups
        def VPCSecurityGroup(value, fn_if: nil)
          dsl_push_attribute(:VPCSecurityGroups, value, fn_if: fn_if)
        end

        #   @param [Boolean|JSONable] value
        #     The value to use for AllowMajorVersionUpgrade
        def AllowMajorVersionUpgrade(value)
          dsl_attribute(:AllowMajorVersionUpgrade, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for DBName
        def DBName(value)
          dsl_attribute(:DBName, value)
        end

        #   @param [Boolean|JSONable] value
        #     The value to use for EnableIAMDatabaseAuthentication
        def EnableIAMDatabaseAuthentication(value)
          dsl_attribute(:EnableIAMDatabaseAuthentication, value)
        end

        #   @param [Integer|JSONable] value
        #     The value to use for BackupRetentionPeriod
        def BackupRetentionPeriod(value)
          dsl_attribute(:BackupRetentionPeriod, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for DBSnapshotIdentifier
        def DBSnapshotIdentifier(value)
          dsl_attribute(:DBSnapshotIdentifier, value)
        end

        # @param [Array<String>|JSONable>] values
        #   The List of values to use for EnableCloudwatchLogsExports
        def EnableCloudwatchLogsExports(values)
          dsl_list_attribute(:EnableCloudwatchLogsExports, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for EnableCloudwatchLogsExports
        def EnableCloudwatchLogsExport(value, fn_if: nil)
          dsl_push_attribute(:EnableCloudwatchLogsExports, value, fn_if: fn_if)
        end

        #   @param [Boolean|JSONable] value
        #     The value to use for UseDefaultProcessorFeatures
        def UseDefaultProcessorFeatures(value)
          dsl_attribute(:UseDefaultProcessorFeatures, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::RDS::DBInstance]
    def AWS_RDS_DBInstance(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::RDS::DBInstance, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
