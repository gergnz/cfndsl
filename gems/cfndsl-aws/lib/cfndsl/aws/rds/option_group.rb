# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module RDS
      # Resource Type definition for AWS::RDS::OptionGroup
      class OptionGroup < ResourceType
        # Property Definition OptionConfiguration
        class OptionConfiguration < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for DBSecurityGroupMemberships
          def DBSecurityGroupMemberships(values)
            dsl_list_attribute(:DBSecurityGroupMemberships, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for DBSecurityGroupMemberships
          def DBSecurityGroupMembership(value, fn_if: nil)
            dsl_push_attribute(:DBSecurityGroupMemberships, value, fn_if: fn_if)
          end

          #   @param [String|JSONable] value
          #     The value to use for OptionName
          def OptionName(value)
            dsl_attribute(:OptionName, value)
          end

          # @param [Array<OptionSetting>|JSONable>] values
          #   The List of values to use for OptionSettings
          def OptionSettings(values)
            dsl_list_attribute(:OptionSettings, values)
          end

          #  @param [OptionSetting|JSONable] value  Append value to the List
          #    The List of values to use for OptionSettings
          # @@overload OptionSetting(&block)
          # Append value to the List from block via instance eval of a new OptionSetting
          def OptionSetting(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:OptionSettings, value, fn_if: fn_if, attr_class: OptionSetting, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for OptionVersion
          def OptionVersion(value)
            dsl_attribute(:OptionVersion, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for Port
          def Port(value)
            dsl_attribute(:Port, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for VpcSecurityGroupMemberships
          def VpcSecurityGroupMemberships(values)
            dsl_list_attribute(:VpcSecurityGroupMemberships, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for VpcSecurityGroupMemberships
          def VpcSecurityGroupMembership(value, fn_if: nil)
            dsl_push_attribute(:VpcSecurityGroupMemberships, value, fn_if: fn_if)
          end
        end

        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        # Property Definition OptionSetting
        class OptionSetting < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for EngineName
        def EngineName(value)
          dsl_attribute(:EngineName, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for MajorEngineVersion
        def MajorEngineVersion(value)
          dsl_attribute(:MajorEngineVersion, value)
        end

        # @param [Array<OptionConfiguration>|JSONable>] values
        #   The List of values to use for OptionConfigurations
        def OptionConfigurations(values)
          dsl_list_attribute(:OptionConfigurations, values)
        end

        #  @param [OptionConfiguration|JSONable] value  Append value to the List
        #    The List of values to use for OptionConfigurations
        # @@overload OptionConfiguration(&block)
        # Append value to the List from block via instance eval of a new OptionConfiguration
        def OptionConfiguration(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:OptionConfigurations, value, fn_if: fn_if, attr_class: OptionConfiguration, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for OptionGroupDescription
        def OptionGroupDescription(value)
          dsl_attribute(:OptionGroupDescription, value)
        end

        # @param [Array<Tag>|JSONable>] values
        #   The List of values to use for Tags
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    The List of values to use for Tags
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::RDS::OptionGroup]
    def AWS_RDS_OptionGroup(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::RDS::OptionGroup, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
