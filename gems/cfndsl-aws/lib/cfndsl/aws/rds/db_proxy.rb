# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module RDS
      # Resource schema for AWS::RDS::DBProxy
      # @see https://github.com/aws-cloudformation/aws-cloudformation-rpdk.git
      class DBProxy < ResourceType
        # Property Definition AuthFormat
        class AuthFormat < PropertyType
          #   @param [String|JSONable] value
          #     The type of authentication that the proxy uses for connections from the proxy to the underlying database.
          def AuthScheme(value)
            dsl_attribute(:AuthScheme, value)
          end

          #   @param [String|JSONable] value
          #     A user-specified description about the authentication used by a proxy to log in as a specific database user.
          def Description(value)
            dsl_attribute(:Description, value)
          end

          #   @param [String|JSONable] value
          #     Whether to require or disallow AWS Identity and Access Management (IAM) authentication for connections to the proxy.
          def IAMAuth(value)
            dsl_attribute(:IAMAuth, value)
          end

          #   @param [String|JSONable] value
          #     The Amazon Resource Name (ARN) representing the secret that the proxy uses to authenticate to the RDS DB instance or Aurora DB cluster. These secrets are stored within Amazon Secrets Manager.
          def SecretArn(value)
            dsl_attribute(:SecretArn, value)
          end

          #   @param [String|JSONable] value
          #     The name of the database user to which the proxy connects.
          def UserName(value)
            dsl_attribute(:UserName, value)
          end
        end

        # Property Definition TagFormat
        class TagFormat < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        # @param [Array<AuthFormat>|JSONable>] values
        #   The authorization mechanism that the proxy uses.
        def Auths(values)
          dsl_list_attribute(:Auth, values)
        end

        #  @param [AuthFormat|JSONable] value  Append value to the List
        #    The authorization mechanism that the proxy uses.
        # @@overload Auth(&block)
        # Append value to the List from block via instance eval of a new AuthFormat
        def Auth(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Auth, value, fn_if: fn_if, attr_class: AuthFormat, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The Amazon Resource Name (ARN) for the proxy.
        def DBProxyArn(value)
          dsl_attribute(:DBProxyArn, value)
        end

        #   @param [String|JSONable] value
        #     The identifier for the proxy. This name must be unique for all proxies owned by your AWS account in the specified AWS Region.
        def DBProxyName(value)
          dsl_attribute(:DBProxyName, value)
        end

        #   @param [Boolean|JSONable] value
        #     Whether the proxy includes detailed information about SQL statements in its logs.
        def DebugLogging(value)
          dsl_attribute(:DebugLogging, value)
        end

        #   @param [String|JSONable] value
        #     The endpoint that you can use to connect to the proxy. You include the endpoint value in the connection string for a database client application.
        def Endpoint(value)
          dsl_attribute(:Endpoint, value)
        end

        #   @param [String|JSONable] value
        #     The kinds of databases that the proxy can connect to.
        def EngineFamily(value)
          dsl_attribute(:EngineFamily, value)
        end

        #   @param [Integer|JSONable] value
        #     The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it.
        def IdleClientTimeout(value)
          dsl_attribute(:IdleClientTimeout, value)
        end

        #   @param [Boolean|JSONable] value
        #     A Boolean parameter that specifies whether Transport Layer Security (TLS) encryption is required for connections to the proxy.
        def RequireTLS(value)
          dsl_attribute(:RequireTLS, value)
        end

        #   @param [String|JSONable] value
        #     The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
        def RoleArn(value)
          dsl_attribute(:RoleArn, value)
        end

        # @param [Array<TagFormat>|JSONable>] values
        #   An optional set of key-value pairs to associate arbitrary data of your choosing with the proxy.
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [TagFormat|JSONable] value  Append value to the List
        #    An optional set of key-value pairs to associate arbitrary data of your choosing with the proxy.
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new TagFormat
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: TagFormat, **value_hash, &block)
        end

        # @param [Array<String>|JSONable>] values
        #   VPC security group IDs to associate with the new proxy.
        def VpcSecurityGroupIds(values)
          dsl_list_attribute(:VpcSecurityGroupIds, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    VPC security group IDs to associate with the new proxy.
        def VpcSecurityGroupId(value, fn_if: nil)
          dsl_push_attribute(:VpcSecurityGroupIds, value, fn_if: fn_if)
        end

        # @param [Array<String>|JSONable>] values
        #   VPC subnet IDs to associate with the new proxy.
        def VpcSubnetIds(values)
          dsl_list_attribute(:VpcSubnetIds, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    VPC subnet IDs to associate with the new proxy.
        def VpcSubnetId(value, fn_if: nil)
          dsl_push_attribute(:VpcSubnetIds, value, fn_if: fn_if)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::RDS::DBProxy]
    def AWS_RDS_DBProxy(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::RDS::DBProxy, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
