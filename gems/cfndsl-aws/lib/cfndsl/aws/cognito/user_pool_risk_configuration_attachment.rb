# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module Cognito
      # Resource Type definition for AWS::Cognito::UserPoolRiskConfigurationAttachment
      class UserPoolRiskConfigurationAttachment < ResourceType
        # Property Definition RiskExceptionConfigurationType
        class RiskExceptionConfigurationType < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for BlockedIPRangeList
          def BlockedIPRangeList(values)
            dsl_list_attribute(:BlockedIPRangeList, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for BlockedIPRangeList
          def BlockedIPRange(value, fn_if: nil)
            dsl_push_attribute(:BlockedIPRangeList, value, fn_if: fn_if)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for SkippedIPRangeList
          def SkippedIPRangeList(values)
            dsl_list_attribute(:SkippedIPRangeList, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for SkippedIPRangeList
          def SkippedIPRange(value, fn_if: nil)
            dsl_push_attribute(:SkippedIPRangeList, value, fn_if: fn_if)
          end
        end

        # Property Definition CompromisedCredentialsRiskConfigurationType
        class CompromisedCredentialsRiskConfigurationType < PropertyType
          #   @param [CompromisedCredentialsActionsType|JSONable] value
          #     The value to use for Actions
          # @@overload Actions(&block)
          #   Set :Actions from block via instance eval of a new CompromisedCredentialsActionsType
          def Actions(value = nil, **value_hash, &block)
            dsl_attribute(:Actions, value, attr_class: CompromisedCredentialsActionsType, **value_hash, &block)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for EventFilter
          def EventFilters(values)
            dsl_list_attribute(:EventFilter, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for EventFilter
          def EventFilter(value, fn_if: nil)
            dsl_push_attribute(:EventFilter, value, fn_if: fn_if)
          end
        end

        # Property Definition AccountTakeoverRiskConfigurationType
        class AccountTakeoverRiskConfigurationType < PropertyType
          #   @param [AccountTakeoverActionsType|JSONable] value
          #     The value to use for Actions
          # @@overload Actions(&block)
          #   Set :Actions from block via instance eval of a new AccountTakeoverActionsType
          def Actions(value = nil, **value_hash, &block)
            dsl_attribute(:Actions, value, attr_class: AccountTakeoverActionsType, **value_hash, &block)
          end

          #   @param [NotifyConfigurationType|JSONable] value
          #     The value to use for NotifyConfiguration
          # @@overload NotifyConfiguration(&block)
          #   Set :NotifyConfiguration from block via instance eval of a new NotifyConfigurationType
          def NotifyConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:NotifyConfiguration, value, attr_class: NotifyConfigurationType, **value_hash, &block)
          end
        end

        # Property Definition NotifyConfigurationType
        class NotifyConfigurationType < PropertyType
          #   @param [NotifyEmailType|JSONable] value
          #     The value to use for BlockEmail
          # @@overload BlockEmail(&block)
          #   Set :BlockEmail from block via instance eval of a new NotifyEmailType
          def BlockEmail(value = nil, **value_hash, &block)
            dsl_attribute(:BlockEmail, value, attr_class: NotifyEmailType, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for ReplyTo
          def ReplyTo(value)
            dsl_attribute(:ReplyTo, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for SourceArn
          def SourceArn(value)
            dsl_attribute(:SourceArn, value)
          end

          #   @param [NotifyEmailType|JSONable] value
          #     The value to use for NoActionEmail
          # @@overload NoActionEmail(&block)
          #   Set :NoActionEmail from block via instance eval of a new NotifyEmailType
          def NoActionEmail(value = nil, **value_hash, &block)
            dsl_attribute(:NoActionEmail, value, attr_class: NotifyEmailType, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for From
          def From(value)
            dsl_attribute(:From, value)
          end

          #   @param [NotifyEmailType|JSONable] value
          #     The value to use for MfaEmail
          # @@overload MfaEmail(&block)
          #   Set :MfaEmail from block via instance eval of a new NotifyEmailType
          def MfaEmail(value = nil, **value_hash, &block)
            dsl_attribute(:MfaEmail, value, attr_class: NotifyEmailType, **value_hash, &block)
          end
        end

        # Property Definition CompromisedCredentialsActionsType
        class CompromisedCredentialsActionsType < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for EventAction
          def EventAction(value)
            dsl_attribute(:EventAction, value)
          end
        end

        # Property Definition AccountTakeoverActionsType
        class AccountTakeoverActionsType < PropertyType
          #   @param [AccountTakeoverActionType|JSONable] value
          #     The value to use for HighAction
          # @@overload HighAction(&block)
          #   Set :HighAction from block via instance eval of a new AccountTakeoverActionType
          def HighAction(value = nil, **value_hash, &block)
            dsl_attribute(:HighAction, value, attr_class: AccountTakeoverActionType, **value_hash, &block)
          end

          #   @param [AccountTakeoverActionType|JSONable] value
          #     The value to use for LowAction
          # @@overload LowAction(&block)
          #   Set :LowAction from block via instance eval of a new AccountTakeoverActionType
          def LowAction(value = nil, **value_hash, &block)
            dsl_attribute(:LowAction, value, attr_class: AccountTakeoverActionType, **value_hash, &block)
          end

          #   @param [AccountTakeoverActionType|JSONable] value
          #     The value to use for MediumAction
          # @@overload MediumAction(&block)
          #   Set :MediumAction from block via instance eval of a new AccountTakeoverActionType
          def MediumAction(value = nil, **value_hash, &block)
            dsl_attribute(:MediumAction, value, attr_class: AccountTakeoverActionType, **value_hash, &block)
          end
        end

        # Property Definition AccountTakeoverActionType
        class AccountTakeoverActionType < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for Notify
          def Notify(value)
            dsl_attribute(:Notify, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for EventAction
          def EventAction(value)
            dsl_attribute(:EventAction, value)
          end
        end

        # Property Definition NotifyEmailType
        class NotifyEmailType < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for TextBody
          def TextBody(value)
            dsl_attribute(:TextBody, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for HtmlBody
          def HtmlBody(value)
            dsl_attribute(:HtmlBody, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Subject
          def Subject(value)
            dsl_attribute(:Subject, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [CompromisedCredentialsRiskConfigurationType|JSONable] value
        #     The value to use for CompromisedCredentialsRiskConfiguration
        # @@overload CompromisedCredentialsRiskConfiguration(&block)
        #   Set :CompromisedCredentialsRiskConfiguration from block via instance eval of a new CompromisedCredentialsRiskConfigurationType
        def CompromisedCredentialsRiskConfiguration(value = nil, **value_hash, &block)
          dsl_attribute(:CompromisedCredentialsRiskConfiguration, value, attr_class: CompromisedCredentialsRiskConfigurationType, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for UserPoolId
        def UserPoolId(value)
          dsl_attribute(:UserPoolId, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for ClientId
        def ClientId(value)
          dsl_attribute(:ClientId, value)
        end

        #   @param [AccountTakeoverRiskConfigurationType|JSONable] value
        #     The value to use for AccountTakeoverRiskConfiguration
        # @@overload AccountTakeoverRiskConfiguration(&block)
        #   Set :AccountTakeoverRiskConfiguration from block via instance eval of a new AccountTakeoverRiskConfigurationType
        def AccountTakeoverRiskConfiguration(value = nil, **value_hash, &block)
          dsl_attribute(:AccountTakeoverRiskConfiguration, value, attr_class: AccountTakeoverRiskConfigurationType, **value_hash, &block)
        end

        #   @param [RiskExceptionConfigurationType|JSONable] value
        #     The value to use for RiskExceptionConfiguration
        # @@overload RiskExceptionConfiguration(&block)
        #   Set :RiskExceptionConfiguration from block via instance eval of a new RiskExceptionConfigurationType
        def RiskExceptionConfiguration(value = nil, **value_hash, &block)
          dsl_attribute(:RiskExceptionConfiguration, value, attr_class: RiskExceptionConfigurationType, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::Cognito::UserPoolRiskConfigurationAttachment]
    def AWS_Cognito_UserPoolRiskConfigurationAttachment(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::Cognito::UserPoolRiskConfigurationAttachment, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
