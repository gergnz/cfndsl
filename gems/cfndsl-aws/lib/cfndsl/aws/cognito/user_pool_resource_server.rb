# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module Cognito
      # Resource Type definition for AWS::Cognito::UserPoolResourceServer
      class UserPoolResourceServer < ResourceType
        # Property Definition ResourceServerScopeType
        class ResourceServerScopeType < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ScopeName
          def ScopeName(value)
            dsl_attribute(:ScopeName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ScopeDescription
          def ScopeDescription(value)
            dsl_attribute(:ScopeDescription, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for UserPoolId
        def UserPoolId(value)
          dsl_attribute(:UserPoolId, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Identifier
        def Identifier(value)
          dsl_attribute(:Identifier, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        # @param [Array<ResourceServerScopeType>|JSONable>] values
        #   The List of values to use for Scopes
        def Scopes(values)
          dsl_list_attribute(:Scopes, values)
        end

        #  @param [ResourceServerScopeType|JSONable] value  Append value to the List
        #    The List of values to use for Scopes
        # @@overload Scope(&block)
        # Append value to the List from block via instance eval of a new ResourceServerScopeType
        def Scope(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Scopes, value, fn_if: fn_if, attr_class: ResourceServerScopeType, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Name
        def Name(value)
          dsl_attribute(:Name, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::Cognito::UserPoolResourceServer]
    def AWS_Cognito_UserPoolResourceServer(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::Cognito::UserPoolResourceServer, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
