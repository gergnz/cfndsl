# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module Cognito
      # Resource Type definition for AWS::Cognito::UserPool
      class UserPool < ResourceType
        # Property Definition Policies
        class Policies < PropertyType
          #   @param [PasswordPolicy|JSONable] value
          #     The value to use for PasswordPolicy
          # @@overload PasswordPolicy(&block)
          #   Set :PasswordPolicy from block via instance eval of a new PasswordPolicy
          def PasswordPolicy(value = nil, **value_hash, &block)
            dsl_attribute(:PasswordPolicy, value, attr_class: PasswordPolicy, **value_hash, &block)
          end
        end

        # Property Definition VerificationMessageTemplate
        class VerificationMessageTemplate < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for EmailMessageByLink
          def EmailMessageByLink(value)
            dsl_attribute(:EmailMessageByLink, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for EmailMessage
          def EmailMessage(value)
            dsl_attribute(:EmailMessage, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for SmsMessage
          def SmsMessage(value)
            dsl_attribute(:SmsMessage, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for EmailSubject
          def EmailSubject(value)
            dsl_attribute(:EmailSubject, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for DefaultEmailOption
          def DefaultEmailOption(value)
            dsl_attribute(:DefaultEmailOption, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for EmailSubjectByLink
          def EmailSubjectByLink(value)
            dsl_attribute(:EmailSubjectByLink, value)
          end
        end

        # Property Definition NumberAttributeConstraints
        class NumberAttributeConstraints < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for MinValue
          def MinValue(value)
            dsl_attribute(:MinValue, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for MaxValue
          def MaxValue(value)
            dsl_attribute(:MaxValue, value)
          end
        end

        # Property Definition InviteMessageTemplate
        class InviteMessageTemplate < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for EmailSubject
          def EmailSubject(value)
            dsl_attribute(:EmailSubject, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for EmailMessage
          def EmailMessage(value)
            dsl_attribute(:EmailMessage, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for SMSMessage
          def SMSMessage(value)
            dsl_attribute(:SMSMessage, value)
          end
        end

        # Property Definition AdminCreateUserConfig
        class AdminCreateUserConfig < PropertyType
          #   @param [InviteMessageTemplate|JSONable] value
          #     The value to use for InviteMessageTemplate
          # @@overload InviteMessageTemplate(&block)
          #   Set :InviteMessageTemplate from block via instance eval of a new InviteMessageTemplate
          def InviteMessageTemplate(value = nil, **value_hash, &block)
            dsl_attribute(:InviteMessageTemplate, value, attr_class: InviteMessageTemplate, **value_hash, &block)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for UnusedAccountValidityDays
          def UnusedAccountValidityDays(value)
            dsl_attribute(:UnusedAccountValidityDays, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for AllowAdminCreateUserOnly
          def AllowAdminCreateUserOnly(value)
            dsl_attribute(:AllowAdminCreateUserOnly, value)
          end
        end

        # Property Definition UsernameConfiguration
        class UsernameConfiguration < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for CaseSensitive
          def CaseSensitive(value)
            dsl_attribute(:CaseSensitive, value)
          end
        end

        # Property Definition UserPoolAddOns
        class UserPoolAddOns < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for AdvancedSecurityMode
          def AdvancedSecurityMode(value)
            dsl_attribute(:AdvancedSecurityMode, value)
          end
        end

        # Property Definition RecoveryOption
        class RecoveryOption < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for Priority
          def Priority(value)
            dsl_attribute(:Priority, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end
        end

        # Property Definition StringAttributeConstraints
        class StringAttributeConstraints < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for MaxLength
          def MaxLength(value)
            dsl_attribute(:MaxLength, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for MinLength
          def MinLength(value)
            dsl_attribute(:MinLength, value)
          end
        end

        # Property Definition EmailConfiguration
        class EmailConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ReplyToEmailAddress
          def ReplyToEmailAddress(value)
            dsl_attribute(:ReplyToEmailAddress, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ConfigurationSet
          def ConfigurationSet(value)
            dsl_attribute(:ConfigurationSet, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for EmailSendingAccount
          def EmailSendingAccount(value)
            dsl_attribute(:EmailSendingAccount, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for From
          def From(value)
            dsl_attribute(:From, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for SourceArn
          def SourceArn(value)
            dsl_attribute(:SourceArn, value)
          end
        end

        # Property Definition SmsConfiguration
        class SmsConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for SnsCallerArn
          def SnsCallerArn(value)
            dsl_attribute(:SnsCallerArn, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ExternalId
          def ExternalId(value)
            dsl_attribute(:ExternalId, value)
          end
        end

        # Property Definition PasswordPolicy
        class PasswordPolicy < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for RequireNumbers
          def RequireNumbers(value)
            dsl_attribute(:RequireNumbers, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for MinimumLength
          def MinimumLength(value)
            dsl_attribute(:MinimumLength, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for TemporaryPasswordValidityDays
          def TemporaryPasswordValidityDays(value)
            dsl_attribute(:TemporaryPasswordValidityDays, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for RequireUppercase
          def RequireUppercase(value)
            dsl_attribute(:RequireUppercase, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for RequireLowercase
          def RequireLowercase(value)
            dsl_attribute(:RequireLowercase, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for RequireSymbols
          def RequireSymbols(value)
            dsl_attribute(:RequireSymbols, value)
          end
        end

        # Property Definition LambdaConfig
        class LambdaConfig < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for CreateAuthChallenge
          def CreateAuthChallenge(value)
            dsl_attribute(:CreateAuthChallenge, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for PreAuthentication
          def PreAuthentication(value)
            dsl_attribute(:PreAuthentication, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for DefineAuthChallenge
          def DefineAuthChallenge(value)
            dsl_attribute(:DefineAuthChallenge, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for PreSignUp
          def PreSignUp(value)
            dsl_attribute(:PreSignUp, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for PreTokenGeneration
          def PreTokenGeneration(value)
            dsl_attribute(:PreTokenGeneration, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for UserMigration
          def UserMigration(value)
            dsl_attribute(:UserMigration, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for PostAuthentication
          def PostAuthentication(value)
            dsl_attribute(:PostAuthentication, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for PostConfirmation
          def PostConfirmation(value)
            dsl_attribute(:PostConfirmation, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for CustomMessage
          def CustomMessage(value)
            dsl_attribute(:CustomMessage, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for VerifyAuthChallengeResponse
          def VerifyAuthChallengeResponse(value)
            dsl_attribute(:VerifyAuthChallengeResponse, value)
          end
        end

        # Property Definition SchemaAttribute
        class SchemaAttribute < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for DeveloperOnlyAttribute
          def DeveloperOnlyAttribute(value)
            dsl_attribute(:DeveloperOnlyAttribute, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for Mutable
          def Mutable(value)
            dsl_attribute(:Mutable, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for AttributeDataType
          def AttributeDataType(value)
            dsl_attribute(:AttributeDataType, value)
          end

          #   @param [StringAttributeConstraints|JSONable] value
          #     The value to use for StringAttributeConstraints
          # @@overload StringAttributeConstraints(&block)
          #   Set :StringAttributeConstraints from block via instance eval of a new StringAttributeConstraints
          def StringAttributeConstraints(value = nil, **value_hash, &block)
            dsl_attribute(:StringAttributeConstraints, value, attr_class: StringAttributeConstraints, **value_hash, &block)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for Required
          def Required(value)
            dsl_attribute(:Required, value)
          end

          #   @param [NumberAttributeConstraints|JSONable] value
          #     The value to use for NumberAttributeConstraints
          # @@overload NumberAttributeConstraints(&block)
          #   Set :NumberAttributeConstraints from block via instance eval of a new NumberAttributeConstraints
          def NumberAttributeConstraints(value = nil, **value_hash, &block)
            dsl_attribute(:NumberAttributeConstraints, value, attr_class: NumberAttributeConstraints, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end
        end

        # Property Definition DeviceConfiguration
        class DeviceConfiguration < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for DeviceOnlyRememberedOnUserPrompt
          def DeviceOnlyRememberedOnUserPrompt(value)
            dsl_attribute(:DeviceOnlyRememberedOnUserPrompt, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for ChallengeRequiredOnNewDevice
          def ChallengeRequiredOnNewDevice(value)
            dsl_attribute(:ChallengeRequiredOnNewDevice, value)
          end
        end

        # Property Definition AccountRecoverySetting
        class AccountRecoverySetting < PropertyType
          # @param [Array<RecoveryOption>|JSONable>] values
          #   The List of values to use for RecoveryMechanisms
          def RecoveryMechanisms(values)
            dsl_list_attribute(:RecoveryMechanisms, values)
          end

          #  @param [RecoveryOption|JSONable] value  Append value to the List
          #    The List of values to use for RecoveryMechanisms
          # @@overload RecoveryMechanism(&block)
          # Append value to the List from block via instance eval of a new RecoveryOption
          def RecoveryMechanism(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:RecoveryMechanisms, value, fn_if: fn_if, attr_class: RecoveryOption, **value_hash, &block)
          end
        end

        #   @param [Object|JSONable] value
        #     The value to use for UserPoolTags
        def UserPoolTags(value)
          dsl_attribute(:UserPoolTags, value)
        end

        #   @param [Policies|JSONable] value
        #     The value to use for Policies
        # @@overload Policies(&block)
        #   Set :Policies from block via instance eval of a new Policies
        def Policies(value = nil, **value_hash, &block)
          dsl_attribute(:Policies, value, attr_class: Policies, **value_hash, &block)
        end

        # @param [Array<SchemaAttribute>|JSONable>] values
        #   The List of values to use for Schema
        def Schemas(values)
          dsl_list_attribute(:Schema, values)
        end

        #  @param [SchemaAttribute|JSONable] value  Append value to the List
        #    The List of values to use for Schema
        # @@overload Schema(&block)
        # Append value to the List from block via instance eval of a new SchemaAttribute
        def Schema(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Schema, value, fn_if: fn_if, attr_class: SchemaAttribute, **value_hash, &block)
        end

        #   @param [AdminCreateUserConfig|JSONable] value
        #     The value to use for AdminCreateUserConfig
        # @@overload AdminCreateUserConfig(&block)
        #   Set :AdminCreateUserConfig from block via instance eval of a new AdminCreateUserConfig
        def AdminCreateUserConfig(value = nil, **value_hash, &block)
          dsl_attribute(:AdminCreateUserConfig, value, attr_class: AdminCreateUserConfig, **value_hash, &block)
        end

        #   @param [UsernameConfiguration|JSONable] value
        #     The value to use for UsernameConfiguration
        # @@overload UsernameConfiguration(&block)
        #   Set :UsernameConfiguration from block via instance eval of a new UsernameConfiguration
        def UsernameConfiguration(value = nil, **value_hash, &block)
          dsl_attribute(:UsernameConfiguration, value, attr_class: UsernameConfiguration, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for UserPoolName
        def UserPoolName(value)
          dsl_attribute(:UserPoolName, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for SmsVerificationMessage
        def SmsVerificationMessage(value)
          dsl_attribute(:SmsVerificationMessage, value)
        end

        #   @param [EmailConfiguration|JSONable] value
        #     The value to use for EmailConfiguration
        # @@overload EmailConfiguration(&block)
        #   Set :EmailConfiguration from block via instance eval of a new EmailConfiguration
        def EmailConfiguration(value = nil, **value_hash, &block)
          dsl_attribute(:EmailConfiguration, value, attr_class: EmailConfiguration, **value_hash, &block)
        end

        #   @param [SmsConfiguration|JSONable] value
        #     The value to use for SmsConfiguration
        # @@overload SmsConfiguration(&block)
        #   Set :SmsConfiguration from block via instance eval of a new SmsConfiguration
        def SmsConfiguration(value = nil, **value_hash, &block)
          dsl_attribute(:SmsConfiguration, value, attr_class: SmsConfiguration, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for EmailVerificationSubject
        def EmailVerificationSubject(value)
          dsl_attribute(:EmailVerificationSubject, value)
        end

        #   @param [AccountRecoverySetting|JSONable] value
        #     The value to use for AccountRecoverySetting
        # @@overload AccountRecoverySetting(&block)
        #   Set :AccountRecoverySetting from block via instance eval of a new AccountRecoverySetting
        def AccountRecoverySetting(value = nil, **value_hash, &block)
          dsl_attribute(:AccountRecoverySetting, value, attr_class: AccountRecoverySetting, **value_hash, &block)
        end

        #   @param [VerificationMessageTemplate|JSONable] value
        #     The value to use for VerificationMessageTemplate
        # @@overload VerificationMessageTemplate(&block)
        #   Set :VerificationMessageTemplate from block via instance eval of a new VerificationMessageTemplate
        def VerificationMessageTemplate(value = nil, **value_hash, &block)
          dsl_attribute(:VerificationMessageTemplate, value, attr_class: VerificationMessageTemplate, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for ProviderURL
        def ProviderURL(value)
          dsl_attribute(:ProviderURL, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for MfaConfiguration
        def MfaConfiguration(value)
          dsl_attribute(:MfaConfiguration, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for SmsAuthenticationMessage
        def SmsAuthenticationMessage(value)
          dsl_attribute(:SmsAuthenticationMessage, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for ProviderName
        def ProviderName(value)
          dsl_attribute(:ProviderName, value)
        end

        #   @param [UserPoolAddOns|JSONable] value
        #     The value to use for UserPoolAddOns
        # @@overload UserPoolAddOns(&block)
        #   Set :UserPoolAddOns from block via instance eval of a new UserPoolAddOns
        def UserPoolAddOns(value = nil, **value_hash, &block)
          dsl_attribute(:UserPoolAddOns, value, attr_class: UserPoolAddOns, **value_hash, &block)
        end

        # @param [Array<String>|JSONable>] values
        #   The List of values to use for AliasAttributes
        def AliasAttributes(values)
          dsl_list_attribute(:AliasAttributes, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for AliasAttributes
        def AliasAttribute(value, fn_if: nil)
          dsl_push_attribute(:AliasAttributes, value, fn_if: fn_if)
        end

        # @param [Array<String>|JSONable>] values
        #   The List of values to use for EnabledMfas
        def EnabledMfas(values)
          dsl_list_attribute(:EnabledMfas, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for EnabledMfas
        def EnabledMfa(value, fn_if: nil)
          dsl_push_attribute(:EnabledMfas, value, fn_if: fn_if)
        end

        #   @param [LambdaConfig|JSONable] value
        #     The value to use for LambdaConfig
        # @@overload LambdaConfig(&block)
        #   Set :LambdaConfig from block via instance eval of a new LambdaConfig
        def LambdaConfig(value = nil, **value_hash, &block)
          dsl_attribute(:LambdaConfig, value, attr_class: LambdaConfig, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Arn
        def Arn(value)
          dsl_attribute(:Arn, value)
        end

        # @param [Array<String>|JSONable>] values
        #   The List of values to use for UsernameAttributes
        def UsernameAttributes(values)
          dsl_list_attribute(:UsernameAttributes, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for UsernameAttributes
        def UsernameAttribute(value, fn_if: nil)
          dsl_push_attribute(:UsernameAttributes, value, fn_if: fn_if)
        end

        # @param [Array<String>|JSONable>] values
        #   The List of values to use for AutoVerifiedAttributes
        def AutoVerifiedAttributes(values)
          dsl_list_attribute(:AutoVerifiedAttributes, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for AutoVerifiedAttributes
        def AutoVerifiedAttribute(value, fn_if: nil)
          dsl_push_attribute(:AutoVerifiedAttributes, value, fn_if: fn_if)
        end

        #   @param [DeviceConfiguration|JSONable] value
        #     The value to use for DeviceConfiguration
        # @@overload DeviceConfiguration(&block)
        #   Set :DeviceConfiguration from block via instance eval of a new DeviceConfiguration
        def DeviceConfiguration(value = nil, **value_hash, &block)
          dsl_attribute(:DeviceConfiguration, value, attr_class: DeviceConfiguration, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for EmailVerificationMessage
        def EmailVerificationMessage(value)
          dsl_attribute(:EmailVerificationMessage, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::Cognito::UserPool]
    def AWS_Cognito_UserPool(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::Cognito::UserPool, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
