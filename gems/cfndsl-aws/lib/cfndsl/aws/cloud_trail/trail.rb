# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module CloudTrail
      # Resource Type definition for AWS::CloudTrail::Trail
      class Trail < ResourceType
        # Property Definition EventSelector
        class EventSelector < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for IncludeManagementEvents
          def IncludeManagementEvents(value)
            dsl_attribute(:IncludeManagementEvents, value)
          end

          # @param [Array<DataResource>|JSONable>] values
          #   The List of values to use for DataResources
          def DataResources(values)
            dsl_list_attribute(:DataResources, values)
          end

          #  @param [DataResource|JSONable] value  Append value to the List
          #    The List of values to use for DataResources
          # @@overload DataResourc(&block)
          # Append value to the List from block via instance eval of a new DataResource
          def DataResourc(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:DataResources, value, fn_if: fn_if, attr_class: DataResource, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for ReadWriteType
          def ReadWriteType(value)
            dsl_attribute(:ReadWriteType, value)
          end
        end

        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end
        end

        # Property Definition DataResource
        class DataResource < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Values
          def Values(values)
            dsl_list_attribute(:Values, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Values
          def Value(value, fn_if: nil)
            dsl_push_attribute(:Values, value, fn_if: fn_if)
          end

          #   @param [String|JSONable] value
          #     The value to use for Type
          def Type(value)
            dsl_attribute(:Type, value)
          end
        end

        #   @param [Boolean|JSONable] value
        #     The value to use for IncludeGlobalServiceEvents
        def IncludeGlobalServiceEvents(value)
          dsl_attribute(:IncludeGlobalServiceEvents, value)
        end

        # @param [Array<EventSelector>|JSONable>] values
        #   The List of values to use for EventSelectors
        def EventSelectors(values)
          dsl_list_attribute(:EventSelectors, values)
        end

        #  @param [EventSelector|JSONable] value  Append value to the List
        #    The List of values to use for EventSelectors
        # @@overload EventSelector(&block)
        # Append value to the List from block via instance eval of a new EventSelector
        def EventSelector(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:EventSelectors, value, fn_if: fn_if, attr_class: EventSelector, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for KMSKeyId
        def KMSKeyId(value)
          dsl_attribute(:KMSKeyId, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for CloudWatchLogsRoleArn
        def CloudWatchLogsRoleArn(value)
          dsl_attribute(:CloudWatchLogsRoleArn, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for S3KeyPrefix
        def S3KeyPrefix(value)
          dsl_attribute(:S3KeyPrefix, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for TrailName
        def TrailName(value)
          dsl_attribute(:TrailName, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for CloudWatchLogsLogGroupArn
        def CloudWatchLogsLogGroupArn(value)
          dsl_attribute(:CloudWatchLogsLogGroupArn, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for SnsTopicName
        def SnsTopicName(value)
          dsl_attribute(:SnsTopicName, value)
        end

        #   @param [Boolean|JSONable] value
        #     The value to use for IsMultiRegionTrail
        def IsMultiRegionTrail(value)
          dsl_attribute(:IsMultiRegionTrail, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for SnsTopicArn
        def SnsTopicArn(value)
          dsl_attribute(:SnsTopicArn, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for S3BucketName
        def S3BucketName(value)
          dsl_attribute(:S3BucketName, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Arn
        def Arn(value)
          dsl_attribute(:Arn, value)
        end

        #   @param [Boolean|JSONable] value
        #     The value to use for EnableLogFileValidation
        def EnableLogFileValidation(value)
          dsl_attribute(:EnableLogFileValidation, value)
        end

        # @param [Array<Tag>|JSONable>] values
        #   The List of values to use for Tags
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    The List of values to use for Tags
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end

        #   @param [Boolean|JSONable] value
        #     The value to use for IsLogging
        def IsLogging(value)
          dsl_attribute(:IsLogging, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::CloudTrail::Trail]
    def AWS_CloudTrail_Trail(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::CloudTrail::Trail, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
