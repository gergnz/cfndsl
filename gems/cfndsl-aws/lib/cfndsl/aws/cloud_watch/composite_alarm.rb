# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module CloudWatch
      # The AWS::CloudWatch::CompositeAlarm type specifies an alarm which aggregates the states of other Alarms (Metric or Composite Alarms) as defined by the AlarmRule expression
      # @see https://github.com/aws-cloudformation/aws-cloudformation-resource-providers-cloudwatch.git
      class CompositeAlarm < ResourceType
        #   @param [String|JSONable] value
        #     Amazon Resource Name (ARN) of the alarm
        def Arn(value)
          dsl_attribute(:Arn, value)
        end

        #   @param [String|JSONable] value
        #     The name of the Composite Alarm
        def AlarmName(value)
          dsl_attribute(:AlarmName, value)
        end

        #   @param [String|JSONable] value
        #     Expression which aggregates the state of other Alarms (Metric or Composite Alarms)
        def AlarmRule(value)
          dsl_attribute(:AlarmRule, value)
        end

        #   @param [String|JSONable] value
        #     The description of the alarm
        def AlarmDescription(value)
          dsl_attribute(:AlarmDescription, value)
        end

        #   @param [Boolean|JSONable] value
        #     Indicates whether actions should be executed during any changes to the alarm state. The default is TRUE.
        def ActionsEnabled(value)
          dsl_attribute(:ActionsEnabled, value)
        end

        # @param [Array<String>|JSONable>] values
        #   The actions to execute when this alarm transitions to the OK state from any other state. Each action is specified as an Amazon Resource Name (ARN).
        def OKActions(values)
          dsl_list_attribute(:OKActions, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The actions to execute when this alarm transitions to the OK state from any other state. Each action is specified as an Amazon Resource Name (ARN).
        def OKAction(value, fn_if: nil)
          dsl_push_attribute(:OKActions, value, fn_if: fn_if)
        end

        # @param [Array<String>|JSONable>] values
        #   The list of actions to execute when this alarm transitions into an ALARM state from any other state. Specify each action as an Amazon Resource Name (ARN).
        def AlarmActions(values)
          dsl_list_attribute(:AlarmActions, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The list of actions to execute when this alarm transitions into an ALARM state from any other state. Specify each action as an Amazon Resource Name (ARN).
        def AlarmAction(value, fn_if: nil)
          dsl_push_attribute(:AlarmActions, value, fn_if: fn_if)
        end

        # @param [Array<String>|JSONable>] values
        #   The actions to execute when this alarm transitions to the INSUFFICIENT_DATA state from any other state. Each action is specified as an Amazon Resource Name (ARN).
        def InsufficientDataActions(values)
          dsl_list_attribute(:InsufficientDataActions, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The actions to execute when this alarm transitions to the INSUFFICIENT_DATA state from any other state. Each action is specified as an Amazon Resource Name (ARN).
        def InsufficientDataAction(value, fn_if: nil)
          dsl_push_attribute(:InsufficientDataActions, value, fn_if: fn_if)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::CloudWatch::CompositeAlarm]
    def AWS_CloudWatch_CompositeAlarm(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::CloudWatch::CompositeAlarm, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
