# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module CloudWatch
      # Resource Type definition for AWS::CloudWatch::Alarm
      class Alarm < ResourceType
        # Property Definition MetricStat
        class MetricStat < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for Period
          def Period(value)
            dsl_attribute(:Period, value)
          end

          #   @param [Metric|JSONable] value
          #     The value to use for Metric
          # @@overload Metric(&block)
          #   Set :Metric from block via instance eval of a new Metric
          def Metric(value = nil, **value_hash, &block)
            dsl_attribute(:Metric, value, attr_class: Metric, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for Stat
          def Stat(value)
            dsl_attribute(:Stat, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Unit
          def Unit(value)
            dsl_attribute(:Unit, value)
          end
        end

        # Property Definition Metric
        class Metric < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for MetricName
          def MetricName(value)
            dsl_attribute(:MetricName, value)
          end

          # @param [Array<Dimension>|JSONable>] values
          #   The List of values to use for Dimensions
          def Dimensions(values)
            dsl_list_attribute(:Dimensions, values)
          end

          #  @param [Dimension|JSONable] value  Append value to the List
          #    The List of values to use for Dimensions
          # @@overload Dimension(&block)
          # Append value to the List from block via instance eval of a new Dimension
          def Dimension(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Dimensions, value, fn_if: fn_if, attr_class: Dimension, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for Namespace
          def Namespace(value)
            dsl_attribute(:Namespace, value)
          end
        end

        # Property Definition Dimension
        class Dimension < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end
        end

        # Property Definition MetricDataQuery
        class MetricDataQuery < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for ReturnData
          def ReturnData(value)
            dsl_attribute(:ReturnData, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Expression
          def Expression(value)
            dsl_attribute(:Expression, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Label
          def Label(value)
            dsl_attribute(:Label, value)
          end

          #   @param [MetricStat|JSONable] value
          #     The value to use for MetricStat
          # @@overload MetricStat(&block)
          #   Set :MetricStat from block via instance eval of a new MetricStat
          def MetricStat(value = nil, **value_hash, &block)
            dsl_attribute(:MetricStat, value, attr_class: MetricStat, **value_hash, &block)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for Period
          def Period(value)
            dsl_attribute(:Period, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Id
          def Id(value)
            dsl_attribute(:Id, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for ThresholdMetricId
        def ThresholdMetricId(value)
          dsl_attribute(:ThresholdMetricId, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for EvaluateLowSampleCountPercentile
        def EvaluateLowSampleCountPercentile(value)
          dsl_attribute(:EvaluateLowSampleCountPercentile, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for ExtendedStatistic
        def ExtendedStatistic(value)
          dsl_attribute(:ExtendedStatistic, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for ComparisonOperator
        def ComparisonOperator(value)
          dsl_attribute(:ComparisonOperator, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for TreatMissingData
        def TreatMissingData(value)
          dsl_attribute(:TreatMissingData, value)
        end

        # @param [Array<Dimension>|JSONable>] values
        #   The List of values to use for Dimensions
        def Dimensions(values)
          dsl_list_attribute(:Dimensions, values)
        end

        #  @param [Dimension|JSONable] value  Append value to the List
        #    The List of values to use for Dimensions
        # @@overload Dimension(&block)
        # Append value to the List from block via instance eval of a new Dimension
        def Dimension(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Dimensions, value, fn_if: fn_if, attr_class: Dimension, **value_hash, &block)
        end

        #   @param [Integer|JSONable] value
        #     The value to use for Period
        def Period(value)
          dsl_attribute(:Period, value)
        end

        #   @param [Integer|JSONable] value
        #     The value to use for EvaluationPeriods
        def EvaluationPeriods(value)
          dsl_attribute(:EvaluationPeriods, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Unit
        def Unit(value)
          dsl_attribute(:Unit, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Namespace
        def Namespace(value)
          dsl_attribute(:Namespace, value)
        end

        # @param [Array<String>|JSONable>] values
        #   The List of values to use for OKActions
        def OKActions(values)
          dsl_list_attribute(:OKActions, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for OKActions
        def OKAction(value, fn_if: nil)
          dsl_push_attribute(:OKActions, value, fn_if: fn_if)
        end

        # @param [Array<String>|JSONable>] values
        #   The List of values to use for AlarmActions
        def AlarmActions(values)
          dsl_list_attribute(:AlarmActions, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for AlarmActions
        def AlarmAction(value, fn_if: nil)
          dsl_push_attribute(:AlarmActions, value, fn_if: fn_if)
        end

        #   @param [String|JSONable] value
        #     The value to use for MetricName
        def MetricName(value)
          dsl_attribute(:MetricName, value)
        end

        #   @param [Boolean|JSONable] value
        #     The value to use for ActionsEnabled
        def ActionsEnabled(value)
          dsl_attribute(:ActionsEnabled, value)
        end

        # @param [Array<MetricDataQuery>|JSONable>] values
        #   The List of values to use for Metrics
        def Metrics(values)
          dsl_list_attribute(:Metrics, values)
        end

        #  @param [MetricDataQuery|JSONable] value  Append value to the List
        #    The List of values to use for Metrics
        # @@overload Metric(&block)
        # Append value to the List from block via instance eval of a new MetricDataQuery
        def Metric(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Metrics, value, fn_if: fn_if, attr_class: MetricDataQuery, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for AlarmDescription
        def AlarmDescription(value)
          dsl_attribute(:AlarmDescription, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for AlarmName
        def AlarmName(value)
          dsl_attribute(:AlarmName, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Statistic
        def Statistic(value)
          dsl_attribute(:Statistic, value)
        end

        # @param [Array<String>|JSONable>] values
        #   The List of values to use for InsufficientDataActions
        def InsufficientDataActions(values)
          dsl_list_attribute(:InsufficientDataActions, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for InsufficientDataActions
        def InsufficientDataAction(value, fn_if: nil)
          dsl_push_attribute(:InsufficientDataActions, value, fn_if: fn_if)
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Arn
        def Arn(value)
          dsl_attribute(:Arn, value)
        end

        #   @param [Integer|JSONable] value
        #     The value to use for DatapointsToAlarm
        def DatapointsToAlarm(value)
          dsl_attribute(:DatapointsToAlarm, value)
        end

        #   @param [Number|JSONable] value
        #     The value to use for Threshold
        def Threshold(value)
          dsl_attribute(:Threshold, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::CloudWatch::Alarm]
    def AWS_CloudWatch_Alarm(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::CloudWatch::Alarm, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
