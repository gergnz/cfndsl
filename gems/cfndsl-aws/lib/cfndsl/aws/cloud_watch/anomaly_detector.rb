# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module CloudWatch
      # Resource Type definition for AWS::CloudWatch::AnomalyDetector
      class AnomalyDetector < ResourceType
        # Property Definition Configuration
        class Configuration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for MetricTimeZone
          def MetricTimeZone(value)
            dsl_attribute(:MetricTimeZone, value)
          end

          # @param [Array<Range>|JSONable>] values
          #   The List of values to use for ExcludedTimeRanges
          def ExcludedTimeRanges(values)
            dsl_list_attribute(:ExcludedTimeRanges, values)
          end

          #  @param [Range|JSONable] value  Append value to the List
          #    The List of values to use for ExcludedTimeRanges
          # @@overload ExcludedTimeRang(&block)
          # Append value to the List from block via instance eval of a new Range
          def ExcludedTimeRang(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:ExcludedTimeRanges, value, fn_if: fn_if, attr_class: Range, **value_hash, &block)
          end
        end

        # Property Definition Dimension
        class Dimension < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end
        end

        # Property Definition Range
        class Range < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for EndTime
          def EndTime(value)
            dsl_attribute(:EndTime, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for StartTime
          def StartTime(value)
            dsl_attribute(:StartTime, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for MetricName
        def MetricName(value)
          dsl_attribute(:MetricName, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Stat
        def Stat(value)
          dsl_attribute(:Stat, value)
        end

        #   @param [Configuration|JSONable] value
        #     The value to use for Configuration
        # @@overload Configuration(&block)
        #   Set :Configuration from block via instance eval of a new Configuration
        def Configuration(value = nil, **value_hash, &block)
          dsl_attribute(:Configuration, value, attr_class: Configuration, **value_hash, &block)
        end

        # @param [Array<Dimension>|JSONable>] values
        #   The List of values to use for Dimensions
        def Dimensions(values)
          dsl_list_attribute(:Dimensions, values)
        end

        #  @param [Dimension|JSONable] value  Append value to the List
        #    The List of values to use for Dimensions
        # @@overload Dimension(&block)
        # Append value to the List from block via instance eval of a new Dimension
        def Dimension(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Dimensions, value, fn_if: fn_if, attr_class: Dimension, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Namespace
        def Namespace(value)
          dsl_attribute(:Namespace, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::CloudWatch::AnomalyDetector]
    def AWS_CloudWatch_AnomalyDetector(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::CloudWatch::AnomalyDetector, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
