# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module Route53
      # Resource schema for AWS::Route53::HostedZone.
      # @see https://github.com/aws-cloudformation/aws-cloudformation-resource-providers-route53.git
      class HostedZone < ResourceType
        # A complex type that contains an optional comment.
        #
        # If you don't want to specify a comment, omit the HostedZoneConfig and Comment elements.
        class HostedZoneConfig < PropertyType
          #   @param [String|JSONable] value
          #     Any comments that you want to include about the hosted zone.
          def Comment(value)
            dsl_attribute(:Comment, value)
          end
        end

        # A complex type that contains information about a tag that you want to add or edit for the specified health check or hosted zone.
        class HostedZoneTag < PropertyType
          #   @param [String|JSONable] value
          #     The key name of the tag.
          def Key(value)
            dsl_attribute(:Key, value)
          end

          #   @param [String|JSONable] value
          #     The value for the tag.
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        # A complex type that contains information about a configuration for DNS query logging.
        class QueryLoggingConfig < PropertyType
          #   @param [String|JSONable] value
          #     The Amazon Resource Name (ARN) of the CloudWatch Logs log group that Amazon Route 53 is publishing logs to.
          def CloudWatchLogsLogGroupArn(value)
            dsl_attribute(:CloudWatchLogsLogGroupArn, value)
          end
        end

        # A complex type that contains information about an Amazon VPC. Route 53 Resolver uses the records in the private hosted zone to route traffic in that VPC.
        class VPC < PropertyType
          #   @param [String|JSONable] value
          #     The ID of an Amazon VPC.
          def VPCId(value)
            dsl_attribute(:VPCId, value)
          end

          #   @param [String|JSONable] value
          #     The region that an Amazon VPC was created in.
          def VPCRegion(value)
            dsl_attribute(:VPCRegion, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [HostedZoneConfig|JSONable] value
        #     The value to use for HostedZoneConfig
        # @@overload HostedZoneConfig(&block)
        #   Set :HostedZoneConfig from block via instance eval of a new HostedZoneConfig
        def HostedZoneConfig(value = nil, **value_hash, &block)
          dsl_attribute(:HostedZoneConfig, value, attr_class: HostedZoneConfig, **value_hash, &block)
        end

        # @param [Array<HostedZoneTag>|JSONable>] values
        #   Adds, edits, or deletes tags for a health check or a hosted zone.
        #
        #   For information about using tags for cost allocation, see Using Cost Allocation Tags in the AWS Billing and Cost Management User Guide.
        def HostedZoneTags(values)
          dsl_list_attribute(:HostedZoneTags, values)
        end

        #  @param [HostedZoneTag|JSONable] value  Append value to the List
        #    Adds, edits, or deletes tags for a health check or a hosted zone.
        #
        #    For information about using tags for cost allocation, see Using Cost Allocation Tags in the AWS Billing and Cost Management User Guide.
        # @@overload HostedZoneTag(&block)
        # Append value to the List from block via instance eval of a new HostedZoneTag
        def HostedZoneTag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:HostedZoneTags, value, fn_if: fn_if, attr_class: HostedZoneTag, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The name of the domain. Specify a fully qualified domain name, for example, www.example.com. The trailing dot is optional; Amazon Route 53 assumes that the domain name is fully qualified. This means that Route 53 treats www.example.com (without a trailing dot) and www.example.com. (with a trailing dot) as identical.
        #
        #     If you're creating a public hosted zone, this is the name you have registered with your DNS registrar. If your domain name is registered with a registrar other than Route 53, change the name servers for your domain to the set of NameServers that are returned by the Fn::GetAtt intrinsic function.
        def Name(value)
          dsl_attribute(:Name, value)
        end

        #   @param [QueryLoggingConfig|JSONable] value
        #     The value to use for QueryLoggingConfig
        # @@overload QueryLoggingConfig(&block)
        #   Set :QueryLoggingConfig from block via instance eval of a new QueryLoggingConfig
        def QueryLoggingConfig(value = nil, **value_hash, &block)
          dsl_attribute(:QueryLoggingConfig, value, attr_class: QueryLoggingConfig, **value_hash, &block)
        end

        # @param [Array<VPC>|JSONable>] values
        #   A complex type that contains information about the VPCs that are associated with the specified hosted zone.
        def VPCs(values)
          dsl_list_attribute(:VPCs, values)
        end

        #  @param [VPC|JSONable] value  Append value to the List
        #    A complex type that contains information about the VPCs that are associated with the specified hosted zone.
        # @@overload VPC(&block)
        # Append value to the List from block via instance eval of a new VPC
        def VPC(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:VPCs, value, fn_if: fn_if, attr_class: VPC, **value_hash, &block)
        end

        # @param [Array<String>|JSONable>] values
        #   The List of values to use for NameServers
        def NameServers(values)
          dsl_list_attribute(:NameServers, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for NameServers
        def NameServer(value, fn_if: nil)
          dsl_push_attribute(:NameServers, value, fn_if: fn_if)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::Route53::HostedZone]
    def AWS_Route53_HostedZone(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::Route53::HostedZone, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
