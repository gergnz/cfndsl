# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module Route53
      # Resource Type definition for AWS::Route53::HostedZone
      class HostedZone < ResourceType
        # Property Definition HostedZoneConfig
        class HostedZoneConfig < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Comment
          def Comment(value)
            dsl_attribute(:Comment, value)
          end
        end

        # Property Definition HostedZoneTag
        class HostedZoneTag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        # Property Definition QueryLoggingConfig
        class QueryLoggingConfig < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for CloudWatchLogsLogGroupArn
          def CloudWatchLogsLogGroupArn(value)
            dsl_attribute(:CloudWatchLogsLogGroupArn, value)
          end
        end

        # Property Definition VPC
        class VPC < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for VPCId
          def VPCId(value)
            dsl_attribute(:VPCId, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for VPCRegion
          def VPCRegion(value)
            dsl_attribute(:VPCRegion, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        # @param [Array<String>|JSONable>] values
        #   The List of values to use for NameServers
        def NameServers(values)
          dsl_list_attribute(:NameServers, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for NameServers
        def NameServer(value, fn_if: nil)
          dsl_push_attribute(:NameServers, value, fn_if: fn_if)
        end

        #   @param [HostedZoneConfig|JSONable] value
        #     The value to use for HostedZoneConfig
        # @@overload HostedZoneConfig(&block)
        #   Set :HostedZoneConfig from block via instance eval of a new HostedZoneConfig
        def HostedZoneConfig(value = nil, **value_hash, &block)
          dsl_attribute(:HostedZoneConfig, value, attr_class: HostedZoneConfig, **value_hash, &block)
        end

        # @param [Array<HostedZoneTag>|JSONable>] values
        #   The List of values to use for HostedZoneTags
        def HostedZoneTags(values)
          dsl_list_attribute(:HostedZoneTags, values)
        end

        #  @param [HostedZoneTag|JSONable] value  Append value to the List
        #    The List of values to use for HostedZoneTags
        # @@overload HostedZoneTag(&block)
        # Append value to the List from block via instance eval of a new HostedZoneTag
        def HostedZoneTag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:HostedZoneTags, value, fn_if: fn_if, attr_class: HostedZoneTag, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Name
        def Name(value)
          dsl_attribute(:Name, value)
        end

        #   @param [QueryLoggingConfig|JSONable] value
        #     The value to use for QueryLoggingConfig
        # @@overload QueryLoggingConfig(&block)
        #   Set :QueryLoggingConfig from block via instance eval of a new QueryLoggingConfig
        def QueryLoggingConfig(value = nil, **value_hash, &block)
          dsl_attribute(:QueryLoggingConfig, value, attr_class: QueryLoggingConfig, **value_hash, &block)
        end

        # @param [Array<VPC>|JSONable>] values
        #   The List of values to use for VPCs
        def VPCs(values)
          dsl_list_attribute(:VPCs, values)
        end

        #  @param [VPC|JSONable] value  Append value to the List
        #    The List of values to use for VPCs
        # @@overload VPC(&block)
        # Append value to the List from block via instance eval of a new VPC
        def VPC(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:VPCs, value, fn_if: fn_if, attr_class: VPC, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::Route53::HostedZone]
    def AWS_Route53_HostedZone(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::Route53::HostedZone, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
