# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module Route53
      # Resource Type definition for AWS::Route53::RecordSet
      class RecordSet < ResourceType
        # Property Definition AliasTarget
        class AliasTarget < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for DNSName
          def DNSName(value)
            dsl_attribute(:DNSName, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for EvaluateTargetHealth
          def EvaluateTargetHealth(value)
            dsl_attribute(:EvaluateTargetHealth, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for HostedZoneId
          def HostedZoneId(value)
            dsl_attribute(:HostedZoneId, value)
          end
        end

        # Property Definition GeoLocation
        class GeoLocation < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ContinentCode
          def ContinentCode(value)
            dsl_attribute(:ContinentCode, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for CountryCode
          def CountryCode(value)
            dsl_attribute(:CountryCode, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for SubdivisionCode
          def SubdivisionCode(value)
            dsl_attribute(:SubdivisionCode, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [AliasTarget|JSONable] value
        #     The value to use for AliasTarget
        # @@overload AliasTarget(&block)
        #   Set :AliasTarget from block via instance eval of a new AliasTarget
        def AliasTarget(value = nil, **value_hash, &block)
          dsl_attribute(:AliasTarget, value, attr_class: AliasTarget, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Comment
        def Comment(value)
          dsl_attribute(:Comment, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Failover
        def Failover(value)
          dsl_attribute(:Failover, value)
        end

        #   @param [GeoLocation|JSONable] value
        #     The value to use for GeoLocation
        # @@overload GeoLocation(&block)
        #   Set :GeoLocation from block via instance eval of a new GeoLocation
        def GeoLocation(value = nil, **value_hash, &block)
          dsl_attribute(:GeoLocation, value, attr_class: GeoLocation, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for HealthCheckId
        def HealthCheckId(value)
          dsl_attribute(:HealthCheckId, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for HostedZoneId
        def HostedZoneId(value)
          dsl_attribute(:HostedZoneId, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for HostedZoneName
        def HostedZoneName(value)
          dsl_attribute(:HostedZoneName, value)
        end

        #   @param [Boolean|JSONable] value
        #     The value to use for MultiValueAnswer
        def MultiValueAnswer(value)
          dsl_attribute(:MultiValueAnswer, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Name
        def Name(value)
          dsl_attribute(:Name, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Region
        def Region(value)
          dsl_attribute(:Region, value)
        end

        # @param [Array<String>|JSONable>] values
        #   The List of values to use for ResourceRecords
        def ResourceRecords(values)
          dsl_list_attribute(:ResourceRecords, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for ResourceRecords
        def ResourceRecord(value, fn_if: nil)
          dsl_push_attribute(:ResourceRecords, value, fn_if: fn_if)
        end

        #   @param [String|JSONable] value
        #     The value to use for SetIdentifier
        def SetIdentifier(value)
          dsl_attribute(:SetIdentifier, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for TTL
        def TTL(value)
          dsl_attribute(:TTL, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Type
        def Type(value)
          dsl_attribute(:Type, value)
        end

        #   @param [Integer|JSONable] value
        #     The value to use for Weight
        def Weight(value)
          dsl_attribute(:Weight, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::Route53::RecordSet]
    def AWS_Route53_RecordSet(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::Route53::RecordSet, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
