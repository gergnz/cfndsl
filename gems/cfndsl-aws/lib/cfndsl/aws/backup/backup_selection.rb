# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module Backup
      # Resource Type definition for AWS::Backup::BackupSelection
      class BackupSelection < ResourceType
        # Property Definition BackupSelectionResourceType
        class BackupSelectionResourceType < PropertyType
          # @param [Array<ConditionResourceType>|JSONable>] values
          #   The List of values to use for ListOfTags
          def ListOfTags(values)
            dsl_list_attribute(:ListOfTags, values)
          end

          #  @param [ConditionResourceType|JSONable] value  Append value to the List
          #    The List of values to use for ListOfTags
          # @@overload ListOfTag(&block)
          # Append value to the List from block via instance eval of a new ConditionResourceType
          def ListOfTag(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:ListOfTags, value, fn_if: fn_if, attr_class: ConditionResourceType, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for IamRoleArn
          def IamRoleArn(value)
            dsl_attribute(:IamRoleArn, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Resources
          def Resources(values)
            dsl_list_attribute(:Resources, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Resources
          def Resourc(value, fn_if: nil)
            dsl_push_attribute(:Resources, value, fn_if: fn_if)
          end

          #   @param [String|JSONable] value
          #     The value to use for SelectionName
          def SelectionName(value)
            dsl_attribute(:SelectionName, value)
          end
        end

        # Property Definition ConditionResourceType
        class ConditionResourceType < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ConditionKey
          def ConditionKey(value)
            dsl_attribute(:ConditionKey, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ConditionValue
          def ConditionValue(value)
            dsl_attribute(:ConditionValue, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ConditionType
          def ConditionType(value)
            dsl_attribute(:ConditionType, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for BackupPlanId
        def BackupPlanId(value)
          dsl_attribute(:BackupPlanId, value)
        end

        #   @param [BackupSelectionResourceType|JSONable] value
        #     The value to use for BackupSelection
        # @@overload BackupSelection(&block)
        #   Set :BackupSelection from block via instance eval of a new BackupSelectionResourceType
        def BackupSelection(value = nil, **value_hash, &block)
          dsl_attribute(:BackupSelection, value, attr_class: BackupSelectionResourceType, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for SelectionId
        def SelectionId(value)
          dsl_attribute(:SelectionId, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::Backup::BackupSelection]
    def AWS_Backup_BackupSelection(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::Backup::BackupSelection, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
