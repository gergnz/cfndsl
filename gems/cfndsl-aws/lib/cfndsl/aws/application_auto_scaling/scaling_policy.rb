# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module ApplicationAutoScaling
      # Resource Type definition for AWS::ApplicationAutoScaling::ScalingPolicy
      class ScalingPolicy < ResourceType
        # Property Definition StepScalingPolicyConfiguration
        class StepScalingPolicyConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for AdjustmentType
          def AdjustmentType(value)
            dsl_attribute(:AdjustmentType, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for Cooldown
          def Cooldown(value)
            dsl_attribute(:Cooldown, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for MetricAggregationType
          def MetricAggregationType(value)
            dsl_attribute(:MetricAggregationType, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for MinAdjustmentMagnitude
          def MinAdjustmentMagnitude(value)
            dsl_attribute(:MinAdjustmentMagnitude, value)
          end

          # @param [Array<StepAdjustment>|JSONable>] values
          #   The List of values to use for StepAdjustments
          def StepAdjustments(values)
            dsl_list_attribute(:StepAdjustments, values)
          end

          #  @param [StepAdjustment|JSONable] value  Append value to the List
          #    The List of values to use for StepAdjustments
          # @@overload StepAdjustment(&block)
          # Append value to the List from block via instance eval of a new StepAdjustment
          def StepAdjustment(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:StepAdjustments, value, fn_if: fn_if, attr_class: StepAdjustment, **value_hash, &block)
          end
        end

        # Property Definition TargetTrackingScalingPolicyConfiguration
        class TargetTrackingScalingPolicyConfiguration < PropertyType
          #   @param [CustomizedMetricSpecification|JSONable] value
          #     The value to use for CustomizedMetricSpecification
          # @@overload CustomizedMetricSpecification(&block)
          #   Set :CustomizedMetricSpecification from block via instance eval of a new CustomizedMetricSpecification
          def CustomizedMetricSpecification(value = nil, **value_hash, &block)
            dsl_attribute(:CustomizedMetricSpecification, value, attr_class: CustomizedMetricSpecification, **value_hash, &block)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for DisableScaleIn
          def DisableScaleIn(value)
            dsl_attribute(:DisableScaleIn, value)
          end

          #   @param [PredefinedMetricSpecification|JSONable] value
          #     The value to use for PredefinedMetricSpecification
          # @@overload PredefinedMetricSpecification(&block)
          #   Set :PredefinedMetricSpecification from block via instance eval of a new PredefinedMetricSpecification
          def PredefinedMetricSpecification(value = nil, **value_hash, &block)
            dsl_attribute(:PredefinedMetricSpecification, value, attr_class: PredefinedMetricSpecification, **value_hash, &block)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for ScaleInCooldown
          def ScaleInCooldown(value)
            dsl_attribute(:ScaleInCooldown, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for ScaleOutCooldown
          def ScaleOutCooldown(value)
            dsl_attribute(:ScaleOutCooldown, value)
          end

          #   @param [Number|JSONable] value
          #     The value to use for TargetValue
          def TargetValue(value)
            dsl_attribute(:TargetValue, value)
          end
        end

        # Property Definition PredefinedMetricSpecification
        class PredefinedMetricSpecification < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for PredefinedMetricType
          def PredefinedMetricType(value)
            dsl_attribute(:PredefinedMetricType, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ResourceLabel
          def ResourceLabel(value)
            dsl_attribute(:ResourceLabel, value)
          end
        end

        # Property Definition CustomizedMetricSpecification
        class CustomizedMetricSpecification < PropertyType
          # @param [Array<MetricDimension>|JSONable>] values
          #   The List of values to use for Dimensions
          def Dimensions(values)
            dsl_list_attribute(:Dimensions, values)
          end

          #  @param [MetricDimension|JSONable] value  Append value to the List
          #    The List of values to use for Dimensions
          # @@overload Dimension(&block)
          # Append value to the List from block via instance eval of a new MetricDimension
          def Dimension(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Dimensions, value, fn_if: fn_if, attr_class: MetricDimension, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for MetricName
          def MetricName(value)
            dsl_attribute(:MetricName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Namespace
          def Namespace(value)
            dsl_attribute(:Namespace, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Statistic
          def Statistic(value)
            dsl_attribute(:Statistic, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Unit
          def Unit(value)
            dsl_attribute(:Unit, value)
          end
        end

        # Property Definition StepAdjustment
        class StepAdjustment < PropertyType
          #   @param [Number|JSONable] value
          #     The value to use for MetricIntervalLowerBound
          def MetricIntervalLowerBound(value)
            dsl_attribute(:MetricIntervalLowerBound, value)
          end

          #   @param [Number|JSONable] value
          #     The value to use for MetricIntervalUpperBound
          def MetricIntervalUpperBound(value)
            dsl_attribute(:MetricIntervalUpperBound, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for ScalingAdjustment
          def ScalingAdjustment(value)
            dsl_attribute(:ScalingAdjustment, value)
          end
        end

        # Property Definition MetricDimension
        class MetricDimension < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for PolicyName
        def PolicyName(value)
          dsl_attribute(:PolicyName, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for PolicyType
        def PolicyType(value)
          dsl_attribute(:PolicyType, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for ResourceId
        def ResourceId(value)
          dsl_attribute(:ResourceId, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for ScalableDimension
        def ScalableDimension(value)
          dsl_attribute(:ScalableDimension, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for ScalingTargetId
        def ScalingTargetId(value)
          dsl_attribute(:ScalingTargetId, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for ServiceNamespace
        def ServiceNamespace(value)
          dsl_attribute(:ServiceNamespace, value)
        end

        #   @param [StepScalingPolicyConfiguration|JSONable] value
        #     The value to use for StepScalingPolicyConfiguration
        # @@overload StepScalingPolicyConfiguration(&block)
        #   Set :StepScalingPolicyConfiguration from block via instance eval of a new StepScalingPolicyConfiguration
        def StepScalingPolicyConfiguration(value = nil, **value_hash, &block)
          dsl_attribute(:StepScalingPolicyConfiguration, value, attr_class: StepScalingPolicyConfiguration, **value_hash, &block)
        end

        #   @param [TargetTrackingScalingPolicyConfiguration|JSONable] value
        #     The value to use for TargetTrackingScalingPolicyConfiguration
        # @@overload TargetTrackingScalingPolicyConfiguration(&block)
        #   Set :TargetTrackingScalingPolicyConfiguration from block via instance eval of a new TargetTrackingScalingPolicyConfiguration
        def TargetTrackingScalingPolicyConfiguration(value = nil, **value_hash, &block)
          dsl_attribute(:TargetTrackingScalingPolicyConfiguration, value, attr_class: TargetTrackingScalingPolicyConfiguration, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::ApplicationAutoScaling::ScalingPolicy]
    def AWS_ApplicationAutoScaling_ScalingPolicy(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::ApplicationAutoScaling::ScalingPolicy, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
