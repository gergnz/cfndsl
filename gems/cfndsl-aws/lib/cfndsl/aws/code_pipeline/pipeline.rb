# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module CodePipeline
      # Resource Type definition for AWS::CodePipeline::Pipeline
      class Pipeline < ResourceType
        # Property Definition ActionDeclaration
        class ActionDeclaration < PropertyType
          #   @param [ActionTypeId|JSONable] value
          #     The value to use for ActionTypeId
          # @@overload ActionTypeId(&block)
          #   Set :ActionTypeId from block via instance eval of a new ActionTypeId
          def ActionTypeId(value = nil, **value_hash, &block)
            dsl_attribute(:ActionTypeId, value, attr_class: ActionTypeId, **value_hash, &block)
          end

          #   @param [Object|JSONable] value
          #     The value to use for Configuration
          def Configuration(value)
            dsl_attribute(:Configuration, value)
          end

          # @param [Array<InputArtifact>|JSONable>] values
          #   The List of values to use for InputArtifacts
          def InputArtifacts(values)
            dsl_list_attribute(:InputArtifacts, values)
          end

          #  @param [InputArtifact|JSONable] value  Append value to the List
          #    The List of values to use for InputArtifacts
          # @@overload InputArtifact(&block)
          # Append value to the List from block via instance eval of a new InputArtifact
          def InputArtifact(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:InputArtifacts, value, fn_if: fn_if, attr_class: InputArtifact, **value_hash, &block)
          end

          # @param [Array<OutputArtifact>|JSONable>] values
          #   The List of values to use for OutputArtifacts
          def OutputArtifacts(values)
            dsl_list_attribute(:OutputArtifacts, values)
          end

          #  @param [OutputArtifact|JSONable] value  Append value to the List
          #    The List of values to use for OutputArtifacts
          # @@overload OutputArtifact(&block)
          # Append value to the List from block via instance eval of a new OutputArtifact
          def OutputArtifact(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:OutputArtifacts, value, fn_if: fn_if, attr_class: OutputArtifact, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for Region
          def Region(value)
            dsl_attribute(:Region, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Namespace
          def Namespace(value)
            dsl_attribute(:Namespace, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for RoleArn
          def RoleArn(value)
            dsl_attribute(:RoleArn, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for RunOrder
          def RunOrder(value)
            dsl_attribute(:RunOrder, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end
        end

        # Property Definition BlockerDeclaration
        class BlockerDeclaration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Type
          def Type(value)
            dsl_attribute(:Type, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end
        end

        # Property Definition ActionTypeId
        class ActionTypeId < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Owner
          def Owner(value)
            dsl_attribute(:Owner, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Category
          def Category(value)
            dsl_attribute(:Category, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Version
          def Version(value)
            dsl_attribute(:Version, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Provider
          def Provider(value)
            dsl_attribute(:Provider, value)
          end
        end

        # Property Definition StageDeclaration
        class StageDeclaration < PropertyType
          # @param [Array<BlockerDeclaration>|JSONable>] values
          #   The List of values to use for Blockers
          def Blockers(values)
            dsl_list_attribute(:Blockers, values)
          end

          #  @param [BlockerDeclaration|JSONable] value  Append value to the List
          #    The List of values to use for Blockers
          # @@overload Blocker(&block)
          # Append value to the List from block via instance eval of a new BlockerDeclaration
          def Blocker(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Blockers, value, fn_if: fn_if, attr_class: BlockerDeclaration, **value_hash, &block)
          end

          # @param [Array<ActionDeclaration>|JSONable>] values
          #   The List of values to use for Actions
          def Actions(values)
            dsl_list_attribute(:Actions, values)
          end

          #  @param [ActionDeclaration|JSONable] value  Append value to the List
          #    The List of values to use for Actions
          # @@overload Action(&block)
          # Append value to the List from block via instance eval of a new ActionDeclaration
          def Action(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Actions, value, fn_if: fn_if, attr_class: ActionDeclaration, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end
        end

        # Property Definition InputArtifact
        class InputArtifact < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end
        end

        # Property Definition ArtifactStore
        class ArtifactStore < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Type
          def Type(value)
            dsl_attribute(:Type, value)
          end

          #   @param [EncryptionKey|JSONable] value
          #     The value to use for EncryptionKey
          # @@overload EncryptionKey(&block)
          #   Set :EncryptionKey from block via instance eval of a new EncryptionKey
          def EncryptionKey(value = nil, **value_hash, &block)
            dsl_attribute(:EncryptionKey, value, attr_class: EncryptionKey, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for Location
          def Location(value)
            dsl_attribute(:Location, value)
          end
        end

        # Property Definition ArtifactStoreMap
        class ArtifactStoreMap < PropertyType
          #   @param [ArtifactStore|JSONable] value
          #     The value to use for ArtifactStore
          # @@overload ArtifactStore(&block)
          #   Set :ArtifactStore from block via instance eval of a new ArtifactStore
          def ArtifactStore(value = nil, **value_hash, &block)
            dsl_attribute(:ArtifactStore, value, attr_class: ArtifactStore, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for Region
          def Region(value)
            dsl_attribute(:Region, value)
          end
        end

        # Property Definition StageTransition
        class StageTransition < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for StageName
          def StageName(value)
            dsl_attribute(:StageName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Reason
          def Reason(value)
            dsl_attribute(:Reason, value)
          end
        end

        # Property Definition EncryptionKey
        class EncryptionKey < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Type
          def Type(value)
            dsl_attribute(:Type, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Id
          def Id(value)
            dsl_attribute(:Id, value)
          end
        end

        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end
        end

        # Property Definition OutputArtifact
        class OutputArtifact < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end
        end

        #  @param [ArtifactStoreMap|JSONable] value  Append value to the List
        #    The List of values to use for ArtifactStores
        # @@overload ArtifactStores(&block)
        # Append value to the List from block via instance eval of a new ArtifactStoreMap
        def ArtifactStores(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:ArtifactStores, value, fn_if: fn_if, attr_class: ArtifactStoreMap, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Version
        def Version(value)
          dsl_attribute(:Version, value)
        end

        #   @param [ArtifactStore|JSONable] value
        #     The value to use for ArtifactStore
        # @@overload ArtifactStore(&block)
        #   Set :ArtifactStore from block via instance eval of a new ArtifactStore
        def ArtifactStore(value = nil, **value_hash, &block)
          dsl_attribute(:ArtifactStore, value, attr_class: ArtifactStore, **value_hash, &block)
        end

        # @param [Array<StageTransition>|JSONable>] values
        #   The List of values to use for DisableInboundStageTransitions
        def DisableInboundStageTransitions(values)
          dsl_list_attribute(:DisableInboundStageTransitions, values)
        end

        #  @param [StageTransition|JSONable] value  Append value to the List
        #    The List of values to use for DisableInboundStageTransitions
        # @@overload DisableInboundStageTransition(&block)
        # Append value to the List from block via instance eval of a new StageTransition
        def DisableInboundStageTransition(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:DisableInboundStageTransitions, value, fn_if: fn_if, attr_class: StageTransition, **value_hash, &block)
        end

        # @param [Array<StageDeclaration>|JSONable>] values
        #   The List of values to use for Stages
        def Stages(values)
          dsl_list_attribute(:Stages, values)
        end

        #  @param [StageDeclaration|JSONable] value  Append value to the List
        #    The List of values to use for Stages
        # @@overload Stage(&block)
        # Append value to the List from block via instance eval of a new StageDeclaration
        def Stage(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Stages, value, fn_if: fn_if, attr_class: StageDeclaration, **value_hash, &block)
        end

        #   @param [Boolean|JSONable] value
        #     The value to use for RestartExecutionOnUpdate
        def RestartExecutionOnUpdate(value)
          dsl_attribute(:RestartExecutionOnUpdate, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for RoleArn
        def RoleArn(value)
          dsl_attribute(:RoleArn, value)
        end

        # @param [Array<Tag>|JSONable>] values
        #   The List of values to use for Tags
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    The List of values to use for Tags
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Name
        def Name(value)
          dsl_attribute(:Name, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::CodePipeline::Pipeline]
    def AWS_CodePipeline_Pipeline(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::CodePipeline::Pipeline, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
