# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module CodePipeline
      # Resource Type definition for AWS::CodePipeline::Webhook
      class Webhook < ResourceType
        # Property Definition WebhookFilterRule
        class WebhookFilterRule < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for JsonPath
          def JsonPath(value)
            dsl_attribute(:JsonPath, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for MatchEquals
          def MatchEquals(value)
            dsl_attribute(:MatchEquals, value)
          end
        end

        # Property Definition WebhookAuthConfiguration
        class WebhookAuthConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for AllowedIPRange
          def AllowedIPRange(value)
            dsl_attribute(:AllowedIPRange, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for SecretToken
          def SecretToken(value)
            dsl_attribute(:SecretToken, value)
          end
        end

        #   @param [WebhookAuthConfiguration|JSONable] value
        #     The value to use for AuthenticationConfiguration
        # @@overload AuthenticationConfiguration(&block)
        #   Set :AuthenticationConfiguration from block via instance eval of a new WebhookAuthConfiguration
        def AuthenticationConfiguration(value = nil, **value_hash, &block)
          dsl_attribute(:AuthenticationConfiguration, value, attr_class: WebhookAuthConfiguration, **value_hash, &block)
        end

        # @param [Array<WebhookFilterRule>|JSONable>] values
        #   The List of values to use for Filters
        def Filters(values)
          dsl_list_attribute(:Filters, values)
        end

        #  @param [WebhookFilterRule|JSONable] value  Append value to the List
        #    The List of values to use for Filters
        # @@overload Filter(&block)
        # Append value to the List from block via instance eval of a new WebhookFilterRule
        def Filter(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Filters, value, fn_if: fn_if, attr_class: WebhookFilterRule, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Authentication
        def Authentication(value)
          dsl_attribute(:Authentication, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for TargetPipeline
        def TargetPipeline(value)
          dsl_attribute(:TargetPipeline, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for TargetAction
        def TargetAction(value)
          dsl_attribute(:TargetAction, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Url
        def Url(value)
          dsl_attribute(:Url, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Name
        def Name(value)
          dsl_attribute(:Name, value)
        end

        #   @param [Integer|JSONable] value
        #     The value to use for TargetPipelineVersion
        def TargetPipelineVersion(value)
          dsl_attribute(:TargetPipelineVersion, value)
        end

        #   @param [Boolean|JSONable] value
        #     The value to use for RegisterWithThirdParty
        def RegisterWithThirdParty(value)
          dsl_attribute(:RegisterWithThirdParty, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::CodePipeline::Webhook]
    def AWS_CodePipeline_Webhook(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::CodePipeline::Webhook, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
