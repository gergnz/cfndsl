# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module EMR
      # Resource Type definition for AWS::EMR::InstanceGroupConfig
      class InstanceGroupConfig < ResourceType
        # Property Definition AutoScalingPolicy
        class AutoScalingPolicy < PropertyType
          #   @param [ScalingConstraints|JSONable] value
          #     The value to use for Constraints
          # @@overload Constraints(&block)
          #   Set :Constraints from block via instance eval of a new ScalingConstraints
          def Constraints(value = nil, **value_hash, &block)
            dsl_attribute(:Constraints, value, attr_class: ScalingConstraints, **value_hash, &block)
          end

          # @param [Array<ScalingRule>|JSONable>] values
          #   The List of values to use for Rules
          def Rules(values)
            dsl_list_attribute(:Rules, values)
          end

          #  @param [ScalingRule|JSONable] value  Append value to the List
          #    The List of values to use for Rules
          # @@overload Rule(&block)
          # Append value to the List from block via instance eval of a new ScalingRule
          def Rule(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Rules, value, fn_if: fn_if, attr_class: ScalingRule, **value_hash, &block)
          end
        end

        # Property Definition Configuration
        class Configuration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Classification
          def Classification(value)
            dsl_attribute(:Classification, value)
          end

          #   @param [Object|JSONable] value
          #     The value to use for ConfigurationProperties
          def ConfigurationProperties(value)
            dsl_attribute(:ConfigurationProperties, value)
          end

          # @param [Array<Configuration>|JSONable>] values
          #   The List of values to use for Configurations
          def Configurations(values)
            dsl_list_attribute(:Configurations, values)
          end

          #  @param [Configuration|JSONable] value  Append value to the List
          #    The List of values to use for Configurations
          # @@overload Configuration(&block)
          # Append value to the List from block via instance eval of a new Configuration
          def Configuration(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Configurations, value, fn_if: fn_if, attr_class: Configuration, **value_hash, &block)
          end
        end

        # Property Definition EbsConfiguration
        class EbsConfiguration < PropertyType
          # @param [Array<EbsBlockDeviceConfig>|JSONable>] values
          #   The List of values to use for EbsBlockDeviceConfigs
          def EbsBlockDeviceConfigs(values)
            dsl_list_attribute(:EbsBlockDeviceConfigs, values)
          end

          #  @param [EbsBlockDeviceConfig|JSONable] value  Append value to the List
          #    The List of values to use for EbsBlockDeviceConfigs
          # @@overload EbsBlockDeviceConfig(&block)
          # Append value to the List from block via instance eval of a new EbsBlockDeviceConfig
          def EbsBlockDeviceConfig(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:EbsBlockDeviceConfigs, value, fn_if: fn_if, attr_class: EbsBlockDeviceConfig, **value_hash, &block)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for EbsOptimized
          def EbsOptimized(value)
            dsl_attribute(:EbsOptimized, value)
          end
        end

        # Property Definition EbsBlockDeviceConfig
        class EbsBlockDeviceConfig < PropertyType
          #   @param [VolumeSpecification|JSONable] value
          #     The value to use for VolumeSpecification
          # @@overload VolumeSpecification(&block)
          #   Set :VolumeSpecification from block via instance eval of a new VolumeSpecification
          def VolumeSpecification(value = nil, **value_hash, &block)
            dsl_attribute(:VolumeSpecification, value, attr_class: VolumeSpecification, **value_hash, &block)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for VolumesPerInstance
          def VolumesPerInstance(value)
            dsl_attribute(:VolumesPerInstance, value)
          end
        end

        # Property Definition ScalingConstraints
        class ScalingConstraints < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for MaxCapacity
          def MaxCapacity(value)
            dsl_attribute(:MaxCapacity, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for MinCapacity
          def MinCapacity(value)
            dsl_attribute(:MinCapacity, value)
          end
        end

        # Property Definition ScalingRule
        class ScalingRule < PropertyType
          #   @param [ScalingAction|JSONable] value
          #     The value to use for Action
          # @@overload Action(&block)
          #   Set :Action from block via instance eval of a new ScalingAction
          def Action(value = nil, **value_hash, &block)
            dsl_attribute(:Action, value, attr_class: ScalingAction, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for Description
          def Description(value)
            dsl_attribute(:Description, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end

          #   @param [ScalingTrigger|JSONable] value
          #     The value to use for Trigger
          # @@overload Trigger(&block)
          #   Set :Trigger from block via instance eval of a new ScalingTrigger
          def Trigger(value = nil, **value_hash, &block)
            dsl_attribute(:Trigger, value, attr_class: ScalingTrigger, **value_hash, &block)
          end
        end

        # Property Definition ScalingAction
        class ScalingAction < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Market
          def Market(value)
            dsl_attribute(:Market, value)
          end

          #   @param [SimpleScalingPolicyConfiguration|JSONable] value
          #     The value to use for SimpleScalingPolicyConfiguration
          # @@overload SimpleScalingPolicyConfiguration(&block)
          #   Set :SimpleScalingPolicyConfiguration from block via instance eval of a new SimpleScalingPolicyConfiguration
          def SimpleScalingPolicyConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:SimpleScalingPolicyConfiguration, value, attr_class: SimpleScalingPolicyConfiguration, **value_hash, &block)
          end
        end

        # Property Definition VolumeSpecification
        class VolumeSpecification < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for Iops
          def Iops(value)
            dsl_attribute(:Iops, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for SizeInGB
          def SizeInGB(value)
            dsl_attribute(:SizeInGB, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for VolumeType
          def VolumeType(value)
            dsl_attribute(:VolumeType, value)
          end
        end

        # Property Definition ScalingTrigger
        class ScalingTrigger < PropertyType
          #   @param [CloudWatchAlarmDefinition|JSONable] value
          #     The value to use for CloudWatchAlarmDefinition
          # @@overload CloudWatchAlarmDefinition(&block)
          #   Set :CloudWatchAlarmDefinition from block via instance eval of a new CloudWatchAlarmDefinition
          def CloudWatchAlarmDefinition(value = nil, **value_hash, &block)
            dsl_attribute(:CloudWatchAlarmDefinition, value, attr_class: CloudWatchAlarmDefinition, **value_hash, &block)
          end
        end

        # Property Definition CloudWatchAlarmDefinition
        class CloudWatchAlarmDefinition < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ComparisonOperator
          def ComparisonOperator(value)
            dsl_attribute(:ComparisonOperator, value)
          end

          # @param [Array<MetricDimension>|JSONable>] values
          #   The List of values to use for Dimensions
          def Dimensions(values)
            dsl_list_attribute(:Dimensions, values)
          end

          #  @param [MetricDimension|JSONable] value  Append value to the List
          #    The List of values to use for Dimensions
          # @@overload Dimension(&block)
          # Append value to the List from block via instance eval of a new MetricDimension
          def Dimension(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Dimensions, value, fn_if: fn_if, attr_class: MetricDimension, **value_hash, &block)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for EvaluationPeriods
          def EvaluationPeriods(value)
            dsl_attribute(:EvaluationPeriods, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for MetricName
          def MetricName(value)
            dsl_attribute(:MetricName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Namespace
          def Namespace(value)
            dsl_attribute(:Namespace, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for Period
          def Period(value)
            dsl_attribute(:Period, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Statistic
          def Statistic(value)
            dsl_attribute(:Statistic, value)
          end

          #   @param [Number|JSONable] value
          #     The value to use for Threshold
          def Threshold(value)
            dsl_attribute(:Threshold, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Unit
          def Unit(value)
            dsl_attribute(:Unit, value)
          end
        end

        # Property Definition SimpleScalingPolicyConfiguration
        class SimpleScalingPolicyConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for AdjustmentType
          def AdjustmentType(value)
            dsl_attribute(:AdjustmentType, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for CoolDown
          def CoolDown(value)
            dsl_attribute(:CoolDown, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for ScalingAdjustment
          def ScalingAdjustment(value)
            dsl_attribute(:ScalingAdjustment, value)
          end
        end

        # Property Definition MetricDimension
        class MetricDimension < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [AutoScalingPolicy|JSONable] value
        #     The value to use for AutoScalingPolicy
        # @@overload AutoScalingPolicy(&block)
        #   Set :AutoScalingPolicy from block via instance eval of a new AutoScalingPolicy
        def AutoScalingPolicy(value = nil, **value_hash, &block)
          dsl_attribute(:AutoScalingPolicy, value, attr_class: AutoScalingPolicy, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for BidPrice
        def BidPrice(value)
          dsl_attribute(:BidPrice, value)
        end

        # @param [Array<Configuration>|JSONable>] values
        #   The List of values to use for Configurations
        def Configurations(values)
          dsl_list_attribute(:Configurations, values)
        end

        #  @param [Configuration|JSONable] value  Append value to the List
        #    The List of values to use for Configurations
        # @@overload Configuration(&block)
        # Append value to the List from block via instance eval of a new Configuration
        def Configuration(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Configurations, value, fn_if: fn_if, attr_class: Configuration, **value_hash, &block)
        end

        #   @param [EbsConfiguration|JSONable] value
        #     The value to use for EbsConfiguration
        # @@overload EbsConfiguration(&block)
        #   Set :EbsConfiguration from block via instance eval of a new EbsConfiguration
        def EbsConfiguration(value = nil, **value_hash, &block)
          dsl_attribute(:EbsConfiguration, value, attr_class: EbsConfiguration, **value_hash, &block)
        end

        #   @param [Integer|JSONable] value
        #     The value to use for InstanceCount
        def InstanceCount(value)
          dsl_attribute(:InstanceCount, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for InstanceRole
        def InstanceRole(value)
          dsl_attribute(:InstanceRole, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for InstanceType
        def InstanceType(value)
          dsl_attribute(:InstanceType, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for JobFlowId
        def JobFlowId(value)
          dsl_attribute(:JobFlowId, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Market
        def Market(value)
          dsl_attribute(:Market, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Name
        def Name(value)
          dsl_attribute(:Name, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::EMR::InstanceGroupConfig]
    def AWS_EMR_InstanceGroupConfig(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::EMR::InstanceGroupConfig, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
