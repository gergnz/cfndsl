# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module EMR
      # Resource Type definition for AWS::EMR::Cluster
      class Cluster < ResourceType
        # Property Definition JobFlowInstancesConfig
        class JobFlowInstancesConfig < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for AdditionalMasterSecurityGroups
          def AdditionalMasterSecurityGroups(values)
            dsl_list_attribute(:AdditionalMasterSecurityGroups, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for AdditionalMasterSecurityGroups
          def AdditionalMasterSecurityGroup(value, fn_if: nil)
            dsl_push_attribute(:AdditionalMasterSecurityGroups, value, fn_if: fn_if)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for AdditionalSlaveSecurityGroups
          def AdditionalSlaveSecurityGroups(values)
            dsl_list_attribute(:AdditionalSlaveSecurityGroups, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for AdditionalSlaveSecurityGroups
          def AdditionalSlaveSecurityGroup(value, fn_if: nil)
            dsl_push_attribute(:AdditionalSlaveSecurityGroups, value, fn_if: fn_if)
          end

          #   @param [InstanceFleetConfig|JSONable] value
          #     The value to use for CoreInstanceFleet
          # @@overload CoreInstanceFleet(&block)
          #   Set :CoreInstanceFleet from block via instance eval of a new InstanceFleetConfig
          def CoreInstanceFleet(value = nil, **value_hash, &block)
            dsl_attribute(:CoreInstanceFleet, value, attr_class: InstanceFleetConfig, **value_hash, &block)
          end

          #   @param [InstanceGroupConfig|JSONable] value
          #     The value to use for CoreInstanceGroup
          # @@overload CoreInstanceGroup(&block)
          #   Set :CoreInstanceGroup from block via instance eval of a new InstanceGroupConfig
          def CoreInstanceGroup(value = nil, **value_hash, &block)
            dsl_attribute(:CoreInstanceGroup, value, attr_class: InstanceGroupConfig, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for Ec2KeyName
          def Ec2KeyName(value)
            dsl_attribute(:Ec2KeyName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Ec2SubnetId
          def Ec2SubnetId(value)
            dsl_attribute(:Ec2SubnetId, value)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Ec2SubnetIds
          def Ec2SubnetIds(value, fn_if: nil)
            dsl_push_attribute(:Ec2SubnetIds, value, fn_if: fn_if)
          end

          #   @param [String|JSONable] value
          #     The value to use for EmrManagedMasterSecurityGroup
          def EmrManagedMasterSecurityGroup(value)
            dsl_attribute(:EmrManagedMasterSecurityGroup, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for EmrManagedSlaveSecurityGroup
          def EmrManagedSlaveSecurityGroup(value)
            dsl_attribute(:EmrManagedSlaveSecurityGroup, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for HadoopVersion
          def HadoopVersion(value)
            dsl_attribute(:HadoopVersion, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for KeepJobFlowAliveWhenNoSteps
          def KeepJobFlowAliveWhenNoSteps(value)
            dsl_attribute(:KeepJobFlowAliveWhenNoSteps, value)
          end

          #   @param [InstanceFleetConfig|JSONable] value
          #     The value to use for MasterInstanceFleet
          # @@overload MasterInstanceFleet(&block)
          #   Set :MasterInstanceFleet from block via instance eval of a new InstanceFleetConfig
          def MasterInstanceFleet(value = nil, **value_hash, &block)
            dsl_attribute(:MasterInstanceFleet, value, attr_class: InstanceFleetConfig, **value_hash, &block)
          end

          #   @param [InstanceGroupConfig|JSONable] value
          #     The value to use for MasterInstanceGroup
          # @@overload MasterInstanceGroup(&block)
          #   Set :MasterInstanceGroup from block via instance eval of a new InstanceGroupConfig
          def MasterInstanceGroup(value = nil, **value_hash, &block)
            dsl_attribute(:MasterInstanceGroup, value, attr_class: InstanceGroupConfig, **value_hash, &block)
          end

          #   @param [PlacementType|JSONable] value
          #     The value to use for Placement
          # @@overload Placement(&block)
          #   Set :Placement from block via instance eval of a new PlacementType
          def Placement(value = nil, **value_hash, &block)
            dsl_attribute(:Placement, value, attr_class: PlacementType, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for ServiceAccessSecurityGroup
          def ServiceAccessSecurityGroup(value)
            dsl_attribute(:ServiceAccessSecurityGroup, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for TerminationProtected
          def TerminationProtected(value)
            dsl_attribute(:TerminationProtected, value)
          end
        end

        # Property Definition KerberosAttributes
        class KerberosAttributes < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ADDomainJoinPassword
          def ADDomainJoinPassword(value)
            dsl_attribute(:ADDomainJoinPassword, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ADDomainJoinUser
          def ADDomainJoinUser(value)
            dsl_attribute(:ADDomainJoinUser, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for CrossRealmTrustPrincipalPassword
          def CrossRealmTrustPrincipalPassword(value)
            dsl_attribute(:CrossRealmTrustPrincipalPassword, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for KdcAdminPassword
          def KdcAdminPassword(value)
            dsl_attribute(:KdcAdminPassword, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Realm
          def Realm(value)
            dsl_attribute(:Realm, value)
          end
        end

        # Property Definition StepConfig
        class StepConfig < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ActionOnFailure
          def ActionOnFailure(value)
            dsl_attribute(:ActionOnFailure, value)
          end

          #   @param [HadoopJarStepConfig|JSONable] value
          #     The value to use for HadoopJarStep
          # @@overload HadoopJarStep(&block)
          #   Set :HadoopJarStep from block via instance eval of a new HadoopJarStepConfig
          def HadoopJarStep(value = nil, **value_hash, &block)
            dsl_attribute(:HadoopJarStep, value, attr_class: HadoopJarStepConfig, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end
        end

        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        # Property Definition BootstrapActionConfig
        class BootstrapActionConfig < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end

          #   @param [ScriptBootstrapActionConfig|JSONable] value
          #     The value to use for ScriptBootstrapAction
          # @@overload ScriptBootstrapAction(&block)
          #   Set :ScriptBootstrapAction from block via instance eval of a new ScriptBootstrapActionConfig
          def ScriptBootstrapAction(value = nil, **value_hash, &block)
            dsl_attribute(:ScriptBootstrapAction, value, attr_class: ScriptBootstrapActionConfig, **value_hash, &block)
          end
        end

        # Property Definition Application
        class Application < PropertyType
          #   @param [Object|JSONable] value
          #     The value to use for AdditionalInfo
          def AdditionalInfo(value)
            dsl_attribute(:AdditionalInfo, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Args
          def Args(values)
            dsl_list_attribute(:Args, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Args
          def Arg(value, fn_if: nil)
            dsl_push_attribute(:Args, value, fn_if: fn_if)
          end

          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Version
          def Version(value)
            dsl_attribute(:Version, value)
          end
        end

        # Property Definition Configuration
        class Configuration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Classification
          def Classification(value)
            dsl_attribute(:Classification, value)
          end

          #   @param [Object|JSONable] value
          #     The value to use for ConfigurationProperties
          def ConfigurationProperties(value)
            dsl_attribute(:ConfigurationProperties, value)
          end

          # @param [Array<Configuration>|JSONable>] values
          #   The List of values to use for Configurations
          def Configurations(values)
            dsl_list_attribute(:Configurations, values)
          end

          #  @param [Configuration|JSONable] value  Append value to the List
          #    The List of values to use for Configurations
          # @@overload Configuration(&block)
          # Append value to the List from block via instance eval of a new Configuration
          def Configuration(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Configurations, value, fn_if: fn_if, attr_class: Configuration, **value_hash, &block)
          end
        end

        # Property Definition PlacementType
        class PlacementType < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for AvailabilityZone
          def AvailabilityZone(value)
            dsl_attribute(:AvailabilityZone, value)
          end
        end

        # Property Definition InstanceGroupConfig
        class InstanceGroupConfig < PropertyType
          #   @param [AutoScalingPolicy|JSONable] value
          #     The value to use for AutoScalingPolicy
          # @@overload AutoScalingPolicy(&block)
          #   Set :AutoScalingPolicy from block via instance eval of a new AutoScalingPolicy
          def AutoScalingPolicy(value = nil, **value_hash, &block)
            dsl_attribute(:AutoScalingPolicy, value, attr_class: AutoScalingPolicy, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for BidPrice
          def BidPrice(value)
            dsl_attribute(:BidPrice, value)
          end

          # @param [Array<Configuration>|JSONable>] values
          #   The List of values to use for Configurations
          def Configurations(values)
            dsl_list_attribute(:Configurations, values)
          end

          #  @param [Configuration|JSONable] value  Append value to the List
          #    The List of values to use for Configurations
          # @@overload Configuration(&block)
          # Append value to the List from block via instance eval of a new Configuration
          def Configuration(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Configurations, value, fn_if: fn_if, attr_class: Configuration, **value_hash, &block)
          end

          #   @param [EbsConfiguration|JSONable] value
          #     The value to use for EbsConfiguration
          # @@overload EbsConfiguration(&block)
          #   Set :EbsConfiguration from block via instance eval of a new EbsConfiguration
          def EbsConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:EbsConfiguration, value, attr_class: EbsConfiguration, **value_hash, &block)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for InstanceCount
          def InstanceCount(value)
            dsl_attribute(:InstanceCount, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for InstanceType
          def InstanceType(value)
            dsl_attribute(:InstanceType, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Market
          def Market(value)
            dsl_attribute(:Market, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end
        end

        # Property Definition ScriptBootstrapActionConfig
        class ScriptBootstrapActionConfig < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Args
          def Args(values)
            dsl_list_attribute(:Args, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Args
          def Arg(value, fn_if: nil)
            dsl_push_attribute(:Args, value, fn_if: fn_if)
          end

          #   @param [String|JSONable] value
          #     The value to use for Path
          def Path(value)
            dsl_attribute(:Path, value)
          end
        end

        # Property Definition InstanceFleetConfig
        class InstanceFleetConfig < PropertyType
          # @param [Array<InstanceTypeConfig>|JSONable>] values
          #   The List of values to use for InstanceTypeConfigs
          def InstanceTypeConfigs(values)
            dsl_list_attribute(:InstanceTypeConfigs, values)
          end

          #  @param [InstanceTypeConfig|JSONable] value  Append value to the List
          #    The List of values to use for InstanceTypeConfigs
          # @@overload InstanceTypeConfig(&block)
          # Append value to the List from block via instance eval of a new InstanceTypeConfig
          def InstanceTypeConfig(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:InstanceTypeConfigs, value, fn_if: fn_if, attr_class: InstanceTypeConfig, **value_hash, &block)
          end

          #   @param [InstanceFleetProvisioningSpecifications|JSONable] value
          #     The value to use for LaunchSpecifications
          # @@overload LaunchSpecifications(&block)
          #   Set :LaunchSpecifications from block via instance eval of a new InstanceFleetProvisioningSpecifications
          def LaunchSpecifications(value = nil, **value_hash, &block)
            dsl_attribute(:LaunchSpecifications, value, attr_class: InstanceFleetProvisioningSpecifications, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for TargetOnDemandCapacity
          def TargetOnDemandCapacity(value)
            dsl_attribute(:TargetOnDemandCapacity, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for TargetSpotCapacity
          def TargetSpotCapacity(value)
            dsl_attribute(:TargetSpotCapacity, value)
          end
        end

        # Property Definition HadoopJarStepConfig
        class HadoopJarStepConfig < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Args
          def Args(values)
            dsl_list_attribute(:Args, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Args
          def Arg(value, fn_if: nil)
            dsl_push_attribute(:Args, value, fn_if: fn_if)
          end

          #   @param [String|JSONable] value
          #     The value to use for Jar
          def Jar(value)
            dsl_attribute(:Jar, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for MainClass
          def MainClass(value)
            dsl_attribute(:MainClass, value)
          end

          # @param [Array<KeyValue>|JSONable>] values
          #   The List of values to use for StepProperties
          def StepProperties(values)
            dsl_list_attribute(:StepProperties, values)
          end

          #  @param [KeyValue|JSONable] value  Append value to the List
          #    The List of values to use for StepProperties
          # @@overload StepProperty(&block)
          # Append value to the List from block via instance eval of a new KeyValue
          def StepProperty(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:StepProperties, value, fn_if: fn_if, attr_class: KeyValue, **value_hash, &block)
          end
        end

        # Property Definition EbsConfiguration
        class EbsConfiguration < PropertyType
          # @param [Array<EbsBlockDeviceConfig>|JSONable>] values
          #   The List of values to use for EbsBlockDeviceConfigs
          def EbsBlockDeviceConfigs(values)
            dsl_list_attribute(:EbsBlockDeviceConfigs, values)
          end

          #  @param [EbsBlockDeviceConfig|JSONable] value  Append value to the List
          #    The List of values to use for EbsBlockDeviceConfigs
          # @@overload EbsBlockDeviceConfig(&block)
          # Append value to the List from block via instance eval of a new EbsBlockDeviceConfig
          def EbsBlockDeviceConfig(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:EbsBlockDeviceConfigs, value, fn_if: fn_if, attr_class: EbsBlockDeviceConfig, **value_hash, &block)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for EbsOptimized
          def EbsOptimized(value)
            dsl_attribute(:EbsOptimized, value)
          end
        end

        # Property Definition KeyValue
        class KeyValue < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        # Property Definition InstanceFleetProvisioningSpecifications
        class InstanceFleetProvisioningSpecifications < PropertyType
          #   @param [SpotProvisioningSpecification|JSONable] value
          #     The value to use for SpotSpecification
          # @@overload SpotSpecification(&block)
          #   Set :SpotSpecification from block via instance eval of a new SpotProvisioningSpecification
          def SpotSpecification(value = nil, **value_hash, &block)
            dsl_attribute(:SpotSpecification, value, attr_class: SpotProvisioningSpecification, **value_hash, &block)
          end
        end

        # Property Definition AutoScalingPolicy
        class AutoScalingPolicy < PropertyType
          #   @param [ScalingConstraints|JSONable] value
          #     The value to use for Constraints
          # @@overload Constraints(&block)
          #   Set :Constraints from block via instance eval of a new ScalingConstraints
          def Constraints(value = nil, **value_hash, &block)
            dsl_attribute(:Constraints, value, attr_class: ScalingConstraints, **value_hash, &block)
          end

          # @param [Array<ScalingRule>|JSONable>] values
          #   The List of values to use for Rules
          def Rules(values)
            dsl_list_attribute(:Rules, values)
          end

          #  @param [ScalingRule|JSONable] value  Append value to the List
          #    The List of values to use for Rules
          # @@overload Rule(&block)
          # Append value to the List from block via instance eval of a new ScalingRule
          def Rule(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Rules, value, fn_if: fn_if, attr_class: ScalingRule, **value_hash, &block)
          end
        end

        # Property Definition InstanceTypeConfig
        class InstanceTypeConfig < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for BidPrice
          def BidPrice(value)
            dsl_attribute(:BidPrice, value)
          end

          #   @param [Number|JSONable] value
          #     The value to use for BidPriceAsPercentageOfOnDemandPrice
          def BidPriceAsPercentageOfOnDemandPrice(value)
            dsl_attribute(:BidPriceAsPercentageOfOnDemandPrice, value)
          end

          # @param [Array<Configuration>|JSONable>] values
          #   The List of values to use for Configurations
          def Configurations(values)
            dsl_list_attribute(:Configurations, values)
          end

          #  @param [Configuration|JSONable] value  Append value to the List
          #    The List of values to use for Configurations
          # @@overload Configuration(&block)
          # Append value to the List from block via instance eval of a new Configuration
          def Configuration(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Configurations, value, fn_if: fn_if, attr_class: Configuration, **value_hash, &block)
          end

          #   @param [EbsConfiguration|JSONable] value
          #     The value to use for EbsConfiguration
          # @@overload EbsConfiguration(&block)
          #   Set :EbsConfiguration from block via instance eval of a new EbsConfiguration
          def EbsConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:EbsConfiguration, value, attr_class: EbsConfiguration, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for InstanceType
          def InstanceType(value)
            dsl_attribute(:InstanceType, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for WeightedCapacity
          def WeightedCapacity(value)
            dsl_attribute(:WeightedCapacity, value)
          end
        end

        # Property Definition EbsBlockDeviceConfig
        class EbsBlockDeviceConfig < PropertyType
          #   @param [VolumeSpecification|JSONable] value
          #     The value to use for VolumeSpecification
          # @@overload VolumeSpecification(&block)
          #   Set :VolumeSpecification from block via instance eval of a new VolumeSpecification
          def VolumeSpecification(value = nil, **value_hash, &block)
            dsl_attribute(:VolumeSpecification, value, attr_class: VolumeSpecification, **value_hash, &block)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for VolumesPerInstance
          def VolumesPerInstance(value)
            dsl_attribute(:VolumesPerInstance, value)
          end
        end

        # Property Definition ScalingConstraints
        class ScalingConstraints < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for MaxCapacity
          def MaxCapacity(value)
            dsl_attribute(:MaxCapacity, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for MinCapacity
          def MinCapacity(value)
            dsl_attribute(:MinCapacity, value)
          end
        end

        # Property Definition ScalingRule
        class ScalingRule < PropertyType
          #   @param [ScalingAction|JSONable] value
          #     The value to use for Action
          # @@overload Action(&block)
          #   Set :Action from block via instance eval of a new ScalingAction
          def Action(value = nil, **value_hash, &block)
            dsl_attribute(:Action, value, attr_class: ScalingAction, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for Description
          def Description(value)
            dsl_attribute(:Description, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end

          #   @param [ScalingTrigger|JSONable] value
          #     The value to use for Trigger
          # @@overload Trigger(&block)
          #   Set :Trigger from block via instance eval of a new ScalingTrigger
          def Trigger(value = nil, **value_hash, &block)
            dsl_attribute(:Trigger, value, attr_class: ScalingTrigger, **value_hash, &block)
          end
        end

        # Property Definition SpotProvisioningSpecification
        class SpotProvisioningSpecification < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for BlockDurationMinutes
          def BlockDurationMinutes(value)
            dsl_attribute(:BlockDurationMinutes, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for TimeoutAction
          def TimeoutAction(value)
            dsl_attribute(:TimeoutAction, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for TimeoutDurationMinutes
          def TimeoutDurationMinutes(value)
            dsl_attribute(:TimeoutDurationMinutes, value)
          end
        end

        # Property Definition ScalingAction
        class ScalingAction < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Market
          def Market(value)
            dsl_attribute(:Market, value)
          end

          #   @param [SimpleScalingPolicyConfiguration|JSONable] value
          #     The value to use for SimpleScalingPolicyConfiguration
          # @@overload SimpleScalingPolicyConfiguration(&block)
          #   Set :SimpleScalingPolicyConfiguration from block via instance eval of a new SimpleScalingPolicyConfiguration
          def SimpleScalingPolicyConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:SimpleScalingPolicyConfiguration, value, attr_class: SimpleScalingPolicyConfiguration, **value_hash, &block)
          end
        end

        # Property Definition VolumeSpecification
        class VolumeSpecification < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for Iops
          def Iops(value)
            dsl_attribute(:Iops, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for SizeInGB
          def SizeInGB(value)
            dsl_attribute(:SizeInGB, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for VolumeType
          def VolumeType(value)
            dsl_attribute(:VolumeType, value)
          end
        end

        # Property Definition ScalingTrigger
        class ScalingTrigger < PropertyType
          #   @param [CloudWatchAlarmDefinition|JSONable] value
          #     The value to use for CloudWatchAlarmDefinition
          # @@overload CloudWatchAlarmDefinition(&block)
          #   Set :CloudWatchAlarmDefinition from block via instance eval of a new CloudWatchAlarmDefinition
          def CloudWatchAlarmDefinition(value = nil, **value_hash, &block)
            dsl_attribute(:CloudWatchAlarmDefinition, value, attr_class: CloudWatchAlarmDefinition, **value_hash, &block)
          end
        end

        # Property Definition SimpleScalingPolicyConfiguration
        class SimpleScalingPolicyConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for AdjustmentType
          def AdjustmentType(value)
            dsl_attribute(:AdjustmentType, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for CoolDown
          def CoolDown(value)
            dsl_attribute(:CoolDown, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for ScalingAdjustment
          def ScalingAdjustment(value)
            dsl_attribute(:ScalingAdjustment, value)
          end
        end

        # Property Definition CloudWatchAlarmDefinition
        class CloudWatchAlarmDefinition < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ComparisonOperator
          def ComparisonOperator(value)
            dsl_attribute(:ComparisonOperator, value)
          end

          # @param [Array<MetricDimension>|JSONable>] values
          #   The List of values to use for Dimensions
          def Dimensions(values)
            dsl_list_attribute(:Dimensions, values)
          end

          #  @param [MetricDimension|JSONable] value  Append value to the List
          #    The List of values to use for Dimensions
          # @@overload Dimension(&block)
          # Append value to the List from block via instance eval of a new MetricDimension
          def Dimension(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Dimensions, value, fn_if: fn_if, attr_class: MetricDimension, **value_hash, &block)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for EvaluationPeriods
          def EvaluationPeriods(value)
            dsl_attribute(:EvaluationPeriods, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for MetricName
          def MetricName(value)
            dsl_attribute(:MetricName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Namespace
          def Namespace(value)
            dsl_attribute(:Namespace, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for Period
          def Period(value)
            dsl_attribute(:Period, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Statistic
          def Statistic(value)
            dsl_attribute(:Statistic, value)
          end

          #   @param [Number|JSONable] value
          #     The value to use for Threshold
          def Threshold(value)
            dsl_attribute(:Threshold, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Unit
          def Unit(value)
            dsl_attribute(:Unit, value)
          end
        end

        # Property Definition MetricDimension
        class MetricDimension < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for MasterPublicDNS
        def MasterPublicDNS(value)
          dsl_attribute(:MasterPublicDNS, value)
        end

        #   @param [Object|JSONable] value
        #     The value to use for AdditionalInfo
        def AdditionalInfo(value)
          dsl_attribute(:AdditionalInfo, value)
        end

        # @param [Array<Application>|JSONable>] values
        #   The List of values to use for Applications
        def Applications(values)
          dsl_list_attribute(:Applications, values)
        end

        #  @param [Application|JSONable] value  Append value to the List
        #    The List of values to use for Applications
        # @@overload Application(&block)
        # Append value to the List from block via instance eval of a new Application
        def Application(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Applications, value, fn_if: fn_if, attr_class: Application, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for AutoScalingRole
        def AutoScalingRole(value)
          dsl_attribute(:AutoScalingRole, value)
        end

        # @param [Array<BootstrapActionConfig>|JSONable>] values
        #   The List of values to use for BootstrapActions
        def BootstrapActions(values)
          dsl_list_attribute(:BootstrapActions, values)
        end

        #  @param [BootstrapActionConfig|JSONable] value  Append value to the List
        #    The List of values to use for BootstrapActions
        # @@overload BootstrapAction(&block)
        # Append value to the List from block via instance eval of a new BootstrapActionConfig
        def BootstrapAction(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:BootstrapActions, value, fn_if: fn_if, attr_class: BootstrapActionConfig, **value_hash, &block)
        end

        # @param [Array<Configuration>|JSONable>] values
        #   The List of values to use for Configurations
        def Configurations(values)
          dsl_list_attribute(:Configurations, values)
        end

        #  @param [Configuration|JSONable] value  Append value to the List
        #    The List of values to use for Configurations
        # @@overload Configuration(&block)
        # Append value to the List from block via instance eval of a new Configuration
        def Configuration(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Configurations, value, fn_if: fn_if, attr_class: Configuration, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for CustomAmiId
        def CustomAmiId(value)
          dsl_attribute(:CustomAmiId, value)
        end

        #   @param [Integer|JSONable] value
        #     The value to use for EbsRootVolumeSize
        def EbsRootVolumeSize(value)
          dsl_attribute(:EbsRootVolumeSize, value)
        end

        #   @param [JobFlowInstancesConfig|JSONable] value
        #     The value to use for Instances
        # @@overload Instances(&block)
        #   Set :Instances from block via instance eval of a new JobFlowInstancesConfig
        def Instances(value = nil, **value_hash, &block)
          dsl_attribute(:Instances, value, attr_class: JobFlowInstancesConfig, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for JobFlowRole
        def JobFlowRole(value)
          dsl_attribute(:JobFlowRole, value)
        end

        #   @param [KerberosAttributes|JSONable] value
        #     The value to use for KerberosAttributes
        # @@overload KerberosAttributes(&block)
        #   Set :KerberosAttributes from block via instance eval of a new KerberosAttributes
        def KerberosAttributes(value = nil, **value_hash, &block)
          dsl_attribute(:KerberosAttributes, value, attr_class: KerberosAttributes, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for LogUri
        def LogUri(value)
          dsl_attribute(:LogUri, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Name
        def Name(value)
          dsl_attribute(:Name, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for ReleaseLabel
        def ReleaseLabel(value)
          dsl_attribute(:ReleaseLabel, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for ScaleDownBehavior
        def ScaleDownBehavior(value)
          dsl_attribute(:ScaleDownBehavior, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for SecurityConfiguration
        def SecurityConfiguration(value)
          dsl_attribute(:SecurityConfiguration, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for ServiceRole
        def ServiceRole(value)
          dsl_attribute(:ServiceRole, value)
        end

        # @param [Array<StepConfig>|JSONable>] values
        #   The List of values to use for Steps
        def Steps(values)
          dsl_list_attribute(:Steps, values)
        end

        #  @param [StepConfig|JSONable] value  Append value to the List
        #    The List of values to use for Steps
        # @@overload Step(&block)
        # Append value to the List from block via instance eval of a new StepConfig
        def Step(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Steps, value, fn_if: fn_if, attr_class: StepConfig, **value_hash, &block)
        end

        # @param [Array<Tag>|JSONable>] values
        #   The List of values to use for Tags
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    The List of values to use for Tags
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end

        #   @param [Boolean|JSONable] value
        #     The value to use for VisibleToAllUsers
        def VisibleToAllUsers(value)
          dsl_attribute(:VisibleToAllUsers, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::EMR::Cluster]
    def AWS_EMR_Cluster(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::EMR::Cluster, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
