# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module EMR
      # Resource Type definition for AWS::EMR::InstanceFleetConfig
      class InstanceFleetConfig < ResourceType
        # Property Definition InstanceTypeConfig
        class InstanceTypeConfig < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for BidPrice
          def BidPrice(value)
            dsl_attribute(:BidPrice, value)
          end

          #   @param [Number|JSONable] value
          #     The value to use for BidPriceAsPercentageOfOnDemandPrice
          def BidPriceAsPercentageOfOnDemandPrice(value)
            dsl_attribute(:BidPriceAsPercentageOfOnDemandPrice, value)
          end

          # @param [Array<Configuration>|JSONable>] values
          #   The List of values to use for Configurations
          def Configurations(values)
            dsl_list_attribute(:Configurations, values)
          end

          #  @param [Configuration|JSONable] value  Append value to the List
          #    The List of values to use for Configurations
          # @@overload Configuration(&block)
          # Append value to the List from block via instance eval of a new Configuration
          def Configuration(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Configurations, value, fn_if: fn_if, attr_class: Configuration, **value_hash, &block)
          end

          #   @param [EbsConfiguration|JSONable] value
          #     The value to use for EbsConfiguration
          # @@overload EbsConfiguration(&block)
          #   Set :EbsConfiguration from block via instance eval of a new EbsConfiguration
          def EbsConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:EbsConfiguration, value, attr_class: EbsConfiguration, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for InstanceType
          def InstanceType(value)
            dsl_attribute(:InstanceType, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for WeightedCapacity
          def WeightedCapacity(value)
            dsl_attribute(:WeightedCapacity, value)
          end
        end

        # Property Definition InstanceFleetProvisioningSpecifications
        class InstanceFleetProvisioningSpecifications < PropertyType
          #   @param [SpotProvisioningSpecification|JSONable] value
          #     The value to use for SpotSpecification
          # @@overload SpotSpecification(&block)
          #   Set :SpotSpecification from block via instance eval of a new SpotProvisioningSpecification
          def SpotSpecification(value = nil, **value_hash, &block)
            dsl_attribute(:SpotSpecification, value, attr_class: SpotProvisioningSpecification, **value_hash, &block)
          end
        end

        # Property Definition Configuration
        class Configuration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Classification
          def Classification(value)
            dsl_attribute(:Classification, value)
          end

          #   @param [Object|JSONable] value
          #     The value to use for ConfigurationProperties
          def ConfigurationProperties(value)
            dsl_attribute(:ConfigurationProperties, value)
          end

          # @param [Array<Configuration>|JSONable>] values
          #   The List of values to use for Configurations
          def Configurations(values)
            dsl_list_attribute(:Configurations, values)
          end

          #  @param [Configuration|JSONable] value  Append value to the List
          #    The List of values to use for Configurations
          # @@overload Configuration(&block)
          # Append value to the List from block via instance eval of a new Configuration
          def Configuration(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Configurations, value, fn_if: fn_if, attr_class: Configuration, **value_hash, &block)
          end
        end

        # Property Definition EbsConfiguration
        class EbsConfiguration < PropertyType
          # @param [Array<EbsBlockDeviceConfig>|JSONable>] values
          #   The List of values to use for EbsBlockDeviceConfigs
          def EbsBlockDeviceConfigs(values)
            dsl_list_attribute(:EbsBlockDeviceConfigs, values)
          end

          #  @param [EbsBlockDeviceConfig|JSONable] value  Append value to the List
          #    The List of values to use for EbsBlockDeviceConfigs
          # @@overload EbsBlockDeviceConfig(&block)
          # Append value to the List from block via instance eval of a new EbsBlockDeviceConfig
          def EbsBlockDeviceConfig(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:EbsBlockDeviceConfigs, value, fn_if: fn_if, attr_class: EbsBlockDeviceConfig, **value_hash, &block)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for EbsOptimized
          def EbsOptimized(value)
            dsl_attribute(:EbsOptimized, value)
          end
        end

        # Property Definition SpotProvisioningSpecification
        class SpotProvisioningSpecification < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for BlockDurationMinutes
          def BlockDurationMinutes(value)
            dsl_attribute(:BlockDurationMinutes, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for TimeoutAction
          def TimeoutAction(value)
            dsl_attribute(:TimeoutAction, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for TimeoutDurationMinutes
          def TimeoutDurationMinutes(value)
            dsl_attribute(:TimeoutDurationMinutes, value)
          end
        end

        # Property Definition EbsBlockDeviceConfig
        class EbsBlockDeviceConfig < PropertyType
          #   @param [VolumeSpecification|JSONable] value
          #     The value to use for VolumeSpecification
          # @@overload VolumeSpecification(&block)
          #   Set :VolumeSpecification from block via instance eval of a new VolumeSpecification
          def VolumeSpecification(value = nil, **value_hash, &block)
            dsl_attribute(:VolumeSpecification, value, attr_class: VolumeSpecification, **value_hash, &block)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for VolumesPerInstance
          def VolumesPerInstance(value)
            dsl_attribute(:VolumesPerInstance, value)
          end
        end

        # Property Definition VolumeSpecification
        class VolumeSpecification < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for Iops
          def Iops(value)
            dsl_attribute(:Iops, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for SizeInGB
          def SizeInGB(value)
            dsl_attribute(:SizeInGB, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for VolumeType
          def VolumeType(value)
            dsl_attribute(:VolumeType, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for ClusterId
        def ClusterId(value)
          dsl_attribute(:ClusterId, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for InstanceFleetType
        def InstanceFleetType(value)
          dsl_attribute(:InstanceFleetType, value)
        end

        # @param [Array<InstanceTypeConfig>|JSONable>] values
        #   The List of values to use for InstanceTypeConfigs
        def InstanceTypeConfigs(values)
          dsl_list_attribute(:InstanceTypeConfigs, values)
        end

        #  @param [InstanceTypeConfig|JSONable] value  Append value to the List
        #    The List of values to use for InstanceTypeConfigs
        # @@overload InstanceTypeConfig(&block)
        # Append value to the List from block via instance eval of a new InstanceTypeConfig
        def InstanceTypeConfig(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:InstanceTypeConfigs, value, fn_if: fn_if, attr_class: InstanceTypeConfig, **value_hash, &block)
        end

        #   @param [InstanceFleetProvisioningSpecifications|JSONable] value
        #     The value to use for LaunchSpecifications
        # @@overload LaunchSpecifications(&block)
        #   Set :LaunchSpecifications from block via instance eval of a new InstanceFleetProvisioningSpecifications
        def LaunchSpecifications(value = nil, **value_hash, &block)
          dsl_attribute(:LaunchSpecifications, value, attr_class: InstanceFleetProvisioningSpecifications, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Name
        def Name(value)
          dsl_attribute(:Name, value)
        end

        #   @param [Integer|JSONable] value
        #     The value to use for TargetOnDemandCapacity
        def TargetOnDemandCapacity(value)
          dsl_attribute(:TargetOnDemandCapacity, value)
        end

        #   @param [Integer|JSONable] value
        #     The value to use for TargetSpotCapacity
        def TargetSpotCapacity(value)
          dsl_attribute(:TargetSpotCapacity, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::EMR::InstanceFleetConfig]
    def AWS_EMR_InstanceFleetConfig(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::EMR::InstanceFleetConfig, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
