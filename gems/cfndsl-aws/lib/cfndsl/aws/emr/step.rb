# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module EMR
      # Resource Type definition for AWS::EMR::Step
      class Step < ResourceType
        # Property Definition HadoopJarStepConfig
        class HadoopJarStepConfig < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Args
          def Args(values)
            dsl_list_attribute(:Args, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Args
          def Arg(value, fn_if: nil)
            dsl_push_attribute(:Args, value, fn_if: fn_if)
          end

          #   @param [String|JSONable] value
          #     The value to use for Jar
          def Jar(value)
            dsl_attribute(:Jar, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for MainClass
          def MainClass(value)
            dsl_attribute(:MainClass, value)
          end

          # @param [Array<KeyValue>|JSONable>] values
          #   The List of values to use for StepProperties
          def StepProperties(values)
            dsl_list_attribute(:StepProperties, values)
          end

          #  @param [KeyValue|JSONable] value  Append value to the List
          #    The List of values to use for StepProperties
          # @@overload StepProperty(&block)
          # Append value to the List from block via instance eval of a new KeyValue
          def StepProperty(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:StepProperties, value, fn_if: fn_if, attr_class: KeyValue, **value_hash, &block)
          end
        end

        # Property Definition KeyValue
        class KeyValue < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for ActionOnFailure
        def ActionOnFailure(value)
          dsl_attribute(:ActionOnFailure, value)
        end

        #   @param [HadoopJarStepConfig|JSONable] value
        #     The value to use for HadoopJarStep
        # @@overload HadoopJarStep(&block)
        #   Set :HadoopJarStep from block via instance eval of a new HadoopJarStepConfig
        def HadoopJarStep(value = nil, **value_hash, &block)
          dsl_attribute(:HadoopJarStep, value, attr_class: HadoopJarStepConfig, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for JobFlowId
        def JobFlowId(value)
          dsl_attribute(:JobFlowId, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Name
        def Name(value)
          dsl_attribute(:Name, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::EMR::Step]
    def AWS_EMR_Step(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::EMR::Step, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
