# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module IoTSiteWise
      # Resource schema for AWS::IoTSiteWise::Asset
      # @see https://github.com/aws-cloudformation/aws-cloudformation-resource-providers-IoTSiteWise.git
      class Asset < ResourceType
        # The asset property's definition, alias, and notification state.
        class AssetProperty < PropertyType
          #   @param [String|JSONable] value
          #     Customer provided ID for property.
          def LogicalId(value)
            dsl_attribute(:LogicalId, value)
          end

          #   @param [String|JSONable] value
          #     The property alias that identifies the property.
          def Alias(value)
            dsl_attribute(:Alias, value)
          end

          #   @param [String|JSONable] value
          #     The MQTT notification state (ENABLED or DISABLED) for this asset property.
          def NotificationState(value)
            dsl_attribute(:NotificationState, value)
          end
        end

        # A hierarchy specifies allowed parent/child asset relationships.
        class AssetHierarchy < PropertyType
          #   @param [String|JSONable] value
          #     The LogicalID of a hierarchy in the parent asset's model.
          def LogicalId(value)
            dsl_attribute(:LogicalId, value)
          end

          #   @param [String|JSONable] value
          #     The ID of the child asset to be associated.
          def ChildAssetId(value)
            dsl_attribute(:ChildAssetId, value)
          end
        end

        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        #   @param [String|JSONable] value
        #     The ID of the asset
        def AssetId(value)
          dsl_attribute(:AssetId, value)
        end

        #   @param [String|JSONable] value
        #     The ID of the asset model from which to create the asset.
        def AssetModelId(value)
          dsl_attribute(:AssetModelId, value)
        end

        #   @param [String|JSONable] value
        #     The ARN of the asset
        def AssetArn(value)
          dsl_attribute(:AssetArn, value)
        end

        #   @param [String|JSONable] value
        #     A unique, friendly name for the asset.
        def AssetName(value)
          dsl_attribute(:AssetName, value)
        end

        # @param [Array<AssetProperty>|JSONable>] values
        #   The List of values to use for AssetProperties
        def AssetProperties(values)
          dsl_list_attribute(:AssetProperties, values)
        end

        #  @param [AssetProperty|JSONable] value  Append value to the List
        #    The List of values to use for AssetProperties
        # @@overload AssetProperty(&block)
        # Append value to the List from block via instance eval of a new AssetProperty
        def AssetProperty(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:AssetProperties, value, fn_if: fn_if, attr_class: AssetProperty, **value_hash, &block)
        end

        # @param [Array<AssetHierarchy>|JSONable>] values
        #   The List of values to use for AssetHierarchies
        def AssetHierarchies(values)
          dsl_list_attribute(:AssetHierarchies, values)
        end

        #  @param [AssetHierarchy|JSONable] value  Append value to the List
        #    The List of values to use for AssetHierarchies
        # @@overload AssetHierarchy(&block)
        # Append value to the List from block via instance eval of a new AssetHierarchy
        def AssetHierarchy(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:AssetHierarchies, value, fn_if: fn_if, attr_class: AssetHierarchy, **value_hash, &block)
        end

        # @param [Array<Tag>|JSONable>] values
        #   A list of key-value pairs that contain metadata for the asset.
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    A list of key-value pairs that contain metadata for the asset.
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::IoTSiteWise::Asset]
    def AWS_IoTSiteWise_Asset(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::IoTSiteWise::Asset, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
