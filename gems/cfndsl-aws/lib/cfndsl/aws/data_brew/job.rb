# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module DataBrew
      # Resource schema for AWS::DataBrew::Job.
      # @see https://github.com/aws-cloudformation/aws-cloudformation-resource-providers-databrew.git
      class Job < ResourceType
        # S3 Output location
        class S3Location < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Bucket
          def Bucket(value)
            dsl_attribute(:Bucket, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end
        end

        # Property Definition Output
        class Output < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for CompressionFormat
          def CompressionFormat(value)
            dsl_attribute(:CompressionFormat, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Format
          def Format(value)
            dsl_attribute(:Format, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for PartitionColumns
          def PartitionColumns(values)
            dsl_list_attribute(:PartitionColumns, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for PartitionColumns
          def PartitionColumn(value, fn_if: nil)
            dsl_push_attribute(:PartitionColumns, value, fn_if: fn_if)
          end

          #   @param [S3Location|JSONable] value
          #     The value to use for Location
          # @@overload Location(&block)
          #   Set :Location from block via instance eval of a new S3Location
          def Location(value = nil, **value_hash, &block)
            dsl_attribute(:Location, value, attr_class: S3Location, **value_hash, &block)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for Overwrite
          def Overwrite(value)
            dsl_attribute(:Overwrite, value)
          end
        end

        # A key-value pair to associate with a resource.
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        #   @param [String|JSONable] value
        #     Dataset name
        def DatasetName(value)
          dsl_attribute(:DatasetName, value)
        end

        #   @param [String|JSONable] value
        #     Encryption Key Arn
        def EncryptionKeyArn(value)
          dsl_attribute(:EncryptionKeyArn, value)
        end

        #   @param [String|JSONable] value
        #     Encryption mode
        def EncryptionMode(value)
          dsl_attribute(:EncryptionMode, value)
        end

        #   @param [String|JSONable] value
        #     Job name
        def Name(value)
          dsl_attribute(:Name, value)
        end

        #   @param [String|JSONable] value
        #     Job type
        def Type(value)
          dsl_attribute(:Type, value)
        end

        #   @param [String|JSONable] value
        #     Log subscription
        def LogSubscription(value)
          dsl_attribute(:LogSubscription, value)
        end

        #   @param [Integer|JSONable] value
        #     Max capacity
        def MaxCapacity(value)
          dsl_attribute(:MaxCapacity, value)
        end

        #   @param [Integer|JSONable] value
        #     Max retries
        def MaxRetries(value)
          dsl_attribute(:MaxRetries, value)
        end

        # @param [Array<Output>|JSONable>] values
        #   The List of values to use for Outputs
        def Outputs(values)
          dsl_list_attribute(:Outputs, values)
        end

        #  @param [Output|JSONable] value  Append value to the List
        #    The List of values to use for Outputs
        # @@overload Output(&block)
        # Append value to the List from block via instance eval of a new Output
        def Output(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Outputs, value, fn_if: fn_if, attr_class: Output, **value_hash, &block)
        end

        #   @param [Object|JSONable] value
        #     Output location
        def OutputLocation(value)
          dsl_attribute(:OutputLocation, value)
        end

        #   @param [String|JSONable] value
        #     Project name
        def ProjectName(value)
          dsl_attribute(:ProjectName, value)
        end

        #   @param [Object|JSONable] value
        #     The value to use for Recipe
        def Recipe(value)
          dsl_attribute(:Recipe, value)
        end

        #   @param [String|JSONable] value
        #     Role arn
        def RoleArn(value)
          dsl_attribute(:RoleArn, value)
        end

        # @param [Array<Tag>|JSONable>] values
        #   The List of values to use for Tags
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    The List of values to use for Tags
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end

        #   @param [Integer|JSONable] value
        #     Timeout
        def Timeout(value)
          dsl_attribute(:Timeout, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::DataBrew::Job]
    def AWS_DataBrew_Job(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::DataBrew::Job, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
