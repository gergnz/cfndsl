# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module DataBrew
      # Resource schema for AWS::DataBrew::Dataset.
      # @see https://github.com/aws-cloudformation/aws-cloudformation-resource-providers-databrew.git
      class Dataset < ResourceType
        # Json options
        class JsonOptions < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for MultiLine
          def MultiLine(value)
            dsl_attribute(:MultiLine, value)
          end
        end

        # Property Definition ExcelOptions
        class ExcelOptions < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for SheetNames
          def SheetNames(values)
            dsl_list_attribute(:SheetNames, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for SheetNames
          def SheetName(value, fn_if: nil)
            dsl_push_attribute(:SheetNames, value, fn_if: fn_if)
          end

          # @param [Array<Integer>|JSONable>] values
          #   The List of values to use for SheetIndexes
          def SheetIndexes(values)
            dsl_list_attribute(:SheetIndexes, values)
          end

          #  @param [Integer|JSONable] value  Append value to the List
          #    The List of values to use for SheetIndexes
          def SheetIndexe(value, fn_if: nil)
            dsl_push_attribute(:SheetIndexes, value, fn_if: fn_if)
          end
        end

        # Input location
        class S3Location < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Bucket
          def Bucket(value)
            dsl_attribute(:Bucket, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end
        end

        # Property Definition DataCatalogInputDefinition
        class DataCatalogInputDefinition < PropertyType
          #   @param [String|JSONable] value
          #     Catalog id
          def CatalogId(value)
            dsl_attribute(:CatalogId, value)
          end

          #   @param [String|JSONable] value
          #     Database name
          def DatabaseName(value)
            dsl_attribute(:DatabaseName, value)
          end

          #   @param [String|JSONable] value
          #     Table name
          def TableName(value)
            dsl_attribute(:TableName, value)
          end

          #   @param [S3Location|JSONable] value
          #     The value to use for TempDirectory
          # @@overload TempDirectory(&block)
          #   Set :TempDirectory from block via instance eval of a new S3Location
          def TempDirectory(value = nil, **value_hash, &block)
            dsl_attribute(:TempDirectory, value, attr_class: S3Location, **value_hash, &block)
          end
        end

        # A key-value pair to associate with a resource.
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        #   @param [String|JSONable] value
        #     Dataset name
        def Name(value)
          dsl_attribute(:Name, value)
        end

        #   @param [Object|JSONable] value
        #     Format options for dataset
        def FormatOptions(value)
          dsl_attribute(:FormatOptions, value)
        end

        #   @param [Object|JSONable] value
        #     Input
        def Input(value)
          dsl_attribute(:Input, value)
        end

        # @param [Array<Tag>|JSONable>] values
        #   The List of values to use for Tags
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    The List of values to use for Tags
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::DataBrew::Dataset]
    def AWS_DataBrew_Dataset(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::DataBrew::Dataset, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
