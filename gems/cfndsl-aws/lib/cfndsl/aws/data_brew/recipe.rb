# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module DataBrew
      # Resource schema for AWS::DataBrew::Recipe.
      # @see https://github.com/aws-cloudformation/aws-cloudformation-resource-providers-databrew.git
      class Recipe < ResourceType
        # Secondary input
        class SecondaryInput < PropertyType
          #   @param [S3Location|JSONable] value
          #     The value to use for S3InputDefinition
          # @@overload S3InputDefinition(&block)
          #   Set :S3InputDefinition from block via instance eval of a new S3Location
          def S3InputDefinition(value = nil, **value_hash, &block)
            dsl_attribute(:S3InputDefinition, value, attr_class: S3Location, **value_hash, &block)
          end

          #   @param [DataCatalogInputDefinition|JSONable] value
          #     The value to use for DataCatalogInputDefinition
          # @@overload DataCatalogInputDefinition(&block)
          #   Set :DataCatalogInputDefinition from block via instance eval of a new DataCatalogInputDefinition
          def DataCatalogInputDefinition(value = nil, **value_hash, &block)
            dsl_attribute(:DataCatalogInputDefinition, value, attr_class: DataCatalogInputDefinition, **value_hash, &block)
          end
        end

        # Input location
        class S3Location < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Bucket
          def Bucket(value)
            dsl_attribute(:Bucket, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end
        end

        # Property Definition DataCatalogInputDefinition
        class DataCatalogInputDefinition < PropertyType
          #   @param [String|JSONable] value
          #     Catalog id
          def CatalogId(value)
            dsl_attribute(:CatalogId, value)
          end

          #   @param [String|JSONable] value
          #     Database name
          def DatabaseName(value)
            dsl_attribute(:DatabaseName, value)
          end

          #   @param [String|JSONable] value
          #     Table name
          def TableName(value)
            dsl_attribute(:TableName, value)
          end

          #   @param [S3Location|JSONable] value
          #     The value to use for TempDirectory
          # @@overload TempDirectory(&block)
          #   Set :TempDirectory from block via instance eval of a new S3Location
          def TempDirectory(value = nil, **value_hash, &block)
            dsl_attribute(:TempDirectory, value, attr_class: S3Location, **value_hash, &block)
          end
        end

        # Property Definition RecipeStep
        class RecipeStep < PropertyType
          #   @param [Action|JSONable] value
          #     The value to use for Action
          # @@overload Action(&block)
          #   Set :Action from block via instance eval of a new Action
          def Action(value = nil, **value_hash, &block)
            dsl_attribute(:Action, value, attr_class: Action, **value_hash, &block)
          end

          # @param [Array<ConditionExpression>|JSONable>] values
          #   Condition expressions applied to the step action
          def ConditionExpressions(values)
            dsl_list_attribute(:ConditionExpressions, values)
          end

          #  @param [ConditionExpression|JSONable] value  Append value to the List
          #    Condition expressions applied to the step action
          # @@overload ConditionExpression(&block)
          # Append value to the List from block via instance eval of a new ConditionExpression
          def ConditionExpression(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:ConditionExpressions, value, fn_if: fn_if, attr_class: ConditionExpression, **value_hash, &block)
          end
        end

        # Property Definition Action
        class Action < PropertyType
          #   @param [String|JSONable] value
          #     Step action operation
          def Operation(value)
            dsl_attribute(:Operation, value)
          end

          #   @param [|JSONable] value
          #     The value to use for Parameters
          def Parameters(value)
            dsl_attribute(:Parameters, value)
          end
        end

        # Condition expressions applied to the step action
        class ConditionExpression < PropertyType
          #   @param [String|JSONable] value
          #     Input condition to be applied to the target column
          def Condition(value)
            dsl_attribute(:Condition, value)
          end

          #   @param [String|JSONable] value
          #     Value of the condition
          def Value(value)
            dsl_attribute(:Value, value)
          end

          #   @param [String|JSONable] value
          #     Name of the target column
          def TargetColumn(value)
            dsl_attribute(:TargetColumn, value)
          end
        end

        # A key-value pair to associate with a resource.
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        #   @param [String|JSONable] value
        #     Description of the recipe
        def Description(value)
          dsl_attribute(:Description, value)
        end

        #   @param [String|JSONable] value
        #     Recipe name
        def Name(value)
          dsl_attribute(:Name, value)
        end

        # @param [Array<RecipeStep>|JSONable>] values
        #   The List of values to use for Steps
        def Steps(values)
          dsl_list_attribute(:Steps, values)
        end

        #  @param [RecipeStep|JSONable] value  Append value to the List
        #    The List of values to use for Steps
        # @@overload Step(&block)
        # Append value to the List from block via instance eval of a new RecipeStep
        def Step(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Steps, value, fn_if: fn_if, attr_class: RecipeStep, **value_hash, &block)
        end

        # @param [Array<Tag>|JSONable>] values
        #   The List of values to use for Tags
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    The List of values to use for Tags
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::DataBrew::Recipe]
    def AWS_DataBrew_Recipe(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::DataBrew::Recipe, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
