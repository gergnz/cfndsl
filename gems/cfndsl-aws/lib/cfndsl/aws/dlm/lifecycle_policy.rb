# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module DLM
      # Resource Type definition for AWS::DLM::LifecyclePolicy
      class LifecyclePolicy < ResourceType
        # Property Definition Parameters
        class Parameters < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for ExcludeBootVolume
          def ExcludeBootVolume(value)
            dsl_attribute(:ExcludeBootVolume, value)
          end
        end

        # Property Definition CrossRegionCopyRule
        class CrossRegionCopyRule < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for TargetRegion
          def TargetRegion(value)
            dsl_attribute(:TargetRegion, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for CmkArn
          def CmkArn(value)
            dsl_attribute(:CmkArn, value)
          end

          #   @param [CrossRegionCopyRetainRule|JSONable] value
          #     The value to use for RetainRule
          # @@overload RetainRule(&block)
          #   Set :RetainRule from block via instance eval of a new CrossRegionCopyRetainRule
          def RetainRule(value = nil, **value_hash, &block)
            dsl_attribute(:RetainRule, value, attr_class: CrossRegionCopyRetainRule, **value_hash, &block)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for Encrypted
          def Encrypted(value)
            dsl_attribute(:Encrypted, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for CopyTags
          def CopyTags(value)
            dsl_attribute(:CopyTags, value)
          end
        end

        # Property Definition CreateRule
        class CreateRule < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for IntervalUnit
          def IntervalUnit(value)
            dsl_attribute(:IntervalUnit, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for CronExpression
          def CronExpression(value)
            dsl_attribute(:CronExpression, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Times
          def Times(values)
            dsl_list_attribute(:Times, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Times
          def Time(value, fn_if: nil)
            dsl_push_attribute(:Times, value, fn_if: fn_if)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for Interval
          def Interval(value)
            dsl_attribute(:Interval, value)
          end
        end

        # Property Definition Schedule
        class Schedule < PropertyType
          # @param [Array<Tag>|JSONable>] values
          #   The List of values to use for TagsToAdd
          def TagsToAdds(values)
            dsl_list_attribute(:TagsToAdd, values)
          end

          #  @param [Tag|JSONable] value  Append value to the List
          #    The List of values to use for TagsToAdd
          # @@overload TagsToAdd(&block)
          # Append value to the List from block via instance eval of a new Tag
          def TagsToAdd(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:TagsToAdd, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
          end

          #   @param [CreateRule|JSONable] value
          #     The value to use for CreateRule
          # @@overload CreateRule(&block)
          #   Set :CreateRule from block via instance eval of a new CreateRule
          def CreateRule(value = nil, **value_hash, &block)
            dsl_attribute(:CreateRule, value, attr_class: CreateRule, **value_hash, &block)
          end

          # @param [Array<Tag>|JSONable>] values
          #   The List of values to use for VariableTags
          def VariableTags(values)
            dsl_list_attribute(:VariableTags, values)
          end

          #  @param [Tag|JSONable] value  Append value to the List
          #    The List of values to use for VariableTags
          # @@overload VariableTag(&block)
          # Append value to the List from block via instance eval of a new Tag
          def VariableTag(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:VariableTags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
          end

          #   @param [FastRestoreRule|JSONable] value
          #     The value to use for FastRestoreRule
          # @@overload FastRestoreRule(&block)
          #   Set :FastRestoreRule from block via instance eval of a new FastRestoreRule
          def FastRestoreRule(value = nil, **value_hash, &block)
            dsl_attribute(:FastRestoreRule, value, attr_class: FastRestoreRule, **value_hash, &block)
          end

          #   @param [RetainRule|JSONable] value
          #     The value to use for RetainRule
          # @@overload RetainRule(&block)
          #   Set :RetainRule from block via instance eval of a new RetainRule
          def RetainRule(value = nil, **value_hash, &block)
            dsl_attribute(:RetainRule, value, attr_class: RetainRule, **value_hash, &block)
          end

          # @param [Array<CrossRegionCopyRule>|JSONable>] values
          #   The List of values to use for CrossRegionCopyRules
          def CrossRegionCopyRules(values)
            dsl_list_attribute(:CrossRegionCopyRules, values)
          end

          #  @param [CrossRegionCopyRule|JSONable] value  Append value to the List
          #    The List of values to use for CrossRegionCopyRules
          # @@overload CrossRegionCopyRule(&block)
          # Append value to the List from block via instance eval of a new CrossRegionCopyRule
          def CrossRegionCopyRule(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:CrossRegionCopyRules, value, fn_if: fn_if, attr_class: CrossRegionCopyRule, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for CopyTags
          def CopyTags(value)
            dsl_attribute(:CopyTags, value)
          end
        end

        # Property Definition CrossRegionCopyRetainRule
        class CrossRegionCopyRetainRule < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for IntervalUnit
          def IntervalUnit(value)
            dsl_attribute(:IntervalUnit, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for Interval
          def Interval(value)
            dsl_attribute(:Interval, value)
          end
        end

        # Property Definition FastRestoreRule
        class FastRestoreRule < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for IntervalUnit
          def IntervalUnit(value)
            dsl_attribute(:IntervalUnit, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for Count
          def Count(value)
            dsl_attribute(:Count, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for AvailabilityZones
          def AvailabilityZones(values)
            dsl_list_attribute(:AvailabilityZones, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for AvailabilityZones
          def AvailabilityZone(value, fn_if: nil)
            dsl_push_attribute(:AvailabilityZones, value, fn_if: fn_if)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for Interval
          def Interval(value)
            dsl_attribute(:Interval, value)
          end
        end

        # Property Definition PolicyDetails
        class PolicyDetails < PropertyType
          # @param [Array<Tag>|JSONable>] values
          #   The List of values to use for TargetTags
          def TargetTags(values)
            dsl_list_attribute(:TargetTags, values)
          end

          #  @param [Tag|JSONable] value  Append value to the List
          #    The List of values to use for TargetTags
          # @@overload TargetTag(&block)
          # Append value to the List from block via instance eval of a new Tag
          def TargetTag(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:TargetTags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for ResourceTypes
          def ResourceTypes(values)
            dsl_list_attribute(:ResourceTypes, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for ResourceTypes
          def ResourceTyp(value, fn_if: nil)
            dsl_push_attribute(:ResourceTypes, value, fn_if: fn_if)
          end

          # @param [Array<Schedule>|JSONable>] values
          #   The List of values to use for Schedules
          def Schedules(values)
            dsl_list_attribute(:Schedules, values)
          end

          #  @param [Schedule|JSONable] value  Append value to the List
          #    The List of values to use for Schedules
          # @@overload Schedule(&block)
          # Append value to the List from block via instance eval of a new Schedule
          def Schedule(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Schedules, value, fn_if: fn_if, attr_class: Schedule, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for PolicyType
          def PolicyType(value)
            dsl_attribute(:PolicyType, value)
          end

          #   @param [Parameters|JSONable] value
          #     The value to use for Parameters
          # @@overload Parameters(&block)
          #   Set :Parameters from block via instance eval of a new Parameters
          def Parameters(value = nil, **value_hash, &block)
            dsl_attribute(:Parameters, value, attr_class: Parameters, **value_hash, &block)
          end
        end

        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end
        end

        # Property Definition RetainRule
        class RetainRule < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for IntervalUnit
          def IntervalUnit(value)
            dsl_attribute(:IntervalUnit, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for Count
          def Count(value)
            dsl_attribute(:Count, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for Interval
          def Interval(value)
            dsl_attribute(:Interval, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for ExecutionRoleArn
        def ExecutionRoleArn(value)
          dsl_attribute(:ExecutionRoleArn, value)
        end

        #   @param [PolicyDetails|JSONable] value
        #     The value to use for PolicyDetails
        # @@overload PolicyDetails(&block)
        #   Set :PolicyDetails from block via instance eval of a new PolicyDetails
        def PolicyDetails(value = nil, **value_hash, &block)
          dsl_attribute(:PolicyDetails, value, attr_class: PolicyDetails, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Description
        def Description(value)
          dsl_attribute(:Description, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Arn
        def Arn(value)
          dsl_attribute(:Arn, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for State
        def State(value)
          dsl_attribute(:State, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::DLM::LifecyclePolicy]
    def AWS_DLM_LifecyclePolicy(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::DLM::LifecyclePolicy, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
