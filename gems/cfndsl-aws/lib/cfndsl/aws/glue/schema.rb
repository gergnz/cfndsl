# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module Glue
      # This resource represents a schema of Glue Schema Registry.
      # @see https://github.com/aws-cloudformation/aws-cloudformation-resource-providers-glue.git
      class Schema < ResourceType
        # Identifier for the registry which the schema is part of.
        class Registry < PropertyType
          #   @param [String|JSONable] value
          #     Name of the registry in which the schema will be created.
          def Name(value)
            dsl_attribute(:Name, value)
          end

          #   @param [String|JSONable] value
          #     Amazon Resource Name for the Registry.
          def Arn(value)
            dsl_attribute(:Arn, value)
          end
        end

        # Specify checkpoint version for update. This is only required to update the Compatibility.
        class SchemaVersion < PropertyType
          #   @param [Boolean|JSONable] value
          #     Indicates if the latest version needs to be updated.
          def IsLatest(value)
            dsl_attribute(:IsLatest, value)
          end

          #   @param [Integer|JSONable] value
          #     Indicates the version number in the schema to update.
          def VersionNumber(value)
            dsl_attribute(:VersionNumber, value)
          end
        end

        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     A key to identify the tag.
          def Key(value)
            dsl_attribute(:Key, value)
          end

          #   @param [String|JSONable] value
          #     Corresponding tag value for the key.
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        #   @param [String|JSONable] value
        #     Amazon Resource Name for the Schema.
        def Arn(value)
          dsl_attribute(:Arn, value)
        end

        #   @param [Registry|JSONable] value
        #     The value to use for Registry
        # @@overload Registry(&block)
        #   Set :Registry from block via instance eval of a new Registry
        def Registry(value = nil, **value_hash, &block)
          dsl_attribute(:Registry, value, attr_class: Registry, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     Name of the schema.
        def Name(value)
          dsl_attribute(:Name, value)
        end

        #   @param [String|JSONable] value
        #     A description of the schema. If description is not provided, there will not be any default value for this.
        def Description(value)
          dsl_attribute(:Description, value)
        end

        #   @param [String|JSONable] value
        #     Data format name to use for the schema. Accepted values: 'AVRO'
        def DataFormat(value)
          dsl_attribute(:DataFormat, value)
        end

        #   @param [String|JSONable] value
        #     Compatibility setting for the schema.
        def Compatibility(value)
          dsl_attribute(:Compatibility, value)
        end

        #   @param [String|JSONable] value
        #     Definition for the initial schema version in plain-text.
        def SchemaDefinition(value)
          dsl_attribute(:SchemaDefinition, value)
        end

        #   @param [SchemaVersion|JSONable] value
        #     The value to use for CheckpointVersion
        # @@overload CheckpointVersion(&block)
        #   Set :CheckpointVersion from block via instance eval of a new SchemaVersion
        def CheckpointVersion(value = nil, **value_hash, &block)
          dsl_attribute(:CheckpointVersion, value, attr_class: SchemaVersion, **value_hash, &block)
        end

        # @param [Array<Tag>|JSONable>] values
        #   List of tags to tag the schema
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    List of tags to tag the schema
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     Represents the version ID associated with the initial schema version.
        def InitialSchemaVersionId(value)
          dsl_attribute(:InitialSchemaVersionId, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::Glue::Schema]
    def AWS_Glue_Schema(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::Glue::Schema, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
