# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module Glue
      # Resource Type definition for AWS::Glue::MLTransform
      class MLTransform < ResourceType
        # Property Definition GlueTables
        class GlueTables < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ConnectionName
          def ConnectionName(value)
            dsl_attribute(:ConnectionName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for DatabaseName
          def DatabaseName(value)
            dsl_attribute(:DatabaseName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for TableName
          def TableName(value)
            dsl_attribute(:TableName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for CatalogId
          def CatalogId(value)
            dsl_attribute(:CatalogId, value)
          end
        end

        # Property Definition TransformParameters
        class TransformParameters < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for TransformType
          def TransformType(value)
            dsl_attribute(:TransformType, value)
          end

          #   @param [FindMatchesParameters|JSONable] value
          #     The value to use for FindMatchesParameters
          # @@overload FindMatchesParameters(&block)
          #   Set :FindMatchesParameters from block via instance eval of a new FindMatchesParameters
          def FindMatchesParameters(value = nil, **value_hash, &block)
            dsl_attribute(:FindMatchesParameters, value, attr_class: FindMatchesParameters, **value_hash, &block)
          end
        end

        # Property Definition InputRecordTables
        class InputRecordTables < PropertyType
          # @param [Array<GlueTables>|JSONable>] values
          #   The List of values to use for GlueTables
          def GlueTables(values)
            dsl_list_attribute(:GlueTables, values)
          end

          #  @param [GlueTables|JSONable] value  Append value to the List
          #    The List of values to use for GlueTables
          # @@overload GlueTabl(&block)
          # Append value to the List from block via instance eval of a new GlueTables
          def GlueTabl(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:GlueTables, value, fn_if: fn_if, attr_class: GlueTables, **value_hash, &block)
          end
        end

        # Property Definition FindMatchesParameters
        class FindMatchesParameters < PropertyType
          #   @param [Number|JSONable] value
          #     The value to use for PrecisionRecallTradeoff
          def PrecisionRecallTradeoff(value)
            dsl_attribute(:PrecisionRecallTradeoff, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for EnforceProvidedLabels
          def EnforceProvidedLabels(value)
            dsl_attribute(:EnforceProvidedLabels, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for PrimaryKeyColumnName
          def PrimaryKeyColumnName(value)
            dsl_attribute(:PrimaryKeyColumnName, value)
          end

          #   @param [Number|JSONable] value
          #     The value to use for AccuracyCostTradeoff
          def AccuracyCostTradeoff(value)
            dsl_attribute(:AccuracyCostTradeoff, value)
          end
        end

        #   @param [Integer|JSONable] value
        #     The value to use for MaxRetries
        def MaxRetries(value)
          dsl_attribute(:MaxRetries, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Description
        def Description(value)
          dsl_attribute(:Description, value)
        end

        #   @param [Integer|JSONable] value
        #     The value to use for Timeout
        def Timeout(value)
          dsl_attribute(:Timeout, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Name
        def Name(value)
          dsl_attribute(:Name, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Role
        def Role(value)
          dsl_attribute(:Role, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for WorkerType
        def WorkerType(value)
          dsl_attribute(:WorkerType, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for GlueVersion
        def GlueVersion(value)
          dsl_attribute(:GlueVersion, value)
        end

        #   @param [TransformParameters|JSONable] value
        #     The value to use for TransformParameters
        # @@overload TransformParameters(&block)
        #   Set :TransformParameters from block via instance eval of a new TransformParameters
        def TransformParameters(value = nil, **value_hash, &block)
          dsl_attribute(:TransformParameters, value, attr_class: TransformParameters, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [InputRecordTables|JSONable] value
        #     The value to use for InputRecordTables
        # @@overload InputRecordTables(&block)
        #   Set :InputRecordTables from block via instance eval of a new InputRecordTables
        def InputRecordTables(value = nil, **value_hash, &block)
          dsl_attribute(:InputRecordTables, value, attr_class: InputRecordTables, **value_hash, &block)
        end

        #   @param [Integer|JSONable] value
        #     The value to use for NumberOfWorkers
        def NumberOfWorkers(value)
          dsl_attribute(:NumberOfWorkers, value)
        end

        #   @param [Object|JSONable] value
        #     The value to use for Tags
        def Tags(value)
          dsl_attribute(:Tags, value)
        end

        #   @param [Number|JSONable] value
        #     The value to use for MaxCapacity
        def MaxCapacity(value)
          dsl_attribute(:MaxCapacity, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::Glue::MLTransform]
    def AWS_Glue_MLTransform(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::Glue::MLTransform, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
