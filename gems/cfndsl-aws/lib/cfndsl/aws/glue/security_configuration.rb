# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module Glue
      # Resource Type definition for AWS::Glue::SecurityConfiguration
      class SecurityConfiguration < ResourceType
        # Property Definition S3Encryptions
        class S3Encryptions < PropertyType
        end

        # Property Definition EncryptionConfiguration
        class EncryptionConfiguration < PropertyType
          #   @param [S3Encryptions|JSONable] value
          #     The value to use for S3Encryptions
          # @@overload S3Encryptions(&block)
          #   Set :S3Encryptions from block via instance eval of a new S3Encryptions
          def S3Encryptions(value = nil, **value_hash, &block)
            dsl_attribute(:S3Encryptions, value, attr_class: S3Encryptions, **value_hash, &block)
          end

          #   @param [JobBookmarksEncryption|JSONable] value
          #     The value to use for JobBookmarksEncryption
          # @@overload JobBookmarksEncryption(&block)
          #   Set :JobBookmarksEncryption from block via instance eval of a new JobBookmarksEncryption
          def JobBookmarksEncryption(value = nil, **value_hash, &block)
            dsl_attribute(:JobBookmarksEncryption, value, attr_class: JobBookmarksEncryption, **value_hash, &block)
          end

          #   @param [CloudWatchEncryption|JSONable] value
          #     The value to use for CloudWatchEncryption
          # @@overload CloudWatchEncryption(&block)
          #   Set :CloudWatchEncryption from block via instance eval of a new CloudWatchEncryption
          def CloudWatchEncryption(value = nil, **value_hash, &block)
            dsl_attribute(:CloudWatchEncryption, value, attr_class: CloudWatchEncryption, **value_hash, &block)
          end
        end

        # Property Definition CloudWatchEncryption
        class CloudWatchEncryption < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for KmsKeyArn
          def KmsKeyArn(value)
            dsl_attribute(:KmsKeyArn, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for CloudWatchEncryptionMode
          def CloudWatchEncryptionMode(value)
            dsl_attribute(:CloudWatchEncryptionMode, value)
          end
        end

        # Property Definition JobBookmarksEncryption
        class JobBookmarksEncryption < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for KmsKeyArn
          def KmsKeyArn(value)
            dsl_attribute(:KmsKeyArn, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for JobBookmarksEncryptionMode
          def JobBookmarksEncryptionMode(value)
            dsl_attribute(:JobBookmarksEncryptionMode, value)
          end
        end

        #   @param [EncryptionConfiguration|JSONable] value
        #     The value to use for EncryptionConfiguration
        # @@overload EncryptionConfiguration(&block)
        #   Set :EncryptionConfiguration from block via instance eval of a new EncryptionConfiguration
        def EncryptionConfiguration(value = nil, **value_hash, &block)
          dsl_attribute(:EncryptionConfiguration, value, attr_class: EncryptionConfiguration, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Name
        def Name(value)
          dsl_attribute(:Name, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::Glue::SecurityConfiguration]
    def AWS_Glue_SecurityConfiguration(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::Glue::SecurityConfiguration, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
