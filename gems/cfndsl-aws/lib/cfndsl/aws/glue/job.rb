# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module Glue
      # Resource Type definition for AWS::Glue::Job
      class Job < ResourceType
        # Property Definition ConnectionsList
        class ConnectionsList < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Connections
          def Connections(values)
            dsl_list_attribute(:Connections, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Connections
          def Connection(value, fn_if: nil)
            dsl_push_attribute(:Connections, value, fn_if: fn_if)
          end
        end

        # Property Definition NotificationProperty
        class NotificationProperty < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for NotifyDelayAfter
          def NotifyDelayAfter(value)
            dsl_attribute(:NotifyDelayAfter, value)
          end
        end

        # Property Definition ExecutionProperty
        class ExecutionProperty < PropertyType
          #   @param [Number|JSONable] value
          #     The value to use for MaxConcurrentRuns
          def MaxConcurrentRuns(value)
            dsl_attribute(:MaxConcurrentRuns, value)
          end
        end

        # Property Definition JobCommand
        class JobCommand < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for PythonVersion
          def PythonVersion(value)
            dsl_attribute(:PythonVersion, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ScriptLocation
          def ScriptLocation(value)
            dsl_attribute(:ScriptLocation, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [ConnectionsList|JSONable] value
        #     The value to use for Connections
        # @@overload Connections(&block)
        #   Set :Connections from block via instance eval of a new ConnectionsList
        def Connections(value = nil, **value_hash, &block)
          dsl_attribute(:Connections, value, attr_class: ConnectionsList, **value_hash, &block)
        end

        #   @param [Number|JSONable] value
        #     The value to use for MaxRetries
        def MaxRetries(value)
          dsl_attribute(:MaxRetries, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Description
        def Description(value)
          dsl_attribute(:Description, value)
        end

        #   @param [Integer|JSONable] value
        #     The value to use for Timeout
        def Timeout(value)
          dsl_attribute(:Timeout, value)
        end

        #   @param [Number|JSONable] value
        #     The value to use for AllocatedCapacity
        def AllocatedCapacity(value)
          dsl_attribute(:AllocatedCapacity, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Name
        def Name(value)
          dsl_attribute(:Name, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Role
        def Role(value)
          dsl_attribute(:Role, value)
        end

        #   @param [Object|JSONable] value
        #     The value to use for DefaultArguments
        def DefaultArguments(value)
          dsl_attribute(:DefaultArguments, value)
        end

        #   @param [NotificationProperty|JSONable] value
        #     The value to use for NotificationProperty
        # @@overload NotificationProperty(&block)
        #   Set :NotificationProperty from block via instance eval of a new NotificationProperty
        def NotificationProperty(value = nil, **value_hash, &block)
          dsl_attribute(:NotificationProperty, value, attr_class: NotificationProperty, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for WorkerType
        def WorkerType(value)
          dsl_attribute(:WorkerType, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for LogUri
        def LogUri(value)
          dsl_attribute(:LogUri, value)
        end

        #   @param [JobCommand|JSONable] value
        #     The value to use for Command
        # @@overload Command(&block)
        #   Set :Command from block via instance eval of a new JobCommand
        def Command(value = nil, **value_hash, &block)
          dsl_attribute(:Command, value, attr_class: JobCommand, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for GlueVersion
        def GlueVersion(value)
          dsl_attribute(:GlueVersion, value)
        end

        #   @param [ExecutionProperty|JSONable] value
        #     The value to use for ExecutionProperty
        # @@overload ExecutionProperty(&block)
        #   Set :ExecutionProperty from block via instance eval of a new ExecutionProperty
        def ExecutionProperty(value = nil, **value_hash, &block)
          dsl_attribute(:ExecutionProperty, value, attr_class: ExecutionProperty, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for SecurityConfiguration
        def SecurityConfiguration(value)
          dsl_attribute(:SecurityConfiguration, value)
        end

        #   @param [Integer|JSONable] value
        #     The value to use for NumberOfWorkers
        def NumberOfWorkers(value)
          dsl_attribute(:NumberOfWorkers, value)
        end

        #   @param [Object|JSONable] value
        #     The value to use for Tags
        def Tags(value)
          dsl_attribute(:Tags, value)
        end

        #   @param [Number|JSONable] value
        #     The value to use for MaxCapacity
        def MaxCapacity(value)
          dsl_attribute(:MaxCapacity, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::Glue::Job]
    def AWS_Glue_Job(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::Glue::Job, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
