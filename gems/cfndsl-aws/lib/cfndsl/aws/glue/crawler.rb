# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module Glue
      # Resource Type definition for AWS::Glue::Crawler
      class Crawler < ResourceType
        # Property Definition Targets
        class Targets < PropertyType
          # @param [Array<S3Target>|JSONable>] values
          #   The List of values to use for S3Targets
          def S3Targets(values)
            dsl_list_attribute(:S3Targets, values)
          end

          #  @param [S3Target|JSONable] value  Append value to the List
          #    The List of values to use for S3Targets
          # @@overload S3Target(&block)
          # Append value to the List from block via instance eval of a new S3Target
          def S3Target(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:S3Targets, value, fn_if: fn_if, attr_class: S3Target, **value_hash, &block)
          end

          # @param [Array<CatalogTarget>|JSONable>] values
          #   The List of values to use for CatalogTargets
          def CatalogTargets(values)
            dsl_list_attribute(:CatalogTargets, values)
          end

          #  @param [CatalogTarget|JSONable] value  Append value to the List
          #    The List of values to use for CatalogTargets
          # @@overload CatalogTarget(&block)
          # Append value to the List from block via instance eval of a new CatalogTarget
          def CatalogTarget(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:CatalogTargets, value, fn_if: fn_if, attr_class: CatalogTarget, **value_hash, &block)
          end

          # @param [Array<JdbcTarget>|JSONable>] values
          #   The List of values to use for JdbcTargets
          def JdbcTargets(values)
            dsl_list_attribute(:JdbcTargets, values)
          end

          #  @param [JdbcTarget|JSONable] value  Append value to the List
          #    The List of values to use for JdbcTargets
          # @@overload JdbcTarget(&block)
          # Append value to the List from block via instance eval of a new JdbcTarget
          def JdbcTarget(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:JdbcTargets, value, fn_if: fn_if, attr_class: JdbcTarget, **value_hash, &block)
          end

          # @param [Array<DynamoDBTarget>|JSONable>] values
          #   The List of values to use for DynamoDBTargets
          def DynamoDBTargets(values)
            dsl_list_attribute(:DynamoDBTargets, values)
          end

          #  @param [DynamoDBTarget|JSONable] value  Append value to the List
          #    The List of values to use for DynamoDBTargets
          # @@overload DynamoDBTarget(&block)
          # Append value to the List from block via instance eval of a new DynamoDBTarget
          def DynamoDBTarget(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:DynamoDBTargets, value, fn_if: fn_if, attr_class: DynamoDBTarget, **value_hash, &block)
          end
        end

        # Property Definition Schedule
        class Schedule < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ScheduleExpression
          def ScheduleExpression(value)
            dsl_attribute(:ScheduleExpression, value)
          end
        end

        # Property Definition SchemaChangePolicy
        class SchemaChangePolicy < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for UpdateBehavior
          def UpdateBehavior(value)
            dsl_attribute(:UpdateBehavior, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for DeleteBehavior
          def DeleteBehavior(value)
            dsl_attribute(:DeleteBehavior, value)
          end
        end

        # Property Definition S3Target
        class S3Target < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Path
          def Path(value)
            dsl_attribute(:Path, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Exclusions
          def Exclusions(values)
            dsl_list_attribute(:Exclusions, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Exclusions
          def Exclusion(value, fn_if: nil)
            dsl_push_attribute(:Exclusions, value, fn_if: fn_if)
          end
        end

        # Property Definition JdbcTarget
        class JdbcTarget < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ConnectionName
          def ConnectionName(value)
            dsl_attribute(:ConnectionName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Path
          def Path(value)
            dsl_attribute(:Path, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Exclusions
          def Exclusions(values)
            dsl_list_attribute(:Exclusions, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Exclusions
          def Exclusion(value, fn_if: nil)
            dsl_push_attribute(:Exclusions, value, fn_if: fn_if)
          end
        end

        # Property Definition CatalogTarget
        class CatalogTarget < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for DatabaseName
          def DatabaseName(value)
            dsl_attribute(:DatabaseName, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Tables
          def Tables(values)
            dsl_list_attribute(:Tables, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Tables
          def Tabl(value, fn_if: nil)
            dsl_push_attribute(:Tables, value, fn_if: fn_if)
          end
        end

        # Property Definition DynamoDBTarget
        class DynamoDBTarget < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Path
          def Path(value)
            dsl_attribute(:Path, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Role
        def Role(value)
          dsl_attribute(:Role, value)
        end

        # @param [Array<String>|JSONable>] values
        #   The List of values to use for Classifiers
        def Classifiers(values)
          dsl_list_attribute(:Classifiers, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for Classifiers
        def Classifier(value, fn_if: nil)
          dsl_push_attribute(:Classifiers, value, fn_if: fn_if)
        end

        #   @param [String|JSONable] value
        #     The value to use for Description
        def Description(value)
          dsl_attribute(:Description, value)
        end

        #   @param [SchemaChangePolicy|JSONable] value
        #     The value to use for SchemaChangePolicy
        # @@overload SchemaChangePolicy(&block)
        #   Set :SchemaChangePolicy from block via instance eval of a new SchemaChangePolicy
        def SchemaChangePolicy(value = nil, **value_hash, &block)
          dsl_attribute(:SchemaChangePolicy, value, attr_class: SchemaChangePolicy, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Configuration
        def Configuration(value)
          dsl_attribute(:Configuration, value)
        end

        #   @param [Schedule|JSONable] value
        #     The value to use for Schedule
        # @@overload Schedule(&block)
        #   Set :Schedule from block via instance eval of a new Schedule
        def Schedule(value = nil, **value_hash, &block)
          dsl_attribute(:Schedule, value, attr_class: Schedule, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for DatabaseName
        def DatabaseName(value)
          dsl_attribute(:DatabaseName, value)
        end

        #   @param [Targets|JSONable] value
        #     The value to use for Targets
        # @@overload Targets(&block)
        #   Set :Targets from block via instance eval of a new Targets
        def Targets(value = nil, **value_hash, &block)
          dsl_attribute(:Targets, value, attr_class: Targets, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for CrawlerSecurityConfiguration
        def CrawlerSecurityConfiguration(value)
          dsl_attribute(:CrawlerSecurityConfiguration, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for TablePrefix
        def TablePrefix(value)
          dsl_attribute(:TablePrefix, value)
        end

        #   @param [Object|JSONable] value
        #     The value to use for Tags
        def Tags(value)
          dsl_attribute(:Tags, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Name
        def Name(value)
          dsl_attribute(:Name, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::Glue::Crawler]
    def AWS_Glue_Crawler(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::Glue::Crawler, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
