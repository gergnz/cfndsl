# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module Glue
      # Resource Type definition for AWS::Glue::Connection
      class Connection < ResourceType
        # Property Definition ConnectionInput
        class ConnectionInput < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Description
          def Description(value)
            dsl_attribute(:Description, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ConnectionType
          def ConnectionType(value)
            dsl_attribute(:ConnectionType, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for MatchCriteria
          def MatchCriterias(values)
            dsl_list_attribute(:MatchCriteria, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for MatchCriteria
          def MatchCriteria(value, fn_if: nil)
            dsl_push_attribute(:MatchCriteria, value, fn_if: fn_if)
          end

          #   @param [PhysicalConnectionRequirements|JSONable] value
          #     The value to use for PhysicalConnectionRequirements
          # @@overload PhysicalConnectionRequirements(&block)
          #   Set :PhysicalConnectionRequirements from block via instance eval of a new PhysicalConnectionRequirements
          def PhysicalConnectionRequirements(value = nil, **value_hash, &block)
            dsl_attribute(:PhysicalConnectionRequirements, value, attr_class: PhysicalConnectionRequirements, **value_hash, &block)
          end

          #   @param [Object|JSONable] value
          #     The value to use for ConnectionProperties
          def ConnectionProperties(value)
            dsl_attribute(:ConnectionProperties, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end
        end

        # Property Definition PhysicalConnectionRequirements
        class PhysicalConnectionRequirements < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for AvailabilityZone
          def AvailabilityZone(value)
            dsl_attribute(:AvailabilityZone, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for SecurityGroupIdList
          def SecurityGroupIdList(values)
            dsl_list_attribute(:SecurityGroupIdList, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for SecurityGroupIdList
          def SecurityGroupId(value, fn_if: nil)
            dsl_push_attribute(:SecurityGroupIdList, value, fn_if: fn_if)
          end

          #   @param [String|JSONable] value
          #     The value to use for SubnetId
          def SubnetId(value)
            dsl_attribute(:SubnetId, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [ConnectionInput|JSONable] value
        #     The value to use for ConnectionInput
        # @@overload ConnectionInput(&block)
        #   Set :ConnectionInput from block via instance eval of a new ConnectionInput
        def ConnectionInput(value = nil, **value_hash, &block)
          dsl_attribute(:ConnectionInput, value, attr_class: ConnectionInput, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for CatalogId
        def CatalogId(value)
          dsl_attribute(:CatalogId, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::Glue::Connection]
    def AWS_Glue_Connection(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::Glue::Connection, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
