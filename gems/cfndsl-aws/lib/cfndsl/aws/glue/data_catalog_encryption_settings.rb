# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module Glue
      # Resource Type definition for AWS::Glue::DataCatalogEncryptionSettings
      class DataCatalogEncryptionSettings < ResourceType
        # Property Definition DataCatalogEncryptionSettings
        class DataCatalogEncryptionSettings < PropertyType
          #   @param [ConnectionPasswordEncryption|JSONable] value
          #     The value to use for ConnectionPasswordEncryption
          # @@overload ConnectionPasswordEncryption(&block)
          #   Set :ConnectionPasswordEncryption from block via instance eval of a new ConnectionPasswordEncryption
          def ConnectionPasswordEncryption(value = nil, **value_hash, &block)
            dsl_attribute(:ConnectionPasswordEncryption, value, attr_class: ConnectionPasswordEncryption, **value_hash, &block)
          end

          #   @param [EncryptionAtRest|JSONable] value
          #     The value to use for EncryptionAtRest
          # @@overload EncryptionAtRest(&block)
          #   Set :EncryptionAtRest from block via instance eval of a new EncryptionAtRest
          def EncryptionAtRest(value = nil, **value_hash, &block)
            dsl_attribute(:EncryptionAtRest, value, attr_class: EncryptionAtRest, **value_hash, &block)
          end
        end

        # Property Definition EncryptionAtRest
        class EncryptionAtRest < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for CatalogEncryptionMode
          def CatalogEncryptionMode(value)
            dsl_attribute(:CatalogEncryptionMode, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for SseAwsKmsKeyId
          def SseAwsKmsKeyId(value)
            dsl_attribute(:SseAwsKmsKeyId, value)
          end
        end

        # Property Definition ConnectionPasswordEncryption
        class ConnectionPasswordEncryption < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for ReturnConnectionPasswordEncrypted
          def ReturnConnectionPasswordEncrypted(value)
            dsl_attribute(:ReturnConnectionPasswordEncrypted, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for KmsKeyId
          def KmsKeyId(value)
            dsl_attribute(:KmsKeyId, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [DataCatalogEncryptionSettings|JSONable] value
        #     The value to use for DataCatalogEncryptionSettings
        # @@overload DataCatalogEncryptionSettings(&block)
        #   Set :DataCatalogEncryptionSettings from block via instance eval of a new DataCatalogEncryptionSettings
        def DataCatalogEncryptionSettings(value = nil, **value_hash, &block)
          dsl_attribute(:DataCatalogEncryptionSettings, value, attr_class: DataCatalogEncryptionSettings, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for CatalogId
        def CatalogId(value)
          dsl_attribute(:CatalogId, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::Glue::DataCatalogEncryptionSettings]
    def AWS_Glue_DataCatalogEncryptionSettings(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::Glue::DataCatalogEncryptionSettings, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
