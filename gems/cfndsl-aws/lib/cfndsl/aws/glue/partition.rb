# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module Glue
      # Resource Type definition for AWS::Glue::Partition
      class Partition < ResourceType
        # Property Definition PartitionInput
        class PartitionInput < PropertyType
          #   @param [Object|JSONable] value
          #     The value to use for Parameters
          def Parameters(value)
            dsl_attribute(:Parameters, value)
          end

          #   @param [StorageDescriptor|JSONable] value
          #     The value to use for StorageDescriptor
          # @@overload StorageDescriptor(&block)
          #   Set :StorageDescriptor from block via instance eval of a new StorageDescriptor
          def StorageDescriptor(value = nil, **value_hash, &block)
            dsl_attribute(:StorageDescriptor, value, attr_class: StorageDescriptor, **value_hash, &block)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Values
          def Values(values)
            dsl_list_attribute(:Values, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Values
          def Value(value, fn_if: nil)
            dsl_push_attribute(:Values, value, fn_if: fn_if)
          end
        end

        # Property Definition StorageDescriptor
        class StorageDescriptor < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for StoredAsSubDirectories
          def StoredAsSubDirectories(value)
            dsl_attribute(:StoredAsSubDirectories, value)
          end

          #   @param [Object|JSONable] value
          #     The value to use for Parameters
          def Parameters(value)
            dsl_attribute(:Parameters, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for BucketColumns
          def BucketColumns(values)
            dsl_list_attribute(:BucketColumns, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for BucketColumns
          def BucketColumn(value, fn_if: nil)
            dsl_push_attribute(:BucketColumns, value, fn_if: fn_if)
          end

          #   @param [SkewedInfo|JSONable] value
          #     The value to use for SkewedInfo
          # @@overload SkewedInfo(&block)
          #   Set :SkewedInfo from block via instance eval of a new SkewedInfo
          def SkewedInfo(value = nil, **value_hash, &block)
            dsl_attribute(:SkewedInfo, value, attr_class: SkewedInfo, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for InputFormat
          def InputFormat(value)
            dsl_attribute(:InputFormat, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for NumberOfBuckets
          def NumberOfBuckets(value)
            dsl_attribute(:NumberOfBuckets, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for OutputFormat
          def OutputFormat(value)
            dsl_attribute(:OutputFormat, value)
          end

          # @param [Array<Column>|JSONable>] values
          #   The List of values to use for Columns
          def Columns(values)
            dsl_list_attribute(:Columns, values)
          end

          #  @param [Column|JSONable] value  Append value to the List
          #    The List of values to use for Columns
          # @@overload Column(&block)
          # Append value to the List from block via instance eval of a new Column
          def Column(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Columns, value, fn_if: fn_if, attr_class: Column, **value_hash, &block)
          end

          #   @param [SerdeInfo|JSONable] value
          #     The value to use for SerdeInfo
          # @@overload SerdeInfo(&block)
          #   Set :SerdeInfo from block via instance eval of a new SerdeInfo
          def SerdeInfo(value = nil, **value_hash, &block)
            dsl_attribute(:SerdeInfo, value, attr_class: SerdeInfo, **value_hash, &block)
          end

          # @param [Array<Order>|JSONable>] values
          #   The List of values to use for SortColumns
          def SortColumns(values)
            dsl_list_attribute(:SortColumns, values)
          end

          #  @param [Order|JSONable] value  Append value to the List
          #    The List of values to use for SortColumns
          # @@overload SortColumn(&block)
          # Append value to the List from block via instance eval of a new Order
          def SortColumn(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:SortColumns, value, fn_if: fn_if, attr_class: Order, **value_hash, &block)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for Compressed
          def Compressed(value)
            dsl_attribute(:Compressed, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Location
          def Location(value)
            dsl_attribute(:Location, value)
          end
        end

        # Property Definition SkewedInfo
        class SkewedInfo < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for SkewedColumnNames
          def SkewedColumnNames(values)
            dsl_list_attribute(:SkewedColumnNames, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for SkewedColumnNames
          def SkewedColumnName(value, fn_if: nil)
            dsl_push_attribute(:SkewedColumnNames, value, fn_if: fn_if)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for SkewedColumnValues
          def SkewedColumnValues(values)
            dsl_list_attribute(:SkewedColumnValues, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for SkewedColumnValues
          def SkewedColumnValue(value, fn_if: nil)
            dsl_push_attribute(:SkewedColumnValues, value, fn_if: fn_if)
          end

          #   @param [Object|JSONable] value
          #     The value to use for SkewedColumnValueLocationMaps
          def SkewedColumnValueLocationMaps(value)
            dsl_attribute(:SkewedColumnValueLocationMaps, value)
          end
        end

        # Property Definition Order
        class Order < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Column
          def Column(value)
            dsl_attribute(:Column, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for SortOrder
          def SortOrder(value)
            dsl_attribute(:SortOrder, value)
          end
        end

        # Property Definition SerdeInfo
        class SerdeInfo < PropertyType
          #   @param [Object|JSONable] value
          #     The value to use for Parameters
          def Parameters(value)
            dsl_attribute(:Parameters, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for SerializationLibrary
          def SerializationLibrary(value)
            dsl_attribute(:SerializationLibrary, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end
        end

        # Property Definition Column
        class Column < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Comment
          def Comment(value)
            dsl_attribute(:Comment, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Type
          def Type(value)
            dsl_attribute(:Type, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for TableName
        def TableName(value)
          dsl_attribute(:TableName, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for DatabaseName
        def DatabaseName(value)
          dsl_attribute(:DatabaseName, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for CatalogId
        def CatalogId(value)
          dsl_attribute(:CatalogId, value)
        end

        #   @param [PartitionInput|JSONable] value
        #     The value to use for PartitionInput
        # @@overload PartitionInput(&block)
        #   Set :PartitionInput from block via instance eval of a new PartitionInput
        def PartitionInput(value = nil, **value_hash, &block)
          dsl_attribute(:PartitionInput, value, attr_class: PartitionInput, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::Glue::Partition]
    def AWS_Glue_Partition(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::Glue::Partition, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
