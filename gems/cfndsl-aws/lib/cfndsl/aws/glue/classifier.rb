# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module Glue
      # Resource Type definition for AWS::Glue::Classifier
      class Classifier < ResourceType
        # Property Definition CsvClassifier
        class CsvClassifier < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for QuoteSymbol
          def QuoteSymbol(value)
            dsl_attribute(:QuoteSymbol, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ContainsHeader
          def ContainsHeader(value)
            dsl_attribute(:ContainsHeader, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Delimiter
          def Delimiter(value)
            dsl_attribute(:Delimiter, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Header
          def Headers(values)
            dsl_list_attribute(:Header, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Header
          def Header(value, fn_if: nil)
            dsl_push_attribute(:Header, value, fn_if: fn_if)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for AllowSingleColumn
          def AllowSingleColumn(value)
            dsl_attribute(:AllowSingleColumn, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for DisableValueTrimming
          def DisableValueTrimming(value)
            dsl_attribute(:DisableValueTrimming, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end
        end

        # Property Definition JsonClassifier
        class JsonClassifier < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for JsonPath
          def JsonPath(value)
            dsl_attribute(:JsonPath, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end
        end

        # Property Definition XMLClassifier
        class XMLClassifier < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for RowTag
          def RowTag(value)
            dsl_attribute(:RowTag, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Classification
          def Classification(value)
            dsl_attribute(:Classification, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end
        end

        # Property Definition GrokClassifier
        class GrokClassifier < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for CustomPatterns
          def CustomPatterns(value)
            dsl_attribute(:CustomPatterns, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for GrokPattern
          def GrokPattern(value)
            dsl_attribute(:GrokPattern, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Classification
          def Classification(value)
            dsl_attribute(:Classification, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [XMLClassifier|JSONable] value
        #     The value to use for XMLClassifier
        # @@overload XMLClassifier(&block)
        #   Set :XMLClassifier from block via instance eval of a new XMLClassifier
        def XMLClassifier(value = nil, **value_hash, &block)
          dsl_attribute(:XMLClassifier, value, attr_class: XMLClassifier, **value_hash, &block)
        end

        #   @param [JsonClassifier|JSONable] value
        #     The value to use for JsonClassifier
        # @@overload JsonClassifier(&block)
        #   Set :JsonClassifier from block via instance eval of a new JsonClassifier
        def JsonClassifier(value = nil, **value_hash, &block)
          dsl_attribute(:JsonClassifier, value, attr_class: JsonClassifier, **value_hash, &block)
        end

        #   @param [CsvClassifier|JSONable] value
        #     The value to use for CsvClassifier
        # @@overload CsvClassifier(&block)
        #   Set :CsvClassifier from block via instance eval of a new CsvClassifier
        def CsvClassifier(value = nil, **value_hash, &block)
          dsl_attribute(:CsvClassifier, value, attr_class: CsvClassifier, **value_hash, &block)
        end

        #   @param [GrokClassifier|JSONable] value
        #     The value to use for GrokClassifier
        # @@overload GrokClassifier(&block)
        #   Set :GrokClassifier from block via instance eval of a new GrokClassifier
        def GrokClassifier(value = nil, **value_hash, &block)
          dsl_attribute(:GrokClassifier, value, attr_class: GrokClassifier, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::Glue::Classifier]
    def AWS_Glue_Classifier(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::Glue::Classifier, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
