# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module Glue
      # Resource Type definition for AWS::Glue::Trigger
      class Trigger < ResourceType
        # Property Definition Action
        class Action < PropertyType
          #   @param [NotificationProperty|JSONable] value
          #     The value to use for NotificationProperty
          # @@overload NotificationProperty(&block)
          #   Set :NotificationProperty from block via instance eval of a new NotificationProperty
          def NotificationProperty(value = nil, **value_hash, &block)
            dsl_attribute(:NotificationProperty, value, attr_class: NotificationProperty, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for CrawlerName
          def CrawlerName(value)
            dsl_attribute(:CrawlerName, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for Timeout
          def Timeout(value)
            dsl_attribute(:Timeout, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for JobName
          def JobName(value)
            dsl_attribute(:JobName, value)
          end

          #   @param [Object|JSONable] value
          #     The value to use for Arguments
          def Arguments(value)
            dsl_attribute(:Arguments, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for SecurityConfiguration
          def SecurityConfiguration(value)
            dsl_attribute(:SecurityConfiguration, value)
          end
        end

        # Property Definition Predicate
        class Predicate < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Logical
          def Logical(value)
            dsl_attribute(:Logical, value)
          end

          # @param [Array<Condition>|JSONable>] values
          #   The List of values to use for Conditions
          def Conditions(values)
            dsl_list_attribute(:Conditions, values)
          end

          #  @param [Condition|JSONable] value  Append value to the List
          #    The List of values to use for Conditions
          # @@overload Condition(&block)
          # Append value to the List from block via instance eval of a new Condition
          def Condition(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Conditions, value, fn_if: fn_if, attr_class: Condition, **value_hash, &block)
          end
        end

        # Property Definition NotificationProperty
        class NotificationProperty < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for NotifyDelayAfter
          def NotifyDelayAfter(value)
            dsl_attribute(:NotifyDelayAfter, value)
          end
        end

        # Property Definition Condition
        class Condition < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for CrawlerName
          def CrawlerName(value)
            dsl_attribute(:CrawlerName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for State
          def State(value)
            dsl_attribute(:State, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for CrawlState
          def CrawlState(value)
            dsl_attribute(:CrawlState, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for LogicalOperator
          def LogicalOperator(value)
            dsl_attribute(:LogicalOperator, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for JobName
          def JobName(value)
            dsl_attribute(:JobName, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Type
        def Type(value)
          dsl_attribute(:Type, value)
        end

        #   @param [Boolean|JSONable] value
        #     The value to use for StartOnCreation
        def StartOnCreation(value)
          dsl_attribute(:StartOnCreation, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Description
        def Description(value)
          dsl_attribute(:Description, value)
        end

        # @param [Array<Action>|JSONable>] values
        #   The List of values to use for Actions
        def Actions(values)
          dsl_list_attribute(:Actions, values)
        end

        #  @param [Action|JSONable] value  Append value to the List
        #    The List of values to use for Actions
        # @@overload Action(&block)
        # Append value to the List from block via instance eval of a new Action
        def Action(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Actions, value, fn_if: fn_if, attr_class: Action, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for WorkflowName
        def WorkflowName(value)
          dsl_attribute(:WorkflowName, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Schedule
        def Schedule(value)
          dsl_attribute(:Schedule, value)
        end

        #   @param [Object|JSONable] value
        #     The value to use for Tags
        def Tags(value)
          dsl_attribute(:Tags, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Name
        def Name(value)
          dsl_attribute(:Name, value)
        end

        #   @param [Predicate|JSONable] value
        #     The value to use for Predicate
        # @@overload Predicate(&block)
        #   Set :Predicate from block via instance eval of a new Predicate
        def Predicate(value = nil, **value_hash, &block)
          dsl_attribute(:Predicate, value, attr_class: Predicate, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::Glue::Trigger]
    def AWS_Glue_Trigger(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::Glue::Trigger, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
