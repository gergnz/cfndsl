# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module AccessAnalyzer
      # The AWS::AccessAnalyzer::Analyzer type specifies an analyzer of the user's account
      # @see https://github.com/aws-cloudformation/aws-cloudformation-resource-providers-accessanalyzer.git
      class Analyzer < ResourceType
        # An Access Analyzer archive rule. Archive rules automatically archive new findings that meet the criteria you define when you create the rule.
        class ArchiveRule < PropertyType
          # @param [Array<Filter>|JSONable>] values
          #   The List of values to use for Filter
          def Filters(values)
            dsl_list_attribute(:Filter, values)
          end

          #  @param [Filter|JSONable] value  Append value to the List
          #    The List of values to use for Filter
          # @@overload Filter(&block)
          # Append value to the List from block via instance eval of a new Filter
          def Filter(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Filter, value, fn_if: fn_if, attr_class: Filter, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The archive rule name
          def RuleName(value)
            dsl_attribute(:RuleName, value)
          end
        end

        # Property Definition Filter
        class Filter < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Contains
          def Contains(values)
            dsl_list_attribute(:Contains, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Contains
          def Contain(value, fn_if: nil)
            dsl_push_attribute(:Contains, value, fn_if: fn_if)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Eq
          def Eqs(values)
            dsl_list_attribute(:Eq, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Eq
          def Eq(value, fn_if: nil)
            dsl_push_attribute(:Eq, value, fn_if: fn_if)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for Exists
          def Exists(value)
            dsl_attribute(:Exists, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Property
          def Property(value)
            dsl_attribute(:Property, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Neq
          def Neqs(values)
            dsl_list_attribute(:Neq, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Neq
          def Neq(value, fn_if: nil)
            dsl_push_attribute(:Neq, value, fn_if: fn_if)
          end
        end

        # A key-value pair to associate with a resource.
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
          def Key(value)
            dsl_attribute(:Key, value)
          end

          #   @param [String|JSONable] value
          #     The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        #   @param [String|JSONable] value
        #     Analyzer name
        def AnalyzerName(value)
          dsl_attribute(:AnalyzerName, value)
        end

        # @param [Array<ArchiveRule>|JSONable>] values
        #   The List of values to use for ArchiveRules
        def ArchiveRules(values)
          dsl_list_attribute(:ArchiveRules, values)
        end

        #  @param [ArchiveRule|JSONable] value  Append value to the List
        #    The List of values to use for ArchiveRules
        # @@overload ArchiveRule(&block)
        # Append value to the List from block via instance eval of a new ArchiveRule
        def ArchiveRule(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:ArchiveRules, value, fn_if: fn_if, attr_class: ArchiveRule, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     Amazon Resource Name (ARN) of the analyzer
        def Arn(value)
          dsl_attribute(:Arn, value)
        end

        # @param [Array<Tag>|JSONable>] values
        #   An array of key-value pairs to apply to this resource.
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    An array of key-value pairs to apply to this resource.
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The type of the analyzer, must be ACCOUNT or ORGANIZATION
        def Type(value)
          dsl_attribute(:Type, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::AccessAnalyzer::Analyzer]
    def AWS_AccessAnalyzer_Analyzer(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::AccessAnalyzer::Analyzer, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
