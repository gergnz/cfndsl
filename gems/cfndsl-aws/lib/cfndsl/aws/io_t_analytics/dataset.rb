# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module IoTAnalytics
      # Resource Type definition for AWS::IoTAnalytics::Dataset
      class Dataset < ResourceType
        # Property Definition Action
        class Action < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ActionName
          def ActionName(value)
            dsl_attribute(:ActionName, value)
          end

          #   @param [ContainerAction|JSONable] value
          #     The value to use for ContainerAction
          # @@overload ContainerAction(&block)
          #   Set :ContainerAction from block via instance eval of a new ContainerAction
          def ContainerAction(value = nil, **value_hash, &block)
            dsl_attribute(:ContainerAction, value, attr_class: ContainerAction, **value_hash, &block)
          end

          #   @param [QueryAction|JSONable] value
          #     The value to use for QueryAction
          # @@overload QueryAction(&block)
          #   Set :QueryAction from block via instance eval of a new QueryAction
          def QueryAction(value = nil, **value_hash, &block)
            dsl_attribute(:QueryAction, value, attr_class: QueryAction, **value_hash, &block)
          end
        end

        # Property Definition VersioningConfiguration
        class VersioningConfiguration < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for MaxVersions
          def MaxVersions(value)
            dsl_attribute(:MaxVersions, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for Unlimited
          def Unlimited(value)
            dsl_attribute(:Unlimited, value)
          end
        end

        # Property Definition Trigger
        class Trigger < PropertyType
          #   @param [Schedule|JSONable] value
          #     The value to use for Schedule
          # @@overload Schedule(&block)
          #   Set :Schedule from block via instance eval of a new Schedule
          def Schedule(value = nil, **value_hash, &block)
            dsl_attribute(:Schedule, value, attr_class: Schedule, **value_hash, &block)
          end

          #   @param [TriggeringDataset|JSONable] value
          #     The value to use for TriggeringDataset
          # @@overload TriggeringDataset(&block)
          #   Set :TriggeringDataset from block via instance eval of a new TriggeringDataset
          def TriggeringDataset(value = nil, **value_hash, &block)
            dsl_attribute(:TriggeringDataset, value, attr_class: TriggeringDataset, **value_hash, &block)
          end
        end

        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        # Property Definition DatasetContentDeliveryRule
        class DatasetContentDeliveryRule < PropertyType
          #   @param [DatasetContentDeliveryRuleDestination|JSONable] value
          #     The value to use for Destination
          # @@overload Destination(&block)
          #   Set :Destination from block via instance eval of a new DatasetContentDeliveryRuleDestination
          def Destination(value = nil, **value_hash, &block)
            dsl_attribute(:Destination, value, attr_class: DatasetContentDeliveryRuleDestination, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for EntryName
          def EntryName(value)
            dsl_attribute(:EntryName, value)
          end
        end

        # Property Definition RetentionPeriod
        class RetentionPeriod < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for NumberOfDays
          def NumberOfDays(value)
            dsl_attribute(:NumberOfDays, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for Unlimited
          def Unlimited(value)
            dsl_attribute(:Unlimited, value)
          end
        end

        # Property Definition DatasetContentDeliveryRuleDestination
        class DatasetContentDeliveryRuleDestination < PropertyType
          #   @param [IotEventsDestinationConfiguration|JSONable] value
          #     The value to use for IotEventsDestinationConfiguration
          # @@overload IotEventsDestinationConfiguration(&block)
          #   Set :IotEventsDestinationConfiguration from block via instance eval of a new IotEventsDestinationConfiguration
          def IotEventsDestinationConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:IotEventsDestinationConfiguration, value, attr_class: IotEventsDestinationConfiguration, **value_hash, &block)
          end

          #   @param [S3DestinationConfiguration|JSONable] value
          #     The value to use for S3DestinationConfiguration
          # @@overload S3DestinationConfiguration(&block)
          #   Set :S3DestinationConfiguration from block via instance eval of a new S3DestinationConfiguration
          def S3DestinationConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:S3DestinationConfiguration, value, attr_class: S3DestinationConfiguration, **value_hash, &block)
          end
        end

        # Property Definition QueryAction
        class QueryAction < PropertyType
          # @param [Array<Filter>|JSONable>] values
          #   The List of values to use for Filters
          def Filters(values)
            dsl_list_attribute(:Filters, values)
          end

          #  @param [Filter|JSONable] value  Append value to the List
          #    The List of values to use for Filters
          # @@overload Filter(&block)
          # Append value to the List from block via instance eval of a new Filter
          def Filter(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Filters, value, fn_if: fn_if, attr_class: Filter, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for SqlQuery
          def SqlQuery(value)
            dsl_attribute(:SqlQuery, value)
          end
        end

        # Property Definition TriggeringDataset
        class TriggeringDataset < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for DatasetName
          def DatasetName(value)
            dsl_attribute(:DatasetName, value)
          end
        end

        # Property Definition ContainerAction
        class ContainerAction < PropertyType
          # @param [Array<Variable>|JSONable>] values
          #   The List of values to use for Variables
          def Variables(values)
            dsl_list_attribute(:Variables, values)
          end

          #  @param [Variable|JSONable] value  Append value to the List
          #    The List of values to use for Variables
          # @@overload Variabl(&block)
          # Append value to the List from block via instance eval of a new Variable
          def Variabl(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Variables, value, fn_if: fn_if, attr_class: Variable, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for ExecutionRoleArn
          def ExecutionRoleArn(value)
            dsl_attribute(:ExecutionRoleArn, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Image
          def Image(value)
            dsl_attribute(:Image, value)
          end

          #   @param [ResourceConfiguration|JSONable] value
          #     The value to use for ResourceConfiguration
          # @@overload ResourceConfiguration(&block)
          #   Set :ResourceConfiguration from block via instance eval of a new ResourceConfiguration
          def ResourceConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:ResourceConfiguration, value, attr_class: ResourceConfiguration, **value_hash, &block)
          end
        end

        # Property Definition Schedule
        class Schedule < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ScheduleExpression
          def ScheduleExpression(value)
            dsl_attribute(:ScheduleExpression, value)
          end
        end

        # Property Definition Variable
        class Variable < PropertyType
          #   @param [DatasetContentVersionValue|JSONable] value
          #     The value to use for DatasetContentVersionValue
          # @@overload DatasetContentVersionValue(&block)
          #   Set :DatasetContentVersionValue from block via instance eval of a new DatasetContentVersionValue
          def DatasetContentVersionValue(value = nil, **value_hash, &block)
            dsl_attribute(:DatasetContentVersionValue, value, attr_class: DatasetContentVersionValue, **value_hash, &block)
          end

          #   @param [Number|JSONable] value
          #     The value to use for DoubleValue
          def DoubleValue(value)
            dsl_attribute(:DoubleValue, value)
          end

          #   @param [OutputFileUriValue|JSONable] value
          #     The value to use for OutputFileUriValue
          # @@overload OutputFileUriValue(&block)
          #   Set :OutputFileUriValue from block via instance eval of a new OutputFileUriValue
          def OutputFileUriValue(value = nil, **value_hash, &block)
            dsl_attribute(:OutputFileUriValue, value, attr_class: OutputFileUriValue, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for VariableName
          def VariableName(value)
            dsl_attribute(:VariableName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for StringValue
          def StringValue(value)
            dsl_attribute(:StringValue, value)
          end
        end

        # Property Definition Filter
        class Filter < PropertyType
          #   @param [DeltaTime|JSONable] value
          #     The value to use for DeltaTime
          # @@overload DeltaTime(&block)
          #   Set :DeltaTime from block via instance eval of a new DeltaTime
          def DeltaTime(value = nil, **value_hash, &block)
            dsl_attribute(:DeltaTime, value, attr_class: DeltaTime, **value_hash, &block)
          end
        end

        # Property Definition ResourceConfiguration
        class ResourceConfiguration < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for VolumeSizeInGB
          def VolumeSizeInGB(value)
            dsl_attribute(:VolumeSizeInGB, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ComputeType
          def ComputeType(value)
            dsl_attribute(:ComputeType, value)
          end
        end

        # Property Definition IotEventsDestinationConfiguration
        class IotEventsDestinationConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for InputName
          def InputName(value)
            dsl_attribute(:InputName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for RoleArn
          def RoleArn(value)
            dsl_attribute(:RoleArn, value)
          end
        end

        # Property Definition S3DestinationConfiguration
        class S3DestinationConfiguration < PropertyType
          #   @param [GlueConfiguration|JSONable] value
          #     The value to use for GlueConfiguration
          # @@overload GlueConfiguration(&block)
          #   Set :GlueConfiguration from block via instance eval of a new GlueConfiguration
          def GlueConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:GlueConfiguration, value, attr_class: GlueConfiguration, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for Bucket
          def Bucket(value)
            dsl_attribute(:Bucket, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for RoleArn
          def RoleArn(value)
            dsl_attribute(:RoleArn, value)
          end
        end

        # Property Definition OutputFileUriValue
        class OutputFileUriValue < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for FileName
          def FileName(value)
            dsl_attribute(:FileName, value)
          end
        end

        # Property Definition GlueConfiguration
        class GlueConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for TableName
          def TableName(value)
            dsl_attribute(:TableName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for DatabaseName
          def DatabaseName(value)
            dsl_attribute(:DatabaseName, value)
          end
        end

        # Property Definition DatasetContentVersionValue
        class DatasetContentVersionValue < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for DatasetName
          def DatasetName(value)
            dsl_attribute(:DatasetName, value)
          end
        end

        # Property Definition DeltaTime
        class DeltaTime < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for TimeExpression
          def TimeExpression(value)
            dsl_attribute(:TimeExpression, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for OffsetSeconds
          def OffsetSeconds(value)
            dsl_attribute(:OffsetSeconds, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        # @param [Array<Action>|JSONable>] values
        #   The List of values to use for Actions
        def Actions(values)
          dsl_list_attribute(:Actions, values)
        end

        #  @param [Action|JSONable] value  Append value to the List
        #    The List of values to use for Actions
        # @@overload Action(&block)
        # Append value to the List from block via instance eval of a new Action
        def Action(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Actions, value, fn_if: fn_if, attr_class: Action, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for DatasetName
        def DatasetName(value)
          dsl_attribute(:DatasetName, value)
        end

        # @param [Array<DatasetContentDeliveryRule>|JSONable>] values
        #   The List of values to use for ContentDeliveryRules
        def ContentDeliveryRules(values)
          dsl_list_attribute(:ContentDeliveryRules, values)
        end

        #  @param [DatasetContentDeliveryRule|JSONable] value  Append value to the List
        #    The List of values to use for ContentDeliveryRules
        # @@overload ContentDeliveryRule(&block)
        # Append value to the List from block via instance eval of a new DatasetContentDeliveryRule
        def ContentDeliveryRule(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:ContentDeliveryRules, value, fn_if: fn_if, attr_class: DatasetContentDeliveryRule, **value_hash, &block)
        end

        # @param [Array<Trigger>|JSONable>] values
        #   The List of values to use for Triggers
        def Triggers(values)
          dsl_list_attribute(:Triggers, values)
        end

        #  @param [Trigger|JSONable] value  Append value to the List
        #    The List of values to use for Triggers
        # @@overload Trigger(&block)
        # Append value to the List from block via instance eval of a new Trigger
        def Trigger(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Triggers, value, fn_if: fn_if, attr_class: Trigger, **value_hash, &block)
        end

        #   @param [VersioningConfiguration|JSONable] value
        #     The value to use for VersioningConfiguration
        # @@overload VersioningConfiguration(&block)
        #   Set :VersioningConfiguration from block via instance eval of a new VersioningConfiguration
        def VersioningConfiguration(value = nil, **value_hash, &block)
          dsl_attribute(:VersioningConfiguration, value, attr_class: VersioningConfiguration, **value_hash, &block)
        end

        #   @param [RetentionPeriod|JSONable] value
        #     The value to use for RetentionPeriod
        # @@overload RetentionPeriod(&block)
        #   Set :RetentionPeriod from block via instance eval of a new RetentionPeriod
        def RetentionPeriod(value = nil, **value_hash, &block)
          dsl_attribute(:RetentionPeriod, value, attr_class: RetentionPeriod, **value_hash, &block)
        end

        # @param [Array<Tag>|JSONable>] values
        #   The List of values to use for Tags
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    The List of values to use for Tags
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::IoTAnalytics::Dataset]
    def AWS_IoTAnalytics_Dataset(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::IoTAnalytics::Dataset, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
