# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module IoTAnalytics
      # Resource Type definition for AWS::IoTAnalytics::Pipeline
      class Pipeline < ResourceType
        # Property Definition Activity
        class Activity < PropertyType
          #   @param [SelectAttributes|JSONable] value
          #     The value to use for SelectAttributes
          # @@overload SelectAttributes(&block)
          #   Set :SelectAttributes from block via instance eval of a new SelectAttributes
          def SelectAttributes(value = nil, **value_hash, &block)
            dsl_attribute(:SelectAttributes, value, attr_class: SelectAttributes, **value_hash, &block)
          end

          #   @param [Datastore|JSONable] value
          #     The value to use for Datastore
          # @@overload Datastore(&block)
          #   Set :Datastore from block via instance eval of a new Datastore
          def Datastore(value = nil, **value_hash, &block)
            dsl_attribute(:Datastore, value, attr_class: Datastore, **value_hash, &block)
          end

          #   @param [Filter|JSONable] value
          #     The value to use for Filter
          # @@overload Filter(&block)
          #   Set :Filter from block via instance eval of a new Filter
          def Filter(value = nil, **value_hash, &block)
            dsl_attribute(:Filter, value, attr_class: Filter, **value_hash, &block)
          end

          #   @param [AddAttributes|JSONable] value
          #     The value to use for AddAttributes
          # @@overload AddAttributes(&block)
          #   Set :AddAttributes from block via instance eval of a new AddAttributes
          def AddAttributes(value = nil, **value_hash, &block)
            dsl_attribute(:AddAttributes, value, attr_class: AddAttributes, **value_hash, &block)
          end

          #   @param [Channel|JSONable] value
          #     The value to use for Channel
          # @@overload Channel(&block)
          #   Set :Channel from block via instance eval of a new Channel
          def Channel(value = nil, **value_hash, &block)
            dsl_attribute(:Channel, value, attr_class: Channel, **value_hash, &block)
          end

          #   @param [DeviceShadowEnrich|JSONable] value
          #     The value to use for DeviceShadowEnrich
          # @@overload DeviceShadowEnrich(&block)
          #   Set :DeviceShadowEnrich from block via instance eval of a new DeviceShadowEnrich
          def DeviceShadowEnrich(value = nil, **value_hash, &block)
            dsl_attribute(:DeviceShadowEnrich, value, attr_class: DeviceShadowEnrich, **value_hash, &block)
          end

          #   @param [Math|JSONable] value
          #     The value to use for Math
          # @@overload Math(&block)
          #   Set :Math from block via instance eval of a new Math
          def Math(value = nil, **value_hash, &block)
            dsl_attribute(:Math, value, attr_class: Math, **value_hash, &block)
          end

          #   @param [Lambda|JSONable] value
          #     The value to use for Lambda
          # @@overload Lambda(&block)
          #   Set :Lambda from block via instance eval of a new Lambda
          def Lambda(value = nil, **value_hash, &block)
            dsl_attribute(:Lambda, value, attr_class: Lambda, **value_hash, &block)
          end

          #   @param [DeviceRegistryEnrich|JSONable] value
          #     The value to use for DeviceRegistryEnrich
          # @@overload DeviceRegistryEnrich(&block)
          #   Set :DeviceRegistryEnrich from block via instance eval of a new DeviceRegistryEnrich
          def DeviceRegistryEnrich(value = nil, **value_hash, &block)
            dsl_attribute(:DeviceRegistryEnrich, value, attr_class: DeviceRegistryEnrich, **value_hash, &block)
          end

          #   @param [RemoveAttributes|JSONable] value
          #     The value to use for RemoveAttributes
          # @@overload RemoveAttributes(&block)
          #   Set :RemoveAttributes from block via instance eval of a new RemoveAttributes
          def RemoveAttributes(value = nil, **value_hash, &block)
            dsl_attribute(:RemoveAttributes, value, attr_class: RemoveAttributes, **value_hash, &block)
          end
        end

        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        # Property Definition DeviceShadowEnrich
        class DeviceShadowEnrich < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Attribute
          def Attribute(value)
            dsl_attribute(:Attribute, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Next
          def Next(value)
            dsl_attribute(:Next, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ThingName
          def ThingName(value)
            dsl_attribute(:ThingName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for RoleArn
          def RoleArn(value)
            dsl_attribute(:RoleArn, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end
        end

        # Property Definition Filter
        class Filter < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Filter
          def Filter(value)
            dsl_attribute(:Filter, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Next
          def Next(value)
            dsl_attribute(:Next, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end
        end

        # Property Definition RemoveAttributes
        class RemoveAttributes < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Next
          def Next(value)
            dsl_attribute(:Next, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Attributes
          def Attributes(values)
            dsl_list_attribute(:Attributes, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Attributes
          def Attribute(value, fn_if: nil)
            dsl_push_attribute(:Attributes, value, fn_if: fn_if)
          end

          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end
        end

        # Property Definition Datastore
        class Datastore < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for DatastoreName
          def DatastoreName(value)
            dsl_attribute(:DatastoreName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end
        end

        # Property Definition Channel
        class Channel < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ChannelName
          def ChannelName(value)
            dsl_attribute(:ChannelName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Next
          def Next(value)
            dsl_attribute(:Next, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end
        end

        # Property Definition SelectAttributes
        class SelectAttributes < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Next
          def Next(value)
            dsl_attribute(:Next, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Attributes
          def Attributes(values)
            dsl_list_attribute(:Attributes, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Attributes
          def Attribute(value, fn_if: nil)
            dsl_push_attribute(:Attributes, value, fn_if: fn_if)
          end

          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end
        end

        # Property Definition Lambda
        class Lambda < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for BatchSize
          def BatchSize(value)
            dsl_attribute(:BatchSize, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Next
          def Next(value)
            dsl_attribute(:Next, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for LambdaName
          def LambdaName(value)
            dsl_attribute(:LambdaName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end
        end

        # Property Definition DeviceRegistryEnrich
        class DeviceRegistryEnrich < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Attribute
          def Attribute(value)
            dsl_attribute(:Attribute, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Next
          def Next(value)
            dsl_attribute(:Next, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ThingName
          def ThingName(value)
            dsl_attribute(:ThingName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for RoleArn
          def RoleArn(value)
            dsl_attribute(:RoleArn, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end
        end

        # Property Definition AddAttributes
        class AddAttributes < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Next
          def Next(value)
            dsl_attribute(:Next, value)
          end

          #   @param [Object|JSONable] value
          #     The value to use for Attributes
          def Attributes(value)
            dsl_attribute(:Attributes, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end
        end

        # Property Definition Math
        class Math < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Attribute
          def Attribute(value)
            dsl_attribute(:Attribute, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Next
          def Next(value)
            dsl_attribute(:Next, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Math
          def Math(value)
            dsl_attribute(:Math, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for PipelineName
        def PipelineName(value)
          dsl_attribute(:PipelineName, value)
        end

        # @param [Array<Tag>|JSONable>] values
        #   The List of values to use for Tags
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    The List of values to use for Tags
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end

        # @param [Array<Activity>|JSONable>] values
        #   The List of values to use for PipelineActivities
        def PipelineActivities(values)
          dsl_list_attribute(:PipelineActivities, values)
        end

        #  @param [Activity|JSONable] value  Append value to the List
        #    The List of values to use for PipelineActivities
        # @@overload PipelineActivity(&block)
        # Append value to the List from block via instance eval of a new Activity
        def PipelineActivity(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:PipelineActivities, value, fn_if: fn_if, attr_class: Activity, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::IoTAnalytics::Pipeline]
    def AWS_IoTAnalytics_Pipeline(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::IoTAnalytics::Pipeline, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
