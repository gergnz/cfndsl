# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module IoTAnalytics
      # Resource Type definition for AWS::IoTAnalytics::Datastore
      class Datastore < ResourceType
        # Property Definition DatastoreStorage
        class DatastoreStorage < PropertyType
          #   @param [ServiceManagedS3|JSONable] value
          #     The value to use for ServiceManagedS3
          # @@overload ServiceManagedS3(&block)
          #   Set :ServiceManagedS3 from block via instance eval of a new ServiceManagedS3
          def ServiceManagedS3(value = nil, **value_hash, &block)
            dsl_attribute(:ServiceManagedS3, value, attr_class: ServiceManagedS3, **value_hash, &block)
          end

          #   @param [CustomerManagedS3|JSONable] value
          #     The value to use for CustomerManagedS3
          # @@overload CustomerManagedS3(&block)
          #   Set :CustomerManagedS3 from block via instance eval of a new CustomerManagedS3
          def CustomerManagedS3(value = nil, **value_hash, &block)
            dsl_attribute(:CustomerManagedS3, value, attr_class: CustomerManagedS3, **value_hash, &block)
          end
        end

        # Property Definition CustomerManagedS3
        class CustomerManagedS3 < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Bucket
          def Bucket(value)
            dsl_attribute(:Bucket, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for RoleArn
          def RoleArn(value)
            dsl_attribute(:RoleArn, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for KeyPrefix
          def KeyPrefix(value)
            dsl_attribute(:KeyPrefix, value)
          end
        end

        # Property Definition ServiceManagedS3
        class ServiceManagedS3 < PropertyType
        end

        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end
        end

        # Property Definition RetentionPeriod
        class RetentionPeriod < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for NumberOfDays
          def NumberOfDays(value)
            dsl_attribute(:NumberOfDays, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for Unlimited
          def Unlimited(value)
            dsl_attribute(:Unlimited, value)
          end
        end

        #   @param [DatastoreStorage|JSONable] value
        #     The value to use for DatastoreStorage
        # @@overload DatastoreStorage(&block)
        #   Set :DatastoreStorage from block via instance eval of a new DatastoreStorage
        def DatastoreStorage(value = nil, **value_hash, &block)
          dsl_attribute(:DatastoreStorage, value, attr_class: DatastoreStorage, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for DatastoreName
        def DatastoreName(value)
          dsl_attribute(:DatastoreName, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [RetentionPeriod|JSONable] value
        #     The value to use for RetentionPeriod
        # @@overload RetentionPeriod(&block)
        #   Set :RetentionPeriod from block via instance eval of a new RetentionPeriod
        def RetentionPeriod(value = nil, **value_hash, &block)
          dsl_attribute(:RetentionPeriod, value, attr_class: RetentionPeriod, **value_hash, &block)
        end

        # @param [Array<Tag>|JSONable>] values
        #   The List of values to use for Tags
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    The List of values to use for Tags
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::IoTAnalytics::Datastore]
    def AWS_IoTAnalytics_Datastore(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::IoTAnalytics::Datastore, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
