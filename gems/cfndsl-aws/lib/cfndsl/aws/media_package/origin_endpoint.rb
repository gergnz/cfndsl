# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module MediaPackage
      # Resource schema for AWS::MediaPackage::OriginEndpoint
      # @see https://github.com/aws-cloudformation/aws-cloudformation-rpdk.git
      class OriginEndpoint < ResourceType
        # A Microsoft Smooth Streaming (MSS) packaging configuration.
        class MssPackage < PropertyType
          #   @param [Integer|JSONable] value
          #     The time window (in seconds) contained in each manifest.
          def ManifestWindowSeconds(value)
            dsl_attribute(:ManifestWindowSeconds, value)
          end

          #   @param [Integer|JSONable] value
          #     The duration (in seconds) of each segment.
          def SegmentDurationSeconds(value)
            dsl_attribute(:SegmentDurationSeconds, value)
          end

          #   @param [MssEncryption|JSONable] value
          #     The value to use for Encryption
          # @@overload Encryption(&block)
          #   Set :Encryption from block via instance eval of a new MssEncryption
          def Encryption(value = nil, **value_hash, &block)
            dsl_attribute(:Encryption, value, attr_class: MssEncryption, **value_hash, &block)
          end

          #   @param [StreamSelection|JSONable] value
          #     The value to use for StreamSelection
          # @@overload StreamSelection(&block)
          #   Set :StreamSelection from block via instance eval of a new StreamSelection
          def StreamSelection(value = nil, **value_hash, &block)
            dsl_attribute(:StreamSelection, value, attr_class: StreamSelection, **value_hash, &block)
          end
        end

        # A Microsoft Smooth Streaming (MSS) encryption configuration.
        class MssEncryption < PropertyType
          #   @param [SpekeKeyProvider|JSONable] value
          #     The value to use for SpekeKeyProvider
          # @@overload SpekeKeyProvider(&block)
          #   Set :SpekeKeyProvider from block via instance eval of a new SpekeKeyProvider
          def SpekeKeyProvider(value = nil, **value_hash, &block)
            dsl_attribute(:SpekeKeyProvider, value, attr_class: SpekeKeyProvider, **value_hash, &block)
          end
        end

        # A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.
        class DashPackage < PropertyType
          #   @param [Integer|JSONable] value
          #     Duration (in seconds) of each segment. Actual segments will be rounded to the nearest multiple of the source segment duration.
          def SegmentDurationSeconds(value)
            dsl_attribute(:SegmentDurationSeconds, value)
          end

          #   @param [Integer|JSONable] value
          #     Time window (in seconds) contained in each manifest.
          def ManifestWindowSeconds(value)
            dsl_attribute(:ManifestWindowSeconds, value)
          end

          #   @param [String|JSONable] value
          #     The Dynamic Adaptive Streaming over HTTP (DASH) profile type.  When set to "HBBTV_1_5", HbbTV 1.5 compliant output is enabled.
          def Profile(value)
            dsl_attribute(:Profile, value)
          end

          #   @param [Integer|JSONable] value
          #     Minimum duration (in seconds) between potential changes to the Dynamic Adaptive Streaming over HTTP (DASH) Media Presentation Description (MPD).
          def MinUpdatePeriodSeconds(value)
            dsl_attribute(:MinUpdatePeriodSeconds, value)
          end

          #   @param [Integer|JSONable] value
          #     Minimum duration (in seconds) that a player will buffer media before starting the presentation.
          def MinBufferTimeSeconds(value)
            dsl_attribute(:MinBufferTimeSeconds, value)
          end

          #   @param [Integer|JSONable] value
          #     Duration (in seconds) to delay live content before presentation.
          def SuggestedPresentationDelaySeconds(value)
            dsl_attribute(:SuggestedPresentationDelaySeconds, value)
          end

          # @param [Array<String>|JSONable>] values
          #   A list of triggers that controls when the outgoing Dynamic Adaptive Streaming over HTTP (DASH) Media Presentation Description (MPD) will be partitioned into multiple periods. If empty, the content will not be partitioned into more than one period. If the list contains "ADS", new periods will be created where the Channel source contains SCTE-35 ad markers.
          def PeriodTriggers(values)
            dsl_list_attribute(:PeriodTriggers, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    A list of triggers that controls when the outgoing Dynamic Adaptive Streaming over HTTP (DASH) Media Presentation Description (MPD) will be partitioned into multiple periods. If empty, the content will not be partitioned into more than one period. If the list contains "ADS", new periods will be created where the Channel source contains SCTE-35 ad markers.
          def PeriodTrigger(value, fn_if: nil)
            dsl_push_attribute(:PeriodTriggers, value, fn_if: fn_if)
          end

          #   @param [String|JSONable] value
          #     Determines the position of some tags in the Media Presentation Description (MPD).  When set to FULL, elements like SegmentTemplate and ContentProtection are included in each Representation.  When set to COMPACT, duplicate elements are combined and presented at the AdaptationSet level.
          def ManifestLayout(value)
            dsl_attribute(:ManifestLayout, value)
          end

          #   @param [String|JSONable] value
          #     Determines the type of SegmentTemplate included in the Media Presentation Description (MPD).  When set to NUMBER_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Number$ media URLs.  When set to TIME_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Time$ media URLs. When set to NUMBER_WITH_DURATION, only a duration is included in each SegmentTemplate, with $Number$ media URLs.
          def SegmentTemplateFormat(value)
            dsl_attribute(:SegmentTemplateFormat, value)
          end

          # @param [Array<String>|JSONable>] values
          #   A list of SCTE-35 message types that are treated as ad markers in the output.  If empty, no ad markers are output.  Specify multiple items to create ad markers for all of the included message types.
          def AdTriggers(values)
            dsl_list_attribute(:AdTriggers, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    A list of SCTE-35 message types that are treated as ad markers in the output.  If empty, no ad markers are output.  Specify multiple items to create ad markers for all of the included message types.
          def AdTrigger(value, fn_if: nil)
            dsl_push_attribute(:AdTriggers, value, fn_if: fn_if)
          end

          #   @param [String|JSONable] value
          #     The value to use for AdsOnDeliveryRestrictions
          def AdsOnDeliveryRestrictions(value)
            dsl_attribute(:AdsOnDeliveryRestrictions, value)
          end

          #   @param [DashEncryption|JSONable] value
          #     The value to use for Encryption
          # @@overload Encryption(&block)
          #   Set :Encryption from block via instance eval of a new DashEncryption
          def Encryption(value = nil, **value_hash, &block)
            dsl_attribute(:Encryption, value, attr_class: DashEncryption, **value_hash, &block)
          end

          #   @param [StreamSelection|JSONable] value
          #     The value to use for StreamSelection
          # @@overload StreamSelection(&block)
          #   Set :StreamSelection from block via instance eval of a new StreamSelection
          def StreamSelection(value = nil, **value_hash, &block)
            dsl_attribute(:StreamSelection, value, attr_class: StreamSelection, **value_hash, &block)
          end
        end

        # A Dynamic Adaptive Streaming over HTTP (DASH) encryption configuration.
        class DashEncryption < PropertyType
          #   @param [Integer|JSONable] value
          #     Time (in seconds) between each encryption key rotation.
          def KeyRotationIntervalSeconds(value)
            dsl_attribute(:KeyRotationIntervalSeconds, value)
          end

          #   @param [SpekeKeyProvider|JSONable] value
          #     The value to use for SpekeKeyProvider
          # @@overload SpekeKeyProvider(&block)
          #   Set :SpekeKeyProvider from block via instance eval of a new SpekeKeyProvider
          def SpekeKeyProvider(value = nil, **value_hash, &block)
            dsl_attribute(:SpekeKeyProvider, value, attr_class: SpekeKeyProvider, **value_hash, &block)
          end
        end

        # CDN Authorization credentials
        class Authorization < PropertyType
          #   @param [String|JSONable] value
          #     The Amazon Resource Name (ARN) for the IAM role that allows MediaPackage to communicate with AWS Secrets Manager.
          def SecretsRoleArn(value)
            dsl_attribute(:SecretsRoleArn, value)
          end

          #   @param [String|JSONable] value
          #     The Amazon Resource Name (ARN) for the secret in Secrets Manager that your Content Distribution Network (CDN) uses for authorization to access your endpoint.
          def CdnIdentifierSecret(value)
            dsl_attribute(:CdnIdentifierSecret, value)
          end
        end

        # An HTTP Live Streaming (HLS) packaging configuration.
        class HlsPackage < PropertyType
          #   @param [Integer|JSONable] value
          #     Duration (in seconds) of each fragment. Actual fragments will be rounded to the nearest multiple of the source fragment duration.
          def SegmentDurationSeconds(value)
            dsl_attribute(:SegmentDurationSeconds, value)
          end

          #   @param [Integer|JSONable] value
          #     Time window (in seconds) contained in each parent manifest.
          def PlaylistWindowSeconds(value)
            dsl_attribute(:PlaylistWindowSeconds, value)
          end

          #   @param [String|JSONable] value
          #     The HTTP Live Streaming (HLS) playlist type. When either "EVENT" or "VOD" is specified, a corresponding EXT-X-PLAYLIST-TYPE entry will be included in the media playlist.
          def PlaylistType(value)
            dsl_attribute(:PlaylistType, value)
          end

          #   @param [String|JSONable] value
          #     This setting controls how ad markers are included in the packaged OriginEndpoint. "NONE" will omit all SCTE-35 ad markers from the output. "PASSTHROUGH" causes the manifest to contain a copy of the SCTE-35 ad markers (comments) taken directly from the input HTTP Live Streaming (HLS) manifest. "SCTE35_ENHANCED" generates ad markers and blackout tags based on SCTE-35 messages in the input source. "DATERANGE" inserts EXT-X-DATERANGE tags to signal ad and program transition events in HLS and CMAF manifests. For this option, you must set a programDateTimeIntervalSeconds value that is greater than 0.
          def AdMarkers(value)
            dsl_attribute(:AdMarkers, value)
          end

          # @param [Array<String>|JSONable>] values
          #   A list of SCTE-35 message types that are treated as ad markers in the output.  If empty, no ad markers are output.  Specify multiple items to create ad markers for all of the included message types.
          def AdTriggers(values)
            dsl_list_attribute(:AdTriggers, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    A list of SCTE-35 message types that are treated as ad markers in the output.  If empty, no ad markers are output.  Specify multiple items to create ad markers for all of the included message types.
          def AdTrigger(value, fn_if: nil)
            dsl_push_attribute(:AdTriggers, value, fn_if: fn_if)
          end

          #   @param [String|JSONable] value
          #     The value to use for AdsOnDeliveryRestrictions
          def AdsOnDeliveryRestrictions(value)
            dsl_attribute(:AdsOnDeliveryRestrictions, value)
          end

          #   @param [Integer|JSONable] value
          #     The interval (in seconds) between each EXT-X-PROGRAM-DATE-TIME tag inserted into manifests. Additionally, when an interval is specified ID3Timed Metadata messages will be generated every 5 seconds using the ingest time of the content. If the interval is not specified, or set to 0, then no EXT-X-PROGRAM-DATE-TIME tags will be inserted into manifests and no ID3Timed Metadata messages will be generated. Note that irrespective of this parameter, if any ID3 Timed Metadata is found in HTTP Live Streaming (HLS) input, it will be passed through to HLS output.
          def ProgramDateTimeIntervalSeconds(value)
            dsl_attribute(:ProgramDateTimeIntervalSeconds, value)
          end

          #   @param [Boolean|JSONable] value
          #     When enabled, an I-Frame only stream will be included in the output.
          def IncludeIframeOnlyStream(value)
            dsl_attribute(:IncludeIframeOnlyStream, value)
          end

          #   @param [Boolean|JSONable] value
          #     When enabled, audio streams will be placed in rendition groups in the output.
          def UseAudioRenditionGroup(value)
            dsl_attribute(:UseAudioRenditionGroup, value)
          end

          #   @param [HlsEncryption|JSONable] value
          #     The value to use for Encryption
          # @@overload Encryption(&block)
          #   Set :Encryption from block via instance eval of a new HlsEncryption
          def Encryption(value = nil, **value_hash, &block)
            dsl_attribute(:Encryption, value, attr_class: HlsEncryption, **value_hash, &block)
          end

          #   @param [StreamSelection|JSONable] value
          #     The value to use for StreamSelection
          # @@overload StreamSelection(&block)
          #   Set :StreamSelection from block via instance eval of a new StreamSelection
          def StreamSelection(value = nil, **value_hash, &block)
            dsl_attribute(:StreamSelection, value, attr_class: StreamSelection, **value_hash, &block)
          end
        end

        # An HTTP Live Streaming (HLS) encryption configuration.
        class HlsEncryption < PropertyType
          #   @param [String|JSONable] value
          #     The encryption method to use.
          def EncryptionMethod(value)
            dsl_attribute(:EncryptionMethod, value)
          end

          #   @param [String|JSONable] value
          #     A constant initialization vector for encryption (optional). When not specified the initialization vector will be periodically rotated.
          def ConstantInitializationVector(value)
            dsl_attribute(:ConstantInitializationVector, value)
          end

          #   @param [Integer|JSONable] value
          #     Interval (in seconds) between each encryption key rotation.
          def KeyRotationIntervalSeconds(value)
            dsl_attribute(:KeyRotationIntervalSeconds, value)
          end

          #   @param [Boolean|JSONable] value
          #     When enabled, the EXT-X-KEY tag will be repeated in output manifests.
          def RepeatExtXKey(value)
            dsl_attribute(:RepeatExtXKey, value)
          end

          #   @param [SpekeKeyProvider|JSONable] value
          #     The value to use for SpekeKeyProvider
          # @@overload SpekeKeyProvider(&block)
          #   Set :SpekeKeyProvider from block via instance eval of a new SpekeKeyProvider
          def SpekeKeyProvider(value = nil, **value_hash, &block)
            dsl_attribute(:SpekeKeyProvider, value, attr_class: SpekeKeyProvider, **value_hash, &block)
          end
        end

        # A Common Media Application Format (CMAF) packaging configuration.
        class CmafPackage < PropertyType
          #   @param [Integer|JSONable] value
          #     Duration (in seconds) of each segment. Actual segments will be rounded to the nearest multiple of the source segment duration.
          def SegmentDurationSeconds(value)
            dsl_attribute(:SegmentDurationSeconds, value)
          end

          #   @param [String|JSONable] value
          #     An optional custom string that is prepended to the name of each segment. If not specified, it defaults to the ChannelId.
          def SegmentPrefix(value)
            dsl_attribute(:SegmentPrefix, value)
          end

          #   @param [CmafEncryption|JSONable] value
          #     The value to use for Encryption
          # @@overload Encryption(&block)
          #   Set :Encryption from block via instance eval of a new CmafEncryption
          def Encryption(value = nil, **value_hash, &block)
            dsl_attribute(:Encryption, value, attr_class: CmafEncryption, **value_hash, &block)
          end

          #   @param [StreamSelection|JSONable] value
          #     The value to use for StreamSelection
          # @@overload StreamSelection(&block)
          #   Set :StreamSelection from block via instance eval of a new StreamSelection
          def StreamSelection(value = nil, **value_hash, &block)
            dsl_attribute(:StreamSelection, value, attr_class: StreamSelection, **value_hash, &block)
          end

          # @param [Array<HlsManifest>|JSONable>] values
          #   A list of HLS manifest configurations
          def HlsManifests(values)
            dsl_list_attribute(:HlsManifests, values)
          end

          #  @param [HlsManifest|JSONable] value  Append value to the List
          #    A list of HLS manifest configurations
          # @@overload HlsManifest(&block)
          # Append value to the List from block via instance eval of a new HlsManifest
          def HlsManifest(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:HlsManifests, value, fn_if: fn_if, attr_class: HlsManifest, **value_hash, &block)
          end
        end

        # A Common Media Application Format (CMAF) encryption configuration.
        class CmafEncryption < PropertyType
          #   @param [Integer|JSONable] value
          #     Time (in seconds) between each encryption key rotation.
          def KeyRotationIntervalSeconds(value)
            dsl_attribute(:KeyRotationIntervalSeconds, value)
          end

          #   @param [SpekeKeyProvider|JSONable] value
          #     The value to use for SpekeKeyProvider
          # @@overload SpekeKeyProvider(&block)
          #   Set :SpekeKeyProvider from block via instance eval of a new SpekeKeyProvider
          def SpekeKeyProvider(value = nil, **value_hash, &block)
            dsl_attribute(:SpekeKeyProvider, value, attr_class: SpekeKeyProvider, **value_hash, &block)
          end
        end

        # A HTTP Live Streaming (HLS) manifest configuration.
        class HlsManifest < PropertyType
          #   @param [String|JSONable] value
          #     The ID of the manifest. The ID must be unique within the OriginEndpoint and it cannot be changed after it is created.
          def Id(value)
            dsl_attribute(:Id, value)
          end

          #   @param [String|JSONable] value
          #     An optional short string appended to the end of the OriginEndpoint URL. If not specified, defaults to the manifestName for the OriginEndpoint.
          def ManifestName(value)
            dsl_attribute(:ManifestName, value)
          end

          #   @param [String|JSONable] value
          #     The URL of the packaged OriginEndpoint for consumption.
          def Url(value)
            dsl_attribute(:Url, value)
          end

          #   @param [Integer|JSONable] value
          #     Time window (in seconds) contained in each parent manifest.
          def PlaylistWindowSeconds(value)
            dsl_attribute(:PlaylistWindowSeconds, value)
          end

          #   @param [String|JSONable] value
          #     The HTTP Live Streaming (HLS) playlist type. When either "EVENT" or "VOD" is specified, a corresponding EXT-X-PLAYLIST-TYPE entry will be included in the media playlist.
          def PlaylistType(value)
            dsl_attribute(:PlaylistType, value)
          end

          #   @param [String|JSONable] value
          #     This setting controls how ad markers are included in the packaged OriginEndpoint. "NONE" will omit all SCTE-35 ad markers from the output. "PASSTHROUGH" causes the manifest to contain a copy of the SCTE-35 ad markers (comments) taken directly from the input HTTP Live Streaming (HLS) manifest. "SCTE35_ENHANCED" generates ad markers and blackout tags based on SCTE-35 messages in the input source. "DATERANGE" inserts EXT-X-DATERANGE tags to signal ad and program transition events in HLS and CMAF manifests. For this option, you must set a programDateTimeIntervalSeconds value that is greater than 0.
          def AdMarkers(value)
            dsl_attribute(:AdMarkers, value)
          end

          #   @param [Integer|JSONable] value
          #     The interval (in seconds) between each EXT-X-PROGRAM-DATE-TIME tag inserted into manifests. Additionally, when an interval is specified ID3Timed Metadata messages will be generated every 5 seconds using the ingest time of the content. If the interval is not specified, or set to 0, then no EXT-X-PROGRAM-DATE-TIME tags will be inserted into manifests and no ID3Timed Metadata messages will be generated. Note that irrespective of this parameter, if any ID3 Timed Metadata is found in HTTP Live Streaming (HLS) input, it will be passed through to HLS output.
          def ProgramDateTimeIntervalSeconds(value)
            dsl_attribute(:ProgramDateTimeIntervalSeconds, value)
          end

          #   @param [Boolean|JSONable] value
          #     When enabled, an I-Frame only stream will be included in the output.
          def IncludeIframeOnlyStream(value)
            dsl_attribute(:IncludeIframeOnlyStream, value)
          end

          # @param [Array<String>|JSONable>] values
          #   A list of SCTE-35 message types that are treated as ad markers in the output.  If empty, no ad markers are output.  Specify multiple items to create ad markers for all of the included message types.
          def AdTriggers(values)
            dsl_list_attribute(:AdTriggers, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    A list of SCTE-35 message types that are treated as ad markers in the output.  If empty, no ad markers are output.  Specify multiple items to create ad markers for all of the included message types.
          def AdTrigger(value, fn_if: nil)
            dsl_push_attribute(:AdTriggers, value, fn_if: fn_if)
          end

          #   @param [String|JSONable] value
          #     The value to use for AdsOnDeliveryRestrictions
          def AdsOnDeliveryRestrictions(value)
            dsl_attribute(:AdsOnDeliveryRestrictions, value)
          end
        end

        # A StreamSelection configuration.
        class StreamSelection < PropertyType
          #   @param [Integer|JSONable] value
          #     The minimum video bitrate (bps) to include in output.
          def MinVideoBitsPerSecond(value)
            dsl_attribute(:MinVideoBitsPerSecond, value)
          end

          #   @param [Integer|JSONable] value
          #     The maximum video bitrate (bps) to include in output.
          def MaxVideoBitsPerSecond(value)
            dsl_attribute(:MaxVideoBitsPerSecond, value)
          end

          #   @param [String|JSONable] value
          #     A directive that determines the order of streams in the output.
          def StreamOrder(value)
            dsl_attribute(:StreamOrder, value)
          end
        end

        # A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.
        class SpekeKeyProvider < PropertyType
          #   @param [String|JSONable] value
          #     The resource ID to include in key requests.
          def ResourceId(value)
            dsl_attribute(:ResourceId, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The system IDs to include in key requests.
          def SystemIds(values)
            dsl_list_attribute(:SystemIds, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The system IDs to include in key requests.
          def SystemId(value, fn_if: nil)
            dsl_push_attribute(:SystemIds, value, fn_if: fn_if)
          end

          #   @param [String|JSONable] value
          #     The URL of the external key provider service.
          def Url(value)
            dsl_attribute(:Url, value)
          end

          #   @param [String|JSONable] value
          #     An Amazon Resource Name (ARN) of an IAM role that AWS Elemental MediaPackage will assume when accessing the key provider service.
          def RoleArn(value)
            dsl_attribute(:RoleArn, value)
          end

          #   @param [String|JSONable] value
          #     An Amazon Resource Name (ARN) of a Certificate Manager certificate that MediaPackage will use for enforcing secure end-to-end data transfer with the key provider service.
          def CertificateArn(value)
            dsl_attribute(:CertificateArn, value)
          end
        end

        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        #   @param [String|JSONable] value
        #     The Amazon Resource Name (ARN) assigned to the OriginEndpoint.
        def Arn(value)
          dsl_attribute(:Arn, value)
        end

        #   @param [String|JSONable] value
        #     The URL of the packaged OriginEndpoint for consumption.
        def Url(value)
          dsl_attribute(:Url, value)
        end

        #   @param [String|JSONable] value
        #     The ID of the OriginEndpoint.
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The ID of the Channel the OriginEndpoint is associated with.
        def ChannelId(value)
          dsl_attribute(:ChannelId, value)
        end

        #   @param [String|JSONable] value
        #     A short text description of the OriginEndpoint.
        def Description(value)
          dsl_attribute(:Description, value)
        end

        # @param [Array<String>|JSONable>] values
        #   A list of source IP CIDR blocks that will be allowed to access the OriginEndpoint.
        def Whitelists(values)
          dsl_list_attribute(:Whitelist, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    A list of source IP CIDR blocks that will be allowed to access the OriginEndpoint.
        def Whitelist(value, fn_if: nil)
          dsl_push_attribute(:Whitelist, value, fn_if: fn_if)
        end

        #   @param [Integer|JSONable] value
        #     Maximum duration (seconds) of content to retain for startover playback. If not specified, startover playback will be disabled for the OriginEndpoint.
        def StartoverWindowSeconds(value)
          dsl_attribute(:StartoverWindowSeconds, value)
        end

        #   @param [Integer|JSONable] value
        #     Amount of delay (seconds) to enforce on the playback of live content. If not specified, there will be no time delay in effect for the OriginEndpoint.
        def TimeDelaySeconds(value)
          dsl_attribute(:TimeDelaySeconds, value)
        end

        #   @param [String|JSONable] value
        #     A short string appended to the end of the OriginEndpoint URL.
        def ManifestName(value)
          dsl_attribute(:ManifestName, value)
        end

        #   @param [String|JSONable] value
        #     Control whether origination of video is allowed for this OriginEndpoint. If set to ALLOW, the OriginEndpoint may by requested, pursuant to any other form of access control. If set to DENY, the OriginEndpoint may not be requested. This can be helpful for Live to VOD harvesting, or for temporarily disabling origination
        def Origination(value)
          dsl_attribute(:Origination, value)
        end

        #   @param [Authorization|JSONable] value
        #     The value to use for Authorization
        # @@overload Authorization(&block)
        #   Set :Authorization from block via instance eval of a new Authorization
        def Authorization(value = nil, **value_hash, &block)
          dsl_attribute(:Authorization, value, attr_class: Authorization, **value_hash, &block)
        end

        #   @param [HlsPackage|JSONable] value
        #     The value to use for HlsPackage
        # @@overload HlsPackage(&block)
        #   Set :HlsPackage from block via instance eval of a new HlsPackage
        def HlsPackage(value = nil, **value_hash, &block)
          dsl_attribute(:HlsPackage, value, attr_class: HlsPackage, **value_hash, &block)
        end

        #   @param [DashPackage|JSONable] value
        #     The value to use for DashPackage
        # @@overload DashPackage(&block)
        #   Set :DashPackage from block via instance eval of a new DashPackage
        def DashPackage(value = nil, **value_hash, &block)
          dsl_attribute(:DashPackage, value, attr_class: DashPackage, **value_hash, &block)
        end

        #   @param [MssPackage|JSONable] value
        #     The value to use for MssPackage
        # @@overload MssPackage(&block)
        #   Set :MssPackage from block via instance eval of a new MssPackage
        def MssPackage(value = nil, **value_hash, &block)
          dsl_attribute(:MssPackage, value, attr_class: MssPackage, **value_hash, &block)
        end

        #   @param [CmafPackage|JSONable] value
        #     The value to use for CmafPackage
        # @@overload CmafPackage(&block)
        #   Set :CmafPackage from block via instance eval of a new CmafPackage
        def CmafPackage(value = nil, **value_hash, &block)
          dsl_attribute(:CmafPackage, value, attr_class: CmafPackage, **value_hash, &block)
        end

        # @param [Array<Tag>|JSONable>] values
        #   A collection of tags associated with a resource
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    A collection of tags associated with a resource
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::MediaPackage::OriginEndpoint]
    def AWS_MediaPackage_OriginEndpoint(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::MediaPackage::OriginEndpoint, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
