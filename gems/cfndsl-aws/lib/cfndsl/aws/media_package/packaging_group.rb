# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module MediaPackage
      # Resource schema for AWS::MediaPackage::PackagingGroup
      # @see https://github.com/aws-cloudformation/aws-cloudformation-resource-providers-mediapackage.git
      class PackagingGroup < ResourceType
        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        # Property Definition Authorization
        class Authorization < PropertyType
          #   @param [String|JSONable] value
          #     The Amazon Resource Name (ARN) for the secret in AWS Secrets Manager that is used for CDN authorization.
          def CdnIdentifierSecret(value)
            dsl_attribute(:CdnIdentifierSecret, value)
          end

          #   @param [String|JSONable] value
          #     The Amazon Resource Name (ARN) for the IAM role that allows MediaPackage to communicate with AWS Secrets Manager.
          def SecretsRoleArn(value)
            dsl_attribute(:SecretsRoleArn, value)
          end
        end

        #   @param [String|JSONable] value
        #     The ID of the PackagingGroup.
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The ARN of the PackagingGroup.
        def Arn(value)
          dsl_attribute(:Arn, value)
        end

        #   @param [String|JSONable] value
        #     The fully qualified domain name for Assets in the PackagingGroup.
        def DomainName(value)
          dsl_attribute(:DomainName, value)
        end

        #   @param [Authorization|JSONable] value
        #     CDN Authorization
        # @@overload Authorization(&block)
        #   Set :Authorization from block via instance eval of a new Authorization
        def Authorization(value = nil, **value_hash, &block)
          dsl_attribute(:Authorization, value, attr_class: Authorization, **value_hash, &block)
        end

        # @param [Array<Tag>|JSONable>] values
        #   A collection of tags associated with a resource
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    A collection of tags associated with a resource
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::MediaPackage::PackagingGroup]
    def AWS_MediaPackage_PackagingGroup(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::MediaPackage::PackagingGroup, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
