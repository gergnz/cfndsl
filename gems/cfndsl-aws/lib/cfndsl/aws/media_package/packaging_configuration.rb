# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module MediaPackage
      # Resource schema for AWS::MediaPackage::PackagingConfiguration
      # @see https://github.com/aws-cloudformation/aws-cloudformation-rpdk.git
      class PackagingConfiguration < ResourceType
        # A StreamSelection configuration.
        class StreamSelection < PropertyType
          #   @param [Integer|JSONable] value
          #     The maximum video bitrate (bps) to include in output.
          def MaxVideoBitsPerSecond(value)
            dsl_attribute(:MaxVideoBitsPerSecond, value)
          end

          #   @param [Integer|JSONable] value
          #     The minimum video bitrate (bps) to include in output.
          def MinVideoBitsPerSecond(value)
            dsl_attribute(:MinVideoBitsPerSecond, value)
          end

          #   @param [String|JSONable] value
          #     A directive that determines the order of streams in the output.
          def StreamOrder(value)
            dsl_attribute(:StreamOrder, value)
          end
        end

        # An HTTP Live Streaming (HLS) manifest configuration.
        class HlsManifest < PropertyType
          #   @param [String|JSONable] value
          #     This setting controls how ad markers are included in the packaged OriginEndpoint. “NONE” will omit all SCTE-35 ad markers from the output. “PASSTHROUGH” causes the manifest to contain a copy of the SCTE-35 ad markers (comments) taken directly from the input HTTP Live Streaming (HLS) manifest. “SCTE35_ENHANCED” generates ad markers and blackout tags based on SCTE-35 messages in the input source.
          def AdMarkers(value)
            dsl_attribute(:AdMarkers, value)
          end

          #   @param [Boolean|JSONable] value
          #     When enabled, an I-Frame only stream will be included in the output.
          def IncludeIframeOnlyStream(value)
            dsl_attribute(:IncludeIframeOnlyStream, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ManifestName
          def ManifestName(value)
            dsl_attribute(:ManifestName, value)
          end

          #   @param [Integer|JSONable] value
          #     The interval (in seconds) between each EXT-X-PROGRAM-DATE-TIME tag inserted into manifests. Additionally, when an interval is specified ID3Timed Metadata messages will be generated every 5 seconds using the ingest time of the content. If the interval is not specified, or set to 0, then no EXT-X-PROGRAM-DATE-TIME tags will be inserted into manifests and no ID3Timed Metadata messages will be generated. Note that irrespective of this parameter, if any ID3 Timed Metadata is found in HTTP Live Streaming (HLS) input, it will be passed through to HLS output.
          def ProgramDateTimeIntervalSeconds(value)
            dsl_attribute(:ProgramDateTimeIntervalSeconds, value)
          end

          #   @param [Boolean|JSONable] value
          #     When enabled, the EXT-X-KEY tag will be repeated in output manifests.
          def RepeatExtXKey(value)
            dsl_attribute(:RepeatExtXKey, value)
          end

          #   @param [StreamSelection|JSONable] value
          #     The value to use for StreamSelection
          # @@overload StreamSelection(&block)
          #   Set :StreamSelection from block via instance eval of a new StreamSelection
          def StreamSelection(value = nil, **value_hash, &block)
            dsl_attribute(:StreamSelection, value, attr_class: StreamSelection, **value_hash, &block)
          end
        end

        # A DASH manifest configuration.
        class DashManifest < PropertyType
          #   @param [String|JSONable] value
          #     Determines the position of some tags in the Media Presentation Description (MPD). When set to FULL, elements like SegmentTemplate and ContentProtection are included in each Representation. When set to COMPACT, duplicate elements are combined and presented at the AdaptationSet level.
          def ManifestLayout(value)
            dsl_attribute(:ManifestLayout, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ManifestName
          def ManifestName(value)
            dsl_attribute(:ManifestName, value)
          end

          #   @param [Integer|JSONable] value
          #     Minimum duration (in seconds) that a player will buffer media before starting the presentation.
          def MinBufferTimeSeconds(value)
            dsl_attribute(:MinBufferTimeSeconds, value)
          end

          #   @param [String|JSONable] value
          #     The Dynamic Adaptive Streaming over HTTP (DASH) profile type. When set to “HBBTV_1_5”, HbbTV 1.5 compliant output is enabled.
          def Profile(value)
            dsl_attribute(:Profile, value)
          end

          #   @param [StreamSelection|JSONable] value
          #     The value to use for StreamSelection
          # @@overload StreamSelection(&block)
          #   Set :StreamSelection from block via instance eval of a new StreamSelection
          def StreamSelection(value = nil, **value_hash, &block)
            dsl_attribute(:StreamSelection, value, attr_class: StreamSelection, **value_hash, &block)
          end
        end

        # A Microsoft Smooth Streaming (MSS) manifest configuration.
        class MssManifest < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ManifestName
          def ManifestName(value)
            dsl_attribute(:ManifestName, value)
          end

          #   @param [StreamSelection|JSONable] value
          #     The value to use for StreamSelection
          # @@overload StreamSelection(&block)
          #   Set :StreamSelection from block via instance eval of a new StreamSelection
          def StreamSelection(value = nil, **value_hash, &block)
            dsl_attribute(:StreamSelection, value, attr_class: StreamSelection, **value_hash, &block)
          end
        end

        # A CMAF encryption configuration.
        class CmafEncryption < PropertyType
          #   @param [|JSONable] value
          #     The value to use for SpekeKeyProvider
          def SpekeKeyProvider(value)
            dsl_attribute(:SpekeKeyProvider, value)
          end
        end

        # A CMAF packaging configuration.
        class CmafPackage < PropertyType
          #   @param [CmafEncryption|JSONable] value
          #     The value to use for Encryption
          # @@overload Encryption(&block)
          #   Set :Encryption from block via instance eval of a new CmafEncryption
          def Encryption(value = nil, **value_hash, &block)
            dsl_attribute(:Encryption, value, attr_class: CmafEncryption, **value_hash, &block)
          end

          # @param [Array<HlsManifest>|JSONable>] values
          #   A list of HLS manifest configurations.
          def HlsManifests(values)
            dsl_list_attribute(:HlsManifests, values)
          end

          #  @param [HlsManifest|JSONable] value  Append value to the List
          #    A list of HLS manifest configurations.
          # @@overload HlsManifest(&block)
          # Append value to the List from block via instance eval of a new HlsManifest
          def HlsManifest(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:HlsManifests, value, fn_if: fn_if, attr_class: HlsManifest, **value_hash, &block)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for SegmentDurationSeconds
          def SegmentDurationSeconds(value)
            dsl_attribute(:SegmentDurationSeconds, value)
          end
        end

        # A Dynamic Adaptive Streaming over HTTP (DASH) encryption configuration.
        class DashEncryption < PropertyType
          #   @param [|JSONable] value
          #     The value to use for SpekeKeyProvider
          def SpekeKeyProvider(value)
            dsl_attribute(:SpekeKeyProvider, value)
          end
        end

        # A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.
        class DashPackage < PropertyType
          # @param [Array<DashManifest>|JSONable>] values
          #   A list of DASH manifest configurations.
          def DashManifests(values)
            dsl_list_attribute(:DashManifests, values)
          end

          #  @param [DashManifest|JSONable] value  Append value to the List
          #    A list of DASH manifest configurations.
          # @@overload DashManifest(&block)
          # Append value to the List from block via instance eval of a new DashManifest
          def DashManifest(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:DashManifests, value, fn_if: fn_if, attr_class: DashManifest, **value_hash, &block)
          end

          #   @param [DashEncryption|JSONable] value
          #     The value to use for Encryption
          # @@overload Encryption(&block)
          #   Set :Encryption from block via instance eval of a new DashEncryption
          def Encryption(value = nil, **value_hash, &block)
            dsl_attribute(:Encryption, value, attr_class: DashEncryption, **value_hash, &block)
          end

          # @param [Array<String>|JSONable>] values
          #   A list of triggers that controls when the outgoing Dynamic Adaptive Streaming over HTTP (DASH) Media Presentation Description (MPD) will be partitioned into multiple periods. If empty, the content will not be partitioned into more than one period. If the list contains “ADS”, new periods will be created where the Asset contains SCTE-35 ad markers.
          def PeriodTriggers(values)
            dsl_list_attribute(:PeriodTriggers, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    A list of triggers that controls when the outgoing Dynamic Adaptive Streaming over HTTP (DASH) Media Presentation Description (MPD) will be partitioned into multiple periods. If empty, the content will not be partitioned into more than one period. If the list contains “ADS”, new periods will be created where the Asset contains SCTE-35 ad markers.
          def PeriodTrigger(value, fn_if: nil)
            dsl_push_attribute(:PeriodTriggers, value, fn_if: fn_if)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for SegmentDurationSeconds
          def SegmentDurationSeconds(value)
            dsl_attribute(:SegmentDurationSeconds, value)
          end

          #   @param [String|JSONable] value
          #     Determines the type of SegmentTemplate included in the Media Presentation Description (MPD). When set to NUMBER_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Number$ media URLs. When set to TIME_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Time$ media URLs. When set to NUMBER_WITH_DURATION, only a duration is included in each SegmentTemplate, with $Number$ media URLs.
          def SegmentTemplateFormat(value)
            dsl_attribute(:SegmentTemplateFormat, value)
          end
        end

        # An HTTP Live Streaming (HLS) encryption configuration.
        class HlsEncryption < PropertyType
          #   @param [String|JSONable] value
          #     An HTTP Live Streaming (HLS) encryption configuration.
          def ConstantInitializationVector(value)
            dsl_attribute(:ConstantInitializationVector, value)
          end

          #   @param [String|JSONable] value
          #     The encryption method to use.
          def EncryptionMethod(value)
            dsl_attribute(:EncryptionMethod, value)
          end

          #   @param [|JSONable] value
          #     The value to use for SpekeKeyProvider
          def SpekeKeyProvider(value)
            dsl_attribute(:SpekeKeyProvider, value)
          end
        end

        # An HTTP Live Streaming (HLS) packaging configuration.
        class HlsPackage < PropertyType
          #   @param [HlsEncryption|JSONable] value
          #     The value to use for Encryption
          # @@overload Encryption(&block)
          #   Set :Encryption from block via instance eval of a new HlsEncryption
          def Encryption(value = nil, **value_hash, &block)
            dsl_attribute(:Encryption, value, attr_class: HlsEncryption, **value_hash, &block)
          end

          # @param [Array<HlsManifest>|JSONable>] values
          #   A list of HLS manifest configurations.
          def HlsManifests(values)
            dsl_list_attribute(:HlsManifests, values)
          end

          #  @param [HlsManifest|JSONable] value  Append value to the List
          #    A list of HLS manifest configurations.
          # @@overload HlsManifest(&block)
          # Append value to the List from block via instance eval of a new HlsManifest
          def HlsManifest(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:HlsManifests, value, fn_if: fn_if, attr_class: HlsManifest, **value_hash, &block)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for SegmentDurationSeconds
          def SegmentDurationSeconds(value)
            dsl_attribute(:SegmentDurationSeconds, value)
          end

          #   @param [Boolean|JSONable] value
          #     When enabled, audio streams will be placed in rendition groups in the output.
          def UseAudioRenditionGroup(value)
            dsl_attribute(:UseAudioRenditionGroup, value)
          end
        end

        # A CMAF encryption configuration.
        class MssEncryption < PropertyType
          #   @param [|JSONable] value
          #     The value to use for SpekeKeyProvider
          def SpekeKeyProvider(value)
            dsl_attribute(:SpekeKeyProvider, value)
          end
        end

        # A Microsoft Smooth Streaming (MSS) PackagingConfiguration.
        class MssPackage < PropertyType
          #   @param [MssEncryption|JSONable] value
          #     The value to use for Encryption
          # @@overload Encryption(&block)
          #   Set :Encryption from block via instance eval of a new MssEncryption
          def Encryption(value = nil, **value_hash, &block)
            dsl_attribute(:Encryption, value, attr_class: MssEncryption, **value_hash, &block)
          end

          # @param [Array<MssManifest>|JSONable>] values
          #   A list of MSS manifest configurations.
          def MssManifests(values)
            dsl_list_attribute(:MssManifests, values)
          end

          #  @param [MssManifest|JSONable] value  Append value to the List
          #    A list of MSS manifest configurations.
          # @@overload MssManifest(&block)
          # Append value to the List from block via instance eval of a new MssManifest
          def MssManifest(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:MssManifests, value, fn_if: fn_if, attr_class: MssManifest, **value_hash, &block)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for SegmentDurationSeconds
          def SegmentDurationSeconds(value)
            dsl_attribute(:SegmentDurationSeconds, value)
          end
        end

        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        #   @param [String|JSONable] value
        #     The ID of the PackagingConfiguration.
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The ID of a PackagingGroup.
        def PackagingGroupId(value)
          dsl_attribute(:PackagingGroupId, value)
        end

        #   @param [String|JSONable] value
        #     The ARN of the PackagingConfiguration.
        def Arn(value)
          dsl_attribute(:Arn, value)
        end

        #   @param [CmafPackage|JSONable] value
        #     A CMAF packaging configuration.
        # @@overload CmafPackage(&block)
        #   Set :CmafPackage from block via instance eval of a new CmafPackage
        def CmafPackage(value = nil, **value_hash, &block)
          dsl_attribute(:CmafPackage, value, attr_class: CmafPackage, **value_hash, &block)
        end

        #   @param [DashPackage|JSONable] value
        #     A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.
        # @@overload DashPackage(&block)
        #   Set :DashPackage from block via instance eval of a new DashPackage
        def DashPackage(value = nil, **value_hash, &block)
          dsl_attribute(:DashPackage, value, attr_class: DashPackage, **value_hash, &block)
        end

        #   @param [HlsPackage|JSONable] value
        #     An HTTP Live Streaming (HLS) packaging configuration.
        # @@overload HlsPackage(&block)
        #   Set :HlsPackage from block via instance eval of a new HlsPackage
        def HlsPackage(value = nil, **value_hash, &block)
          dsl_attribute(:HlsPackage, value, attr_class: HlsPackage, **value_hash, &block)
        end

        #   @param [MssPackage|JSONable] value
        #     A Microsoft Smooth Streaming (MSS) PackagingConfiguration.
        # @@overload MssPackage(&block)
        #   Set :MssPackage from block via instance eval of a new MssPackage
        def MssPackage(value = nil, **value_hash, &block)
          dsl_attribute(:MssPackage, value, attr_class: MssPackage, **value_hash, &block)
        end

        # @param [Array<Tag>|JSONable>] values
        #   A collection of tags associated with a resource
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    A collection of tags associated with a resource
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::MediaPackage::PackagingConfiguration]
    def AWS_MediaPackage_PackagingConfiguration(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::MediaPackage::PackagingConfiguration, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
