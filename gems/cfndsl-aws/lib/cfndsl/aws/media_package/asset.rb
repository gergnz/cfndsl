# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module MediaPackage
      # Resource schema for AWS::MediaPackage::Asset
      # @see https://github.com/aws-cloudformation/aws-cloudformation-rpdk.git
      class Asset < ResourceType
        # The endpoint URL used to access an Asset using one PackagingConfiguration.
        class EgressEndpoint < PropertyType
          #   @param [String|JSONable] value
          #     The ID of the PackagingConfiguration being applied to the Asset.
          def PackagingConfigurationId(value)
            dsl_attribute(:PackagingConfigurationId, value)
          end

          #   @param [String|JSONable] value
          #     The URL of the parent manifest for the repackaged Asset.
          def Url(value)
            dsl_attribute(:Url, value)
          end
        end

        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        #   @param [String|JSONable] value
        #     The ARN of the Asset.
        def Arn(value)
          dsl_attribute(:Arn, value)
        end

        #   @param [String|JSONable] value
        #     The time the Asset was initially submitted for Ingest.
        def CreatedAt(value)
          dsl_attribute(:CreatedAt, value)
        end

        # @param [Array<EgressEndpoint>|JSONable>] values
        #   The list of egress endpoints available for the Asset.
        def EgressEndpoints(values)
          dsl_list_attribute(:EgressEndpoints, values)
        end

        #  @param [EgressEndpoint|JSONable] value  Append value to the List
        #    The list of egress endpoints available for the Asset.
        # @@overload EgressEndpoint(&block)
        # Append value to the List from block via instance eval of a new EgressEndpoint
        def EgressEndpoint(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:EgressEndpoints, value, fn_if: fn_if, attr_class: EgressEndpoint, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The unique identifier for the Asset.
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The ID of the PackagingGroup for the Asset.
        def PackagingGroupId(value)
          dsl_attribute(:PackagingGroupId, value)
        end

        #   @param [String|JSONable] value
        #     The resource ID to include in SPEKE key requests.
        def ResourceId(value)
          dsl_attribute(:ResourceId, value)
        end

        #   @param [String|JSONable] value
        #     ARN of the source object in S3.
        def SourceArn(value)
          dsl_attribute(:SourceArn, value)
        end

        #   @param [String|JSONable] value
        #     The IAM role_arn used to access the source S3 bucket.
        def SourceRoleArn(value)
          dsl_attribute(:SourceRoleArn, value)
        end

        # @param [Array<Tag>|JSONable>] values
        #   A collection of tags associated with a resource
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    A collection of tags associated with a resource
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::MediaPackage::Asset]
    def AWS_MediaPackage_Asset(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::MediaPackage::Asset, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
