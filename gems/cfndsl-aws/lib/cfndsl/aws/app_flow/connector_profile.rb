# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module AppFlow
      # Resource Type definition for AWS::AppFlow::ConnectorProfile
      class ConnectorProfile < ResourceType
        # Connector specific configurations needed to create connector profile
        class ConnectorProfileConfig < PropertyType
          #   @param [ConnectorProfileProperties|JSONable] value
          #     The value to use for ConnectorProfileProperties
          # @@overload ConnectorProfileProperties(&block)
          #   Set :ConnectorProfileProperties from block via instance eval of a new ConnectorProfileProperties
          def ConnectorProfileProperties(value = nil, **value_hash, &block)
            dsl_attribute(:ConnectorProfileProperties, value, attr_class: ConnectorProfileProperties, **value_hash, &block)
          end

          #   @param [ConnectorProfileCredentials|JSONable] value
          #     The value to use for ConnectorProfileCredentials
          # @@overload ConnectorProfileCredentials(&block)
          #   Set :ConnectorProfileCredentials from block via instance eval of a new ConnectorProfileCredentials
          def ConnectorProfileCredentials(value = nil, **value_hash, &block)
            dsl_attribute(:ConnectorProfileCredentials, value, attr_class: ConnectorProfileCredentials, **value_hash, &block)
          end
        end

        # Connector specific properties needed to create connector profile - currently not needed for Amplitude, Trendmicro, Googleanalytics and Singular
        class ConnectorProfileProperties < PropertyType
          #   @param [DatadogConnectorProfileProperties|JSONable] value
          #     The value to use for Datadog
          # @@overload Datadog(&block)
          #   Set :Datadog from block via instance eval of a new DatadogConnectorProfileProperties
          def Datadog(value = nil, **value_hash, &block)
            dsl_attribute(:Datadog, value, attr_class: DatadogConnectorProfileProperties, **value_hash, &block)
          end

          #   @param [DynatraceConnectorProfileProperties|JSONable] value
          #     The value to use for Dynatrace
          # @@overload Dynatrace(&block)
          #   Set :Dynatrace from block via instance eval of a new DynatraceConnectorProfileProperties
          def Dynatrace(value = nil, **value_hash, &block)
            dsl_attribute(:Dynatrace, value, attr_class: DynatraceConnectorProfileProperties, **value_hash, &block)
          end

          #   @param [InforNexusConnectorProfileProperties|JSONable] value
          #     The value to use for InforNexus
          # @@overload InforNexus(&block)
          #   Set :InforNexus from block via instance eval of a new InforNexusConnectorProfileProperties
          def InforNexus(value = nil, **value_hash, &block)
            dsl_attribute(:InforNexus, value, attr_class: InforNexusConnectorProfileProperties, **value_hash, &block)
          end

          #   @param [MarketoConnectorProfileProperties|JSONable] value
          #     The value to use for Marketo
          # @@overload Marketo(&block)
          #   Set :Marketo from block via instance eval of a new MarketoConnectorProfileProperties
          def Marketo(value = nil, **value_hash, &block)
            dsl_attribute(:Marketo, value, attr_class: MarketoConnectorProfileProperties, **value_hash, &block)
          end

          #   @param [RedshiftConnectorProfileProperties|JSONable] value
          #     The value to use for Redshift
          # @@overload Redshift(&block)
          #   Set :Redshift from block via instance eval of a new RedshiftConnectorProfileProperties
          def Redshift(value = nil, **value_hash, &block)
            dsl_attribute(:Redshift, value, attr_class: RedshiftConnectorProfileProperties, **value_hash, &block)
          end

          #   @param [SalesforceConnectorProfileProperties|JSONable] value
          #     The value to use for Salesforce
          # @@overload Salesforce(&block)
          #   Set :Salesforce from block via instance eval of a new SalesforceConnectorProfileProperties
          def Salesforce(value = nil, **value_hash, &block)
            dsl_attribute(:Salesforce, value, attr_class: SalesforceConnectorProfileProperties, **value_hash, &block)
          end

          #   @param [ServiceNowConnectorProfileProperties|JSONable] value
          #     The value to use for ServiceNow
          # @@overload ServiceNow(&block)
          #   Set :ServiceNow from block via instance eval of a new ServiceNowConnectorProfileProperties
          def ServiceNow(value = nil, **value_hash, &block)
            dsl_attribute(:ServiceNow, value, attr_class: ServiceNowConnectorProfileProperties, **value_hash, &block)
          end

          #   @param [SlackConnectorProfileProperties|JSONable] value
          #     The value to use for Slack
          # @@overload Slack(&block)
          #   Set :Slack from block via instance eval of a new SlackConnectorProfileProperties
          def Slack(value = nil, **value_hash, &block)
            dsl_attribute(:Slack, value, attr_class: SlackConnectorProfileProperties, **value_hash, &block)
          end

          #   @param [SnowflakeConnectorProfileProperties|JSONable] value
          #     The value to use for Snowflake
          # @@overload Snowflake(&block)
          #   Set :Snowflake from block via instance eval of a new SnowflakeConnectorProfileProperties
          def Snowflake(value = nil, **value_hash, &block)
            dsl_attribute(:Snowflake, value, attr_class: SnowflakeConnectorProfileProperties, **value_hash, &block)
          end

          #   @param [VeevaConnectorProfileProperties|JSONable] value
          #     The value to use for Veeva
          # @@overload Veeva(&block)
          #   Set :Veeva from block via instance eval of a new VeevaConnectorProfileProperties
          def Veeva(value = nil, **value_hash, &block)
            dsl_attribute(:Veeva, value, attr_class: VeevaConnectorProfileProperties, **value_hash, &block)
          end

          #   @param [ZendeskConnectorProfileProperties|JSONable] value
          #     The value to use for Zendesk
          # @@overload Zendesk(&block)
          #   Set :Zendesk from block via instance eval of a new ZendeskConnectorProfileProperties
          def Zendesk(value = nil, **value_hash, &block)
            dsl_attribute(:Zendesk, value, attr_class: ZendeskConnectorProfileProperties, **value_hash, &block)
          end
        end

        # Connector specific configuration needed to create connector profile based on Authentication mechanism
        class ConnectorProfileCredentials < PropertyType
          #   @param [AmplitudeConnectorProfileCredentials|JSONable] value
          #     The value to use for Amplitude
          # @@overload Amplitude(&block)
          #   Set :Amplitude from block via instance eval of a new AmplitudeConnectorProfileCredentials
          def Amplitude(value = nil, **value_hash, &block)
            dsl_attribute(:Amplitude, value, attr_class: AmplitudeConnectorProfileCredentials, **value_hash, &block)
          end

          #   @param [DatadogConnectorProfileCredentials|JSONable] value
          #     The value to use for Datadog
          # @@overload Datadog(&block)
          #   Set :Datadog from block via instance eval of a new DatadogConnectorProfileCredentials
          def Datadog(value = nil, **value_hash, &block)
            dsl_attribute(:Datadog, value, attr_class: DatadogConnectorProfileCredentials, **value_hash, &block)
          end

          #   @param [DynatraceConnectorProfileCredentials|JSONable] value
          #     The value to use for Dynatrace
          # @@overload Dynatrace(&block)
          #   Set :Dynatrace from block via instance eval of a new DynatraceConnectorProfileCredentials
          def Dynatrace(value = nil, **value_hash, &block)
            dsl_attribute(:Dynatrace, value, attr_class: DynatraceConnectorProfileCredentials, **value_hash, &block)
          end

          #   @param [GoogleAnalyticsConnectorProfileCredentials|JSONable] value
          #     The value to use for GoogleAnalytics
          # @@overload GoogleAnalytics(&block)
          #   Set :GoogleAnalytics from block via instance eval of a new GoogleAnalyticsConnectorProfileCredentials
          def GoogleAnalytics(value = nil, **value_hash, &block)
            dsl_attribute(:GoogleAnalytics, value, attr_class: GoogleAnalyticsConnectorProfileCredentials, **value_hash, &block)
          end

          #   @param [InforNexusConnectorProfileCredentials|JSONable] value
          #     The value to use for InforNexus
          # @@overload InforNexus(&block)
          #   Set :InforNexus from block via instance eval of a new InforNexusConnectorProfileCredentials
          def InforNexus(value = nil, **value_hash, &block)
            dsl_attribute(:InforNexus, value, attr_class: InforNexusConnectorProfileCredentials, **value_hash, &block)
          end

          #   @param [MarketoConnectorProfileCredentials|JSONable] value
          #     The value to use for Marketo
          # @@overload Marketo(&block)
          #   Set :Marketo from block via instance eval of a new MarketoConnectorProfileCredentials
          def Marketo(value = nil, **value_hash, &block)
            dsl_attribute(:Marketo, value, attr_class: MarketoConnectorProfileCredentials, **value_hash, &block)
          end

          #   @param [RedshiftConnectorProfileCredentials|JSONable] value
          #     The value to use for Redshift
          # @@overload Redshift(&block)
          #   Set :Redshift from block via instance eval of a new RedshiftConnectorProfileCredentials
          def Redshift(value = nil, **value_hash, &block)
            dsl_attribute(:Redshift, value, attr_class: RedshiftConnectorProfileCredentials, **value_hash, &block)
          end

          #   @param [SalesforceConnectorProfileCredentials|JSONable] value
          #     The value to use for Salesforce
          # @@overload Salesforce(&block)
          #   Set :Salesforce from block via instance eval of a new SalesforceConnectorProfileCredentials
          def Salesforce(value = nil, **value_hash, &block)
            dsl_attribute(:Salesforce, value, attr_class: SalesforceConnectorProfileCredentials, **value_hash, &block)
          end

          #   @param [ServiceNowConnectorProfileCredentials|JSONable] value
          #     The value to use for ServiceNow
          # @@overload ServiceNow(&block)
          #   Set :ServiceNow from block via instance eval of a new ServiceNowConnectorProfileCredentials
          def ServiceNow(value = nil, **value_hash, &block)
            dsl_attribute(:ServiceNow, value, attr_class: ServiceNowConnectorProfileCredentials, **value_hash, &block)
          end

          #   @param [SingularConnectorProfileCredentials|JSONable] value
          #     The value to use for Singular
          # @@overload Singular(&block)
          #   Set :Singular from block via instance eval of a new SingularConnectorProfileCredentials
          def Singular(value = nil, **value_hash, &block)
            dsl_attribute(:Singular, value, attr_class: SingularConnectorProfileCredentials, **value_hash, &block)
          end

          #   @param [SlackConnectorProfileCredentials|JSONable] value
          #     The value to use for Slack
          # @@overload Slack(&block)
          #   Set :Slack from block via instance eval of a new SlackConnectorProfileCredentials
          def Slack(value = nil, **value_hash, &block)
            dsl_attribute(:Slack, value, attr_class: SlackConnectorProfileCredentials, **value_hash, &block)
          end

          #   @param [SnowflakeConnectorProfileCredentials|JSONable] value
          #     The value to use for Snowflake
          # @@overload Snowflake(&block)
          #   Set :Snowflake from block via instance eval of a new SnowflakeConnectorProfileCredentials
          def Snowflake(value = nil, **value_hash, &block)
            dsl_attribute(:Snowflake, value, attr_class: SnowflakeConnectorProfileCredentials, **value_hash, &block)
          end

          #   @param [TrendmicroConnectorProfileCredentials|JSONable] value
          #     The value to use for Trendmicro
          # @@overload Trendmicro(&block)
          #   Set :Trendmicro from block via instance eval of a new TrendmicroConnectorProfileCredentials
          def Trendmicro(value = nil, **value_hash, &block)
            dsl_attribute(:Trendmicro, value, attr_class: TrendmicroConnectorProfileCredentials, **value_hash, &block)
          end

          #   @param [VeevaConnectorProfileCredentials|JSONable] value
          #     The value to use for Veeva
          # @@overload Veeva(&block)
          #   Set :Veeva from block via instance eval of a new VeevaConnectorProfileCredentials
          def Veeva(value = nil, **value_hash, &block)
            dsl_attribute(:Veeva, value, attr_class: VeevaConnectorProfileCredentials, **value_hash, &block)
          end

          #   @param [ZendeskConnectorProfileCredentials|JSONable] value
          #     The value to use for Zendesk
          # @@overload Zendesk(&block)
          #   Set :Zendesk from block via instance eval of a new ZendeskConnectorProfileCredentials
          def Zendesk(value = nil, **value_hash, &block)
            dsl_attribute(:Zendesk, value, attr_class: ZendeskConnectorProfileCredentials, **value_hash, &block)
          end
        end

        # Property Definition AmplitudeConnectorProfileCredentials
        class AmplitudeConnectorProfileCredentials < PropertyType
          #   @param [String|JSONable] value
          #     A unique alphanumeric identiﬁer used to authenticate a user, developer, or calling program to your API.
          def ApiKey(value)
            dsl_attribute(:ApiKey, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for SecretKey
          def SecretKey(value)
            dsl_attribute(:SecretKey, value)
          end
        end

        # Property Definition DatadogConnectorProfileCredentials
        class DatadogConnectorProfileCredentials < PropertyType
          #   @param [String|JSONable] value
          #     A unique alphanumeric identiﬁer used to authenticate a user, developer, or calling program to your API.
          def ApiKey(value)
            dsl_attribute(:ApiKey, value)
          end

          #   @param [String|JSONable] value
          #     Application keys, in conjunction with your API key, give you full access to Datadog’s programmatic API. Application keys are associated with the user account that created them. The application key is used to log all requests made to the API.
          def ApplicationKey(value)
            dsl_attribute(:ApplicationKey, value)
          end
        end

        # Property Definition DatadogConnectorProfileProperties
        class DatadogConnectorProfileProperties < PropertyType
          #   @param [String|JSONable] value
          #     The location of the Datadog resource
          def InstanceUrl(value)
            dsl_attribute(:InstanceUrl, value)
          end
        end

        # Property Definition DynatraceConnectorProfileCredentials
        class DynatraceConnectorProfileCredentials < PropertyType
          #   @param [String|JSONable] value
          #     The API tokens used by Dynatrace API to authenticate various API calls.
          def ApiToken(value)
            dsl_attribute(:ApiToken, value)
          end
        end

        # Property Definition DynatraceConnectorProfileProperties
        class DynatraceConnectorProfileProperties < PropertyType
          #   @param [String|JSONable] value
          #     The location of the Dynatrace resource
          def InstanceUrl(value)
            dsl_attribute(:InstanceUrl, value)
          end
        end

        # Property Definition GoogleAnalyticsConnectorProfileCredentials
        class GoogleAnalyticsConnectorProfileCredentials < PropertyType
          #   @param [String|JSONable] value
          #     The identiﬁer for the desired client.
          def ClientId(value)
            dsl_attribute(:ClientId, value)
          end

          #   @param [String|JSONable] value
          #     The client secret used by the oauth client to authenticate to the authorization server.
          def ClientSecret(value)
            dsl_attribute(:ClientSecret, value)
          end

          #   @param [String|JSONable] value
          #     The credentials used to access protected resources.
          def AccessToken(value)
            dsl_attribute(:AccessToken, value)
          end

          #   @param [String|JSONable] value
          #     The credentials used to acquire new access tokens.
          def RefreshToken(value)
            dsl_attribute(:RefreshToken, value)
          end

          #   @param [ConnectorOAuthRequest|JSONable] value
          #     The oauth needed to request security tokens from the connector endpoint.
          # @@overload ConnectorOAuthRequest(&block)
          #   Set :ConnectorOAuthRequest from block via instance eval of a new ConnectorOAuthRequest
          def ConnectorOAuthRequest(value = nil, **value_hash, &block)
            dsl_attribute(:ConnectorOAuthRequest, value, attr_class: ConnectorOAuthRequest, **value_hash, &block)
          end
        end

        # Property Definition InforNexusConnectorProfileCredentials
        class InforNexusConnectorProfileCredentials < PropertyType
          #   @param [String|JSONable] value
          #     The Access Key portion of the credentials.
          def AccessKeyId(value)
            dsl_attribute(:AccessKeyId, value)
          end

          #   @param [String|JSONable] value
          #     The identiﬁer for the user.
          def UserId(value)
            dsl_attribute(:UserId, value)
          end

          #   @param [String|JSONable] value
          #     The secret key used to sign requests.
          def SecretAccessKey(value)
            dsl_attribute(:SecretAccessKey, value)
          end

          #   @param [String|JSONable] value
          #     The encryption keys used to encrypt data.
          def Datakey(value)
            dsl_attribute(:Datakey, value)
          end
        end

        # Property Definition InforNexusConnectorProfileProperties
        class InforNexusConnectorProfileProperties < PropertyType
          #   @param [String|JSONable] value
          #     The location of the InforNexus resource
          def InstanceUrl(value)
            dsl_attribute(:InstanceUrl, value)
          end
        end

        # Property Definition MarketoConnectorProfileCredentials
        class MarketoConnectorProfileCredentials < PropertyType
          #   @param [String|JSONable] value
          #     The identiﬁer for the desired client.
          def ClientId(value)
            dsl_attribute(:ClientId, value)
          end

          #   @param [String|JSONable] value
          #     The client secret used by the oauth client to authenticate to the authorization server.
          def ClientSecret(value)
            dsl_attribute(:ClientSecret, value)
          end

          #   @param [String|JSONable] value
          #     The credentials used to access protected resources.
          def AccessToken(value)
            dsl_attribute(:AccessToken, value)
          end

          #   @param [ConnectorOAuthRequest|JSONable] value
          #     The oauth needed to request security tokens from the connector endpoint.
          # @@overload ConnectorOAuthRequest(&block)
          #   Set :ConnectorOAuthRequest from block via instance eval of a new ConnectorOAuthRequest
          def ConnectorOAuthRequest(value = nil, **value_hash, &block)
            dsl_attribute(:ConnectorOAuthRequest, value, attr_class: ConnectorOAuthRequest, **value_hash, &block)
          end
        end

        # Property Definition MarketoConnectorProfileProperties
        class MarketoConnectorProfileProperties < PropertyType
          #   @param [String|JSONable] value
          #     The location of the Marketo resource
          def InstanceUrl(value)
            dsl_attribute(:InstanceUrl, value)
          end
        end

        # Property Definition RedshiftConnectorProfileCredentials
        class RedshiftConnectorProfileCredentials < PropertyType
          #   @param [String|JSONable] value
          #     The name of the user.
          def Username(value)
            dsl_attribute(:Username, value)
          end

          #   @param [String|JSONable] value
          #     The password that corresponds to the username.
          def Password(value)
            dsl_attribute(:Password, value)
          end
        end

        # Property Definition RedshiftConnectorProfileProperties
        class RedshiftConnectorProfileProperties < PropertyType
          #   @param [String|JSONable] value
          #     The JDBC URL of the Amazon Redshift cluster.
          def DatabaseUrl(value)
            dsl_attribute(:DatabaseUrl, value)
          end

          #   @param [String|JSONable] value
          #     The name of the Amazon S3 bucket associated with Redshift.
          def BucketName(value)
            dsl_attribute(:BucketName, value)
          end

          #   @param [String|JSONable] value
          #     The object key for the destination bucket in which Amazon AppFlow will place the ﬁles.
          def BucketPrefix(value)
            dsl_attribute(:BucketPrefix, value)
          end

          #   @param [String|JSONable] value
          #     The Amazon Resource Name (ARN) of the IAM role.
          def RoleArn(value)
            dsl_attribute(:RoleArn, value)
          end
        end

        # Property Definition SalesforceConnectorProfileCredentials
        class SalesforceConnectorProfileCredentials < PropertyType
          #   @param [String|JSONable] value
          #     The credentials used to access protected resources.
          def AccessToken(value)
            dsl_attribute(:AccessToken, value)
          end

          #   @param [String|JSONable] value
          #     The credentials used to acquire new access tokens.
          def RefreshToken(value)
            dsl_attribute(:RefreshToken, value)
          end

          #   @param [ConnectorOAuthRequest|JSONable] value
          #     The oauth needed to request security tokens from the connector endpoint.
          # @@overload ConnectorOAuthRequest(&block)
          #   Set :ConnectorOAuthRequest from block via instance eval of a new ConnectorOAuthRequest
          def ConnectorOAuthRequest(value = nil, **value_hash, &block)
            dsl_attribute(:ConnectorOAuthRequest, value, attr_class: ConnectorOAuthRequest, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The client credentials to fetch access token and refresh token.
          def ClientCredentialsArn(value)
            dsl_attribute(:ClientCredentialsArn, value)
          end
        end

        # Property Definition SalesforceConnectorProfileProperties
        class SalesforceConnectorProfileProperties < PropertyType
          #   @param [String|JSONable] value
          #     The location of the Salesforce resource
          def InstanceUrl(value)
            dsl_attribute(:InstanceUrl, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for IsSandboxEnvironment
          def IsSandboxEnvironment(value)
            dsl_attribute(:IsSandboxEnvironment, value)
          end
        end

        # Property Definition ServiceNowConnectorProfileCredentials
        class ServiceNowConnectorProfileCredentials < PropertyType
          #   @param [String|JSONable] value
          #     The name of the user.
          def Username(value)
            dsl_attribute(:Username, value)
          end

          #   @param [String|JSONable] value
          #     The password that corresponds to the username.
          def Password(value)
            dsl_attribute(:Password, value)
          end
        end

        # Property Definition ServiceNowConnectorProfileProperties
        class ServiceNowConnectorProfileProperties < PropertyType
          #   @param [String|JSONable] value
          #     The location of the ServiceNow resource
          def InstanceUrl(value)
            dsl_attribute(:InstanceUrl, value)
          end
        end

        # Property Definition SingularConnectorProfileCredentials
        class SingularConnectorProfileCredentials < PropertyType
          #   @param [String|JSONable] value
          #     A unique alphanumeric identiﬁer used to authenticate a user, developer, or calling program to your API.
          def ApiKey(value)
            dsl_attribute(:ApiKey, value)
          end
        end

        # Property Definition SlackConnectorProfileCredentials
        class SlackConnectorProfileCredentials < PropertyType
          #   @param [String|JSONable] value
          #     The identiﬁer for the desired client.
          def ClientId(value)
            dsl_attribute(:ClientId, value)
          end

          #   @param [String|JSONable] value
          #     The client secret used by the oauth client to authenticate to the authorization server.
          def ClientSecret(value)
            dsl_attribute(:ClientSecret, value)
          end

          #   @param [String|JSONable] value
          #     The credentials used to access protected resources.
          def AccessToken(value)
            dsl_attribute(:AccessToken, value)
          end

          #   @param [ConnectorOAuthRequest|JSONable] value
          #     The oauth needed to request security tokens from the connector endpoint.
          # @@overload ConnectorOAuthRequest(&block)
          #   Set :ConnectorOAuthRequest from block via instance eval of a new ConnectorOAuthRequest
          def ConnectorOAuthRequest(value = nil, **value_hash, &block)
            dsl_attribute(:ConnectorOAuthRequest, value, attr_class: ConnectorOAuthRequest, **value_hash, &block)
          end
        end

        # Property Definition SlackConnectorProfileProperties
        class SlackConnectorProfileProperties < PropertyType
          #   @param [String|JSONable] value
          #     The location of the Slack resource
          def InstanceUrl(value)
            dsl_attribute(:InstanceUrl, value)
          end
        end

        # Property Definition SnowflakeConnectorProfileCredentials
        class SnowflakeConnectorProfileCredentials < PropertyType
          #   @param [String|JSONable] value
          #     The name of the user.
          def Username(value)
            dsl_attribute(:Username, value)
          end

          #   @param [String|JSONable] value
          #     The password that corresponds to the username.
          def Password(value)
            dsl_attribute(:Password, value)
          end
        end

        # Property Definition SnowflakeConnectorProfileProperties
        class SnowflakeConnectorProfileProperties < PropertyType
          #   @param [String|JSONable] value
          #     The name of the Snowﬂake warehouse.
          def Warehouse(value)
            dsl_attribute(:Warehouse, value)
          end

          #   @param [String|JSONable] value
          #     The name of the Amazon S3 stage that was created while setting up an Amazon S3 stage in the
          #     Snowﬂake account. This is written in the following format: < Database>< Schema><Stage Name>.
          def Stage(value)
            dsl_attribute(:Stage, value)
          end

          #   @param [String|JSONable] value
          #     The name of the Amazon S3 bucket associated with Snowﬂake.
          def BucketName(value)
            dsl_attribute(:BucketName, value)
          end

          #   @param [String|JSONable] value
          #     The bucket prefix that refers to the Amazon S3 bucket associated with Snowﬂake.
          def BucketPrefix(value)
            dsl_attribute(:BucketPrefix, value)
          end

          #   @param [String|JSONable] value
          #     The Snowﬂake Private Link service name to be used for private data transfers.
          def PrivateLinkServiceName(value)
            dsl_attribute(:PrivateLinkServiceName, value)
          end

          #   @param [String|JSONable] value
          #     The name of the account.
          def AccountName(value)
            dsl_attribute(:AccountName, value)
          end

          #   @param [String|JSONable] value
          #     The region of the Snowﬂake account.
          def Region(value)
            dsl_attribute(:Region, value)
          end
        end

        # Property Definition TrendmicroConnectorProfileCredentials
        class TrendmicroConnectorProfileCredentials < PropertyType
          #   @param [String|JSONable] value
          #     The Secret Access Key portion of the credentials.
          def ApiSecretKey(value)
            dsl_attribute(:ApiSecretKey, value)
          end
        end

        # Property Definition VeevaConnectorProfileCredentials
        class VeevaConnectorProfileCredentials < PropertyType
          #   @param [String|JSONable] value
          #     The name of the user.
          def Username(value)
            dsl_attribute(:Username, value)
          end

          #   @param [String|JSONable] value
          #     The password that corresponds to the username.
          def Password(value)
            dsl_attribute(:Password, value)
          end
        end

        # Property Definition VeevaConnectorProfileProperties
        class VeevaConnectorProfileProperties < PropertyType
          #   @param [String|JSONable] value
          #     The location of the Veeva resource
          def InstanceUrl(value)
            dsl_attribute(:InstanceUrl, value)
          end
        end

        # Property Definition ZendeskConnectorProfileCredentials
        class ZendeskConnectorProfileCredentials < PropertyType
          #   @param [String|JSONable] value
          #     The identiﬁer for the desired client.
          def ClientId(value)
            dsl_attribute(:ClientId, value)
          end

          #   @param [String|JSONable] value
          #     The client secret used by the oauth client to authenticate to the authorization server.
          def ClientSecret(value)
            dsl_attribute(:ClientSecret, value)
          end

          #   @param [String|JSONable] value
          #     The credentials used to access protected resources.
          def AccessToken(value)
            dsl_attribute(:AccessToken, value)
          end

          #   @param [ConnectorOAuthRequest|JSONable] value
          #     The oauth needed to request security tokens from the connector endpoint.
          # @@overload ConnectorOAuthRequest(&block)
          #   Set :ConnectorOAuthRequest from block via instance eval of a new ConnectorOAuthRequest
          def ConnectorOAuthRequest(value = nil, **value_hash, &block)
            dsl_attribute(:ConnectorOAuthRequest, value, attr_class: ConnectorOAuthRequest, **value_hash, &block)
          end
        end

        # Property Definition ZendeskConnectorProfileProperties
        class ZendeskConnectorProfileProperties < PropertyType
          #   @param [String|JSONable] value
          #     The location of the Zendesk resource
          def InstanceUrl(value)
            dsl_attribute(:InstanceUrl, value)
          end
        end

        # Property Definition ConnectorOAuthRequest
        class ConnectorOAuthRequest < PropertyType
          #   @param [String|JSONable] value
          #     The code provided by the connector when it has been authenticated via the connected app.
          def AuthCode(value)
            dsl_attribute(:AuthCode, value)
          end

          #   @param [String|JSONable] value
          #     The URL to which the authentication server redirects the browser after authorization has been
          #     granted.
          def RedirectUri(value)
            dsl_attribute(:RedirectUri, value)
          end
        end

        #   @param [String|JSONable] value
        #     Unique identifier for connector profile resources
        def ConnectorProfileArn(value)
          dsl_attribute(:ConnectorProfileArn, value)
        end

        #   @param [String|JSONable] value
        #     The maximum number of items to retrieve in a single batch.
        def ConnectorProfileName(value)
          dsl_attribute(:ConnectorProfileName, value)
        end

        #   @param [String|JSONable] value
        #     The ARN of the AWS Key Management Service (AWS KMS) key that's used to encrypt your function's environment variables. If it's not provided, AWS Lambda uses a default service key.
        def KMSArn(value)
          dsl_attribute(:KMSArn, value)
        end

        #   @param [String|JSONable] value
        #     List of Saas providers that need connector profile to be created
        def ConnectorType(value)
          dsl_attribute(:ConnectorType, value)
        end

        #   @param [String|JSONable] value
        #     Mode in which data transfer should be enabled. Private connection mode is currently enabled for Salesforce, Snowflake, Trendmicro and Singular
        def ConnectionMode(value)
          dsl_attribute(:ConnectionMode, value)
        end

        #   @param [ConnectorProfileConfig|JSONable] value
        #     Connector specific configurations needed to create connector profile
        # @@overload ConnectorProfileConfig(&block)
        #   Set :ConnectorProfileConfig from block via instance eval of a new ConnectorProfileConfig
        def ConnectorProfileConfig(value = nil, **value_hash, &block)
          dsl_attribute(:ConnectorProfileConfig, value, attr_class: ConnectorProfileConfig, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     A unique Arn for Connector-Profile resource
        def CredentialsArn(value)
          dsl_attribute(:CredentialsArn, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::AppFlow::ConnectorProfile]
    def AWS_AppFlow_ConnectorProfile(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::AppFlow::ConnectorProfile, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
