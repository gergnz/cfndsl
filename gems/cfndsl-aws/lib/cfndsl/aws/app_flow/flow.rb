# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module AppFlow
      # Resource schema for AWS::AppFlow::Flow.
      # @see https://docs.aws.amazon.com/appflow/latest/userguide/what-is-appflow.html
      class Flow < ResourceType
        # Trigger settings of the flow.
        class TriggerConfig < PropertyType
          #   @param [String|JSONable] value
          #     Trigger type of the flow
          def TriggerType(value)
            dsl_attribute(:TriggerType, value)
          end

          #   @param [ScheduledTriggerProperties|JSONable] value
          #     Details required based on the type of trigger
          # @@overload TriggerProperties(&block)
          #   Set :TriggerProperties from block via instance eval of a new ScheduledTriggerProperties
          def TriggerProperties(value = nil, **value_hash, &block)
            dsl_attribute(:TriggerProperties, value, attr_class: ScheduledTriggerProperties, **value_hash, &block)
          end
        end

        # Configurations of Source connector of the flow.
        class SourceFlowConfig < PropertyType
          #   @param [String|JSONable] value
          #     Type of source connector
          def ConnectorType(value)
            dsl_attribute(:ConnectorType, value)
          end

          #   @param [String|JSONable] value
          #     Name of source connector profile
          def ConnectorProfileName(value)
            dsl_attribute(:ConnectorProfileName, value)
          end

          #   @param [SourceConnectorProperties|JSONable] value
          #     Source connector details required to query a connector
          # @@overload SourceConnectorProperties(&block)
          #   Set :SourceConnectorProperties from block via instance eval of a new SourceConnectorProperties
          def SourceConnectorProperties(value = nil, **value_hash, &block)
            dsl_attribute(:SourceConnectorProperties, value, attr_class: SourceConnectorProperties, **value_hash, &block)
          end
        end

        # Configurations of destination connector.
        class DestinationFlowConfig < PropertyType
          #   @param [String|JSONable] value
          #     Destination connector type
          def ConnectorType(value)
            dsl_attribute(:ConnectorType, value)
          end

          #   @param [String|JSONable] value
          #     Name of destination connector profile
          def ConnectorProfileName(value)
            dsl_attribute(:ConnectorProfileName, value)
          end

          #   @param [DestinationConnectorProperties|JSONable] value
          #     Destination connector details
          # @@overload DestinationConnectorProperties(&block)
          #   Set :DestinationConnectorProperties from block via instance eval of a new DestinationConnectorProperties
          def DestinationConnectorProperties(value = nil, **value_hash, &block)
            dsl_attribute(:DestinationConnectorProperties, value, attr_class: DestinationConnectorProperties, **value_hash, &block)
          end
        end

        # Property Definition Task
        class Task < PropertyType
          # @param [Array<String>|JSONable>] values
          #   Source fields on which particular task will be applied
          def SourceFields(values)
            dsl_list_attribute(:SourceFields, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    Source fields on which particular task will be applied
          def SourceField(value, fn_if: nil)
            dsl_push_attribute(:SourceFields, value, fn_if: fn_if)
          end

          #   @param [ConnectorOperator|JSONable] value
          #     Operation to be performed on provided source fields
          # @@overload ConnectorOperator(&block)
          #   Set :ConnectorOperator from block via instance eval of a new ConnectorOperator
          def ConnectorOperator(value = nil, **value_hash, &block)
            dsl_attribute(:ConnectorOperator, value, attr_class: ConnectorOperator, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     A field value on which source field should be validated
          def DestinationField(value)
            dsl_attribute(:DestinationField, value)
          end

          #   @param [String|JSONable] value
          #     Type of task
          def TaskType(value)
            dsl_attribute(:TaskType, value)
          end

          # @param [Array<TaskPropertiesObject>|JSONable>] values
          #   A Map used to store task related info
          def TaskProperties(values)
            dsl_list_attribute(:TaskProperties, values)
          end

          #  @param [TaskPropertiesObject|JSONable] value  Append value to the List
          #    A Map used to store task related info
          # @@overload TaskProperty(&block)
          # Append value to the List from block via instance eval of a new TaskPropertiesObject
          def TaskProperty(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:TaskProperties, value, fn_if: fn_if, attr_class: TaskPropertiesObject, **value_hash, &block)
          end
        end

        # A label for tagging AppFlow resources
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     A string used to identify this tag
          def Key(value)
            dsl_attribute(:Key, value)
          end

          #   @param [String|JSONable] value
          #     A string containing the value for the tag
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        # Destination connector details
        class DestinationConnectorProperties < PropertyType
          #   @param [RedshiftDestinationProperties|JSONable] value
          #     The value to use for Redshift
          # @@overload Redshift(&block)
          #   Set :Redshift from block via instance eval of a new RedshiftDestinationProperties
          def Redshift(value = nil, **value_hash, &block)
            dsl_attribute(:Redshift, value, attr_class: RedshiftDestinationProperties, **value_hash, &block)
          end

          #   @param [S3DestinationProperties|JSONable] value
          #     The value to use for S3
          # @@overload S3(&block)
          #   Set :S3 from block via instance eval of a new S3DestinationProperties
          def S3(value = nil, **value_hash, &block)
            dsl_attribute(:S3, value, attr_class: S3DestinationProperties, **value_hash, &block)
          end

          #   @param [SalesforceDestinationProperties|JSONable] value
          #     The value to use for Salesforce
          # @@overload Salesforce(&block)
          #   Set :Salesforce from block via instance eval of a new SalesforceDestinationProperties
          def Salesforce(value = nil, **value_hash, &block)
            dsl_attribute(:Salesforce, value, attr_class: SalesforceDestinationProperties, **value_hash, &block)
          end

          #   @param [SnowflakeDestinationProperties|JSONable] value
          #     The value to use for Snowflake
          # @@overload Snowflake(&block)
          #   Set :Snowflake from block via instance eval of a new SnowflakeDestinationProperties
          def Snowflake(value = nil, **value_hash, &block)
            dsl_attribute(:Snowflake, value, attr_class: SnowflakeDestinationProperties, **value_hash, &block)
          end

          #   @param [EventBridgeDestinationProperties|JSONable] value
          #     The value to use for EventBridge
          # @@overload EventBridge(&block)
          #   Set :EventBridge from block via instance eval of a new EventBridgeDestinationProperties
          def EventBridge(value = nil, **value_hash, &block)
            dsl_attribute(:EventBridge, value, attr_class: EventBridgeDestinationProperties, **value_hash, &block)
          end
        end

        # Source connector details required to query a connector
        class SourceConnectorProperties < PropertyType
          #   @param [AmplitudeSourceProperties|JSONable] value
          #     The value to use for Amplitude
          # @@overload Amplitude(&block)
          #   Set :Amplitude from block via instance eval of a new AmplitudeSourceProperties
          def Amplitude(value = nil, **value_hash, &block)
            dsl_attribute(:Amplitude, value, attr_class: AmplitudeSourceProperties, **value_hash, &block)
          end

          #   @param [DatadogSourceProperties|JSONable] value
          #     The value to use for Datadog
          # @@overload Datadog(&block)
          #   Set :Datadog from block via instance eval of a new DatadogSourceProperties
          def Datadog(value = nil, **value_hash, &block)
            dsl_attribute(:Datadog, value, attr_class: DatadogSourceProperties, **value_hash, &block)
          end

          #   @param [DynatraceSourceProperties|JSONable] value
          #     The value to use for Dynatrace
          # @@overload Dynatrace(&block)
          #   Set :Dynatrace from block via instance eval of a new DynatraceSourceProperties
          def Dynatrace(value = nil, **value_hash, &block)
            dsl_attribute(:Dynatrace, value, attr_class: DynatraceSourceProperties, **value_hash, &block)
          end

          #   @param [GoogleAnalyticsSourceProperties|JSONable] value
          #     The value to use for GoogleAnalytics
          # @@overload GoogleAnalytics(&block)
          #   Set :GoogleAnalytics from block via instance eval of a new GoogleAnalyticsSourceProperties
          def GoogleAnalytics(value = nil, **value_hash, &block)
            dsl_attribute(:GoogleAnalytics, value, attr_class: GoogleAnalyticsSourceProperties, **value_hash, &block)
          end

          #   @param [InforNexusSourceProperties|JSONable] value
          #     The value to use for InforNexus
          # @@overload InforNexus(&block)
          #   Set :InforNexus from block via instance eval of a new InforNexusSourceProperties
          def InforNexus(value = nil, **value_hash, &block)
            dsl_attribute(:InforNexus, value, attr_class: InforNexusSourceProperties, **value_hash, &block)
          end

          #   @param [MarketoSourceProperties|JSONable] value
          #     The value to use for Marketo
          # @@overload Marketo(&block)
          #   Set :Marketo from block via instance eval of a new MarketoSourceProperties
          def Marketo(value = nil, **value_hash, &block)
            dsl_attribute(:Marketo, value, attr_class: MarketoSourceProperties, **value_hash, &block)
          end

          #   @param [S3SourceProperties|JSONable] value
          #     The value to use for S3
          # @@overload S3(&block)
          #   Set :S3 from block via instance eval of a new S3SourceProperties
          def S3(value = nil, **value_hash, &block)
            dsl_attribute(:S3, value, attr_class: S3SourceProperties, **value_hash, &block)
          end

          #   @param [SalesforceSourceProperties|JSONable] value
          #     The value to use for Salesforce
          # @@overload Salesforce(&block)
          #   Set :Salesforce from block via instance eval of a new SalesforceSourceProperties
          def Salesforce(value = nil, **value_hash, &block)
            dsl_attribute(:Salesforce, value, attr_class: SalesforceSourceProperties, **value_hash, &block)
          end

          #   @param [ServiceNowSourceProperties|JSONable] value
          #     The value to use for ServiceNow
          # @@overload ServiceNow(&block)
          #   Set :ServiceNow from block via instance eval of a new ServiceNowSourceProperties
          def ServiceNow(value = nil, **value_hash, &block)
            dsl_attribute(:ServiceNow, value, attr_class: ServiceNowSourceProperties, **value_hash, &block)
          end

          #   @param [SingularSourceProperties|JSONable] value
          #     The value to use for Singular
          # @@overload Singular(&block)
          #   Set :Singular from block via instance eval of a new SingularSourceProperties
          def Singular(value = nil, **value_hash, &block)
            dsl_attribute(:Singular, value, attr_class: SingularSourceProperties, **value_hash, &block)
          end

          #   @param [SlackSourceProperties|JSONable] value
          #     The value to use for Slack
          # @@overload Slack(&block)
          #   Set :Slack from block via instance eval of a new SlackSourceProperties
          def Slack(value = nil, **value_hash, &block)
            dsl_attribute(:Slack, value, attr_class: SlackSourceProperties, **value_hash, &block)
          end

          #   @param [TrendmicroSourceProperties|JSONable] value
          #     The value to use for Trendmicro
          # @@overload Trendmicro(&block)
          #   Set :Trendmicro from block via instance eval of a new TrendmicroSourceProperties
          def Trendmicro(value = nil, **value_hash, &block)
            dsl_attribute(:Trendmicro, value, attr_class: TrendmicroSourceProperties, **value_hash, &block)
          end

          #   @param [VeevaSourceProperties|JSONable] value
          #     The value to use for Veeva
          # @@overload Veeva(&block)
          #   Set :Veeva from block via instance eval of a new VeevaSourceProperties
          def Veeva(value = nil, **value_hash, &block)
            dsl_attribute(:Veeva, value, attr_class: VeevaSourceProperties, **value_hash, &block)
          end

          #   @param [ZendeskSourceProperties|JSONable] value
          #     The value to use for Zendesk
          # @@overload Zendesk(&block)
          #   Set :Zendesk from block via instance eval of a new ZendeskSourceProperties
          def Zendesk(value = nil, **value_hash, &block)
            dsl_attribute(:Zendesk, value, attr_class: ZendeskSourceProperties, **value_hash, &block)
          end
        end

        # Operation to be performed on provided source fields
        class ConnectorOperator < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Amplitude
          def Amplitude(value)
            dsl_attribute(:Amplitude, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Datadog
          def Datadog(value)
            dsl_attribute(:Datadog, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Dynatrace
          def Dynatrace(value)
            dsl_attribute(:Dynatrace, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for GoogleAnalytics
          def GoogleAnalytics(value)
            dsl_attribute(:GoogleAnalytics, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for InforNexus
          def InforNexus(value)
            dsl_attribute(:InforNexus, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Marketo
          def Marketo(value)
            dsl_attribute(:Marketo, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for S3
          def S3(value)
            dsl_attribute(:S3, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Salesforce
          def Salesforce(value)
            dsl_attribute(:Salesforce, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ServiceNow
          def ServiceNow(value)
            dsl_attribute(:ServiceNow, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Singular
          def Singular(value)
            dsl_attribute(:Singular, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Slack
          def Slack(value)
            dsl_attribute(:Slack, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Trendmicro
          def Trendmicro(value)
            dsl_attribute(:Trendmicro, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Veeva
          def Veeva(value)
            dsl_attribute(:Veeva, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Zendesk
          def Zendesk(value)
            dsl_attribute(:Zendesk, value)
          end
        end

        # Details required for scheduled trigger type
        class ScheduledTriggerProperties < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ScheduleExpression
          def ScheduleExpression(value)
            dsl_attribute(:ScheduleExpression, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for DataPullMode
          def DataPullMode(value)
            dsl_attribute(:DataPullMode, value)
          end

          #   @param [Number|JSONable] value
          #     The value to use for ScheduleStartTime
          def ScheduleStartTime(value)
            dsl_attribute(:ScheduleStartTime, value)
          end

          #   @param [Number|JSONable] value
          #     The value to use for ScheduleEndTime
          def ScheduleEndTime(value)
            dsl_attribute(:ScheduleEndTime, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for TimeZone
          def TimeZone(value)
            dsl_attribute(:TimeZone, value)
          end
        end

        # Property Definition ErrorHandlingConfig
        class ErrorHandlingConfig < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for FailOnFirstError
          def FailOnFirstError(value)
            dsl_attribute(:FailOnFirstError, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for BucketPrefix
          def BucketPrefix(value)
            dsl_attribute(:BucketPrefix, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for BucketName
          def BucketName(value)
            dsl_attribute(:BucketName, value)
          end
        end

        # Property Definition PrefixConfig
        class PrefixConfig < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for PrefixType
          def PrefixType(value)
            dsl_attribute(:PrefixType, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for PrefixFormat
          def PrefixFormat(value)
            dsl_attribute(:PrefixFormat, value)
          end
        end

        # Property Definition AggregationConfig
        class AggregationConfig < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for AggregationType
          def AggregationType(value)
            dsl_attribute(:AggregationType, value)
          end
        end

        # Property Definition S3OutputFormatConfig
        class S3OutputFormatConfig < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for FileType
          def FileType(value)
            dsl_attribute(:FileType, value)
          end

          #   @param [PrefixConfig|JSONable] value
          #     The value to use for PrefixConfig
          # @@overload PrefixConfig(&block)
          #   Set :PrefixConfig from block via instance eval of a new PrefixConfig
          def PrefixConfig(value = nil, **value_hash, &block)
            dsl_attribute(:PrefixConfig, value, attr_class: PrefixConfig, **value_hash, &block)
          end

          #   @param [AggregationConfig|JSONable] value
          #     The value to use for AggregationConfig
          # @@overload AggregationConfig(&block)
          #   Set :AggregationConfig from block via instance eval of a new AggregationConfig
          def AggregationConfig(value = nil, **value_hash, &block)
            dsl_attribute(:AggregationConfig, value, attr_class: AggregationConfig, **value_hash, &block)
          end
        end

        # Property Definition AmplitudeSourceProperties
        class AmplitudeSourceProperties < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Object
          def Object(value)
            dsl_attribute(:Object, value)
          end
        end

        # Property Definition DatadogSourceProperties
        class DatadogSourceProperties < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Object
          def Object(value)
            dsl_attribute(:Object, value)
          end
        end

        # Property Definition DynatraceSourceProperties
        class DynatraceSourceProperties < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Object
          def Object(value)
            dsl_attribute(:Object, value)
          end
        end

        # Property Definition GoogleAnalyticsSourceProperties
        class GoogleAnalyticsSourceProperties < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Object
          def Object(value)
            dsl_attribute(:Object, value)
          end
        end

        # Property Definition InforNexusSourceProperties
        class InforNexusSourceProperties < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Object
          def Object(value)
            dsl_attribute(:Object, value)
          end
        end

        # Property Definition MarketoSourceProperties
        class MarketoSourceProperties < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Object
          def Object(value)
            dsl_attribute(:Object, value)
          end
        end

        # Property Definition S3SourceProperties
        class S3SourceProperties < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for BucketName
          def BucketName(value)
            dsl_attribute(:BucketName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for BucketPrefix
          def BucketPrefix(value)
            dsl_attribute(:BucketPrefix, value)
          end
        end

        # Property Definition SalesforceSourceProperties
        class SalesforceSourceProperties < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Object
          def Object(value)
            dsl_attribute(:Object, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for EnableDynamicFieldUpdate
          def EnableDynamicFieldUpdate(value)
            dsl_attribute(:EnableDynamicFieldUpdate, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for IncludeDeletedRecords
          def IncludeDeletedRecords(value)
            dsl_attribute(:IncludeDeletedRecords, value)
          end
        end

        # Property Definition ServiceNowSourceProperties
        class ServiceNowSourceProperties < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Object
          def Object(value)
            dsl_attribute(:Object, value)
          end
        end

        # Property Definition SingularSourceProperties
        class SingularSourceProperties < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Object
          def Object(value)
            dsl_attribute(:Object, value)
          end
        end

        # Property Definition SlackSourceProperties
        class SlackSourceProperties < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Object
          def Object(value)
            dsl_attribute(:Object, value)
          end
        end

        # Property Definition TrendmicroSourceProperties
        class TrendmicroSourceProperties < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Object
          def Object(value)
            dsl_attribute(:Object, value)
          end
        end

        # Property Definition VeevaSourceProperties
        class VeevaSourceProperties < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Object
          def Object(value)
            dsl_attribute(:Object, value)
          end
        end

        # Property Definition ZendeskSourceProperties
        class ZendeskSourceProperties < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Object
          def Object(value)
            dsl_attribute(:Object, value)
          end
        end

        # Property Definition RedshiftDestinationProperties
        class RedshiftDestinationProperties < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Object
          def Object(value)
            dsl_attribute(:Object, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for IntermediateBucketName
          def IntermediateBucketName(value)
            dsl_attribute(:IntermediateBucketName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for BucketPrefix
          def BucketPrefix(value)
            dsl_attribute(:BucketPrefix, value)
          end

          #   @param [ErrorHandlingConfig|JSONable] value
          #     The value to use for ErrorHandlingConfig
          # @@overload ErrorHandlingConfig(&block)
          #   Set :ErrorHandlingConfig from block via instance eval of a new ErrorHandlingConfig
          def ErrorHandlingConfig(value = nil, **value_hash, &block)
            dsl_attribute(:ErrorHandlingConfig, value, attr_class: ErrorHandlingConfig, **value_hash, &block)
          end
        end

        # Property Definition S3DestinationProperties
        class S3DestinationProperties < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for BucketName
          def BucketName(value)
            dsl_attribute(:BucketName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for BucketPrefix
          def BucketPrefix(value)
            dsl_attribute(:BucketPrefix, value)
          end

          #   @param [S3OutputFormatConfig|JSONable] value
          #     The value to use for S3OutputFormatConfig
          # @@overload S3OutputFormatConfig(&block)
          #   Set :S3OutputFormatConfig from block via instance eval of a new S3OutputFormatConfig
          def S3OutputFormatConfig(value = nil, **value_hash, &block)
            dsl_attribute(:S3OutputFormatConfig, value, attr_class: S3OutputFormatConfig, **value_hash, &block)
          end
        end

        # Property Definition SalesforceDestinationProperties
        class SalesforceDestinationProperties < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Object
          def Object(value)
            dsl_attribute(:Object, value)
          end

          #   @param [ErrorHandlingConfig|JSONable] value
          #     The value to use for ErrorHandlingConfig
          # @@overload ErrorHandlingConfig(&block)
          #   Set :ErrorHandlingConfig from block via instance eval of a new ErrorHandlingConfig
          def ErrorHandlingConfig(value = nil, **value_hash, &block)
            dsl_attribute(:ErrorHandlingConfig, value, attr_class: ErrorHandlingConfig, **value_hash, &block)
          end
        end

        # Property Definition SnowflakeDestinationProperties
        class SnowflakeDestinationProperties < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Object
          def Object(value)
            dsl_attribute(:Object, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for IntermediateBucketName
          def IntermediateBucketName(value)
            dsl_attribute(:IntermediateBucketName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for BucketPrefix
          def BucketPrefix(value)
            dsl_attribute(:BucketPrefix, value)
          end

          #   @param [ErrorHandlingConfig|JSONable] value
          #     The value to use for ErrorHandlingConfig
          # @@overload ErrorHandlingConfig(&block)
          #   Set :ErrorHandlingConfig from block via instance eval of a new ErrorHandlingConfig
          def ErrorHandlingConfig(value = nil, **value_hash, &block)
            dsl_attribute(:ErrorHandlingConfig, value, attr_class: ErrorHandlingConfig, **value_hash, &block)
          end
        end

        # Property Definition EventBridgeDestinationProperties
        class EventBridgeDestinationProperties < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Object
          def Object(value)
            dsl_attribute(:Object, value)
          end

          #   @param [ErrorHandlingConfig|JSONable] value
          #     The value to use for ErrorHandlingConfig
          # @@overload ErrorHandlingConfig(&block)
          #   Set :ErrorHandlingConfig from block via instance eval of a new ErrorHandlingConfig
          def ErrorHandlingConfig(value = nil, **value_hash, &block)
            dsl_attribute(:ErrorHandlingConfig, value, attr_class: ErrorHandlingConfig, **value_hash, &block)
          end
        end

        # An object used to store task related info
        class TaskPropertiesObject < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        #   @param [String|JSONable] value
        #     ARN identifier of the flow.
        def FlowArn(value)
          dsl_attribute(:FlowArn, value)
        end

        #   @param [String|JSONable] value
        #     Name of the flow.
        def FlowName(value)
          dsl_attribute(:FlowName, value)
        end

        #   @param [String|JSONable] value
        #     Description of the flow.
        def Description(value)
          dsl_attribute(:Description, value)
        end

        #   @param [String|JSONable] value
        #     The ARN of the AWS Key Management Service (AWS KMS) key that's used to encrypt your function's environment variables. If it's not provided, AWS Lambda uses a default service key.
        def KMSArn(value)
          dsl_attribute(:KMSArn, value)
        end

        #   @param [TriggerConfig|JSONable] value
        #     Trigger settings of the flow.
        # @@overload TriggerConfig(&block)
        #   Set :TriggerConfig from block via instance eval of a new TriggerConfig
        def TriggerConfig(value = nil, **value_hash, &block)
          dsl_attribute(:TriggerConfig, value, attr_class: TriggerConfig, **value_hash, &block)
        end

        #   @param [SourceFlowConfig|JSONable] value
        #     Configurations of Source connector of the flow.
        # @@overload SourceFlowConfig(&block)
        #   Set :SourceFlowConfig from block via instance eval of a new SourceFlowConfig
        def SourceFlowConfig(value = nil, **value_hash, &block)
          dsl_attribute(:SourceFlowConfig, value, attr_class: SourceFlowConfig, **value_hash, &block)
        end

        # @param [Array<DestinationFlowConfig>|JSONable>] values
        #   List of Destination connectors of the flow.
        def DestinationFlowConfigList(values)
          dsl_list_attribute(:DestinationFlowConfigList, values)
        end

        #  @param [DestinationFlowConfig|JSONable] value  Append value to the List
        #    List of Destination connectors of the flow.
        # @@overload DestinationFlowConfig(&block)
        # Append value to the List from block via instance eval of a new DestinationFlowConfig
        def DestinationFlowConfig(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:DestinationFlowConfigList, value, fn_if: fn_if, attr_class: DestinationFlowConfig, **value_hash, &block)
        end

        # @param [Array<Task>|JSONable>] values
        #   List of tasks for the flow.
        def Tasks(values)
          dsl_list_attribute(:Tasks, values)
        end

        #  @param [Task|JSONable] value  Append value to the List
        #    List of tasks for the flow.
        # @@overload Task(&block)
        # Append value to the List from block via instance eval of a new Task
        def Task(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tasks, value, fn_if: fn_if, attr_class: Task, **value_hash, &block)
        end

        # @param [Array<Tag>|JSONable>] values
        #   List of Tags.
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    List of Tags.
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::AppFlow::Flow]
    def AWS_AppFlow_Flow(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::AppFlow::Flow, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
