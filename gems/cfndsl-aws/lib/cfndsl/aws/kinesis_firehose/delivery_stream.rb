# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module KinesisFirehose
      # Resource Type definition for AWS::KinesisFirehose::DeliveryStream
      class DeliveryStream < ResourceType
        # Property Definition SplunkDestinationConfiguration
        class SplunkDestinationConfiguration < PropertyType
          #   @param [CloudWatchLoggingOptions|JSONable] value
          #     The value to use for CloudWatchLoggingOptions
          # @@overload CloudWatchLoggingOptions(&block)
          #   Set :CloudWatchLoggingOptions from block via instance eval of a new CloudWatchLoggingOptions
          def CloudWatchLoggingOptions(value = nil, **value_hash, &block)
            dsl_attribute(:CloudWatchLoggingOptions, value, attr_class: CloudWatchLoggingOptions, **value_hash, &block)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for HECAcknowledgmentTimeoutInSeconds
          def HECAcknowledgmentTimeoutInSeconds(value)
            dsl_attribute(:HECAcknowledgmentTimeoutInSeconds, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for HECEndpoint
          def HECEndpoint(value)
            dsl_attribute(:HECEndpoint, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for HECEndpointType
          def HECEndpointType(value)
            dsl_attribute(:HECEndpointType, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for HECToken
          def HECToken(value)
            dsl_attribute(:HECToken, value)
          end

          #   @param [ProcessingConfiguration|JSONable] value
          #     The value to use for ProcessingConfiguration
          # @@overload ProcessingConfiguration(&block)
          #   Set :ProcessingConfiguration from block via instance eval of a new ProcessingConfiguration
          def ProcessingConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:ProcessingConfiguration, value, attr_class: ProcessingConfiguration, **value_hash, &block)
          end

          #   @param [SplunkRetryOptions|JSONable] value
          #     The value to use for RetryOptions
          # @@overload RetryOptions(&block)
          #   Set :RetryOptions from block via instance eval of a new SplunkRetryOptions
          def RetryOptions(value = nil, **value_hash, &block)
            dsl_attribute(:RetryOptions, value, attr_class: SplunkRetryOptions, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for S3BackupMode
          def S3BackupMode(value)
            dsl_attribute(:S3BackupMode, value)
          end

          #   @param [S3DestinationConfiguration|JSONable] value
          #     The value to use for S3Configuration
          # @@overload S3Configuration(&block)
          #   Set :S3Configuration from block via instance eval of a new S3DestinationConfiguration
          def S3Configuration(value = nil, **value_hash, &block)
            dsl_attribute(:S3Configuration, value, attr_class: S3DestinationConfiguration, **value_hash, &block)
          end
        end

        # Property Definition HttpEndpointDestinationConfiguration
        class HttpEndpointDestinationConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for RoleARN
          def RoleARN(value)
            dsl_attribute(:RoleARN, value)
          end

          #   @param [HttpEndpointConfiguration|JSONable] value
          #     The value to use for EndpointConfiguration
          # @@overload EndpointConfiguration(&block)
          #   Set :EndpointConfiguration from block via instance eval of a new HttpEndpointConfiguration
          def EndpointConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:EndpointConfiguration, value, attr_class: HttpEndpointConfiguration, **value_hash, &block)
          end

          #   @param [HttpEndpointRequestConfiguration|JSONable] value
          #     The value to use for RequestConfiguration
          # @@overload RequestConfiguration(&block)
          #   Set :RequestConfiguration from block via instance eval of a new HttpEndpointRequestConfiguration
          def RequestConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:RequestConfiguration, value, attr_class: HttpEndpointRequestConfiguration, **value_hash, &block)
          end

          #   @param [BufferingHints|JSONable] value
          #     The value to use for BufferingHints
          # @@overload BufferingHints(&block)
          #   Set :BufferingHints from block via instance eval of a new BufferingHints
          def BufferingHints(value = nil, **value_hash, &block)
            dsl_attribute(:BufferingHints, value, attr_class: BufferingHints, **value_hash, &block)
          end

          #   @param [CloudWatchLoggingOptions|JSONable] value
          #     The value to use for CloudWatchLoggingOptions
          # @@overload CloudWatchLoggingOptions(&block)
          #   Set :CloudWatchLoggingOptions from block via instance eval of a new CloudWatchLoggingOptions
          def CloudWatchLoggingOptions(value = nil, **value_hash, &block)
            dsl_attribute(:CloudWatchLoggingOptions, value, attr_class: CloudWatchLoggingOptions, **value_hash, &block)
          end

          #   @param [ProcessingConfiguration|JSONable] value
          #     The value to use for ProcessingConfiguration
          # @@overload ProcessingConfiguration(&block)
          #   Set :ProcessingConfiguration from block via instance eval of a new ProcessingConfiguration
          def ProcessingConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:ProcessingConfiguration, value, attr_class: ProcessingConfiguration, **value_hash, &block)
          end

          #   @param [RetryOptions|JSONable] value
          #     The value to use for RetryOptions
          # @@overload RetryOptions(&block)
          #   Set :RetryOptions from block via instance eval of a new RetryOptions
          def RetryOptions(value = nil, **value_hash, &block)
            dsl_attribute(:RetryOptions, value, attr_class: RetryOptions, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for S3BackupMode
          def S3BackupMode(value)
            dsl_attribute(:S3BackupMode, value)
          end

          #   @param [S3DestinationConfiguration|JSONable] value
          #     The value to use for S3Configuration
          # @@overload S3Configuration(&block)
          #   Set :S3Configuration from block via instance eval of a new S3DestinationConfiguration
          def S3Configuration(value = nil, **value_hash, &block)
            dsl_attribute(:S3Configuration, value, attr_class: S3DestinationConfiguration, **value_hash, &block)
          end
        end

        # Property Definition KinesisStreamSourceConfiguration
        class KinesisStreamSourceConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for KinesisStreamARN
          def KinesisStreamARN(value)
            dsl_attribute(:KinesisStreamARN, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for RoleARN
          def RoleARN(value)
            dsl_attribute(:RoleARN, value)
          end
        end

        # Property Definition VpcConfiguration
        class VpcConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for RoleARN
          def RoleARN(value)
            dsl_attribute(:RoleARN, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for SubnetIds
          def SubnetIds(values)
            dsl_list_attribute(:SubnetIds, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for SubnetIds
          def SubnetId(value, fn_if: nil)
            dsl_push_attribute(:SubnetIds, value, fn_if: fn_if)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for SecurityGroupIds
          def SecurityGroupIds(values)
            dsl_list_attribute(:SecurityGroupIds, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for SecurityGroupIds
          def SecurityGroupId(value, fn_if: nil)
            dsl_push_attribute(:SecurityGroupIds, value, fn_if: fn_if)
          end
        end

        # Property Definition ExtendedS3DestinationConfiguration
        class ExtendedS3DestinationConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for BucketARN
          def BucketARN(value)
            dsl_attribute(:BucketARN, value)
          end

          #   @param [BufferingHints|JSONable] value
          #     The value to use for BufferingHints
          # @@overload BufferingHints(&block)
          #   Set :BufferingHints from block via instance eval of a new BufferingHints
          def BufferingHints(value = nil, **value_hash, &block)
            dsl_attribute(:BufferingHints, value, attr_class: BufferingHints, **value_hash, &block)
          end

          #   @param [CloudWatchLoggingOptions|JSONable] value
          #     The value to use for CloudWatchLoggingOptions
          # @@overload CloudWatchLoggingOptions(&block)
          #   Set :CloudWatchLoggingOptions from block via instance eval of a new CloudWatchLoggingOptions
          def CloudWatchLoggingOptions(value = nil, **value_hash, &block)
            dsl_attribute(:CloudWatchLoggingOptions, value, attr_class: CloudWatchLoggingOptions, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for CompressionFormat
          def CompressionFormat(value)
            dsl_attribute(:CompressionFormat, value)
          end

          #   @param [DataFormatConversionConfiguration|JSONable] value
          #     The value to use for DataFormatConversionConfiguration
          # @@overload DataFormatConversionConfiguration(&block)
          #   Set :DataFormatConversionConfiguration from block via instance eval of a new DataFormatConversionConfiguration
          def DataFormatConversionConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:DataFormatConversionConfiguration, value, attr_class: DataFormatConversionConfiguration, **value_hash, &block)
          end

          #   @param [EncryptionConfiguration|JSONable] value
          #     The value to use for EncryptionConfiguration
          # @@overload EncryptionConfiguration(&block)
          #   Set :EncryptionConfiguration from block via instance eval of a new EncryptionConfiguration
          def EncryptionConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:EncryptionConfiguration, value, attr_class: EncryptionConfiguration, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for ErrorOutputPrefix
          def ErrorOutputPrefix(value)
            dsl_attribute(:ErrorOutputPrefix, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Prefix
          def Prefix(value)
            dsl_attribute(:Prefix, value)
          end

          #   @param [ProcessingConfiguration|JSONable] value
          #     The value to use for ProcessingConfiguration
          # @@overload ProcessingConfiguration(&block)
          #   Set :ProcessingConfiguration from block via instance eval of a new ProcessingConfiguration
          def ProcessingConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:ProcessingConfiguration, value, attr_class: ProcessingConfiguration, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for RoleARN
          def RoleARN(value)
            dsl_attribute(:RoleARN, value)
          end

          #   @param [S3DestinationConfiguration|JSONable] value
          #     The value to use for S3BackupConfiguration
          # @@overload S3BackupConfiguration(&block)
          #   Set :S3BackupConfiguration from block via instance eval of a new S3DestinationConfiguration
          def S3BackupConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:S3BackupConfiguration, value, attr_class: S3DestinationConfiguration, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for S3BackupMode
          def S3BackupMode(value)
            dsl_attribute(:S3BackupMode, value)
          end
        end

        # Property Definition S3DestinationConfiguration
        class S3DestinationConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for BucketARN
          def BucketARN(value)
            dsl_attribute(:BucketARN, value)
          end

          #   @param [BufferingHints|JSONable] value
          #     The value to use for BufferingHints
          # @@overload BufferingHints(&block)
          #   Set :BufferingHints from block via instance eval of a new BufferingHints
          def BufferingHints(value = nil, **value_hash, &block)
            dsl_attribute(:BufferingHints, value, attr_class: BufferingHints, **value_hash, &block)
          end

          #   @param [CloudWatchLoggingOptions|JSONable] value
          #     The value to use for CloudWatchLoggingOptions
          # @@overload CloudWatchLoggingOptions(&block)
          #   Set :CloudWatchLoggingOptions from block via instance eval of a new CloudWatchLoggingOptions
          def CloudWatchLoggingOptions(value = nil, **value_hash, &block)
            dsl_attribute(:CloudWatchLoggingOptions, value, attr_class: CloudWatchLoggingOptions, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for CompressionFormat
          def CompressionFormat(value)
            dsl_attribute(:CompressionFormat, value)
          end

          #   @param [EncryptionConfiguration|JSONable] value
          #     The value to use for EncryptionConfiguration
          # @@overload EncryptionConfiguration(&block)
          #   Set :EncryptionConfiguration from block via instance eval of a new EncryptionConfiguration
          def EncryptionConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:EncryptionConfiguration, value, attr_class: EncryptionConfiguration, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for ErrorOutputPrefix
          def ErrorOutputPrefix(value)
            dsl_attribute(:ErrorOutputPrefix, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Prefix
          def Prefix(value)
            dsl_attribute(:Prefix, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for RoleARN
          def RoleARN(value)
            dsl_attribute(:RoleARN, value)
          end
        end

        # Property Definition RedshiftDestinationConfiguration
        class RedshiftDestinationConfiguration < PropertyType
          #   @param [CloudWatchLoggingOptions|JSONable] value
          #     The value to use for CloudWatchLoggingOptions
          # @@overload CloudWatchLoggingOptions(&block)
          #   Set :CloudWatchLoggingOptions from block via instance eval of a new CloudWatchLoggingOptions
          def CloudWatchLoggingOptions(value = nil, **value_hash, &block)
            dsl_attribute(:CloudWatchLoggingOptions, value, attr_class: CloudWatchLoggingOptions, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for ClusterJDBCURL
          def ClusterJDBCURL(value)
            dsl_attribute(:ClusterJDBCURL, value)
          end

          #   @param [CopyCommand|JSONable] value
          #     The value to use for CopyCommand
          # @@overload CopyCommand(&block)
          #   Set :CopyCommand from block via instance eval of a new CopyCommand
          def CopyCommand(value = nil, **value_hash, &block)
            dsl_attribute(:CopyCommand, value, attr_class: CopyCommand, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for Password
          def Password(value)
            dsl_attribute(:Password, value)
          end

          #   @param [ProcessingConfiguration|JSONable] value
          #     The value to use for ProcessingConfiguration
          # @@overload ProcessingConfiguration(&block)
          #   Set :ProcessingConfiguration from block via instance eval of a new ProcessingConfiguration
          def ProcessingConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:ProcessingConfiguration, value, attr_class: ProcessingConfiguration, **value_hash, &block)
          end

          #   @param [RedshiftRetryOptions|JSONable] value
          #     The value to use for RetryOptions
          # @@overload RetryOptions(&block)
          #   Set :RetryOptions from block via instance eval of a new RedshiftRetryOptions
          def RetryOptions(value = nil, **value_hash, &block)
            dsl_attribute(:RetryOptions, value, attr_class: RedshiftRetryOptions, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for RoleARN
          def RoleARN(value)
            dsl_attribute(:RoleARN, value)
          end

          #   @param [S3DestinationConfiguration|JSONable] value
          #     The value to use for S3BackupConfiguration
          # @@overload S3BackupConfiguration(&block)
          #   Set :S3BackupConfiguration from block via instance eval of a new S3DestinationConfiguration
          def S3BackupConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:S3BackupConfiguration, value, attr_class: S3DestinationConfiguration, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for S3BackupMode
          def S3BackupMode(value)
            dsl_attribute(:S3BackupMode, value)
          end

          #   @param [S3DestinationConfiguration|JSONable] value
          #     The value to use for S3Configuration
          # @@overload S3Configuration(&block)
          #   Set :S3Configuration from block via instance eval of a new S3DestinationConfiguration
          def S3Configuration(value = nil, **value_hash, &block)
            dsl_attribute(:S3Configuration, value, attr_class: S3DestinationConfiguration, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for Username
          def Username(value)
            dsl_attribute(:Username, value)
          end
        end

        # Property Definition ElasticsearchDestinationConfiguration
        class ElasticsearchDestinationConfiguration < PropertyType
          #   @param [ElasticsearchBufferingHints|JSONable] value
          #     The value to use for BufferingHints
          # @@overload BufferingHints(&block)
          #   Set :BufferingHints from block via instance eval of a new ElasticsearchBufferingHints
          def BufferingHints(value = nil, **value_hash, &block)
            dsl_attribute(:BufferingHints, value, attr_class: ElasticsearchBufferingHints, **value_hash, &block)
          end

          #   @param [CloudWatchLoggingOptions|JSONable] value
          #     The value to use for CloudWatchLoggingOptions
          # @@overload CloudWatchLoggingOptions(&block)
          #   Set :CloudWatchLoggingOptions from block via instance eval of a new CloudWatchLoggingOptions
          def CloudWatchLoggingOptions(value = nil, **value_hash, &block)
            dsl_attribute(:CloudWatchLoggingOptions, value, attr_class: CloudWatchLoggingOptions, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for DomainARN
          def DomainARN(value)
            dsl_attribute(:DomainARN, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for IndexName
          def IndexName(value)
            dsl_attribute(:IndexName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for IndexRotationPeriod
          def IndexRotationPeriod(value)
            dsl_attribute(:IndexRotationPeriod, value)
          end

          #   @param [ProcessingConfiguration|JSONable] value
          #     The value to use for ProcessingConfiguration
          # @@overload ProcessingConfiguration(&block)
          #   Set :ProcessingConfiguration from block via instance eval of a new ProcessingConfiguration
          def ProcessingConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:ProcessingConfiguration, value, attr_class: ProcessingConfiguration, **value_hash, &block)
          end

          #   @param [ElasticsearchRetryOptions|JSONable] value
          #     The value to use for RetryOptions
          # @@overload RetryOptions(&block)
          #   Set :RetryOptions from block via instance eval of a new ElasticsearchRetryOptions
          def RetryOptions(value = nil, **value_hash, &block)
            dsl_attribute(:RetryOptions, value, attr_class: ElasticsearchRetryOptions, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for RoleARN
          def RoleARN(value)
            dsl_attribute(:RoleARN, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for S3BackupMode
          def S3BackupMode(value)
            dsl_attribute(:S3BackupMode, value)
          end

          #   @param [S3DestinationConfiguration|JSONable] value
          #     The value to use for S3Configuration
          # @@overload S3Configuration(&block)
          #   Set :S3Configuration from block via instance eval of a new S3DestinationConfiguration
          def S3Configuration(value = nil, **value_hash, &block)
            dsl_attribute(:S3Configuration, value, attr_class: S3DestinationConfiguration, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for ClusterEndpoint
          def ClusterEndpoint(value)
            dsl_attribute(:ClusterEndpoint, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for TypeName
          def TypeName(value)
            dsl_attribute(:TypeName, value)
          end

          #   @param [VpcConfiguration|JSONable] value
          #     The value to use for VpcConfiguration
          # @@overload VpcConfiguration(&block)
          #   Set :VpcConfiguration from block via instance eval of a new VpcConfiguration
          def VpcConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:VpcConfiguration, value, attr_class: VpcConfiguration, **value_hash, &block)
          end
        end

        # Property Definition BufferingHints
        class BufferingHints < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for IntervalInSeconds
          def IntervalInSeconds(value)
            dsl_attribute(:IntervalInSeconds, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for SizeInMBs
          def SizeInMBs(value)
            dsl_attribute(:SizeInMBs, value)
          end
        end

        # Property Definition ProcessingConfiguration
        class ProcessingConfiguration < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for Enabled
          def Enabled(value)
            dsl_attribute(:Enabled, value)
          end

          # @param [Array<Processor>|JSONable>] values
          #   The List of values to use for Processors
          def Processors(values)
            dsl_list_attribute(:Processors, values)
          end

          #  @param [Processor|JSONable] value  Append value to the List
          #    The List of values to use for Processors
          # @@overload Processor(&block)
          # Append value to the List from block via instance eval of a new Processor
          def Processor(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Processors, value, fn_if: fn_if, attr_class: Processor, **value_hash, &block)
          end
        end

        # Property Definition SplunkRetryOptions
        class SplunkRetryOptions < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for DurationInSeconds
          def DurationInSeconds(value)
            dsl_attribute(:DurationInSeconds, value)
          end
        end

        # Property Definition ElasticsearchRetryOptions
        class ElasticsearchRetryOptions < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for DurationInSeconds
          def DurationInSeconds(value)
            dsl_attribute(:DurationInSeconds, value)
          end
        end

        # Property Definition RedshiftRetryOptions
        class RedshiftRetryOptions < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for DurationInSeconds
          def DurationInSeconds(value)
            dsl_attribute(:DurationInSeconds, value)
          end
        end

        # Property Definition RetryOptions
        class RetryOptions < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for DurationInSeconds
          def DurationInSeconds(value)
            dsl_attribute(:DurationInSeconds, value)
          end
        end

        # Property Definition DataFormatConversionConfiguration
        class DataFormatConversionConfiguration < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for Enabled
          def Enabled(value)
            dsl_attribute(:Enabled, value)
          end

          #   @param [InputFormatConfiguration|JSONable] value
          #     The value to use for InputFormatConfiguration
          # @@overload InputFormatConfiguration(&block)
          #   Set :InputFormatConfiguration from block via instance eval of a new InputFormatConfiguration
          def InputFormatConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:InputFormatConfiguration, value, attr_class: InputFormatConfiguration, **value_hash, &block)
          end

          #   @param [OutputFormatConfiguration|JSONable] value
          #     The value to use for OutputFormatConfiguration
          # @@overload OutputFormatConfiguration(&block)
          #   Set :OutputFormatConfiguration from block via instance eval of a new OutputFormatConfiguration
          def OutputFormatConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:OutputFormatConfiguration, value, attr_class: OutputFormatConfiguration, **value_hash, &block)
          end

          #   @param [SchemaConfiguration|JSONable] value
          #     The value to use for SchemaConfiguration
          # @@overload SchemaConfiguration(&block)
          #   Set :SchemaConfiguration from block via instance eval of a new SchemaConfiguration
          def SchemaConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:SchemaConfiguration, value, attr_class: SchemaConfiguration, **value_hash, &block)
          end
        end

        # Property Definition CopyCommand
        class CopyCommand < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for CopyOptions
          def CopyOptions(value)
            dsl_attribute(:CopyOptions, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for DataTableColumns
          def DataTableColumns(value)
            dsl_attribute(:DataTableColumns, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for DataTableName
          def DataTableName(value)
            dsl_attribute(:DataTableName, value)
          end
        end

        # Property Definition EncryptionConfiguration
        class EncryptionConfiguration < PropertyType
          #   @param [KMSEncryptionConfig|JSONable] value
          #     The value to use for KMSEncryptionConfig
          # @@overload KMSEncryptionConfig(&block)
          #   Set :KMSEncryptionConfig from block via instance eval of a new KMSEncryptionConfig
          def KMSEncryptionConfig(value = nil, **value_hash, &block)
            dsl_attribute(:KMSEncryptionConfig, value, attr_class: KMSEncryptionConfig, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for NoEncryptionConfig
          def NoEncryptionConfig(value)
            dsl_attribute(:NoEncryptionConfig, value)
          end
        end

        # Property Definition ElasticsearchBufferingHints
        class ElasticsearchBufferingHints < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for IntervalInSeconds
          def IntervalInSeconds(value)
            dsl_attribute(:IntervalInSeconds, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for SizeInMBs
          def SizeInMBs(value)
            dsl_attribute(:SizeInMBs, value)
          end
        end

        # Property Definition CloudWatchLoggingOptions
        class CloudWatchLoggingOptions < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for Enabled
          def Enabled(value)
            dsl_attribute(:Enabled, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for LogGroupName
          def LogGroupName(value)
            dsl_attribute(:LogGroupName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for LogStreamName
          def LogStreamName(value)
            dsl_attribute(:LogStreamName, value)
          end
        end

        # Property Definition OutputFormatConfiguration
        class OutputFormatConfiguration < PropertyType
          #   @param [Serializer|JSONable] value
          #     The value to use for Serializer
          # @@overload Serializer(&block)
          #   Set :Serializer from block via instance eval of a new Serializer
          def Serializer(value = nil, **value_hash, &block)
            dsl_attribute(:Serializer, value, attr_class: Serializer, **value_hash, &block)
          end
        end

        # Property Definition Processor
        class Processor < PropertyType
          # @param [Array<ProcessorParameter>|JSONable>] values
          #   The List of values to use for Parameters
          def Parameters(values)
            dsl_list_attribute(:Parameters, values)
          end

          #  @param [ProcessorParameter|JSONable] value  Append value to the List
          #    The List of values to use for Parameters
          # @@overload Parameter(&block)
          # Append value to the List from block via instance eval of a new ProcessorParameter
          def Parameter(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Parameters, value, fn_if: fn_if, attr_class: ProcessorParameter, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for Type
          def Type(value)
            dsl_attribute(:Type, value)
          end
        end

        # Property Definition KMSEncryptionConfig
        class KMSEncryptionConfig < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for AWSKMSKeyARN
          def AWSKMSKeyARN(value)
            dsl_attribute(:AWSKMSKeyARN, value)
          end
        end

        # Property Definition InputFormatConfiguration
        class InputFormatConfiguration < PropertyType
          #   @param [Deserializer|JSONable] value
          #     The value to use for Deserializer
          # @@overload Deserializer(&block)
          #   Set :Deserializer from block via instance eval of a new Deserializer
          def Deserializer(value = nil, **value_hash, &block)
            dsl_attribute(:Deserializer, value, attr_class: Deserializer, **value_hash, &block)
          end
        end

        # Property Definition SchemaConfiguration
        class SchemaConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for CatalogId
          def CatalogId(value)
            dsl_attribute(:CatalogId, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for DatabaseName
          def DatabaseName(value)
            dsl_attribute(:DatabaseName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Region
          def Region(value)
            dsl_attribute(:Region, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for RoleARN
          def RoleARN(value)
            dsl_attribute(:RoleARN, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for TableName
          def TableName(value)
            dsl_attribute(:TableName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for VersionId
          def VersionId(value)
            dsl_attribute(:VersionId, value)
          end
        end

        # Property Definition Serializer
        class Serializer < PropertyType
          #   @param [OrcSerDe|JSONable] value
          #     The value to use for OrcSerDe
          # @@overload OrcSerDe(&block)
          #   Set :OrcSerDe from block via instance eval of a new OrcSerDe
          def OrcSerDe(value = nil, **value_hash, &block)
            dsl_attribute(:OrcSerDe, value, attr_class: OrcSerDe, **value_hash, &block)
          end

          #   @param [ParquetSerDe|JSONable] value
          #     The value to use for ParquetSerDe
          # @@overload ParquetSerDe(&block)
          #   Set :ParquetSerDe from block via instance eval of a new ParquetSerDe
          def ParquetSerDe(value = nil, **value_hash, &block)
            dsl_attribute(:ParquetSerDe, value, attr_class: ParquetSerDe, **value_hash, &block)
          end
        end

        # Property Definition ProcessorParameter
        class ProcessorParameter < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ParameterName
          def ParameterName(value)
            dsl_attribute(:ParameterName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ParameterValue
          def ParameterValue(value)
            dsl_attribute(:ParameterValue, value)
          end
        end

        # Property Definition Deserializer
        class Deserializer < PropertyType
          #   @param [HiveJsonSerDe|JSONable] value
          #     The value to use for HiveJsonSerDe
          # @@overload HiveJsonSerDe(&block)
          #   Set :HiveJsonSerDe from block via instance eval of a new HiveJsonSerDe
          def HiveJsonSerDe(value = nil, **value_hash, &block)
            dsl_attribute(:HiveJsonSerDe, value, attr_class: HiveJsonSerDe, **value_hash, &block)
          end

          #   @param [OpenXJsonSerDe|JSONable] value
          #     The value to use for OpenXJsonSerDe
          # @@overload OpenXJsonSerDe(&block)
          #   Set :OpenXJsonSerDe from block via instance eval of a new OpenXJsonSerDe
          def OpenXJsonSerDe(value = nil, **value_hash, &block)
            dsl_attribute(:OpenXJsonSerDe, value, attr_class: OpenXJsonSerDe, **value_hash, &block)
          end
        end

        # Property Definition HiveJsonSerDe
        class HiveJsonSerDe < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for TimestampFormats
          def TimestampFormats(values)
            dsl_list_attribute(:TimestampFormats, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for TimestampFormats
          def TimestampFormat(value, fn_if: nil)
            dsl_push_attribute(:TimestampFormats, value, fn_if: fn_if)
          end
        end

        # Property Definition OrcSerDe
        class OrcSerDe < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for BlockSizeBytes
          def BlockSizeBytes(value)
            dsl_attribute(:BlockSizeBytes, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for BloomFilterColumns
          def BloomFilterColumns(values)
            dsl_list_attribute(:BloomFilterColumns, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for BloomFilterColumns
          def BloomFilterColumn(value, fn_if: nil)
            dsl_push_attribute(:BloomFilterColumns, value, fn_if: fn_if)
          end

          #   @param [Number|JSONable] value
          #     The value to use for BloomFilterFalsePositiveProbability
          def BloomFilterFalsePositiveProbability(value)
            dsl_attribute(:BloomFilterFalsePositiveProbability, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Compression
          def Compression(value)
            dsl_attribute(:Compression, value)
          end

          #   @param [Number|JSONable] value
          #     The value to use for DictionaryKeyThreshold
          def DictionaryKeyThreshold(value)
            dsl_attribute(:DictionaryKeyThreshold, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for EnablePadding
          def EnablePadding(value)
            dsl_attribute(:EnablePadding, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for FormatVersion
          def FormatVersion(value)
            dsl_attribute(:FormatVersion, value)
          end

          #   @param [Number|JSONable] value
          #     The value to use for PaddingTolerance
          def PaddingTolerance(value)
            dsl_attribute(:PaddingTolerance, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for RowIndexStride
          def RowIndexStride(value)
            dsl_attribute(:RowIndexStride, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for StripeSizeBytes
          def StripeSizeBytes(value)
            dsl_attribute(:StripeSizeBytes, value)
          end
        end

        # Property Definition ParquetSerDe
        class ParquetSerDe < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for BlockSizeBytes
          def BlockSizeBytes(value)
            dsl_attribute(:BlockSizeBytes, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Compression
          def Compression(value)
            dsl_attribute(:Compression, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for EnableDictionaryCompression
          def EnableDictionaryCompression(value)
            dsl_attribute(:EnableDictionaryCompression, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for MaxPaddingBytes
          def MaxPaddingBytes(value)
            dsl_attribute(:MaxPaddingBytes, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for PageSizeBytes
          def PageSizeBytes(value)
            dsl_attribute(:PageSizeBytes, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for WriterVersion
          def WriterVersion(value)
            dsl_attribute(:WriterVersion, value)
          end
        end

        # Property Definition OpenXJsonSerDe
        class OpenXJsonSerDe < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for CaseInsensitive
          def CaseInsensitive(value)
            dsl_attribute(:CaseInsensitive, value)
          end

          #   @param [Object|JSONable] value
          #     The value to use for ColumnToJsonKeyMappings
          def ColumnToJsonKeyMappings(value)
            dsl_attribute(:ColumnToJsonKeyMappings, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for ConvertDotsInJsonKeysToUnderscores
          def ConvertDotsInJsonKeysToUnderscores(value)
            dsl_attribute(:ConvertDotsInJsonKeysToUnderscores, value)
          end
        end

        # Property Definition HttpEndpointRequestConfiguration
        class HttpEndpointRequestConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ContentEncoding
          def ContentEncoding(value)
            dsl_attribute(:ContentEncoding, value)
          end

          # @param [Array<HttpEndpointCommonAttribute>|JSONable>] values
          #   The List of values to use for CommonAttributes
          def CommonAttributes(values)
            dsl_list_attribute(:CommonAttributes, values)
          end

          #  @param [HttpEndpointCommonAttribute|JSONable] value  Append value to the List
          #    The List of values to use for CommonAttributes
          # @@overload CommonAttribute(&block)
          # Append value to the List from block via instance eval of a new HttpEndpointCommonAttribute
          def CommonAttribute(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:CommonAttributes, value, fn_if: fn_if, attr_class: HttpEndpointCommonAttribute, **value_hash, &block)
          end
        end

        # Property Definition HttpEndpointCommonAttribute
        class HttpEndpointCommonAttribute < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for AttributeName
          def AttributeName(value)
            dsl_attribute(:AttributeName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for AttributeValue
          def AttributeValue(value)
            dsl_attribute(:AttributeValue, value)
          end
        end

        # Property Definition HttpEndpointConfiguration
        class HttpEndpointConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Url
          def Url(value)
            dsl_attribute(:Url, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for AccessKey
          def AccessKey(value)
            dsl_attribute(:AccessKey, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for Arn
        def Arn(value)
          dsl_attribute(:Arn, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for DeliveryStreamName
        def DeliveryStreamName(value)
          dsl_attribute(:DeliveryStreamName, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for DeliveryStreamType
        def DeliveryStreamType(value)
          dsl_attribute(:DeliveryStreamType, value)
        end

        #   @param [ElasticsearchDestinationConfiguration|JSONable] value
        #     The value to use for ElasticsearchDestinationConfiguration
        # @@overload ElasticsearchDestinationConfiguration(&block)
        #   Set :ElasticsearchDestinationConfiguration from block via instance eval of a new ElasticsearchDestinationConfiguration
        def ElasticsearchDestinationConfiguration(value = nil, **value_hash, &block)
          dsl_attribute(:ElasticsearchDestinationConfiguration, value, attr_class: ElasticsearchDestinationConfiguration, **value_hash, &block)
        end

        #   @param [ExtendedS3DestinationConfiguration|JSONable] value
        #     The value to use for ExtendedS3DestinationConfiguration
        # @@overload ExtendedS3DestinationConfiguration(&block)
        #   Set :ExtendedS3DestinationConfiguration from block via instance eval of a new ExtendedS3DestinationConfiguration
        def ExtendedS3DestinationConfiguration(value = nil, **value_hash, &block)
          dsl_attribute(:ExtendedS3DestinationConfiguration, value, attr_class: ExtendedS3DestinationConfiguration, **value_hash, &block)
        end

        #   @param [KinesisStreamSourceConfiguration|JSONable] value
        #     The value to use for KinesisStreamSourceConfiguration
        # @@overload KinesisStreamSourceConfiguration(&block)
        #   Set :KinesisStreamSourceConfiguration from block via instance eval of a new KinesisStreamSourceConfiguration
        def KinesisStreamSourceConfiguration(value = nil, **value_hash, &block)
          dsl_attribute(:KinesisStreamSourceConfiguration, value, attr_class: KinesisStreamSourceConfiguration, **value_hash, &block)
        end

        #   @param [RedshiftDestinationConfiguration|JSONable] value
        #     The value to use for RedshiftDestinationConfiguration
        # @@overload RedshiftDestinationConfiguration(&block)
        #   Set :RedshiftDestinationConfiguration from block via instance eval of a new RedshiftDestinationConfiguration
        def RedshiftDestinationConfiguration(value = nil, **value_hash, &block)
          dsl_attribute(:RedshiftDestinationConfiguration, value, attr_class: RedshiftDestinationConfiguration, **value_hash, &block)
        end

        #   @param [S3DestinationConfiguration|JSONable] value
        #     The value to use for S3DestinationConfiguration
        # @@overload S3DestinationConfiguration(&block)
        #   Set :S3DestinationConfiguration from block via instance eval of a new S3DestinationConfiguration
        def S3DestinationConfiguration(value = nil, **value_hash, &block)
          dsl_attribute(:S3DestinationConfiguration, value, attr_class: S3DestinationConfiguration, **value_hash, &block)
        end

        #   @param [SplunkDestinationConfiguration|JSONable] value
        #     The value to use for SplunkDestinationConfiguration
        # @@overload SplunkDestinationConfiguration(&block)
        #   Set :SplunkDestinationConfiguration from block via instance eval of a new SplunkDestinationConfiguration
        def SplunkDestinationConfiguration(value = nil, **value_hash, &block)
          dsl_attribute(:SplunkDestinationConfiguration, value, attr_class: SplunkDestinationConfiguration, **value_hash, &block)
        end

        #   @param [HttpEndpointDestinationConfiguration|JSONable] value
        #     The value to use for HttpEndpointDestinationConfiguration
        # @@overload HttpEndpointDestinationConfiguration(&block)
        #   Set :HttpEndpointDestinationConfiguration from block via instance eval of a new HttpEndpointDestinationConfiguration
        def HttpEndpointDestinationConfiguration(value = nil, **value_hash, &block)
          dsl_attribute(:HttpEndpointDestinationConfiguration, value, attr_class: HttpEndpointDestinationConfiguration, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::KinesisFirehose::DeliveryStream]
    def AWS_KinesisFirehose_DeliveryStream(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::KinesisFirehose::DeliveryStream, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
