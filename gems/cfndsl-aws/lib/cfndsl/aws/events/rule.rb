# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module Events
      # Resource Type definition for AWS::Events::Rule
      class Rule < ResourceType
        # Property Definition HttpParameters
        class HttpParameters < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for PathParameterValues
          def PathParameterValues(values)
            dsl_list_attribute(:PathParameterValues, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for PathParameterValues
          def PathParameterValue(value, fn_if: nil)
            dsl_push_attribute(:PathParameterValues, value, fn_if: fn_if)
          end

          #   @param [Object|JSONable] value
          #     The value to use for HeaderParameters
          def HeaderParameters(value)
            dsl_attribute(:HeaderParameters, value)
          end

          #   @param [Object|JSONable] value
          #     The value to use for QueryStringParameters
          def QueryStringParameters(value)
            dsl_attribute(:QueryStringParameters, value)
          end
        end

        # Property Definition RunCommandParameters
        class RunCommandParameters < PropertyType
          # @param [Array<RunCommandTarget>|JSONable>] values
          #   The List of values to use for RunCommandTargets
          def RunCommandTargets(values)
            dsl_list_attribute(:RunCommandTargets, values)
          end

          #  @param [RunCommandTarget|JSONable] value  Append value to the List
          #    The List of values to use for RunCommandTargets
          # @@overload RunCommandTarget(&block)
          # Append value to the List from block via instance eval of a new RunCommandTarget
          def RunCommandTarget(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:RunCommandTargets, value, fn_if: fn_if, attr_class: RunCommandTarget, **value_hash, &block)
          end
        end

        # Property Definition InputTransformer
        class InputTransformer < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for InputTemplate
          def InputTemplate(value)
            dsl_attribute(:InputTemplate, value)
          end

          #   @param [Object|JSONable] value
          #     The value to use for InputPathsMap
          def InputPathsMap(value)
            dsl_attribute(:InputPathsMap, value)
          end
        end

        # Property Definition KinesisParameters
        class KinesisParameters < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for PartitionKeyPath
          def PartitionKeyPath(value)
            dsl_attribute(:PartitionKeyPath, value)
          end
        end

        # Property Definition BatchRetryStrategy
        class BatchRetryStrategy < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for Attempts
          def Attempts(value)
            dsl_attribute(:Attempts, value)
          end
        end

        # Property Definition Target
        class Target < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for InputPath
          def InputPath(value)
            dsl_attribute(:InputPath, value)
          end

          #   @param [HttpParameters|JSONable] value
          #     The value to use for HttpParameters
          # @@overload HttpParameters(&block)
          #   Set :HttpParameters from block via instance eval of a new HttpParameters
          def HttpParameters(value = nil, **value_hash, &block)
            dsl_attribute(:HttpParameters, value, attr_class: HttpParameters, **value_hash, &block)
          end

          #   @param [RunCommandParameters|JSONable] value
          #     The value to use for RunCommandParameters
          # @@overload RunCommandParameters(&block)
          #   Set :RunCommandParameters from block via instance eval of a new RunCommandParameters
          def RunCommandParameters(value = nil, **value_hash, &block)
            dsl_attribute(:RunCommandParameters, value, attr_class: RunCommandParameters, **value_hash, &block)
          end

          #   @param [InputTransformer|JSONable] value
          #     The value to use for InputTransformer
          # @@overload InputTransformer(&block)
          #   Set :InputTransformer from block via instance eval of a new InputTransformer
          def InputTransformer(value = nil, **value_hash, &block)
            dsl_attribute(:InputTransformer, value, attr_class: InputTransformer, **value_hash, &block)
          end

          #   @param [KinesisParameters|JSONable] value
          #     The value to use for KinesisParameters
          # @@overload KinesisParameters(&block)
          #   Set :KinesisParameters from block via instance eval of a new KinesisParameters
          def KinesisParameters(value = nil, **value_hash, &block)
            dsl_attribute(:KinesisParameters, value, attr_class: KinesisParameters, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for RoleArn
          def RoleArn(value)
            dsl_attribute(:RoleArn, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Input
          def Input(value)
            dsl_attribute(:Input, value)
          end

          #   @param [SqsParameters|JSONable] value
          #     The value to use for SqsParameters
          # @@overload SqsParameters(&block)
          #   Set :SqsParameters from block via instance eval of a new SqsParameters
          def SqsParameters(value = nil, **value_hash, &block)
            dsl_attribute(:SqsParameters, value, attr_class: SqsParameters, **value_hash, &block)
          end

          #   @param [EcsParameters|JSONable] value
          #     The value to use for EcsParameters
          # @@overload EcsParameters(&block)
          #   Set :EcsParameters from block via instance eval of a new EcsParameters
          def EcsParameters(value = nil, **value_hash, &block)
            dsl_attribute(:EcsParameters, value, attr_class: EcsParameters, **value_hash, &block)
          end

          #   @param [BatchParameters|JSONable] value
          #     The value to use for BatchParameters
          # @@overload BatchParameters(&block)
          #   Set :BatchParameters from block via instance eval of a new BatchParameters
          def BatchParameters(value = nil, **value_hash, &block)
            dsl_attribute(:BatchParameters, value, attr_class: BatchParameters, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for Id
          def Id(value)
            dsl_attribute(:Id, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Arn
          def Arn(value)
            dsl_attribute(:Arn, value)
          end
        end

        # Property Definition AwsVpcConfiguration
        class AwsVpcConfiguration < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for SecurityGroups
          def SecurityGroups(values)
            dsl_list_attribute(:SecurityGroups, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for SecurityGroups
          def SecurityGroup(value, fn_if: nil)
            dsl_push_attribute(:SecurityGroups, value, fn_if: fn_if)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Subnets
          def Subnets(values)
            dsl_list_attribute(:Subnets, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Subnets
          def Subnet(value, fn_if: nil)
            dsl_push_attribute(:Subnets, value, fn_if: fn_if)
          end

          #   @param [String|JSONable] value
          #     The value to use for AssignPublicIp
          def AssignPublicIp(value)
            dsl_attribute(:AssignPublicIp, value)
          end
        end

        # Property Definition SqsParameters
        class SqsParameters < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for MessageGroupId
          def MessageGroupId(value)
            dsl_attribute(:MessageGroupId, value)
          end
        end

        # Property Definition RunCommandTarget
        class RunCommandTarget < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Values
          def Values(values)
            dsl_list_attribute(:Values, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Values
          def Value(value, fn_if: nil)
            dsl_push_attribute(:Values, value, fn_if: fn_if)
          end

          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end
        end

        # Property Definition EcsParameters
        class EcsParameters < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for PlatformVersion
          def PlatformVersion(value)
            dsl_attribute(:PlatformVersion, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Group
          def Group(value)
            dsl_attribute(:Group, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for TaskCount
          def TaskCount(value)
            dsl_attribute(:TaskCount, value)
          end

          #   @param [NetworkConfiguration|JSONable] value
          #     The value to use for NetworkConfiguration
          # @@overload NetworkConfiguration(&block)
          #   Set :NetworkConfiguration from block via instance eval of a new NetworkConfiguration
          def NetworkConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:NetworkConfiguration, value, attr_class: NetworkConfiguration, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for LaunchType
          def LaunchType(value)
            dsl_attribute(:LaunchType, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for TaskDefinitionArn
          def TaskDefinitionArn(value)
            dsl_attribute(:TaskDefinitionArn, value)
          end
        end

        # Property Definition BatchParameters
        class BatchParameters < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for JobName
          def JobName(value)
            dsl_attribute(:JobName, value)
          end

          #   @param [BatchRetryStrategy|JSONable] value
          #     The value to use for RetryStrategy
          # @@overload RetryStrategy(&block)
          #   Set :RetryStrategy from block via instance eval of a new BatchRetryStrategy
          def RetryStrategy(value = nil, **value_hash, &block)
            dsl_attribute(:RetryStrategy, value, attr_class: BatchRetryStrategy, **value_hash, &block)
          end

          #   @param [BatchArrayProperties|JSONable] value
          #     The value to use for ArrayProperties
          # @@overload ArrayProperties(&block)
          #   Set :ArrayProperties from block via instance eval of a new BatchArrayProperties
          def ArrayProperties(value = nil, **value_hash, &block)
            dsl_attribute(:ArrayProperties, value, attr_class: BatchArrayProperties, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for JobDefinition
          def JobDefinition(value)
            dsl_attribute(:JobDefinition, value)
          end
        end

        # Property Definition NetworkConfiguration
        class NetworkConfiguration < PropertyType
          #   @param [AwsVpcConfiguration|JSONable] value
          #     The value to use for AwsVpcConfiguration
          # @@overload AwsVpcConfiguration(&block)
          #   Set :AwsVpcConfiguration from block via instance eval of a new AwsVpcConfiguration
          def AwsVpcConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:AwsVpcConfiguration, value, attr_class: AwsVpcConfiguration, **value_hash, &block)
          end
        end

        # Property Definition BatchArrayProperties
        class BatchArrayProperties < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for Size
          def Size(value)
            dsl_attribute(:Size, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for EventBusName
        def EventBusName(value)
          dsl_attribute(:EventBusName, value)
        end

        #   @param [Object|JSONable] value
        #     The value to use for EventPattern
        def EventPattern(value)
          dsl_attribute(:EventPattern, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for ScheduleExpression
        def ScheduleExpression(value)
          dsl_attribute(:ScheduleExpression, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Description
        def Description(value)
          dsl_attribute(:Description, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for State
        def State(value)
          dsl_attribute(:State, value)
        end

        # @param [Array<Target>|JSONable>] values
        #   The List of values to use for Targets
        def Targets(values)
          dsl_list_attribute(:Targets, values)
        end

        #  @param [Target|JSONable] value  Append value to the List
        #    The List of values to use for Targets
        # @@overload Target(&block)
        # Append value to the List from block via instance eval of a new Target
        def Target(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Targets, value, fn_if: fn_if, attr_class: Target, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Arn
        def Arn(value)
          dsl_attribute(:Arn, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for RoleArn
        def RoleArn(value)
          dsl_attribute(:RoleArn, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Name
        def Name(value)
          dsl_attribute(:Name, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::Events::Rule]
    def AWS_Events_Rule(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::Events::Rule, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
