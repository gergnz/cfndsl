# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module Events
      # Resource Type definition for AWS::Events::EventBusPolicy
      class EventBusPolicy < ResourceType
        # Property Definition Condition
        class Condition < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Type
          def Type(value)
            dsl_attribute(:Type, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for EventBusName
        def EventBusName(value)
          dsl_attribute(:EventBusName, value)
        end

        #   @param [Condition|JSONable] value
        #     The value to use for Condition
        # @@overload Condition(&block)
        #   Set :Condition from block via instance eval of a new Condition
        def Condition(value = nil, **value_hash, &block)
          dsl_attribute(:Condition, value, attr_class: Condition, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Action
        def Action(value)
          dsl_attribute(:Action, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for StatementId
        def StatementId(value)
          dsl_attribute(:StatementId, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Principal
        def Principal(value)
          dsl_attribute(:Principal, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::Events::EventBusPolicy]
    def AWS_Events_EventBusPolicy(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::Events::EventBusPolicy, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
