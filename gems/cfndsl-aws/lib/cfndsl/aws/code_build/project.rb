# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module CodeBuild
      # Resource Type definition for AWS::CodeBuild::Project
      class Project < ResourceType
        # Property Definition ProjectSourceVersion
        class ProjectSourceVersion < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for SourceIdentifier
          def SourceIdentifier(value)
            dsl_attribute(:SourceIdentifier, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for SourceVersion
          def SourceVersion(value)
            dsl_attribute(:SourceVersion, value)
          end
        end

        # Property Definition VpcConfig
        class VpcConfig < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Subnets
          def Subnets(values)
            dsl_list_attribute(:Subnets, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Subnets
          def Subnet(value, fn_if: nil)
            dsl_push_attribute(:Subnets, value, fn_if: fn_if)
          end

          #   @param [String|JSONable] value
          #     The value to use for VpcId
          def VpcId(value)
            dsl_attribute(:VpcId, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for SecurityGroupIds
          def SecurityGroupIds(values)
            dsl_list_attribute(:SecurityGroupIds, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for SecurityGroupIds
          def SecurityGroupId(value, fn_if: nil)
            dsl_push_attribute(:SecurityGroupIds, value, fn_if: fn_if)
          end
        end

        # Property Definition SourceAuth
        class SourceAuth < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Resource
          def Resource(value)
            dsl_attribute(:Resource, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Type
          def Type(value)
            dsl_attribute(:Type, value)
          end
        end

        # Property Definition RegistryCredential
        class RegistryCredential < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Credential
          def Credential(value)
            dsl_attribute(:Credential, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for CredentialProvider
          def CredentialProvider(value)
            dsl_attribute(:CredentialProvider, value)
          end
        end

        # Property Definition FilterGroup
        class FilterGroup < PropertyType
        end

        # Property Definition Source
        class Source < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Type
          def Type(value)
            dsl_attribute(:Type, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for ReportBuildStatus
          def ReportBuildStatus(value)
            dsl_attribute(:ReportBuildStatus, value)
          end

          #   @param [SourceAuth|JSONable] value
          #     The value to use for Auth
          # @@overload Auth(&block)
          #   Set :Auth from block via instance eval of a new SourceAuth
          def Auth(value = nil, **value_hash, &block)
            dsl_attribute(:Auth, value, attr_class: SourceAuth, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for SourceIdentifier
          def SourceIdentifier(value)
            dsl_attribute(:SourceIdentifier, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for BuildSpec
          def BuildSpec(value)
            dsl_attribute(:BuildSpec, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for GitCloneDepth
          def GitCloneDepth(value)
            dsl_attribute(:GitCloneDepth, value)
          end

          #   @param [BuildStatusConfig|JSONable] value
          #     The value to use for BuildStatusConfig
          # @@overload BuildStatusConfig(&block)
          #   Set :BuildStatusConfig from block via instance eval of a new BuildStatusConfig
          def BuildStatusConfig(value = nil, **value_hash, &block)
            dsl_attribute(:BuildStatusConfig, value, attr_class: BuildStatusConfig, **value_hash, &block)
          end

          #   @param [GitSubmodulesConfig|JSONable] value
          #     The value to use for GitSubmodulesConfig
          # @@overload GitSubmodulesConfig(&block)
          #   Set :GitSubmodulesConfig from block via instance eval of a new GitSubmodulesConfig
          def GitSubmodulesConfig(value = nil, **value_hash, &block)
            dsl_attribute(:GitSubmodulesConfig, value, attr_class: GitSubmodulesConfig, **value_hash, &block)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for InsecureSsl
          def InsecureSsl(value)
            dsl_attribute(:InsecureSsl, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Location
          def Location(value)
            dsl_attribute(:Location, value)
          end
        end

        # Property Definition ProjectCache
        class ProjectCache < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Modes
          def Modes(values)
            dsl_list_attribute(:Modes, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Modes
          def Mode(value, fn_if: nil)
            dsl_push_attribute(:Modes, value, fn_if: fn_if)
          end

          #   @param [String|JSONable] value
          #     The value to use for Type
          def Type(value)
            dsl_attribute(:Type, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Location
          def Location(value)
            dsl_attribute(:Location, value)
          end
        end

        # Property Definition Artifacts
        class Artifacts < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Path
          def Path(value)
            dsl_attribute(:Path, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Type
          def Type(value)
            dsl_attribute(:Type, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ArtifactIdentifier
          def ArtifactIdentifier(value)
            dsl_attribute(:ArtifactIdentifier, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for OverrideArtifactName
          def OverrideArtifactName(value)
            dsl_attribute(:OverrideArtifactName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Packaging
          def Packaging(value)
            dsl_attribute(:Packaging, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for EncryptionDisabled
          def EncryptionDisabled(value)
            dsl_attribute(:EncryptionDisabled, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Location
          def Location(value)
            dsl_attribute(:Location, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for NamespaceType
          def NamespaceType(value)
            dsl_attribute(:NamespaceType, value)
          end
        end

        # Property Definition LogsConfig
        class LogsConfig < PropertyType
          #   @param [CloudWatchLogsConfig|JSONable] value
          #     The value to use for CloudWatchLogs
          # @@overload CloudWatchLogs(&block)
          #   Set :CloudWatchLogs from block via instance eval of a new CloudWatchLogsConfig
          def CloudWatchLogs(value = nil, **value_hash, &block)
            dsl_attribute(:CloudWatchLogs, value, attr_class: CloudWatchLogsConfig, **value_hash, &block)
          end

          #   @param [S3LogsConfig|JSONable] value
          #     The value to use for S3Logs
          # @@overload S3Logs(&block)
          #   Set :S3Logs from block via instance eval of a new S3LogsConfig
          def S3Logs(value = nil, **value_hash, &block)
            dsl_attribute(:S3Logs, value, attr_class: S3LogsConfig, **value_hash, &block)
          end
        end

        # Property Definition BatchRestrictions
        class BatchRestrictions < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for ComputeTypesAllowed
          def ComputeTypesAlloweds(values)
            dsl_list_attribute(:ComputeTypesAllowed, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for ComputeTypesAllowed
          def ComputeTypesAllowed(value, fn_if: nil)
            dsl_push_attribute(:ComputeTypesAllowed, value, fn_if: fn_if)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for MaximumBuildsAllowed
          def MaximumBuildsAllowed(value)
            dsl_attribute(:MaximumBuildsAllowed, value)
          end
        end

        # Property Definition ProjectBuildBatchConfig
        class ProjectBuildBatchConfig < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for CombineArtifacts
          def CombineArtifacts(value)
            dsl_attribute(:CombineArtifacts, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ServiceRole
          def ServiceRole(value)
            dsl_attribute(:ServiceRole, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for TimeoutInMins
          def TimeoutInMins(value)
            dsl_attribute(:TimeoutInMins, value)
          end

          #   @param [BatchRestrictions|JSONable] value
          #     The value to use for Restrictions
          # @@overload Restrictions(&block)
          #   Set :Restrictions from block via instance eval of a new BatchRestrictions
          def Restrictions(value = nil, **value_hash, &block)
            dsl_attribute(:Restrictions, value, attr_class: BatchRestrictions, **value_hash, &block)
          end
        end

        # Property Definition CloudWatchLogsConfig
        class CloudWatchLogsConfig < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Status
          def Status(value)
            dsl_attribute(:Status, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for GroupName
          def GroupName(value)
            dsl_attribute(:GroupName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for StreamName
          def StreamName(value)
            dsl_attribute(:StreamName, value)
          end
        end

        # Property Definition Environment
        class Environment < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Type
          def Type(value)
            dsl_attribute(:Type, value)
          end

          # @param [Array<EnvironmentVariable>|JSONable>] values
          #   The List of values to use for EnvironmentVariables
          def EnvironmentVariables(values)
            dsl_list_attribute(:EnvironmentVariables, values)
          end

          #  @param [EnvironmentVariable|JSONable] value  Append value to the List
          #    The List of values to use for EnvironmentVariables
          # @@overload EnvironmentVariabl(&block)
          # Append value to the List from block via instance eval of a new EnvironmentVariable
          def EnvironmentVariabl(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:EnvironmentVariables, value, fn_if: fn_if, attr_class: EnvironmentVariable, **value_hash, &block)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for PrivilegedMode
          def PrivilegedMode(value)
            dsl_attribute(:PrivilegedMode, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ImagePullCredentialsType
          def ImagePullCredentialsType(value)
            dsl_attribute(:ImagePullCredentialsType, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Image
          def Image(value)
            dsl_attribute(:Image, value)
          end

          #   @param [RegistryCredential|JSONable] value
          #     The value to use for RegistryCredential
          # @@overload RegistryCredential(&block)
          #   Set :RegistryCredential from block via instance eval of a new RegistryCredential
          def RegistryCredential(value = nil, **value_hash, &block)
            dsl_attribute(:RegistryCredential, value, attr_class: RegistryCredential, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for ComputeType
          def ComputeType(value)
            dsl_attribute(:ComputeType, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Certificate
          def Certificate(value)
            dsl_attribute(:Certificate, value)
          end
        end

        # Property Definition EnvironmentVariable
        class EnvironmentVariable < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Type
          def Type(value)
            dsl_attribute(:Type, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end
        end

        # Property Definition ProjectFileSystemLocation
        class ProjectFileSystemLocation < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for MountPoint
          def MountPoint(value)
            dsl_attribute(:MountPoint, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Type
          def Type(value)
            dsl_attribute(:Type, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Identifier
          def Identifier(value)
            dsl_attribute(:Identifier, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for MountOptions
          def MountOptions(value)
            dsl_attribute(:MountOptions, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Location
          def Location(value)
            dsl_attribute(:Location, value)
          end
        end

        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end
        end

        # Property Definition ProjectTriggers
        class ProjectTriggers < PropertyType
          # @param [Array<FilterGroup>|JSONable>] values
          #   The List of values to use for FilterGroups
          def FilterGroups(values)
            dsl_list_attribute(:FilterGroups, values)
          end

          #  @param [FilterGroup|JSONable] value  Append value to the List
          #    The List of values to use for FilterGroups
          # @@overload FilterGroup(&block)
          # Append value to the List from block via instance eval of a new FilterGroup
          def FilterGroup(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:FilterGroups, value, fn_if: fn_if, attr_class: FilterGroup, **value_hash, &block)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for Webhook
          def Webhook(value)
            dsl_attribute(:Webhook, value)
          end
        end

        # Property Definition BuildStatusConfig
        class BuildStatusConfig < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Context
          def Context(value)
            dsl_attribute(:Context, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for TargetUrl
          def TargetUrl(value)
            dsl_attribute(:TargetUrl, value)
          end
        end

        # Property Definition GitSubmodulesConfig
        class GitSubmodulesConfig < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for FetchSubmodules
          def FetchSubmodules(value)
            dsl_attribute(:FetchSubmodules, value)
          end
        end

        # Property Definition S3LogsConfig
        class S3LogsConfig < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Status
          def Status(value)
            dsl_attribute(:Status, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for EncryptionDisabled
          def EncryptionDisabled(value)
            dsl_attribute(:EncryptionDisabled, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Location
          def Location(value)
            dsl_attribute(:Location, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for Description
        def Description(value)
          dsl_attribute(:Description, value)
        end

        #   @param [VpcConfig|JSONable] value
        #     The value to use for VpcConfig
        # @@overload VpcConfig(&block)
        #   Set :VpcConfig from block via instance eval of a new VpcConfig
        def VpcConfig(value = nil, **value_hash, &block)
          dsl_attribute(:VpcConfig, value, attr_class: VpcConfig, **value_hash, &block)
        end

        # @param [Array<Source>|JSONable>] values
        #   The List of values to use for SecondarySources
        def SecondarySources(values)
          dsl_list_attribute(:SecondarySources, values)
        end

        #  @param [Source|JSONable] value  Append value to the List
        #    The List of values to use for SecondarySources
        # @@overload SecondarySourc(&block)
        # Append value to the List from block via instance eval of a new Source
        def SecondarySourc(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:SecondarySources, value, fn_if: fn_if, attr_class: Source, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for EncryptionKey
        def EncryptionKey(value)
          dsl_attribute(:EncryptionKey, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for SourceVersion
        def SourceVersion(value)
          dsl_attribute(:SourceVersion, value)
        end

        #   @param [ProjectTriggers|JSONable] value
        #     The value to use for Triggers
        # @@overload Triggers(&block)
        #   Set :Triggers from block via instance eval of a new ProjectTriggers
        def Triggers(value = nil, **value_hash, &block)
          dsl_attribute(:Triggers, value, attr_class: ProjectTriggers, **value_hash, &block)
        end

        # @param [Array<Artifacts>|JSONable>] values
        #   The List of values to use for SecondaryArtifacts
        def SecondaryArtifacts(values)
          dsl_list_attribute(:SecondaryArtifacts, values)
        end

        #  @param [Artifacts|JSONable] value  Append value to the List
        #    The List of values to use for SecondaryArtifacts
        # @@overload SecondaryArtifact(&block)
        # Append value to the List from block via instance eval of a new Artifacts
        def SecondaryArtifact(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:SecondaryArtifacts, value, fn_if: fn_if, attr_class: Artifacts, **value_hash, &block)
        end

        #   @param [Source|JSONable] value
        #     The value to use for Source
        # @@overload Source(&block)
        #   Set :Source from block via instance eval of a new Source
        def Source(value = nil, **value_hash, &block)
          dsl_attribute(:Source, value, attr_class: Source, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Name
        def Name(value)
          dsl_attribute(:Name, value)
        end

        #   @param [Artifacts|JSONable] value
        #     The value to use for Artifacts
        # @@overload Artifacts(&block)
        #   Set :Artifacts from block via instance eval of a new Artifacts
        def Artifacts(value = nil, **value_hash, &block)
          dsl_attribute(:Artifacts, value, attr_class: Artifacts, **value_hash, &block)
        end

        #   @param [Boolean|JSONable] value
        #     The value to use for BadgeEnabled
        def BadgeEnabled(value)
          dsl_attribute(:BadgeEnabled, value)
        end

        #   @param [LogsConfig|JSONable] value
        #     The value to use for LogsConfig
        # @@overload LogsConfig(&block)
        #   Set :LogsConfig from block via instance eval of a new LogsConfig
        def LogsConfig(value = nil, **value_hash, &block)
          dsl_attribute(:LogsConfig, value, attr_class: LogsConfig, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for ServiceRole
        def ServiceRole(value)
          dsl_attribute(:ServiceRole, value)
        end

        #   @param [Integer|JSONable] value
        #     The value to use for QueuedTimeoutInMinutes
        def QueuedTimeoutInMinutes(value)
          dsl_attribute(:QueuedTimeoutInMinutes, value)
        end

        # @param [Array<ProjectFileSystemLocation>|JSONable>] values
        #   The List of values to use for FileSystemLocations
        def FileSystemLocations(values)
          dsl_list_attribute(:FileSystemLocations, values)
        end

        #  @param [ProjectFileSystemLocation|JSONable] value  Append value to the List
        #    The List of values to use for FileSystemLocations
        # @@overload FileSystemLocation(&block)
        # Append value to the List from block via instance eval of a new ProjectFileSystemLocation
        def FileSystemLocation(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:FileSystemLocations, value, fn_if: fn_if, attr_class: ProjectFileSystemLocation, **value_hash, &block)
        end

        #   @param [Environment|JSONable] value
        #     The value to use for Environment
        # @@overload Environment(&block)
        #   Set :Environment from block via instance eval of a new Environment
        def Environment(value = nil, **value_hash, &block)
          dsl_attribute(:Environment, value, attr_class: Environment, **value_hash, &block)
        end

        # @param [Array<ProjectSourceVersion>|JSONable>] values
        #   The List of values to use for SecondarySourceVersions
        def SecondarySourceVersions(values)
          dsl_list_attribute(:SecondarySourceVersions, values)
        end

        #  @param [ProjectSourceVersion|JSONable] value  Append value to the List
        #    The List of values to use for SecondarySourceVersions
        # @@overload SecondarySourceVersion(&block)
        # Append value to the List from block via instance eval of a new ProjectSourceVersion
        def SecondarySourceVersion(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:SecondarySourceVersions, value, fn_if: fn_if, attr_class: ProjectSourceVersion, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Arn
        def Arn(value)
          dsl_attribute(:Arn, value)
        end

        #   @param [ProjectBuildBatchConfig|JSONable] value
        #     The value to use for BuildBatchConfig
        # @@overload BuildBatchConfig(&block)
        #   Set :BuildBatchConfig from block via instance eval of a new ProjectBuildBatchConfig
        def BuildBatchConfig(value = nil, **value_hash, &block)
          dsl_attribute(:BuildBatchConfig, value, attr_class: ProjectBuildBatchConfig, **value_hash, &block)
        end

        # @param [Array<Tag>|JSONable>] values
        #   The List of values to use for Tags
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    The List of values to use for Tags
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end

        #   @param [Integer|JSONable] value
        #     The value to use for TimeoutInMinutes
        def TimeoutInMinutes(value)
          dsl_attribute(:TimeoutInMinutes, value)
        end

        #   @param [ProjectCache|JSONable] value
        #     The value to use for Cache
        # @@overload Cache(&block)
        #   Set :Cache from block via instance eval of a new ProjectCache
        def Cache(value = nil, **value_hash, &block)
          dsl_attribute(:Cache, value, attr_class: ProjectCache, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::CodeBuild::Project]
    def AWS_CodeBuild_Project(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::CodeBuild::Project, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
