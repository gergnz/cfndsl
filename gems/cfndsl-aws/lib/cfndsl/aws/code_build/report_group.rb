# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module CodeBuild
      # Resource Type definition for AWS::CodeBuild::ReportGroup
      class ReportGroup < ResourceType
        # Property Definition S3ReportExportConfig
        class S3ReportExportConfig < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Path
          def Path(value)
            dsl_attribute(:Path, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Packaging
          def Packaging(value)
            dsl_attribute(:Packaging, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for EncryptionKey
          def EncryptionKey(value)
            dsl_attribute(:EncryptionKey, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Bucket
          def Bucket(value)
            dsl_attribute(:Bucket, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for EncryptionDisabled
          def EncryptionDisabled(value)
            dsl_attribute(:EncryptionDisabled, value)
          end
        end

        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end
        end

        # Property Definition ReportExportConfig
        class ReportExportConfig < PropertyType
          #   @param [S3ReportExportConfig|JSONable] value
          #     The value to use for S3Destination
          # @@overload S3Destination(&block)
          #   Set :S3Destination from block via instance eval of a new S3ReportExportConfig
          def S3Destination(value = nil, **value_hash, &block)
            dsl_attribute(:S3Destination, value, attr_class: S3ReportExportConfig, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for ExportConfigType
          def ExportConfigType(value)
            dsl_attribute(:ExportConfigType, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for Type
        def Type(value)
          dsl_attribute(:Type, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Arn
        def Arn(value)
          dsl_attribute(:Arn, value)
        end

        #   @param [ReportExportConfig|JSONable] value
        #     The value to use for ExportConfig
        # @@overload ExportConfig(&block)
        #   Set :ExportConfig from block via instance eval of a new ReportExportConfig
        def ExportConfig(value = nil, **value_hash, &block)
          dsl_attribute(:ExportConfig, value, attr_class: ReportExportConfig, **value_hash, &block)
        end

        # @param [Array<Tag>|JSONable>] values
        #   The List of values to use for Tags
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    The List of values to use for Tags
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Name
        def Name(value)
          dsl_attribute(:Name, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::CodeBuild::ReportGroup]
    def AWS_CodeBuild_ReportGroup(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::CodeBuild::ReportGroup, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
