# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module ApiGateway
      # Resource Type definition for AWS::ApiGateway::Deployment
      class Deployment < ResourceType
        # Property Definition StageDescription
        class StageDescription < PropertyType
          #   @param [AccessLogSetting|JSONable] value
          #     The value to use for AccessLogSetting
          # @@overload AccessLogSetting(&block)
          #   Set :AccessLogSetting from block via instance eval of a new AccessLogSetting
          def AccessLogSetting(value = nil, **value_hash, &block)
            dsl_attribute(:AccessLogSetting, value, attr_class: AccessLogSetting, **value_hash, &block)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for CacheClusterEnabled
          def CacheClusterEnabled(value)
            dsl_attribute(:CacheClusterEnabled, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for CacheClusterSize
          def CacheClusterSize(value)
            dsl_attribute(:CacheClusterSize, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for CacheDataEncrypted
          def CacheDataEncrypted(value)
            dsl_attribute(:CacheDataEncrypted, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for CacheTtlInSeconds
          def CacheTtlInSeconds(value)
            dsl_attribute(:CacheTtlInSeconds, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for CachingEnabled
          def CachingEnabled(value)
            dsl_attribute(:CachingEnabled, value)
          end

          #   @param [CanarySetting|JSONable] value
          #     The value to use for CanarySetting
          # @@overload CanarySetting(&block)
          #   Set :CanarySetting from block via instance eval of a new CanarySetting
          def CanarySetting(value = nil, **value_hash, &block)
            dsl_attribute(:CanarySetting, value, attr_class: CanarySetting, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for ClientCertificateId
          def ClientCertificateId(value)
            dsl_attribute(:ClientCertificateId, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for DataTraceEnabled
          def DataTraceEnabled(value)
            dsl_attribute(:DataTraceEnabled, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Description
          def Description(value)
            dsl_attribute(:Description, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for DocumentationVersion
          def DocumentationVersion(value)
            dsl_attribute(:DocumentationVersion, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for LoggingLevel
          def LoggingLevel(value)
            dsl_attribute(:LoggingLevel, value)
          end

          # @param [Array<MethodSetting>|JSONable>] values
          #   The List of values to use for MethodSettings
          def MethodSettings(values)
            dsl_list_attribute(:MethodSettings, values)
          end

          #  @param [MethodSetting|JSONable] value  Append value to the List
          #    The List of values to use for MethodSettings
          # @@overload MethodSetting(&block)
          # Append value to the List from block via instance eval of a new MethodSetting
          def MethodSetting(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:MethodSettings, value, fn_if: fn_if, attr_class: MethodSetting, **value_hash, &block)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for MetricsEnabled
          def MetricsEnabled(value)
            dsl_attribute(:MetricsEnabled, value)
          end

          # @param [Array<Tag>|JSONable>] values
          #   The List of values to use for Tags
          def Tags(values)
            dsl_list_attribute(:Tags, values)
          end

          #  @param [Tag|JSONable] value  Append value to the List
          #    The List of values to use for Tags
          # @@overload Tag(&block)
          # Append value to the List from block via instance eval of a new Tag
          def Tag(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for ThrottlingBurstLimit
          def ThrottlingBurstLimit(value)
            dsl_attribute(:ThrottlingBurstLimit, value)
          end

          #   @param [Number|JSONable] value
          #     The value to use for ThrottlingRateLimit
          def ThrottlingRateLimit(value)
            dsl_attribute(:ThrottlingRateLimit, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for TracingEnabled
          def TracingEnabled(value)
            dsl_attribute(:TracingEnabled, value)
          end

          #   @param [Object|JSONable] value
          #     The value to use for Variables
          def Variables(value)
            dsl_attribute(:Variables, value)
          end
        end

        # Property Definition DeploymentCanarySettings
        class DeploymentCanarySettings < PropertyType
          #   @param [Number|JSONable] value
          #     The value to use for PercentTraffic
          def PercentTraffic(value)
            dsl_attribute(:PercentTraffic, value)
          end

          #   @param [Object|JSONable] value
          #     The value to use for StageVariableOverrides
          def StageVariableOverrides(value)
            dsl_attribute(:StageVariableOverrides, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for UseStageCache
          def UseStageCache(value)
            dsl_attribute(:UseStageCache, value)
          end
        end

        # Property Definition AccessLogSetting
        class AccessLogSetting < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for DestinationArn
          def DestinationArn(value)
            dsl_attribute(:DestinationArn, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Format
          def Format(value)
            dsl_attribute(:Format, value)
          end
        end

        # Property Definition CanarySetting
        class CanarySetting < PropertyType
          #   @param [Number|JSONable] value
          #     The value to use for PercentTraffic
          def PercentTraffic(value)
            dsl_attribute(:PercentTraffic, value)
          end

          #   @param [Object|JSONable] value
          #     The value to use for StageVariableOverrides
          def StageVariableOverrides(value)
            dsl_attribute(:StageVariableOverrides, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for UseStageCache
          def UseStageCache(value)
            dsl_attribute(:UseStageCache, value)
          end
        end

        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        # Property Definition MethodSetting
        class MethodSetting < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for CacheDataEncrypted
          def CacheDataEncrypted(value)
            dsl_attribute(:CacheDataEncrypted, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for CacheTtlInSeconds
          def CacheTtlInSeconds(value)
            dsl_attribute(:CacheTtlInSeconds, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for CachingEnabled
          def CachingEnabled(value)
            dsl_attribute(:CachingEnabled, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for DataTraceEnabled
          def DataTraceEnabled(value)
            dsl_attribute(:DataTraceEnabled, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for HttpMethod
          def HttpMethod(value)
            dsl_attribute(:HttpMethod, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for LoggingLevel
          def LoggingLevel(value)
            dsl_attribute(:LoggingLevel, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for MetricsEnabled
          def MetricsEnabled(value)
            dsl_attribute(:MetricsEnabled, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ResourcePath
          def ResourcePath(value)
            dsl_attribute(:ResourcePath, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for ThrottlingBurstLimit
          def ThrottlingBurstLimit(value)
            dsl_attribute(:ThrottlingBurstLimit, value)
          end

          #   @param [Number|JSONable] value
          #     The value to use for ThrottlingRateLimit
          def ThrottlingRateLimit(value)
            dsl_attribute(:ThrottlingRateLimit, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [DeploymentCanarySettings|JSONable] value
        #     The value to use for DeploymentCanarySettings
        # @@overload DeploymentCanarySettings(&block)
        #   Set :DeploymentCanarySettings from block via instance eval of a new DeploymentCanarySettings
        def DeploymentCanarySettings(value = nil, **value_hash, &block)
          dsl_attribute(:DeploymentCanarySettings, value, attr_class: DeploymentCanarySettings, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Description
        def Description(value)
          dsl_attribute(:Description, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for RestApiId
        def RestApiId(value)
          dsl_attribute(:RestApiId, value)
        end

        #   @param [StageDescription|JSONable] value
        #     The value to use for StageDescription
        # @@overload StageDescription(&block)
        #   Set :StageDescription from block via instance eval of a new StageDescription
        def StageDescription(value = nil, **value_hash, &block)
          dsl_attribute(:StageDescription, value, attr_class: StageDescription, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for StageName
        def StageName(value)
          dsl_attribute(:StageName, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::ApiGateway::Deployment]
    def AWS_ApiGateway_Deployment(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::ApiGateway::Deployment, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
