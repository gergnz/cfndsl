# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module ApiGateway
      # Resource Type definition for AWS::ApiGateway::Method
      class Method < ResourceType
        # Property Definition Integration
        class Integration < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for CacheKeyParameters
          def CacheKeyParameters(values)
            dsl_list_attribute(:CacheKeyParameters, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for CacheKeyParameters
          def CacheKeyParameter(value, fn_if: nil)
            dsl_push_attribute(:CacheKeyParameters, value, fn_if: fn_if)
          end

          #   @param [String|JSONable] value
          #     The value to use for CacheNamespace
          def CacheNamespace(value)
            dsl_attribute(:CacheNamespace, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ConnectionId
          def ConnectionId(value)
            dsl_attribute(:ConnectionId, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ConnectionType
          def ConnectionType(value)
            dsl_attribute(:ConnectionType, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ContentHandling
          def ContentHandling(value)
            dsl_attribute(:ContentHandling, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Credentials
          def Credentials(value)
            dsl_attribute(:Credentials, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for IntegrationHttpMethod
          def IntegrationHttpMethod(value)
            dsl_attribute(:IntegrationHttpMethod, value)
          end

          # @param [Array<IntegrationResponse>|JSONable>] values
          #   The List of values to use for IntegrationResponses
          def IntegrationResponses(values)
            dsl_list_attribute(:IntegrationResponses, values)
          end

          #  @param [IntegrationResponse|JSONable] value  Append value to the List
          #    The List of values to use for IntegrationResponses
          # @@overload IntegrationRespons(&block)
          # Append value to the List from block via instance eval of a new IntegrationResponse
          def IntegrationRespons(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:IntegrationResponses, value, fn_if: fn_if, attr_class: IntegrationResponse, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for PassthroughBehavior
          def PassthroughBehavior(value)
            dsl_attribute(:PassthroughBehavior, value)
          end

          #   @param [Object|JSONable] value
          #     The value to use for RequestParameters
          def RequestParameters(value)
            dsl_attribute(:RequestParameters, value)
          end

          #   @param [Object|JSONable] value
          #     The value to use for RequestTemplates
          def RequestTemplates(value)
            dsl_attribute(:RequestTemplates, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for TimeoutInMillis
          def TimeoutInMillis(value)
            dsl_attribute(:TimeoutInMillis, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Type
          def Type(value)
            dsl_attribute(:Type, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Uri
          def Uri(value)
            dsl_attribute(:Uri, value)
          end
        end

        # Property Definition MethodResponse
        class MethodResponse < PropertyType
          #   @param [Object|JSONable] value
          #     The value to use for ResponseModels
          def ResponseModels(value)
            dsl_attribute(:ResponseModels, value)
          end

          #   @param [Object|JSONable] value
          #     The value to use for ResponseParameters
          def ResponseParameters(value)
            dsl_attribute(:ResponseParameters, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for StatusCode
          def StatusCode(value)
            dsl_attribute(:StatusCode, value)
          end
        end

        # Property Definition IntegrationResponse
        class IntegrationResponse < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ContentHandling
          def ContentHandling(value)
            dsl_attribute(:ContentHandling, value)
          end

          #   @param [Object|JSONable] value
          #     The value to use for ResponseParameters
          def ResponseParameters(value)
            dsl_attribute(:ResponseParameters, value)
          end

          #   @param [Object|JSONable] value
          #     The value to use for ResponseTemplates
          def ResponseTemplates(value)
            dsl_attribute(:ResponseTemplates, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for SelectionPattern
          def SelectionPattern(value)
            dsl_attribute(:SelectionPattern, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for StatusCode
          def StatusCode(value)
            dsl_attribute(:StatusCode, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [Boolean|JSONable] value
        #     The value to use for ApiKeyRequired
        def ApiKeyRequired(value)
          dsl_attribute(:ApiKeyRequired, value)
        end

        # @param [Array<String>|JSONable>] values
        #   The List of values to use for AuthorizationScopes
        def AuthorizationScopes(values)
          dsl_list_attribute(:AuthorizationScopes, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for AuthorizationScopes
        def AuthorizationScope(value, fn_if: nil)
          dsl_push_attribute(:AuthorizationScopes, value, fn_if: fn_if)
        end

        #   @param [String|JSONable] value
        #     The value to use for AuthorizationType
        def AuthorizationType(value)
          dsl_attribute(:AuthorizationType, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for AuthorizerId
        def AuthorizerId(value)
          dsl_attribute(:AuthorizerId, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for HttpMethod
        def HttpMethod(value)
          dsl_attribute(:HttpMethod, value)
        end

        #   @param [Integration|JSONable] value
        #     The value to use for Integration
        # @@overload Integration(&block)
        #   Set :Integration from block via instance eval of a new Integration
        def Integration(value = nil, **value_hash, &block)
          dsl_attribute(:Integration, value, attr_class: Integration, **value_hash, &block)
        end

        # @param [Array<MethodResponse>|JSONable>] values
        #   The List of values to use for MethodResponses
        def MethodResponses(values)
          dsl_list_attribute(:MethodResponses, values)
        end

        #  @param [MethodResponse|JSONable] value  Append value to the List
        #    The List of values to use for MethodResponses
        # @@overload MethodRespons(&block)
        # Append value to the List from block via instance eval of a new MethodResponse
        def MethodRespons(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:MethodResponses, value, fn_if: fn_if, attr_class: MethodResponse, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for OperationName
        def OperationName(value)
          dsl_attribute(:OperationName, value)
        end

        #   @param [Object|JSONable] value
        #     The value to use for RequestModels
        def RequestModels(value)
          dsl_attribute(:RequestModels, value)
        end

        #   @param [Object|JSONable] value
        #     The value to use for RequestParameters
        def RequestParameters(value)
          dsl_attribute(:RequestParameters, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for RequestValidatorId
        def RequestValidatorId(value)
          dsl_attribute(:RequestValidatorId, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for ResourceId
        def ResourceId(value)
          dsl_attribute(:ResourceId, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for RestApiId
        def RestApiId(value)
          dsl_attribute(:RestApiId, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::ApiGateway::Method]
    def AWS_ApiGateway_Method(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::ApiGateway::Method, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
