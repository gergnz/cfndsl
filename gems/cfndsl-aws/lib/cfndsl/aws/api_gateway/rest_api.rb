# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module ApiGateway
      # Resource Type definition for AWS::ApiGateway::RestApi
      class RestApi < ResourceType
        # Property Definition EndpointConfiguration
        class EndpointConfiguration < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Types
          def Types(values)
            dsl_list_attribute(:Types, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Types
          def Typ(value, fn_if: nil)
            dsl_push_attribute(:Types, value, fn_if: fn_if)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for VpcEndpointIds
          def VpcEndpointIds(values)
            dsl_list_attribute(:VpcEndpointIds, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for VpcEndpointIds
          def VpcEndpointId(value, fn_if: nil)
            dsl_push_attribute(:VpcEndpointIds, value, fn_if: fn_if)
          end
        end

        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end
        end

        # Property Definition S3Location
        class S3Location < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Bucket
          def Bucket(value)
            dsl_attribute(:Bucket, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ETag
          def ETag(value)
            dsl_attribute(:ETag, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Version
          def Version(value)
            dsl_attribute(:Version, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end
        end

        #   @param [Object|JSONable] value
        #     The value to use for Policy
        def Policy(value)
          dsl_attribute(:Policy, value)
        end

        #   @param [S3Location|JSONable] value
        #     The value to use for BodyS3Location
        # @@overload BodyS3Location(&block)
        #   Set :BodyS3Location from block via instance eval of a new S3Location
        def BodyS3Location(value = nil, **value_hash, &block)
          dsl_attribute(:BodyS3Location, value, attr_class: S3Location, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Description
        def Description(value)
          dsl_attribute(:Description, value)
        end

        #   @param [Integer|JSONable] value
        #     The value to use for MinimumCompressionSize
        def MinimumCompressionSize(value)
          dsl_attribute(:MinimumCompressionSize, value)
        end

        #   @param [Object|JSONable] value
        #     The value to use for Parameters
        def Parameters(value)
          dsl_attribute(:Parameters, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for CloneFrom
        def CloneFrom(value)
          dsl_attribute(:CloneFrom, value)
        end

        #   @param [Boolean|JSONable] value
        #     The value to use for FailOnWarnings
        def FailOnWarnings(value)
          dsl_attribute(:FailOnWarnings, value)
        end

        # @param [Array<String>|JSONable>] values
        #   The List of values to use for BinaryMediaTypes
        def BinaryMediaTypes(values)
          dsl_list_attribute(:BinaryMediaTypes, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for BinaryMediaTypes
        def BinaryMediaTyp(value, fn_if: nil)
          dsl_push_attribute(:BinaryMediaTypes, value, fn_if: fn_if)
        end

        #   @param [String|JSONable] value
        #     The value to use for Name
        def Name(value)
          dsl_attribute(:Name, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for RootResourceId
        def RootResourceId(value)
          dsl_attribute(:RootResourceId, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for ApiKeySourceType
        def ApiKeySourceType(value)
          dsl_attribute(:ApiKeySourceType, value)
        end

        #   @param [EndpointConfiguration|JSONable] value
        #     The value to use for EndpointConfiguration
        # @@overload EndpointConfiguration(&block)
        #   Set :EndpointConfiguration from block via instance eval of a new EndpointConfiguration
        def EndpointConfiguration(value = nil, **value_hash, &block)
          dsl_attribute(:EndpointConfiguration, value, attr_class: EndpointConfiguration, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [Object|JSONable] value
        #     The value to use for Body
        def Body(value)
          dsl_attribute(:Body, value)
        end

        # @param [Array<Tag>|JSONable>] values
        #   The List of values to use for Tags
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    The List of values to use for Tags
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::ApiGateway::RestApi]
    def AWS_ApiGateway_RestApi(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::ApiGateway::RestApi, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
