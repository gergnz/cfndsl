# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module StepFunctions
      # Resource schema for StateMachine
      # @see https://github.com/aws-cloudformation/aws-cloudformation-resource-providers-stepfunctions.git
      class StateMachine < ResourceType
        # Property Definition TagsEntry
        class TagsEntry < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        # Property Definition CloudWatchLogsLogGroup
        class CloudWatchLogsLogGroup < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for LogGroupArn
          def LogGroupArn(value)
            dsl_attribute(:LogGroupArn, value)
          end
        end

        # Property Definition LogDestination
        class LogDestination < PropertyType
          #   @param [CloudWatchLogsLogGroup|JSONable] value
          #     The value to use for CloudWatchLogsLogGroup
          # @@overload CloudWatchLogsLogGroup(&block)
          #   Set :CloudWatchLogsLogGroup from block via instance eval of a new CloudWatchLogsLogGroup
          def CloudWatchLogsLogGroup(value = nil, **value_hash, &block)
            dsl_attribute(:CloudWatchLogsLogGroup, value, attr_class: CloudWatchLogsLogGroup, **value_hash, &block)
          end
        end

        # Property Definition LoggingConfiguration
        class LoggingConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Level
          def Level(value)
            dsl_attribute(:Level, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for IncludeExecutionData
          def IncludeExecutionData(value)
            dsl_attribute(:IncludeExecutionData, value)
          end

          # @param [Array<LogDestination>|JSONable>] values
          #   The List of values to use for Destinations
          def Destinations(values)
            dsl_list_attribute(:Destinations, values)
          end

          #  @param [LogDestination|JSONable] value  Append value to the List
          #    The List of values to use for Destinations
          # @@overload Destination(&block)
          # Append value to the List from block via instance eval of a new LogDestination
          def Destination(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Destinations, value, fn_if: fn_if, attr_class: LogDestination, **value_hash, &block)
          end
        end

        # Property Definition TracingConfiguration
        class TracingConfiguration < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for Enabled
          def Enabled(value)
            dsl_attribute(:Enabled, value)
          end
        end

        # Property Definition S3Location
        class S3Location < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Bucket
          def Bucket(value)
            dsl_attribute(:Bucket, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Version
          def Version(value)
            dsl_attribute(:Version, value)
          end
        end

        # Property Definition DefinitionSubstitutions
        class DefinitionSubstitutions < PropertyType
        end

        #   @param [String|JSONable] value
        #     The value to use for Arn
        def Arn(value)
          dsl_attribute(:Arn, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Name
        def Name(value)
          dsl_attribute(:Name, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for DefinitionString
        def DefinitionString(value)
          dsl_attribute(:DefinitionString, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for RoleArn
        def RoleArn(value)
          dsl_attribute(:RoleArn, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for StateMachineName
        def StateMachineName(value)
          dsl_attribute(:StateMachineName, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for StateMachineType
        def StateMachineType(value)
          dsl_attribute(:StateMachineType, value)
        end

        #   @param [LoggingConfiguration|JSONable] value
        #     The value to use for LoggingConfiguration
        # @@overload LoggingConfiguration(&block)
        #   Set :LoggingConfiguration from block via instance eval of a new LoggingConfiguration
        def LoggingConfiguration(value = nil, **value_hash, &block)
          dsl_attribute(:LoggingConfiguration, value, attr_class: LoggingConfiguration, **value_hash, &block)
        end

        #   @param [TracingConfiguration|JSONable] value
        #     The value to use for TracingConfiguration
        # @@overload TracingConfiguration(&block)
        #   Set :TracingConfiguration from block via instance eval of a new TracingConfiguration
        def TracingConfiguration(value = nil, **value_hash, &block)
          dsl_attribute(:TracingConfiguration, value, attr_class: TracingConfiguration, **value_hash, &block)
        end

        #   @param [S3Location|JSONable] value
        #     The value to use for DefinitionS3Location
        # @@overload DefinitionS3Location(&block)
        #   Set :DefinitionS3Location from block via instance eval of a new S3Location
        def DefinitionS3Location(value = nil, **value_hash, &block)
          dsl_attribute(:DefinitionS3Location, value, attr_class: S3Location, **value_hash, &block)
        end

        #   @param [DefinitionSubstitutions|JSONable] value
        #     The value to use for DefinitionSubstitutions
        # @@overload DefinitionSubstitutions(&block)
        #   Set :DefinitionSubstitutions from block via instance eval of a new DefinitionSubstitutions
        def DefinitionSubstitutions(value = nil, **value_hash, &block)
          dsl_attribute(:DefinitionSubstitutions, value, attr_class: DefinitionSubstitutions, **value_hash, &block)
        end

        # @param [Array<TagsEntry>|JSONable>] values
        #   The List of values to use for Tags
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [TagsEntry|JSONable] value  Append value to the List
        #    The List of values to use for Tags
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new TagsEntry
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: TagsEntry, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::StepFunctions::StateMachine]
    def AWS_StepFunctions_StateMachine(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::StepFunctions::StateMachine, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
