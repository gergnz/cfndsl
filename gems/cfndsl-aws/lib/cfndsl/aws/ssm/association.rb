# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module SSM
      # The AWS::SSM::Association resource associates an SSM document in AWS Systems Manager with EC2 instances that contain a configuration agent to process the document.
      # @see https://github.com/aws-cloudformation/aws-cloudformation-resource-providers-ssm
      class Association < ResourceType
        # Property Definition Target
        class Target < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Values
          def Values(values)
            dsl_list_attribute(:Values, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Values
          def Value(value, fn_if: nil)
            dsl_push_attribute(:Values, value, fn_if: fn_if)
          end
        end

        # Property Definition S3OutputLocation
        class S3OutputLocation < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for OutputS3Region
          def OutputS3Region(value)
            dsl_attribute(:OutputS3Region, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for OutputS3BucketName
          def OutputS3BucketName(value)
            dsl_attribute(:OutputS3BucketName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for OutputS3KeyPrefix
          def OutputS3KeyPrefix(value)
            dsl_attribute(:OutputS3KeyPrefix, value)
          end
        end

        # Property Definition InstanceAssociationOutputLocation
        class InstanceAssociationOutputLocation < PropertyType
          #   @param [S3OutputLocation|JSONable] value
          #     The value to use for S3Location
          # @@overload S3Location(&block)
          #   Set :S3Location from block via instance eval of a new S3OutputLocation
          def S3Location(value = nil, **value_hash, &block)
            dsl_attribute(:S3Location, value, attr_class: S3OutputLocation, **value_hash, &block)
          end
        end

        #   @param [String|JSONable] value
        #     Unique identifier of the association.
        def AssociationId(value)
          dsl_attribute(:AssociationId, value)
        end

        #   @param [String|JSONable] value
        #     The name of the association.
        def AssociationName(value)
          dsl_attribute(:AssociationName, value)
        end

        #   @param [String|JSONable] value
        #     The version of the SSM document to associate with the target.
        def DocumentVersion(value)
          dsl_attribute(:DocumentVersion, value)
        end

        #   @param [String|JSONable] value
        #     The ID of the instance that the SSM document is associated with.
        def InstanceId(value)
          dsl_attribute(:InstanceId, value)
        end

        #   @param [String|JSONable] value
        #     The name of the SSM document.
        def Name(value)
          dsl_attribute(:Name, value)
        end

        #   @param [Object|JSONable] value
        #     Parameter values that the SSM document uses at runtime.
        def Parameters(value)
          dsl_attribute(:Parameters, value)
        end

        #   @param [String|JSONable] value
        #     A Cron or Rate expression that specifies when the association is applied to the target.
        def ScheduleExpression(value)
          dsl_attribute(:ScheduleExpression, value)
        end

        # @param [Array<Target>|JSONable>] values
        #   The targets that the SSM document sends commands to.
        def Targets(values)
          dsl_list_attribute(:Targets, values)
        end

        #  @param [Target|JSONable] value  Append value to the List
        #    The targets that the SSM document sends commands to.
        # @@overload Target(&block)
        # Append value to the List from block via instance eval of a new Target
        def Target(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Targets, value, fn_if: fn_if, attr_class: Target, **value_hash, &block)
        end

        #   @param [InstanceAssociationOutputLocation|JSONable] value
        #     The value to use for OutputLocation
        # @@overload OutputLocation(&block)
        #   Set :OutputLocation from block via instance eval of a new InstanceAssociationOutputLocation
        def OutputLocation(value = nil, **value_hash, &block)
          dsl_attribute(:OutputLocation, value, attr_class: InstanceAssociationOutputLocation, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for AutomationTargetParameterName
        def AutomationTargetParameterName(value)
          dsl_attribute(:AutomationTargetParameterName, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for MaxErrors
        def MaxErrors(value)
          dsl_attribute(:MaxErrors, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for MaxConcurrency
        def MaxConcurrency(value)
          dsl_attribute(:MaxConcurrency, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for ComplianceSeverity
        def ComplianceSeverity(value)
          dsl_attribute(:ComplianceSeverity, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for SyncCompliance
        def SyncCompliance(value)
          dsl_attribute(:SyncCompliance, value)
        end

        #   @param [Integer|JSONable] value
        #     The value to use for WaitForSuccessTimeoutSeconds
        def WaitForSuccessTimeoutSeconds(value)
          dsl_attribute(:WaitForSuccessTimeoutSeconds, value)
        end

        #   @param [Boolean|JSONable] value
        #     The value to use for ApplyOnlyAtCronInterval
        def ApplyOnlyAtCronInterval(value)
          dsl_attribute(:ApplyOnlyAtCronInterval, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::SSM::Association]
    def AWS_SSM_Association(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::SSM::Association, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
