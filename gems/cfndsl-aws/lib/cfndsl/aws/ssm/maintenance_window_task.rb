# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module SSM
      # Resource Type definition for AWS::SSM::MaintenanceWindowTask
      class MaintenanceWindowTask < ResourceType
        # Property Definition TaskInvocationParameters
        class TaskInvocationParameters < PropertyType
          #   @param [MaintenanceWindowStepFunctionsParameters|JSONable] value
          #     The value to use for MaintenanceWindowStepFunctionsParameters
          # @@overload MaintenanceWindowStepFunctionsParameters(&block)
          #   Set :MaintenanceWindowStepFunctionsParameters from block via instance eval of a new MaintenanceWindowStepFunctionsParameters
          def MaintenanceWindowStepFunctionsParameters(value = nil, **value_hash, &block)
            dsl_attribute(:MaintenanceWindowStepFunctionsParameters, value, attr_class: MaintenanceWindowStepFunctionsParameters, **value_hash, &block)
          end

          #   @param [MaintenanceWindowRunCommandParameters|JSONable] value
          #     The value to use for MaintenanceWindowRunCommandParameters
          # @@overload MaintenanceWindowRunCommandParameters(&block)
          #   Set :MaintenanceWindowRunCommandParameters from block via instance eval of a new MaintenanceWindowRunCommandParameters
          def MaintenanceWindowRunCommandParameters(value = nil, **value_hash, &block)
            dsl_attribute(:MaintenanceWindowRunCommandParameters, value, attr_class: MaintenanceWindowRunCommandParameters, **value_hash, &block)
          end

          #   @param [MaintenanceWindowLambdaParameters|JSONable] value
          #     The value to use for MaintenanceWindowLambdaParameters
          # @@overload MaintenanceWindowLambdaParameters(&block)
          #   Set :MaintenanceWindowLambdaParameters from block via instance eval of a new MaintenanceWindowLambdaParameters
          def MaintenanceWindowLambdaParameters(value = nil, **value_hash, &block)
            dsl_attribute(:MaintenanceWindowLambdaParameters, value, attr_class: MaintenanceWindowLambdaParameters, **value_hash, &block)
          end

          #   @param [MaintenanceWindowAutomationParameters|JSONable] value
          #     The value to use for MaintenanceWindowAutomationParameters
          # @@overload MaintenanceWindowAutomationParameters(&block)
          #   Set :MaintenanceWindowAutomationParameters from block via instance eval of a new MaintenanceWindowAutomationParameters
          def MaintenanceWindowAutomationParameters(value = nil, **value_hash, &block)
            dsl_attribute(:MaintenanceWindowAutomationParameters, value, attr_class: MaintenanceWindowAutomationParameters, **value_hash, &block)
          end
        end

        # Property Definition Target
        class Target < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Values
          def Values(values)
            dsl_list_attribute(:Values, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Values
          def Value(value, fn_if: nil)
            dsl_push_attribute(:Values, value, fn_if: fn_if)
          end

          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end
        end

        # Property Definition MaintenanceWindowRunCommandParameters
        class MaintenanceWindowRunCommandParameters < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for TimeoutSeconds
          def TimeoutSeconds(value)
            dsl_attribute(:TimeoutSeconds, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Comment
          def Comment(value)
            dsl_attribute(:Comment, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for OutputS3KeyPrefix
          def OutputS3KeyPrefix(value)
            dsl_attribute(:OutputS3KeyPrefix, value)
          end

          #   @param [Object|JSONable] value
          #     The value to use for Parameters
          def Parameters(value)
            dsl_attribute(:Parameters, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for DocumentHashType
          def DocumentHashType(value)
            dsl_attribute(:DocumentHashType, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ServiceRoleArn
          def ServiceRoleArn(value)
            dsl_attribute(:ServiceRoleArn, value)
          end

          #   @param [NotificationConfig|JSONable] value
          #     The value to use for NotificationConfig
          # @@overload NotificationConfig(&block)
          #   Set :NotificationConfig from block via instance eval of a new NotificationConfig
          def NotificationConfig(value = nil, **value_hash, &block)
            dsl_attribute(:NotificationConfig, value, attr_class: NotificationConfig, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for OutputS3BucketName
          def OutputS3BucketName(value)
            dsl_attribute(:OutputS3BucketName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for DocumentHash
          def DocumentHash(value)
            dsl_attribute(:DocumentHash, value)
          end
        end

        # Property Definition MaintenanceWindowAutomationParameters
        class MaintenanceWindowAutomationParameters < PropertyType
          #   @param [Object|JSONable] value
          #     The value to use for Parameters
          def Parameters(value)
            dsl_attribute(:Parameters, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for DocumentVersion
          def DocumentVersion(value)
            dsl_attribute(:DocumentVersion, value)
          end
        end

        # Property Definition NotificationConfig
        class NotificationConfig < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for NotificationEvents
          def NotificationEvents(values)
            dsl_list_attribute(:NotificationEvents, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for NotificationEvents
          def NotificationEvent(value, fn_if: nil)
            dsl_push_attribute(:NotificationEvents, value, fn_if: fn_if)
          end

          #   @param [String|JSONable] value
          #     The value to use for NotificationArn
          def NotificationArn(value)
            dsl_attribute(:NotificationArn, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for NotificationType
          def NotificationType(value)
            dsl_attribute(:NotificationType, value)
          end
        end

        # Property Definition MaintenanceWindowStepFunctionsParameters
        class MaintenanceWindowStepFunctionsParameters < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Input
          def Input(value)
            dsl_attribute(:Input, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end
        end

        # Property Definition LoggingInfo
        class LoggingInfo < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Region
          def Region(value)
            dsl_attribute(:Region, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for S3Prefix
          def S3Prefix(value)
            dsl_attribute(:S3Prefix, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for S3Bucket
          def S3Bucket(value)
            dsl_attribute(:S3Bucket, value)
          end
        end

        # Property Definition MaintenanceWindowLambdaParameters
        class MaintenanceWindowLambdaParameters < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Qualifier
          def Qualifier(value)
            dsl_attribute(:Qualifier, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Payload
          def Payload(value)
            dsl_attribute(:Payload, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ClientContext
          def ClientContext(value)
            dsl_attribute(:ClientContext, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for MaxErrors
        def MaxErrors(value)
          dsl_attribute(:MaxErrors, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Description
        def Description(value)
          dsl_attribute(:Description, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for ServiceRoleArn
        def ServiceRoleArn(value)
          dsl_attribute(:ServiceRoleArn, value)
        end

        #   @param [Integer|JSONable] value
        #     The value to use for Priority
        def Priority(value)
          dsl_attribute(:Priority, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for MaxConcurrency
        def MaxConcurrency(value)
          dsl_attribute(:MaxConcurrency, value)
        end

        # @param [Array<Target>|JSONable>] values
        #   The List of values to use for Targets
        def Targets(values)
          dsl_list_attribute(:Targets, values)
        end

        #  @param [Target|JSONable] value  Append value to the List
        #    The List of values to use for Targets
        # @@overload Target(&block)
        # Append value to the List from block via instance eval of a new Target
        def Target(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Targets, value, fn_if: fn_if, attr_class: Target, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Name
        def Name(value)
          dsl_attribute(:Name, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for TaskArn
        def TaskArn(value)
          dsl_attribute(:TaskArn, value)
        end

        #   @param [TaskInvocationParameters|JSONable] value
        #     The value to use for TaskInvocationParameters
        # @@overload TaskInvocationParameters(&block)
        #   Set :TaskInvocationParameters from block via instance eval of a new TaskInvocationParameters
        def TaskInvocationParameters(value = nil, **value_hash, &block)
          dsl_attribute(:TaskInvocationParameters, value, attr_class: TaskInvocationParameters, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for WindowId
        def WindowId(value)
          dsl_attribute(:WindowId, value)
        end

        #   @param [Object|JSONable] value
        #     The value to use for TaskParameters
        def TaskParameters(value)
          dsl_attribute(:TaskParameters, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for TaskType
        def TaskType(value)
          dsl_attribute(:TaskType, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [LoggingInfo|JSONable] value
        #     The value to use for LoggingInfo
        # @@overload LoggingInfo(&block)
        #   Set :LoggingInfo from block via instance eval of a new LoggingInfo
        def LoggingInfo(value = nil, **value_hash, &block)
          dsl_attribute(:LoggingInfo, value, attr_class: LoggingInfo, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::SSM::MaintenanceWindowTask]
    def AWS_SSM_MaintenanceWindowTask(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::SSM::MaintenanceWindowTask, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
