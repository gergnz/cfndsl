# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module SSM
      # Resource Type definition for AWS::SSM::PatchBaseline
      class PatchBaseline < ResourceType
        # Property Definition PatchFilterGroup
        class PatchFilterGroup < PropertyType
          # @param [Array<PatchFilter>|JSONable>] values
          #   The List of values to use for PatchFilters
          def PatchFilters(values)
            dsl_list_attribute(:PatchFilters, values)
          end

          #  @param [PatchFilter|JSONable] value  Append value to the List
          #    The List of values to use for PatchFilters
          # @@overload PatchFilter(&block)
          # Append value to the List from block via instance eval of a new PatchFilter
          def PatchFilter(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:PatchFilters, value, fn_if: fn_if, attr_class: PatchFilter, **value_hash, &block)
          end
        end

        # Property Definition PatchFilter
        class PatchFilter < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Values
          def Values(values)
            dsl_list_attribute(:Values, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Values
          def Value(value, fn_if: nil)
            dsl_push_attribute(:Values, value, fn_if: fn_if)
          end

          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end
        end

        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end
        end

        # Property Definition Rule
        class Rule < PropertyType
          #   @param [PatchStringDate|JSONable] value
          #     The value to use for ApproveUntilDate
          # @@overload ApproveUntilDate(&block)
          #   Set :ApproveUntilDate from block via instance eval of a new PatchStringDate
          def ApproveUntilDate(value = nil, **value_hash, &block)
            dsl_attribute(:ApproveUntilDate, value, attr_class: PatchStringDate, **value_hash, &block)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for ApproveAfterDays
          def ApproveAfterDays(value)
            dsl_attribute(:ApproveAfterDays, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for EnableNonSecurity
          def EnableNonSecurity(value)
            dsl_attribute(:EnableNonSecurity, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ComplianceLevel
          def ComplianceLevel(value)
            dsl_attribute(:ComplianceLevel, value)
          end

          #   @param [PatchFilterGroup|JSONable] value
          #     The value to use for PatchFilterGroup
          # @@overload PatchFilterGroup(&block)
          #   Set :PatchFilterGroup from block via instance eval of a new PatchFilterGroup
          def PatchFilterGroup(value = nil, **value_hash, &block)
            dsl_attribute(:PatchFilterGroup, value, attr_class: PatchFilterGroup, **value_hash, &block)
          end
        end

        # Property Definition PatchStringDate
        class PatchStringDate < PropertyType
        end

        # Property Definition PatchSource
        class PatchSource < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Products
          def Products(values)
            dsl_list_attribute(:Products, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Products
          def Product(value, fn_if: nil)
            dsl_push_attribute(:Products, value, fn_if: fn_if)
          end

          #   @param [String|JSONable] value
          #     The value to use for Configuration
          def Configuration(value)
            dsl_attribute(:Configuration, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end
        end

        # Property Definition RuleGroup
        class RuleGroup < PropertyType
          # @param [Array<Rule>|JSONable>] values
          #   The List of values to use for PatchRules
          def PatchRules(values)
            dsl_list_attribute(:PatchRules, values)
          end

          #  @param [Rule|JSONable] value  Append value to the List
          #    The List of values to use for PatchRules
          # @@overload PatchRule(&block)
          # Append value to the List from block via instance eval of a new Rule
          def PatchRule(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:PatchRules, value, fn_if: fn_if, attr_class: Rule, **value_hash, &block)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for OperatingSystem
        def OperatingSystem(value)
          dsl_attribute(:OperatingSystem, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Description
        def Description(value)
          dsl_attribute(:Description, value)
        end

        #   @param [RuleGroup|JSONable] value
        #     The value to use for ApprovalRules
        # @@overload ApprovalRules(&block)
        #   Set :ApprovalRules from block via instance eval of a new RuleGroup
        def ApprovalRules(value = nil, **value_hash, &block)
          dsl_attribute(:ApprovalRules, value, attr_class: RuleGroup, **value_hash, &block)
        end

        # @param [Array<PatchSource>|JSONable>] values
        #   The List of values to use for Sources
        def Sources(values)
          dsl_list_attribute(:Sources, values)
        end

        #  @param [PatchSource|JSONable] value  Append value to the List
        #    The List of values to use for Sources
        # @@overload Sourc(&block)
        # Append value to the List from block via instance eval of a new PatchSource
        def Sourc(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Sources, value, fn_if: fn_if, attr_class: PatchSource, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Name
        def Name(value)
          dsl_attribute(:Name, value)
        end

        # @param [Array<String>|JSONable>] values
        #   The List of values to use for RejectedPatches
        def RejectedPatches(values)
          dsl_list_attribute(:RejectedPatches, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for RejectedPatches
        def RejectedPatch(value, fn_if: nil)
          dsl_push_attribute(:RejectedPatches, value, fn_if: fn_if)
        end

        # @param [Array<String>|JSONable>] values
        #   The List of values to use for ApprovedPatches
        def ApprovedPatches(values)
          dsl_list_attribute(:ApprovedPatches, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for ApprovedPatches
        def ApprovedPatch(value, fn_if: nil)
          dsl_push_attribute(:ApprovedPatches, value, fn_if: fn_if)
        end

        #   @param [String|JSONable] value
        #     The value to use for RejectedPatchesAction
        def RejectedPatchesAction(value)
          dsl_attribute(:RejectedPatchesAction, value)
        end

        # @param [Array<String>|JSONable>] values
        #   The List of values to use for PatchGroups
        def PatchGroups(values)
          dsl_list_attribute(:PatchGroups, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for PatchGroups
        def PatchGroup(value, fn_if: nil)
          dsl_push_attribute(:PatchGroups, value, fn_if: fn_if)
        end

        #   @param [String|JSONable] value
        #     The value to use for ApprovedPatchesComplianceLevel
        def ApprovedPatchesComplianceLevel(value)
          dsl_attribute(:ApprovedPatchesComplianceLevel, value)
        end

        #   @param [Boolean|JSONable] value
        #     The value to use for ApprovedPatchesEnableNonSecurity
        def ApprovedPatchesEnableNonSecurity(value)
          dsl_attribute(:ApprovedPatchesEnableNonSecurity, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [PatchFilterGroup|JSONable] value
        #     The value to use for GlobalFilters
        # @@overload GlobalFilters(&block)
        #   Set :GlobalFilters from block via instance eval of a new PatchFilterGroup
        def GlobalFilters(value = nil, **value_hash, &block)
          dsl_attribute(:GlobalFilters, value, attr_class: PatchFilterGroup, **value_hash, &block)
        end

        # @param [Array<Tag>|JSONable>] values
        #   The List of values to use for Tags
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    The List of values to use for Tags
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::SSM::PatchBaseline]
    def AWS_SSM_PatchBaseline(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::SSM::PatchBaseline, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
