# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module SSM
      # Resource Type definition for AWS::SSM::ResourceDataSync
      class ResourceDataSync < ResourceType
        # Property Definition S3Destination
        class S3Destination < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for KMSKeyArn
          def KMSKeyArn(value)
            dsl_attribute(:KMSKeyArn, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for BucketPrefix
          def BucketPrefix(value)
            dsl_attribute(:BucketPrefix, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for BucketName
          def BucketName(value)
            dsl_attribute(:BucketName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for BucketRegion
          def BucketRegion(value)
            dsl_attribute(:BucketRegion, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for SyncFormat
          def SyncFormat(value)
            dsl_attribute(:SyncFormat, value)
          end
        end

        # Property Definition SyncSource
        class SyncSource < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for IncludeFutureRegions
          def IncludeFutureRegions(value)
            dsl_attribute(:IncludeFutureRegions, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for SourceRegions
          def SourceRegions(values)
            dsl_list_attribute(:SourceRegions, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for SourceRegions
          def SourceRegion(value, fn_if: nil)
            dsl_push_attribute(:SourceRegions, value, fn_if: fn_if)
          end

          #   @param [String|JSONable] value
          #     The value to use for SourceType
          def SourceType(value)
            dsl_attribute(:SourceType, value)
          end

          #   @param [AwsOrganizationsSource|JSONable] value
          #     The value to use for AwsOrganizationsSource
          # @@overload AwsOrganizationsSource(&block)
          #   Set :AwsOrganizationsSource from block via instance eval of a new AwsOrganizationsSource
          def AwsOrganizationsSource(value = nil, **value_hash, &block)
            dsl_attribute(:AwsOrganizationsSource, value, attr_class: AwsOrganizationsSource, **value_hash, &block)
          end
        end

        # Property Definition AwsOrganizationsSource
        class AwsOrganizationsSource < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for OrganizationalUnits
          def OrganizationalUnits(values)
            dsl_list_attribute(:OrganizationalUnits, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for OrganizationalUnits
          def OrganizationalUnit(value, fn_if: nil)
            dsl_push_attribute(:OrganizationalUnits, value, fn_if: fn_if)
          end

          #   @param [String|JSONable] value
          #     The value to use for OrganizationSourceType
          def OrganizationSourceType(value)
            dsl_attribute(:OrganizationSourceType, value)
          end
        end

        #   @param [S3Destination|JSONable] value
        #     The value to use for S3Destination
        # @@overload S3Destination(&block)
        #   Set :S3Destination from block via instance eval of a new S3Destination
        def S3Destination(value = nil, **value_hash, &block)
          dsl_attribute(:S3Destination, value, attr_class: S3Destination, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for KMSKeyArn
        def KMSKeyArn(value)
          dsl_attribute(:KMSKeyArn, value)
        end

        #   @param [SyncSource|JSONable] value
        #     The value to use for SyncSource
        # @@overload SyncSource(&block)
        #   Set :SyncSource from block via instance eval of a new SyncSource
        def SyncSource(value = nil, **value_hash, &block)
          dsl_attribute(:SyncSource, value, attr_class: SyncSource, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for BucketName
        def BucketName(value)
          dsl_attribute(:BucketName, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for BucketRegion
        def BucketRegion(value)
          dsl_attribute(:BucketRegion, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for SyncFormat
        def SyncFormat(value)
          dsl_attribute(:SyncFormat, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for SyncName
        def SyncName(value)
          dsl_attribute(:SyncName, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for SyncType
        def SyncType(value)
          dsl_attribute(:SyncType, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for BucketPrefix
        def BucketPrefix(value)
          dsl_attribute(:BucketPrefix, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::SSM::ResourceDataSync]
    def AWS_SSM_ResourceDataSync(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::SSM::ResourceDataSync, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
