# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module KinesisAnalytics
      # Resource Type definition for AWS::KinesisAnalytics::Application
      class Application < ResourceType
        # Property Definition Input
        class Input < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for NamePrefix
          def NamePrefix(value)
            dsl_attribute(:NamePrefix, value)
          end

          #   @param [InputSchema|JSONable] value
          #     The value to use for InputSchema
          # @@overload InputSchema(&block)
          #   Set :InputSchema from block via instance eval of a new InputSchema
          def InputSchema(value = nil, **value_hash, &block)
            dsl_attribute(:InputSchema, value, attr_class: InputSchema, **value_hash, &block)
          end

          #   @param [KinesisStreamsInput|JSONable] value
          #     The value to use for KinesisStreamsInput
          # @@overload KinesisStreamsInput(&block)
          #   Set :KinesisStreamsInput from block via instance eval of a new KinesisStreamsInput
          def KinesisStreamsInput(value = nil, **value_hash, &block)
            dsl_attribute(:KinesisStreamsInput, value, attr_class: KinesisStreamsInput, **value_hash, &block)
          end

          #   @param [KinesisFirehoseInput|JSONable] value
          #     The value to use for KinesisFirehoseInput
          # @@overload KinesisFirehoseInput(&block)
          #   Set :KinesisFirehoseInput from block via instance eval of a new KinesisFirehoseInput
          def KinesisFirehoseInput(value = nil, **value_hash, &block)
            dsl_attribute(:KinesisFirehoseInput, value, attr_class: KinesisFirehoseInput, **value_hash, &block)
          end

          #   @param [InputProcessingConfiguration|JSONable] value
          #     The value to use for InputProcessingConfiguration
          # @@overload InputProcessingConfiguration(&block)
          #   Set :InputProcessingConfiguration from block via instance eval of a new InputProcessingConfiguration
          def InputProcessingConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:InputProcessingConfiguration, value, attr_class: InputProcessingConfiguration, **value_hash, &block)
          end

          #   @param [InputParallelism|JSONable] value
          #     The value to use for InputParallelism
          # @@overload InputParallelism(&block)
          #   Set :InputParallelism from block via instance eval of a new InputParallelism
          def InputParallelism(value = nil, **value_hash, &block)
            dsl_attribute(:InputParallelism, value, attr_class: InputParallelism, **value_hash, &block)
          end
        end

        # Property Definition InputProcessingConfiguration
        class InputProcessingConfiguration < PropertyType
          #   @param [InputLambdaProcessor|JSONable] value
          #     The value to use for InputLambdaProcessor
          # @@overload InputLambdaProcessor(&block)
          #   Set :InputLambdaProcessor from block via instance eval of a new InputLambdaProcessor
          def InputLambdaProcessor(value = nil, **value_hash, &block)
            dsl_attribute(:InputLambdaProcessor, value, attr_class: InputLambdaProcessor, **value_hash, &block)
          end
        end

        # Property Definition KinesisFirehoseInput
        class KinesisFirehoseInput < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ResourceARN
          def ResourceARN(value)
            dsl_attribute(:ResourceARN, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for RoleARN
          def RoleARN(value)
            dsl_attribute(:RoleARN, value)
          end
        end

        # Property Definition KinesisStreamsInput
        class KinesisStreamsInput < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ResourceARN
          def ResourceARN(value)
            dsl_attribute(:ResourceARN, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for RoleARN
          def RoleARN(value)
            dsl_attribute(:RoleARN, value)
          end
        end

        # Property Definition InputSchema
        class InputSchema < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for RecordEncoding
          def RecordEncoding(value)
            dsl_attribute(:RecordEncoding, value)
          end

          # @param [Array<RecordColumn>|JSONable>] values
          #   The List of values to use for RecordColumns
          def RecordColumns(values)
            dsl_list_attribute(:RecordColumns, values)
          end

          #  @param [RecordColumn|JSONable] value  Append value to the List
          #    The List of values to use for RecordColumns
          # @@overload RecordColumn(&block)
          # Append value to the List from block via instance eval of a new RecordColumn
          def RecordColumn(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:RecordColumns, value, fn_if: fn_if, attr_class: RecordColumn, **value_hash, &block)
          end

          #   @param [RecordFormat|JSONable] value
          #     The value to use for RecordFormat
          # @@overload RecordFormat(&block)
          #   Set :RecordFormat from block via instance eval of a new RecordFormat
          def RecordFormat(value = nil, **value_hash, &block)
            dsl_attribute(:RecordFormat, value, attr_class: RecordFormat, **value_hash, &block)
          end
        end

        # Property Definition InputParallelism
        class InputParallelism < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for Count
          def Count(value)
            dsl_attribute(:Count, value)
          end
        end

        # Property Definition RecordColumn
        class RecordColumn < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Mapping
          def Mapping(value)
            dsl_attribute(:Mapping, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for SqlType
          def SqlType(value)
            dsl_attribute(:SqlType, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end
        end

        # Property Definition RecordFormat
        class RecordFormat < PropertyType
          #   @param [MappingParameters|JSONable] value
          #     The value to use for MappingParameters
          # @@overload MappingParameters(&block)
          #   Set :MappingParameters from block via instance eval of a new MappingParameters
          def MappingParameters(value = nil, **value_hash, &block)
            dsl_attribute(:MappingParameters, value, attr_class: MappingParameters, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for RecordFormatType
          def RecordFormatType(value)
            dsl_attribute(:RecordFormatType, value)
          end
        end

        # Property Definition InputLambdaProcessor
        class InputLambdaProcessor < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ResourceARN
          def ResourceARN(value)
            dsl_attribute(:ResourceARN, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for RoleARN
          def RoleARN(value)
            dsl_attribute(:RoleARN, value)
          end
        end

        # Property Definition MappingParameters
        class MappingParameters < PropertyType
          #   @param [JSONMappingParameters|JSONable] value
          #     The value to use for JSONMappingParameters
          # @@overload JSONMappingParameters(&block)
          #   Set :JSONMappingParameters from block via instance eval of a new JSONMappingParameters
          def JSONMappingParameters(value = nil, **value_hash, &block)
            dsl_attribute(:JSONMappingParameters, value, attr_class: JSONMappingParameters, **value_hash, &block)
          end

          #   @param [CSVMappingParameters|JSONable] value
          #     The value to use for CSVMappingParameters
          # @@overload CSVMappingParameters(&block)
          #   Set :CSVMappingParameters from block via instance eval of a new CSVMappingParameters
          def CSVMappingParameters(value = nil, **value_hash, &block)
            dsl_attribute(:CSVMappingParameters, value, attr_class: CSVMappingParameters, **value_hash, &block)
          end
        end

        # Property Definition JSONMappingParameters
        class JSONMappingParameters < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for RecordRowPath
          def RecordRowPath(value)
            dsl_attribute(:RecordRowPath, value)
          end
        end

        # Property Definition CSVMappingParameters
        class CSVMappingParameters < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for RecordRowDelimiter
          def RecordRowDelimiter(value)
            dsl_attribute(:RecordRowDelimiter, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for RecordColumnDelimiter
          def RecordColumnDelimiter(value)
            dsl_attribute(:RecordColumnDelimiter, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for ApplicationName
        def ApplicationName(value)
          dsl_attribute(:ApplicationName, value)
        end

        # @param [Array<Input>|JSONable>] values
        #   The List of values to use for Inputs
        def Inputs(values)
          dsl_list_attribute(:Inputs, values)
        end

        #  @param [Input|JSONable] value  Append value to the List
        #    The List of values to use for Inputs
        # @@overload Input(&block)
        # Append value to the List from block via instance eval of a new Input
        def Input(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Inputs, value, fn_if: fn_if, attr_class: Input, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for ApplicationDescription
        def ApplicationDescription(value)
          dsl_attribute(:ApplicationDescription, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for ApplicationCode
        def ApplicationCode(value)
          dsl_attribute(:ApplicationCode, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::KinesisAnalytics::Application]
    def AWS_KinesisAnalytics_Application(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::KinesisAnalytics::Application, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
