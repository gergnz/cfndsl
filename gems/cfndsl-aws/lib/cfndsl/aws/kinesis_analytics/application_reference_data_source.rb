# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module KinesisAnalytics
      # Resource Type definition for AWS::KinesisAnalytics::ApplicationReferenceDataSource
      class ApplicationReferenceDataSource < ResourceType
        # Property Definition ReferenceDataSource
        class ReferenceDataSource < PropertyType
          #   @param [ReferenceSchema|JSONable] value
          #     The value to use for ReferenceSchema
          # @@overload ReferenceSchema(&block)
          #   Set :ReferenceSchema from block via instance eval of a new ReferenceSchema
          def ReferenceSchema(value = nil, **value_hash, &block)
            dsl_attribute(:ReferenceSchema, value, attr_class: ReferenceSchema, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for TableName
          def TableName(value)
            dsl_attribute(:TableName, value)
          end

          #   @param [S3ReferenceDataSource|JSONable] value
          #     The value to use for S3ReferenceDataSource
          # @@overload S3ReferenceDataSource(&block)
          #   Set :S3ReferenceDataSource from block via instance eval of a new S3ReferenceDataSource
          def S3ReferenceDataSource(value = nil, **value_hash, &block)
            dsl_attribute(:S3ReferenceDataSource, value, attr_class: S3ReferenceDataSource, **value_hash, &block)
          end
        end

        # Property Definition S3ReferenceDataSource
        class S3ReferenceDataSource < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for BucketARN
          def BucketARN(value)
            dsl_attribute(:BucketARN, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for FileKey
          def FileKey(value)
            dsl_attribute(:FileKey, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ReferenceRoleARN
          def ReferenceRoleARN(value)
            dsl_attribute(:ReferenceRoleARN, value)
          end
        end

        # Property Definition ReferenceSchema
        class ReferenceSchema < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for RecordEncoding
          def RecordEncoding(value)
            dsl_attribute(:RecordEncoding, value)
          end

          # @param [Array<RecordColumn>|JSONable>] values
          #   The List of values to use for RecordColumns
          def RecordColumns(values)
            dsl_list_attribute(:RecordColumns, values)
          end

          #  @param [RecordColumn|JSONable] value  Append value to the List
          #    The List of values to use for RecordColumns
          # @@overload RecordColumn(&block)
          # Append value to the List from block via instance eval of a new RecordColumn
          def RecordColumn(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:RecordColumns, value, fn_if: fn_if, attr_class: RecordColumn, **value_hash, &block)
          end

          #   @param [RecordFormat|JSONable] value
          #     The value to use for RecordFormat
          # @@overload RecordFormat(&block)
          #   Set :RecordFormat from block via instance eval of a new RecordFormat
          def RecordFormat(value = nil, **value_hash, &block)
            dsl_attribute(:RecordFormat, value, attr_class: RecordFormat, **value_hash, &block)
          end
        end

        # Property Definition RecordColumn
        class RecordColumn < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Mapping
          def Mapping(value)
            dsl_attribute(:Mapping, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for SqlType
          def SqlType(value)
            dsl_attribute(:SqlType, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end
        end

        # Property Definition RecordFormat
        class RecordFormat < PropertyType
          #   @param [MappingParameters|JSONable] value
          #     The value to use for MappingParameters
          # @@overload MappingParameters(&block)
          #   Set :MappingParameters from block via instance eval of a new MappingParameters
          def MappingParameters(value = nil, **value_hash, &block)
            dsl_attribute(:MappingParameters, value, attr_class: MappingParameters, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for RecordFormatType
          def RecordFormatType(value)
            dsl_attribute(:RecordFormatType, value)
          end
        end

        # Property Definition MappingParameters
        class MappingParameters < PropertyType
          #   @param [JSONMappingParameters|JSONable] value
          #     The value to use for JSONMappingParameters
          # @@overload JSONMappingParameters(&block)
          #   Set :JSONMappingParameters from block via instance eval of a new JSONMappingParameters
          def JSONMappingParameters(value = nil, **value_hash, &block)
            dsl_attribute(:JSONMappingParameters, value, attr_class: JSONMappingParameters, **value_hash, &block)
          end

          #   @param [CSVMappingParameters|JSONable] value
          #     The value to use for CSVMappingParameters
          # @@overload CSVMappingParameters(&block)
          #   Set :CSVMappingParameters from block via instance eval of a new CSVMappingParameters
          def CSVMappingParameters(value = nil, **value_hash, &block)
            dsl_attribute(:CSVMappingParameters, value, attr_class: CSVMappingParameters, **value_hash, &block)
          end
        end

        # Property Definition CSVMappingParameters
        class CSVMappingParameters < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for RecordRowDelimiter
          def RecordRowDelimiter(value)
            dsl_attribute(:RecordRowDelimiter, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for RecordColumnDelimiter
          def RecordColumnDelimiter(value)
            dsl_attribute(:RecordColumnDelimiter, value)
          end
        end

        # Property Definition JSONMappingParameters
        class JSONMappingParameters < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for RecordRowPath
          def RecordRowPath(value)
            dsl_attribute(:RecordRowPath, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for ApplicationName
        def ApplicationName(value)
          dsl_attribute(:ApplicationName, value)
        end

        #   @param [ReferenceDataSource|JSONable] value
        #     The value to use for ReferenceDataSource
        # @@overload ReferenceDataSource(&block)
        #   Set :ReferenceDataSource from block via instance eval of a new ReferenceDataSource
        def ReferenceDataSource(value = nil, **value_hash, &block)
          dsl_attribute(:ReferenceDataSource, value, attr_class: ReferenceDataSource, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::KinesisAnalytics::ApplicationReferenceDataSource]
    def AWS_KinesisAnalytics_ApplicationReferenceDataSource(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::KinesisAnalytics::ApplicationReferenceDataSource, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
