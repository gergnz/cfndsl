# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module GameLift
      # Resource Type definition for AWS::GameLift::MatchmakingConfiguration
      class MatchmakingConfiguration < ResourceType
        # Property Definition GameProperty
        class GameProperty < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end
        end

        # @param [Array<GameProperty>|JSONable>] values
        #   The List of values to use for GameProperties
        def GameProperties(values)
          dsl_list_attribute(:GameProperties, values)
        end

        #  @param [GameProperty|JSONable] value  Append value to the List
        #    The List of values to use for GameProperties
        # @@overload GameProperty(&block)
        # Append value to the List from block via instance eval of a new GameProperty
        def GameProperty(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:GameProperties, value, fn_if: fn_if, attr_class: GameProperty, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for GameSessionData
        def GameSessionData(value)
          dsl_attribute(:GameSessionData, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Description
        def Description(value)
          dsl_attribute(:Description, value)
        end

        #   @param [Integer|JSONable] value
        #     The value to use for AcceptanceTimeoutSeconds
        def AcceptanceTimeoutSeconds(value)
          dsl_attribute(:AcceptanceTimeoutSeconds, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for NotificationTarget
        def NotificationTarget(value)
          dsl_attribute(:NotificationTarget, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for CustomEventData
        def CustomEventData(value)
          dsl_attribute(:CustomEventData, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Name
        def Name(value)
          dsl_attribute(:Name, value)
        end

        #   @param [Integer|JSONable] value
        #     The value to use for AdditionalPlayerCount
        def AdditionalPlayerCount(value)
          dsl_attribute(:AdditionalPlayerCount, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for BackfillMode
        def BackfillMode(value)
          dsl_attribute(:BackfillMode, value)
        end

        #   @param [Integer|JSONable] value
        #     The value to use for RequestTimeoutSeconds
        def RequestTimeoutSeconds(value)
          dsl_attribute(:RequestTimeoutSeconds, value)
        end

        #   @param [Boolean|JSONable] value
        #     The value to use for AcceptanceRequired
        def AcceptanceRequired(value)
          dsl_attribute(:AcceptanceRequired, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Arn
        def Arn(value)
          dsl_attribute(:Arn, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for RuleSetName
        def RuleSetName(value)
          dsl_attribute(:RuleSetName, value)
        end

        # @param [Array<String>|JSONable>] values
        #   The List of values to use for GameSessionQueueArns
        def GameSessionQueueArns(values)
          dsl_list_attribute(:GameSessionQueueArns, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for GameSessionQueueArns
        def GameSessionQueueArn(value, fn_if: nil)
          dsl_push_attribute(:GameSessionQueueArns, value, fn_if: fn_if)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::GameLift::MatchmakingConfiguration]
    def AWS_GameLift_MatchmakingConfiguration(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::GameLift::MatchmakingConfiguration, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
