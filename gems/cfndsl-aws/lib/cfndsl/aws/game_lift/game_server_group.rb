# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module GameLift
      # The AWS::GameLift::GameServerGroup resource creates an Amazon GameLift (GameLift) GameServerGroup.
      # @see https://github.com/aws-cloudformation/aws-cloudformation-resource-providers-gamelift.git
      class GameServerGroup < ResourceType
        # Configuration settings to define a scaling policy for the Auto Scaling group that is optimized for game hosting
        class AutoScalingPolicy < PropertyType
          #   @param [Number|JSONable] value
          #     The value to use for EstimatedInstanceWarmup
          def EstimatedInstanceWarmup(value)
            dsl_attribute(:EstimatedInstanceWarmup, value)
          end

          #   @param [TargetTrackingConfiguration|JSONable] value
          #     The value to use for TargetTrackingConfiguration
          # @@overload TargetTrackingConfiguration(&block)
          #   Set :TargetTrackingConfiguration from block via instance eval of a new TargetTrackingConfiguration
          def TargetTrackingConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:TargetTrackingConfiguration, value, attr_class: TargetTrackingConfiguration, **value_hash, &block)
          end
        end

        # Settings for a target-based scaling policy applied to Auto Scaling group.
        class TargetTrackingConfiguration < PropertyType
          #   @param [Number|JSONable] value
          #     The value to use for TargetValue
          def TargetValue(value)
            dsl_attribute(:TargetValue, value)
          end
        end

        # An allowed instance type for your game server group.
        class InstanceDefinition < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for InstanceType
          def InstanceType(value)
            dsl_attribute(:InstanceType, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for WeightedCapacity
          def WeightedCapacity(value)
            dsl_attribute(:WeightedCapacity, value)
          end
        end

        # The EC2 launch template that contains configuration settings and game server code to be deployed to all instances in the game server group.
        class LaunchTemplate < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for LaunchTemplateId
          def LaunchTemplateId(value)
            dsl_attribute(:LaunchTemplateId, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for LaunchTemplateName
          def LaunchTemplateName(value)
            dsl_attribute(:LaunchTemplateName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Version
          def Version(value)
            dsl_attribute(:Version, value)
          end
        end

        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The key for a developer-defined key:value pair for tagging an AWS resource.
          def Key(value)
            dsl_attribute(:Key, value)
          end

          #   @param [String|JSONable] value
          #     The value for a developer-defined key:value pair for tagging an AWS resource.
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        # Properties that describe a game server group resource. A game server group manages certain properties of a corresponding EC2 Auto Scaling group.
        class GameServerGroup < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for AutoScalingGroupArn
          def AutoScalingGroupArn(value)
            dsl_attribute(:AutoScalingGroupArn, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for BalancingStrategy
          def BalancingStrategy(value)
            dsl_attribute(:BalancingStrategy, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for CreationTime
          def CreationTime(value)
            dsl_attribute(:CreationTime, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for GameServerGroupArn
          def GameServerGroupArn(value)
            dsl_attribute(:GameServerGroupArn, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for GameServerGroupName
          def GameServerGroupName(value)
            dsl_attribute(:GameServerGroupName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for GameServerProtectionPolicy
          def GameServerProtectionPolicy(value)
            dsl_attribute(:GameServerProtectionPolicy, value)
          end

          # @param [Array<InstanceDefinition>|JSONable>] values
          #   The List of values to use for InstanceDefinitions
          def InstanceDefinitions(values)
            dsl_list_attribute(:InstanceDefinitions, values)
          end

          #  @param [InstanceDefinition|JSONable] value  Append value to the List
          #    The List of values to use for InstanceDefinitions
          # @@overload InstanceDefinition(&block)
          # Append value to the List from block via instance eval of a new InstanceDefinition
          def InstanceDefinition(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:InstanceDefinitions, value, fn_if: fn_if, attr_class: InstanceDefinition, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for LastUpdatedTime
          def LastUpdatedTime(value)
            dsl_attribute(:LastUpdatedTime, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for RoleArn
          def RoleArn(value)
            dsl_attribute(:RoleArn, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Status
          def Status(value)
            dsl_attribute(:Status, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for StatusReason
          def StatusReason(value)
            dsl_attribute(:StatusReason, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for SuspendedActions
          def SuspendedActions(values)
            dsl_list_attribute(:SuspendedActions, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for SuspendedActions
          def SuspendedAction(value, fn_if: nil)
            dsl_push_attribute(:SuspendedActions, value, fn_if: fn_if)
          end
        end

        #   @param [String|JSONable] value
        #     A generated unique ID for the EC2 Auto Scaling group that is associated with this game server group.
        def AutoScalingGroupArn(value)
          dsl_attribute(:AutoScalingGroupArn, value)
        end

        #   @param [AutoScalingPolicy|JSONable] value
        #     Configuration settings to define a scaling policy for the Auto Scaling group that is optimized for game hosting
        # @@overload AutoScalingPolicy(&block)
        #   Set :AutoScalingPolicy from block via instance eval of a new AutoScalingPolicy
        def AutoScalingPolicy(value = nil, **value_hash, &block)
          dsl_attribute(:AutoScalingPolicy, value, attr_class: AutoScalingPolicy, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The fallback balancing method to use for the game server group when Spot Instances in a Region become unavailable or are not viable for game hosting.
        def BalancingStrategy(value)
          dsl_attribute(:BalancingStrategy, value)
        end

        #   @param [String|JSONable] value
        #     The type of delete to perform.
        def DeleteOption(value)
          dsl_attribute(:DeleteOption, value)
        end

        #   @param [String|JSONable] value
        #     A generated unique ID for the game server group.
        def GameServerGroupArn(value)
          dsl_attribute(:GameServerGroupArn, value)
        end

        #   @param [String|JSONable] value
        #     An identifier for the new game server group.
        def GameServerGroupName(value)
          dsl_attribute(:GameServerGroupName, value)
        end

        #   @param [String|JSONable] value
        #     A flag that indicates whether instances in the game server group are protected from early termination.
        def GameServerProtectionPolicy(value)
          dsl_attribute(:GameServerProtectionPolicy, value)
        end

        # @param [Array<InstanceDefinition>|JSONable>] values
        #   A set of EC2 instance types to use when creating instances in the group.
        def InstanceDefinitions(values)
          dsl_list_attribute(:InstanceDefinitions, values)
        end

        #  @param [InstanceDefinition|JSONable] value  Append value to the List
        #    A set of EC2 instance types to use when creating instances in the group.
        # @@overload InstanceDefinition(&block)
        # Append value to the List from block via instance eval of a new InstanceDefinition
        def InstanceDefinition(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:InstanceDefinitions, value, fn_if: fn_if, attr_class: InstanceDefinition, **value_hash, &block)
        end

        #   @param [LaunchTemplate|JSONable] value
        #     The EC2 launch template that contains configuration settings and game server code to be deployed to all instances in the game server group.
        # @@overload LaunchTemplate(&block)
        #   Set :LaunchTemplate from block via instance eval of a new LaunchTemplate
        def LaunchTemplate(value = nil, **value_hash, &block)
          dsl_attribute(:LaunchTemplate, value, attr_class: LaunchTemplate, **value_hash, &block)
        end

        #   @param [Number|JSONable] value
        #     The maximum number of instances allowed in the EC2 Auto Scaling group.
        def MaxSize(value)
          dsl_attribute(:MaxSize, value)
        end

        #   @param [Number|JSONable] value
        #     The minimum number of instances allowed in the EC2 Auto Scaling group.
        def MinSize(value)
          dsl_attribute(:MinSize, value)
        end

        #   @param [String|JSONable] value
        #     The Amazon Resource Name (ARN) for an IAM role that allows Amazon GameLift to access your EC2 Auto Scaling groups.
        def RoleArn(value)
          dsl_attribute(:RoleArn, value)
        end

        # @param [Array<Tag>|JSONable>] values
        #   A list of labels to assign to the new game server group resource.
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    A list of labels to assign to the new game server group resource.
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end

        # @param [Array<String>|JSONable>] values
        #   A list of virtual private cloud (VPC) subnets to use with instances in the game server group.
        def VpcSubnets(values)
          dsl_list_attribute(:VpcSubnets, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    A list of virtual private cloud (VPC) subnets to use with instances in the game server group.
        def VpcSubnet(value, fn_if: nil)
          dsl_push_attribute(:VpcSubnets, value, fn_if: fn_if)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::GameLift::GameServerGroup]
    def AWS_GameLift_GameServerGroup(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::GameLift::GameServerGroup, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
