# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module GameLift
      # Resource Type definition for AWS::GameLift::Fleet
      class Fleet < ResourceType
        # Property Definition ServerProcess
        class ServerProcess < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for LaunchPath
          def LaunchPath(value)
            dsl_attribute(:LaunchPath, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for ConcurrentExecutions
          def ConcurrentExecutions(value)
            dsl_attribute(:ConcurrentExecutions, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Parameters
          def Parameters(value)
            dsl_attribute(:Parameters, value)
          end
        end

        # Property Definition ResourceCreationLimitPolicy
        class ResourceCreationLimitPolicy < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for PolicyPeriodInMinutes
          def PolicyPeriodInMinutes(value)
            dsl_attribute(:PolicyPeriodInMinutes, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for NewGameSessionsPerCreator
          def NewGameSessionsPerCreator(value)
            dsl_attribute(:NewGameSessionsPerCreator, value)
          end
        end

        # Property Definition CertificateConfiguration
        class CertificateConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for CertificateType
          def CertificateType(value)
            dsl_attribute(:CertificateType, value)
          end
        end

        # Property Definition IpPermission
        class IpPermission < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for IpRange
          def IpRange(value)
            dsl_attribute(:IpRange, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for FromPort
          def FromPort(value)
            dsl_attribute(:FromPort, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Protocol
          def Protocol(value)
            dsl_attribute(:Protocol, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for ToPort
          def ToPort(value)
            dsl_attribute(:ToPort, value)
          end
        end

        # Property Definition RuntimeConfiguration
        class RuntimeConfiguration < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for MaxConcurrentGameSessionActivations
          def MaxConcurrentGameSessionActivations(value)
            dsl_attribute(:MaxConcurrentGameSessionActivations, value)
          end

          # @param [Array<ServerProcess>|JSONable>] values
          #   The List of values to use for ServerProcesses
          def ServerProcesses(values)
            dsl_list_attribute(:ServerProcesses, values)
          end

          #  @param [ServerProcess|JSONable] value  Append value to the List
          #    The List of values to use for ServerProcesses
          # @@overload ServerProcess(&block)
          # Append value to the List from block via instance eval of a new ServerProcess
          def ServerProcess(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:ServerProcesses, value, fn_if: fn_if, attr_class: ServerProcess, **value_hash, &block)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for GameSessionActivationTimeoutSeconds
          def GameSessionActivationTimeoutSeconds(value)
            dsl_attribute(:GameSessionActivationTimeoutSeconds, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for ServerLaunchParameters
        def ServerLaunchParameters(value)
          dsl_attribute(:ServerLaunchParameters, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Description
        def Description(value)
          dsl_attribute(:Description, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for PeerVpcId
        def PeerVpcId(value)
          dsl_attribute(:PeerVpcId, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for FleetType
        def FleetType(value)
          dsl_attribute(:FleetType, value)
        end

        # @param [Array<IpPermission>|JSONable>] values
        #   The List of values to use for EC2InboundPermissions
        def EC2InboundPermissions(values)
          dsl_list_attribute(:EC2InboundPermissions, values)
        end

        #  @param [IpPermission|JSONable] value  Append value to the List
        #    The List of values to use for EC2InboundPermissions
        # @@overload EC2InboundPermission(&block)
        # Append value to the List from block via instance eval of a new IpPermission
        def EC2InboundPermission(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:EC2InboundPermissions, value, fn_if: fn_if, attr_class: IpPermission, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for NewGameSessionProtectionPolicy
        def NewGameSessionProtectionPolicy(value)
          dsl_attribute(:NewGameSessionProtectionPolicy, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for ScriptId
        def ScriptId(value)
          dsl_attribute(:ScriptId, value)
        end

        #   @param [Integer|JSONable] value
        #     The value to use for MaxSize
        def MaxSize(value)
          dsl_attribute(:MaxSize, value)
        end

        #   @param [RuntimeConfiguration|JSONable] value
        #     The value to use for RuntimeConfiguration
        # @@overload RuntimeConfiguration(&block)
        #   Set :RuntimeConfiguration from block via instance eval of a new RuntimeConfiguration
        def RuntimeConfiguration(value = nil, **value_hash, &block)
          dsl_attribute(:RuntimeConfiguration, value, attr_class: RuntimeConfiguration, **value_hash, &block)
        end

        # @param [Array<String>|JSONable>] values
        #   The List of values to use for LogPaths
        def LogPaths(values)
          dsl_list_attribute(:LogPaths, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for LogPaths
        def LogPath(value, fn_if: nil)
          dsl_push_attribute(:LogPaths, value, fn_if: fn_if)
        end

        #   @param [String|JSONable] value
        #     The value to use for Name
        def Name(value)
          dsl_attribute(:Name, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for ServerLaunchPath
        def ServerLaunchPath(value)
          dsl_attribute(:ServerLaunchPath, value)
        end

        #   @param [Integer|JSONable] value
        #     The value to use for MinSize
        def MinSize(value)
          dsl_attribute(:MinSize, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for PeerVpcAwsAccountId
        def PeerVpcAwsAccountId(value)
          dsl_attribute(:PeerVpcAwsAccountId, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for InstanceRoleARN
        def InstanceRoleARN(value)
          dsl_attribute(:InstanceRoleARN, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for BuildId
        def BuildId(value)
          dsl_attribute(:BuildId, value)
        end

        # @param [Array<String>|JSONable>] values
        #   The List of values to use for MetricGroups
        def MetricGroups(values)
          dsl_list_attribute(:MetricGroups, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for MetricGroups
        def MetricGroup(value, fn_if: nil)
          dsl_push_attribute(:MetricGroups, value, fn_if: fn_if)
        end

        #   @param [ResourceCreationLimitPolicy|JSONable] value
        #     The value to use for ResourceCreationLimitPolicy
        # @@overload ResourceCreationLimitPolicy(&block)
        #   Set :ResourceCreationLimitPolicy from block via instance eval of a new ResourceCreationLimitPolicy
        def ResourceCreationLimitPolicy(value = nil, **value_hash, &block)
          dsl_attribute(:ResourceCreationLimitPolicy, value, attr_class: ResourceCreationLimitPolicy, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for EC2InstanceType
        def EC2InstanceType(value)
          dsl_attribute(:EC2InstanceType, value)
        end

        #   @param [CertificateConfiguration|JSONable] value
        #     The value to use for CertificateConfiguration
        # @@overload CertificateConfiguration(&block)
        #   Set :CertificateConfiguration from block via instance eval of a new CertificateConfiguration
        def CertificateConfiguration(value = nil, **value_hash, &block)
          dsl_attribute(:CertificateConfiguration, value, attr_class: CertificateConfiguration, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [Integer|JSONable] value
        #     The value to use for DesiredEC2Instances
        def DesiredEC2Instances(value)
          dsl_attribute(:DesiredEC2Instances, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::GameLift::Fleet]
    def AWS_GameLift_Fleet(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::GameLift::Fleet, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
