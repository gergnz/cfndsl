# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module MediaConvert
      # Resource Type definition for AWS::MediaConvert::JobTemplate
      class JobTemplate < ResourceType
        # Property Definition AccelerationSettings
        class AccelerationSettings < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Mode
          def Mode(value)
            dsl_attribute(:Mode, value)
          end
        end

        # Property Definition HopDestination
        class HopDestination < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for WaitMinutes
          def WaitMinutes(value)
            dsl_attribute(:WaitMinutes, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Queue
          def Queue(value)
            dsl_attribute(:Queue, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for Priority
          def Priority(value)
            dsl_attribute(:Priority, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for Category
        def Category(value)
          dsl_attribute(:Category, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Description
        def Description(value)
          dsl_attribute(:Description, value)
        end

        #   @param [AccelerationSettings|JSONable] value
        #     The value to use for AccelerationSettings
        # @@overload AccelerationSettings(&block)
        #   Set :AccelerationSettings from block via instance eval of a new AccelerationSettings
        def AccelerationSettings(value = nil, **value_hash, &block)
          dsl_attribute(:AccelerationSettings, value, attr_class: AccelerationSettings, **value_hash, &block)
        end

        #   @param [Integer|JSONable] value
        #     The value to use for Priority
        def Priority(value)
          dsl_attribute(:Priority, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for StatusUpdateInterval
        def StatusUpdateInterval(value)
          dsl_attribute(:StatusUpdateInterval, value)
        end

        #   @param [Object|JSONable] value
        #     The value to use for SettingsJson
        def SettingsJson(value)
          dsl_attribute(:SettingsJson, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Arn
        def Arn(value)
          dsl_attribute(:Arn, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Queue
        def Queue(value)
          dsl_attribute(:Queue, value)
        end

        # @param [Array<HopDestination>|JSONable>] values
        #   The List of values to use for HopDestinations
        def HopDestinations(values)
          dsl_list_attribute(:HopDestinations, values)
        end

        #  @param [HopDestination|JSONable] value  Append value to the List
        #    The List of values to use for HopDestinations
        # @@overload HopDestination(&block)
        # Append value to the List from block via instance eval of a new HopDestination
        def HopDestination(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:HopDestinations, value, fn_if: fn_if, attr_class: HopDestination, **value_hash, &block)
        end

        #   @param [Object|JSONable] value
        #     The value to use for Tags
        def Tags(value)
          dsl_attribute(:Tags, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Name
        def Name(value)
          dsl_attribute(:Name, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::MediaConvert::JobTemplate]
    def AWS_MediaConvert_JobTemplate(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::MediaConvert::JobTemplate, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
