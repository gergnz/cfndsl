# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module ManagedBlockchain
      # Resource Type definition for AWS::ManagedBlockchain::Member
      class Member < ResourceType
        # Property Definition NetworkConfiguration
        class NetworkConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Description
          def Description(value)
            dsl_attribute(:Description, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for FrameworkVersion
          def FrameworkVersion(value)
            dsl_attribute(:FrameworkVersion, value)
          end

          #   @param [VotingPolicy|JSONable] value
          #     The value to use for VotingPolicy
          # @@overload VotingPolicy(&block)
          #   Set :VotingPolicy from block via instance eval of a new VotingPolicy
          def VotingPolicy(value = nil, **value_hash, &block)
            dsl_attribute(:VotingPolicy, value, attr_class: VotingPolicy, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for Framework
          def Framework(value)
            dsl_attribute(:Framework, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end

          #   @param [NetworkFrameworkConfiguration|JSONable] value
          #     The value to use for NetworkFrameworkConfiguration
          # @@overload NetworkFrameworkConfiguration(&block)
          #   Set :NetworkFrameworkConfiguration from block via instance eval of a new NetworkFrameworkConfiguration
          def NetworkFrameworkConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:NetworkFrameworkConfiguration, value, attr_class: NetworkFrameworkConfiguration, **value_hash, &block)
          end
        end

        # Property Definition MemberConfiguration
        class MemberConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Description
          def Description(value)
            dsl_attribute(:Description, value)
          end

          #   @param [MemberFrameworkConfiguration|JSONable] value
          #     The value to use for MemberFrameworkConfiguration
          # @@overload MemberFrameworkConfiguration(&block)
          #   Set :MemberFrameworkConfiguration from block via instance eval of a new MemberFrameworkConfiguration
          def MemberFrameworkConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:MemberFrameworkConfiguration, value, attr_class: MemberFrameworkConfiguration, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end
        end

        # Property Definition MemberFrameworkConfiguration
        class MemberFrameworkConfiguration < PropertyType
          #   @param [MemberFabricConfiguration|JSONable] value
          #     The value to use for MemberFabricConfiguration
          # @@overload MemberFabricConfiguration(&block)
          #   Set :MemberFabricConfiguration from block via instance eval of a new MemberFabricConfiguration
          def MemberFabricConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:MemberFabricConfiguration, value, attr_class: MemberFabricConfiguration, **value_hash, &block)
          end
        end

        # Property Definition VotingPolicy
        class VotingPolicy < PropertyType
          #   @param [ApprovalThresholdPolicy|JSONable] value
          #     The value to use for ApprovalThresholdPolicy
          # @@overload ApprovalThresholdPolicy(&block)
          #   Set :ApprovalThresholdPolicy from block via instance eval of a new ApprovalThresholdPolicy
          def ApprovalThresholdPolicy(value = nil, **value_hash, &block)
            dsl_attribute(:ApprovalThresholdPolicy, value, attr_class: ApprovalThresholdPolicy, **value_hash, &block)
          end
        end

        # Property Definition NetworkFrameworkConfiguration
        class NetworkFrameworkConfiguration < PropertyType
          #   @param [NetworkFabricConfiguration|JSONable] value
          #     The value to use for NetworkFabricConfiguration
          # @@overload NetworkFabricConfiguration(&block)
          #   Set :NetworkFabricConfiguration from block via instance eval of a new NetworkFabricConfiguration
          def NetworkFabricConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:NetworkFabricConfiguration, value, attr_class: NetworkFabricConfiguration, **value_hash, &block)
          end
        end

        # Property Definition MemberFabricConfiguration
        class MemberFabricConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for AdminUsername
          def AdminUsername(value)
            dsl_attribute(:AdminUsername, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for AdminPassword
          def AdminPassword(value)
            dsl_attribute(:AdminPassword, value)
          end
        end

        # Property Definition NetworkFabricConfiguration
        class NetworkFabricConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Edition
          def Edition(value)
            dsl_attribute(:Edition, value)
          end
        end

        # Property Definition ApprovalThresholdPolicy
        class ApprovalThresholdPolicy < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ThresholdComparator
          def ThresholdComparator(value)
            dsl_attribute(:ThresholdComparator, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for ThresholdPercentage
          def ThresholdPercentage(value)
            dsl_attribute(:ThresholdPercentage, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for ProposalDurationInHours
          def ProposalDurationInHours(value)
            dsl_attribute(:ProposalDurationInHours, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for MemberId
        def MemberId(value)
          dsl_attribute(:MemberId, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for NetworkId
        def NetworkId(value)
          dsl_attribute(:NetworkId, value)
        end

        #   @param [MemberConfiguration|JSONable] value
        #     The value to use for MemberConfiguration
        # @@overload MemberConfiguration(&block)
        #   Set :MemberConfiguration from block via instance eval of a new MemberConfiguration
        def MemberConfiguration(value = nil, **value_hash, &block)
          dsl_attribute(:MemberConfiguration, value, attr_class: MemberConfiguration, **value_hash, &block)
        end

        #   @param [NetworkConfiguration|JSONable] value
        #     The value to use for NetworkConfiguration
        # @@overload NetworkConfiguration(&block)
        #   Set :NetworkConfiguration from block via instance eval of a new NetworkConfiguration
        def NetworkConfiguration(value = nil, **value_hash, &block)
          dsl_attribute(:NetworkConfiguration, value, attr_class: NetworkConfiguration, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for InvitationId
        def InvitationId(value)
          dsl_attribute(:InvitationId, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::ManagedBlockchain::Member]
    def AWS_ManagedBlockchain_Member(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::ManagedBlockchain::Member, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
