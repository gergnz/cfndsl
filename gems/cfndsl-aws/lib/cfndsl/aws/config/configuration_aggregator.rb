# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module Config
      # Resource Type definition for AWS::Config::ConfigurationAggregator
      class ConfigurationAggregator < ResourceType
        # Property Definition AccountAggregationSource
        class AccountAggregationSource < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for AllAwsRegions
          def AllAwsRegions(value)
            dsl_attribute(:AllAwsRegions, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for AwsRegions
          def AwsRegions(values)
            dsl_list_attribute(:AwsRegions, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for AwsRegions
          def AwsRegion(value, fn_if: nil)
            dsl_push_attribute(:AwsRegions, value, fn_if: fn_if)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for AccountIds
          def AccountIds(values)
            dsl_list_attribute(:AccountIds, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for AccountIds
          def AccountId(value, fn_if: nil)
            dsl_push_attribute(:AccountIds, value, fn_if: fn_if)
          end
        end

        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end
        end

        # Property Definition OrganizationAggregationSource
        class OrganizationAggregationSource < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for AllAwsRegions
          def AllAwsRegions(value)
            dsl_attribute(:AllAwsRegions, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for AwsRegions
          def AwsRegions(values)
            dsl_list_attribute(:AwsRegions, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for AwsRegions
          def AwsRegion(value, fn_if: nil)
            dsl_push_attribute(:AwsRegions, value, fn_if: fn_if)
          end

          #   @param [String|JSONable] value
          #     The value to use for RoleArn
          def RoleArn(value)
            dsl_attribute(:RoleArn, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for ConfigurationAggregatorName
        def ConfigurationAggregatorName(value)
          dsl_attribute(:ConfigurationAggregatorName, value)
        end

        # @param [Array<AccountAggregationSource>|JSONable>] values
        #   The List of values to use for AccountAggregationSources
        def AccountAggregationSources(values)
          dsl_list_attribute(:AccountAggregationSources, values)
        end

        #  @param [AccountAggregationSource|JSONable] value  Append value to the List
        #    The List of values to use for AccountAggregationSources
        # @@overload AccountAggregationSourc(&block)
        # Append value to the List from block via instance eval of a new AccountAggregationSource
        def AccountAggregationSourc(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:AccountAggregationSources, value, fn_if: fn_if, attr_class: AccountAggregationSource, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [OrganizationAggregationSource|JSONable] value
        #     The value to use for OrganizationAggregationSource
        # @@overload OrganizationAggregationSource(&block)
        #   Set :OrganizationAggregationSource from block via instance eval of a new OrganizationAggregationSource
        def OrganizationAggregationSource(value = nil, **value_hash, &block)
          dsl_attribute(:OrganizationAggregationSource, value, attr_class: OrganizationAggregationSource, **value_hash, &block)
        end

        # @param [Array<Tag>|JSONable>] values
        #   The List of values to use for Tags
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    The List of values to use for Tags
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::Config::ConfigurationAggregator]
    def AWS_Config_ConfigurationAggregator(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::Config::ConfigurationAggregator, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
