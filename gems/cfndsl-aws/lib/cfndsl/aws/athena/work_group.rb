# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module Athena
      # Resource schema for AWS::Athena::WorkGroup
      # @see https://github.com/aws-cloudformation/aws-cloudformation-resource-providers-athena.git
      class WorkGroup < ResourceType
        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        # If query results are encrypted in Amazon S3, indicates the encryption option used (for example, SSE-KMS or CSE-KMS) and key information.
        class EncryptionConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for EncryptionOption
          def EncryptionOption(value)
            dsl_attribute(:EncryptionOption, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for KmsKey
          def KmsKey(value)
            dsl_attribute(:KmsKey, value)
          end
        end

        # The location in Amazon S3 where query results are stored and the encryption option, if any, used for query results. These are known as "client-side settings". If workgroup settings override client-side settings, then the query uses the workgroup settings.
        class ResultConfiguration < PropertyType
          #   @param [EncryptionConfiguration|JSONable] value
          #     The value to use for EncryptionConfiguration
          # @@overload EncryptionConfiguration(&block)
          #   Set :EncryptionConfiguration from block via instance eval of a new EncryptionConfiguration
          def EncryptionConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:EncryptionConfiguration, value, attr_class: EncryptionConfiguration, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for OutputLocation
          def OutputLocation(value)
            dsl_attribute(:OutputLocation, value)
          end
        end

        # The result configuration information about the queries in this workgroup that will be updated. Includes the updated results location and an updated option for encrypting query results.
        class ResultConfigurationUpdates < PropertyType
          #   @param [EncryptionConfiguration|JSONable] value
          #     The value to use for EncryptionConfiguration
          # @@overload EncryptionConfiguration(&block)
          #   Set :EncryptionConfiguration from block via instance eval of a new EncryptionConfiguration
          def EncryptionConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:EncryptionConfiguration, value, attr_class: EncryptionConfiguration, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for OutputLocation
          def OutputLocation(value)
            dsl_attribute(:OutputLocation, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for RemoveEncryptionConfiguration
          def RemoveEncryptionConfiguration(value)
            dsl_attribute(:RemoveEncryptionConfiguration, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for RemoveOutputLocation
          def RemoveOutputLocation(value)
            dsl_attribute(:RemoveOutputLocation, value)
          end
        end

        # Property Definition WorkGroupConfiguration
        class WorkGroupConfiguration < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for BytesScannedCutoffPerQuery
          def BytesScannedCutoffPerQuery(value)
            dsl_attribute(:BytesScannedCutoffPerQuery, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for EnforceWorkGroupConfiguration
          def EnforceWorkGroupConfiguration(value)
            dsl_attribute(:EnforceWorkGroupConfiguration, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for PublishCloudWatchMetricsEnabled
          def PublishCloudWatchMetricsEnabled(value)
            dsl_attribute(:PublishCloudWatchMetricsEnabled, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for RequesterPaysEnabled
          def RequesterPaysEnabled(value)
            dsl_attribute(:RequesterPaysEnabled, value)
          end

          #   @param [ResultConfiguration|JSONable] value
          #     The value to use for ResultConfiguration
          # @@overload ResultConfiguration(&block)
          #   Set :ResultConfiguration from block via instance eval of a new ResultConfiguration
          def ResultConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:ResultConfiguration, value, attr_class: ResultConfiguration, **value_hash, &block)
          end
        end

        # The configuration information that will be updated for this workgroup, which includes the location in Amazon S3 where query results are stored, the encryption option, if any, used for query results, whether the Amazon CloudWatch Metrics are enabled for the workgroup, whether the workgroup settings override the client-side settings, and the data usage limit for the amount of bytes scanned per query, if it is specified.
        class WorkGroupConfigurationUpdates < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for BytesScannedCutoffPerQuery
          def BytesScannedCutoffPerQuery(value)
            dsl_attribute(:BytesScannedCutoffPerQuery, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for EnforceWorkGroupConfiguration
          def EnforceWorkGroupConfiguration(value)
            dsl_attribute(:EnforceWorkGroupConfiguration, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for PublishCloudWatchMetricsEnabled
          def PublishCloudWatchMetricsEnabled(value)
            dsl_attribute(:PublishCloudWatchMetricsEnabled, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for RequesterPaysEnabled
          def RequesterPaysEnabled(value)
            dsl_attribute(:RequesterPaysEnabled, value)
          end

          #   @param [ResultConfigurationUpdates|JSONable] value
          #     The value to use for ResultConfigurationUpdates
          # @@overload ResultConfigurationUpdates(&block)
          #   Set :ResultConfigurationUpdates from block via instance eval of a new ResultConfigurationUpdates
          def ResultConfigurationUpdates(value = nil, **value_hash, &block)
            dsl_attribute(:ResultConfigurationUpdates, value, attr_class: ResultConfigurationUpdates, **value_hash, &block)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for RemoveBytesScannedCutoffPerQuery
          def RemoveBytesScannedCutoffPerQuery(value)
            dsl_attribute(:RemoveBytesScannedCutoffPerQuery, value)
          end
        end

        #   @param [String|JSONable] value
        #     The workGroup name.
        def Name(value)
          dsl_attribute(:Name, value)
        end

        #   @param [String|JSONable] value
        #     The workgroup description.
        def Description(value)
          dsl_attribute(:Description, value)
        end

        # @param [Array<Tag>|JSONable>] values
        #   One or more tags, separated by commas, that you want to attach to the workgroup as you create it
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    One or more tags, separated by commas, that you want to attach to the workgroup as you create it
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end

        #   @param [WorkGroupConfiguration|JSONable] value
        #     The workgroup configuration
        # @@overload WorkGroupConfiguration(&block)
        #   Set :WorkGroupConfiguration from block via instance eval of a new WorkGroupConfiguration
        def WorkGroupConfiguration(value = nil, **value_hash, &block)
          dsl_attribute(:WorkGroupConfiguration, value, attr_class: WorkGroupConfiguration, **value_hash, &block)
        end

        #   @param [WorkGroupConfigurationUpdates|JSONable] value
        #     The workgroup configuration update object
        # @@overload WorkGroupConfigurationUpdates(&block)
        #   Set :WorkGroupConfigurationUpdates from block via instance eval of a new WorkGroupConfigurationUpdates
        def WorkGroupConfigurationUpdates(value = nil, **value_hash, &block)
          dsl_attribute(:WorkGroupConfigurationUpdates, value, attr_class: WorkGroupConfigurationUpdates, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The date and time the workgroup was created.
        def CreationTime(value)
          dsl_attribute(:CreationTime, value)
        end

        #   @param [String|JSONable] value
        #     The state of the workgroup: ENABLED or DISABLED.
        def State(value)
          dsl_attribute(:State, value)
        end

        #   @param [Boolean|JSONable] value
        #     The option to delete the workgroup and its contents even if the workgroup contains any named queries.
        def RecursiveDeleteOption(value)
          dsl_attribute(:RecursiveDeleteOption, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::Athena::WorkGroup]
    def AWS_Athena_WorkGroup(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::Athena::WorkGroup, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
