# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module SES
      # Resource Type definition for AWS::SES::ConfigurationSetEventDestination
      class ConfigurationSetEventDestination < ResourceType
        # Property Definition EventDestination
        class EventDestination < PropertyType
          #   @param [CloudWatchDestination|JSONable] value
          #     The value to use for CloudWatchDestination
          # @@overload CloudWatchDestination(&block)
          #   Set :CloudWatchDestination from block via instance eval of a new CloudWatchDestination
          def CloudWatchDestination(value = nil, **value_hash, &block)
            dsl_attribute(:CloudWatchDestination, value, attr_class: CloudWatchDestination, **value_hash, &block)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for Enabled
          def Enabled(value)
            dsl_attribute(:Enabled, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for MatchingEventTypes
          def MatchingEventTypes(values)
            dsl_list_attribute(:MatchingEventTypes, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for MatchingEventTypes
          def MatchingEventTyp(value, fn_if: nil)
            dsl_push_attribute(:MatchingEventTypes, value, fn_if: fn_if)
          end

          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end

          #   @param [KinesisFirehoseDestination|JSONable] value
          #     The value to use for KinesisFirehoseDestination
          # @@overload KinesisFirehoseDestination(&block)
          #   Set :KinesisFirehoseDestination from block via instance eval of a new KinesisFirehoseDestination
          def KinesisFirehoseDestination(value = nil, **value_hash, &block)
            dsl_attribute(:KinesisFirehoseDestination, value, attr_class: KinesisFirehoseDestination, **value_hash, &block)
          end
        end

        # Property Definition KinesisFirehoseDestination
        class KinesisFirehoseDestination < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for IAMRoleARN
          def IAMRoleARN(value)
            dsl_attribute(:IAMRoleARN, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for DeliveryStreamARN
          def DeliveryStreamARN(value)
            dsl_attribute(:DeliveryStreamARN, value)
          end
        end

        # Property Definition CloudWatchDestination
        class CloudWatchDestination < PropertyType
          # @param [Array<DimensionConfiguration>|JSONable>] values
          #   The List of values to use for DimensionConfigurations
          def DimensionConfigurations(values)
            dsl_list_attribute(:DimensionConfigurations, values)
          end

          #  @param [DimensionConfiguration|JSONable] value  Append value to the List
          #    The List of values to use for DimensionConfigurations
          # @@overload DimensionConfiguration(&block)
          # Append value to the List from block via instance eval of a new DimensionConfiguration
          def DimensionConfiguration(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:DimensionConfigurations, value, fn_if: fn_if, attr_class: DimensionConfiguration, **value_hash, &block)
          end
        end

        # Property Definition DimensionConfiguration
        class DimensionConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for DimensionValueSource
          def DimensionValueSource(value)
            dsl_attribute(:DimensionValueSource, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for DefaultDimensionValue
          def DefaultDimensionValue(value)
            dsl_attribute(:DefaultDimensionValue, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for DimensionName
          def DimensionName(value)
            dsl_attribute(:DimensionName, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for ConfigurationSetName
        def ConfigurationSetName(value)
          dsl_attribute(:ConfigurationSetName, value)
        end

        #   @param [EventDestination|JSONable] value
        #     The value to use for EventDestination
        # @@overload EventDestination(&block)
        #   Set :EventDestination from block via instance eval of a new EventDestination
        def EventDestination(value = nil, **value_hash, &block)
          dsl_attribute(:EventDestination, value, attr_class: EventDestination, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::SES::ConfigurationSetEventDestination]
    def AWS_SES_ConfigurationSetEventDestination(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::SES::ConfigurationSetEventDestination, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
