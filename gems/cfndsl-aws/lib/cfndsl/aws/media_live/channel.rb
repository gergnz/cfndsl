# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module MediaLive
      # Resource Type definition for AWS::MediaLive::Channel
      class Channel < ResourceType
        # Property Definition InputSpecification
        class InputSpecification < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Codec
          def Codec(value)
            dsl_attribute(:Codec, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for MaximumBitrate
          def MaximumBitrate(value)
            dsl_attribute(:MaximumBitrate, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Resolution
          def Resolution(value)
            dsl_attribute(:Resolution, value)
          end
        end

        # Property Definition AudioSelectorSettings
        class AudioSelectorSettings < PropertyType
          #   @param [AudioLanguageSelection|JSONable] value
          #     The value to use for AudioLanguageSelection
          # @@overload AudioLanguageSelection(&block)
          #   Set :AudioLanguageSelection from block via instance eval of a new AudioLanguageSelection
          def AudioLanguageSelection(value = nil, **value_hash, &block)
            dsl_attribute(:AudioLanguageSelection, value, attr_class: AudioLanguageSelection, **value_hash, &block)
          end

          #   @param [AudioPidSelection|JSONable] value
          #     The value to use for AudioPidSelection
          # @@overload AudioPidSelection(&block)
          #   Set :AudioPidSelection from block via instance eval of a new AudioPidSelection
          def AudioPidSelection(value = nil, **value_hash, &block)
            dsl_attribute(:AudioPidSelection, value, attr_class: AudioPidSelection, **value_hash, &block)
          end
        end

        # Property Definition VideoSelectorProgramId
        class VideoSelectorProgramId < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for ProgramId
          def ProgramId(value)
            dsl_attribute(:ProgramId, value)
          end
        end

        # Property Definition AudioSelector
        class AudioSelector < PropertyType
          #   @param [AudioSelectorSettings|JSONable] value
          #     The value to use for SelectorSettings
          # @@overload SelectorSettings(&block)
          #   Set :SelectorSettings from block via instance eval of a new AudioSelectorSettings
          def SelectorSettings(value = nil, **value_hash, &block)
            dsl_attribute(:SelectorSettings, value, attr_class: AudioSelectorSettings, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end
        end

        # Property Definition Scte27SourceSettings
        class Scte27SourceSettings < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for Pid
          def Pid(value)
            dsl_attribute(:Pid, value)
          end
        end

        # Property Definition MediaPackageOutputDestinationSettings
        class MediaPackageOutputDestinationSettings < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ChannelId
          def ChannelId(value)
            dsl_attribute(:ChannelId, value)
          end
        end

        # Property Definition MultiplexProgramChannelDestinationSettings
        class MultiplexProgramChannelDestinationSettings < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ProgramName
          def ProgramName(value)
            dsl_attribute(:ProgramName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for MultiplexId
          def MultiplexId(value)
            dsl_attribute(:MultiplexId, value)
          end
        end

        # Property Definition OutputDestinationSettings
        class OutputDestinationSettings < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for StreamName
          def StreamName(value)
            dsl_attribute(:StreamName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for PasswordParam
          def PasswordParam(value)
            dsl_attribute(:PasswordParam, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Username
          def Username(value)
            dsl_attribute(:Username, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Url
          def Url(value)
            dsl_attribute(:Url, value)
          end
        end

        # Property Definition HlsInputSettings
        class HlsInputSettings < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for BufferSegments
          def BufferSegments(value)
            dsl_attribute(:BufferSegments, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for RetryInterval
          def RetryInterval(value)
            dsl_attribute(:RetryInterval, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for Retries
          def Retries(value)
            dsl_attribute(:Retries, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for Bandwidth
          def Bandwidth(value)
            dsl_attribute(:Bandwidth, value)
          end
        end

        # Property Definition InputSettings
        class InputSettings < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for DeblockFilter
          def DeblockFilter(value)
            dsl_attribute(:DeblockFilter, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for FilterStrength
          def FilterStrength(value)
            dsl_attribute(:FilterStrength, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for InputFilter
          def InputFilter(value)
            dsl_attribute(:InputFilter, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for SourceEndBehavior
          def SourceEndBehavior(value)
            dsl_attribute(:SourceEndBehavior, value)
          end

          #   @param [VideoSelector|JSONable] value
          #     The value to use for VideoSelector
          # @@overload VideoSelector(&block)
          #   Set :VideoSelector from block via instance eval of a new VideoSelector
          def VideoSelector(value = nil, **value_hash, &block)
            dsl_attribute(:VideoSelector, value, attr_class: VideoSelector, **value_hash, &block)
          end

          # @param [Array<AudioSelector>|JSONable>] values
          #   The List of values to use for AudioSelectors
          def AudioSelectors(values)
            dsl_list_attribute(:AudioSelectors, values)
          end

          #  @param [AudioSelector|JSONable] value  Append value to the List
          #    The List of values to use for AudioSelectors
          # @@overload AudioSelector(&block)
          # Append value to the List from block via instance eval of a new AudioSelector
          def AudioSelector(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:AudioSelectors, value, fn_if: fn_if, attr_class: AudioSelector, **value_hash, &block)
          end

          # @param [Array<CaptionSelector>|JSONable>] values
          #   The List of values to use for CaptionSelectors
          def CaptionSelectors(values)
            dsl_list_attribute(:CaptionSelectors, values)
          end

          #  @param [CaptionSelector|JSONable] value  Append value to the List
          #    The List of values to use for CaptionSelectors
          # @@overload CaptionSelector(&block)
          # Append value to the List from block via instance eval of a new CaptionSelector
          def CaptionSelector(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:CaptionSelectors, value, fn_if: fn_if, attr_class: CaptionSelector, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for DenoiseFilter
          def DenoiseFilter(value)
            dsl_attribute(:DenoiseFilter, value)
          end

          #   @param [NetworkInputSettings|JSONable] value
          #     The value to use for NetworkInputSettings
          # @@overload NetworkInputSettings(&block)
          #   Set :NetworkInputSettings from block via instance eval of a new NetworkInputSettings
          def NetworkInputSettings(value = nil, **value_hash, &block)
            dsl_attribute(:NetworkInputSettings, value, attr_class: NetworkInputSettings, **value_hash, &block)
          end
        end

        # Property Definition EmbeddedSourceSettings
        class EmbeddedSourceSettings < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for Source608ChannelNumber
          def Source608ChannelNumber(value)
            dsl_attribute(:Source608ChannelNumber, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Scte20Detection
          def Scte20Detection(value)
            dsl_attribute(:Scte20Detection, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for Source608TrackNumber
          def Source608TrackNumber(value)
            dsl_attribute(:Source608TrackNumber, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Convert608To708
          def Convert608To708(value)
            dsl_attribute(:Convert608To708, value)
          end
        end

        # Property Definition TeletextSourceSettings
        class TeletextSourceSettings < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for PageNumber
          def PageNumber(value)
            dsl_attribute(:PageNumber, value)
          end
        end

        # Property Definition CaptionSelectorSettings
        class CaptionSelectorSettings < PropertyType
          #   @param [DvbSubSourceSettings|JSONable] value
          #     The value to use for DvbSubSourceSettings
          # @@overload DvbSubSourceSettings(&block)
          #   Set :DvbSubSourceSettings from block via instance eval of a new DvbSubSourceSettings
          def DvbSubSourceSettings(value = nil, **value_hash, &block)
            dsl_attribute(:DvbSubSourceSettings, value, attr_class: DvbSubSourceSettings, **value_hash, &block)
          end

          #   @param [Scte27SourceSettings|JSONable] value
          #     The value to use for Scte27SourceSettings
          # @@overload Scte27SourceSettings(&block)
          #   Set :Scte27SourceSettings from block via instance eval of a new Scte27SourceSettings
          def Scte27SourceSettings(value = nil, **value_hash, &block)
            dsl_attribute(:Scte27SourceSettings, value, attr_class: Scte27SourceSettings, **value_hash, &block)
          end

          #   @param [AribSourceSettings|JSONable] value
          #     The value to use for AribSourceSettings
          # @@overload AribSourceSettings(&block)
          #   Set :AribSourceSettings from block via instance eval of a new AribSourceSettings
          def AribSourceSettings(value = nil, **value_hash, &block)
            dsl_attribute(:AribSourceSettings, value, attr_class: AribSourceSettings, **value_hash, &block)
          end

          #   @param [EmbeddedSourceSettings|JSONable] value
          #     The value to use for EmbeddedSourceSettings
          # @@overload EmbeddedSourceSettings(&block)
          #   Set :EmbeddedSourceSettings from block via instance eval of a new EmbeddedSourceSettings
          def EmbeddedSourceSettings(value = nil, **value_hash, &block)
            dsl_attribute(:EmbeddedSourceSettings, value, attr_class: EmbeddedSourceSettings, **value_hash, &block)
          end

          #   @param [Scte20SourceSettings|JSONable] value
          #     The value to use for Scte20SourceSettings
          # @@overload Scte20SourceSettings(&block)
          #   Set :Scte20SourceSettings from block via instance eval of a new Scte20SourceSettings
          def Scte20SourceSettings(value = nil, **value_hash, &block)
            dsl_attribute(:Scte20SourceSettings, value, attr_class: Scte20SourceSettings, **value_hash, &block)
          end

          #   @param [TeletextSourceSettings|JSONable] value
          #     The value to use for TeletextSourceSettings
          # @@overload TeletextSourceSettings(&block)
          #   Set :TeletextSourceSettings from block via instance eval of a new TeletextSourceSettings
          def TeletextSourceSettings(value = nil, **value_hash, &block)
            dsl_attribute(:TeletextSourceSettings, value, attr_class: TeletextSourceSettings, **value_hash, &block)
          end
        end

        # Property Definition AudioPidSelection
        class AudioPidSelection < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for Pid
          def Pid(value)
            dsl_attribute(:Pid, value)
          end
        end

        # Property Definition InputAttachment
        class InputAttachment < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for InputAttachmentName
          def InputAttachmentName(value)
            dsl_attribute(:InputAttachmentName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for InputId
          def InputId(value)
            dsl_attribute(:InputId, value)
          end

          #   @param [InputSettings|JSONable] value
          #     The value to use for InputSettings
          # @@overload InputSettings(&block)
          #   Set :InputSettings from block via instance eval of a new InputSettings
          def InputSettings(value = nil, **value_hash, &block)
            dsl_attribute(:InputSettings, value, attr_class: InputSettings, **value_hash, &block)
          end
        end

        # Property Definition VideoSelector
        class VideoSelector < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ColorSpaceUsage
          def ColorSpaceUsage(value)
            dsl_attribute(:ColorSpaceUsage, value)
          end

          #   @param [VideoSelectorSettings|JSONable] value
          #     The value to use for SelectorSettings
          # @@overload SelectorSettings(&block)
          #   Set :SelectorSettings from block via instance eval of a new VideoSelectorSettings
          def SelectorSettings(value = nil, **value_hash, &block)
            dsl_attribute(:SelectorSettings, value, attr_class: VideoSelectorSettings, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for ColorSpace
          def ColorSpace(value)
            dsl_attribute(:ColorSpace, value)
          end
        end

        # Property Definition VideoSelectorPid
        class VideoSelectorPid < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for Pid
          def Pid(value)
            dsl_attribute(:Pid, value)
          end
        end

        # Property Definition AribSourceSettings
        class AribSourceSettings < PropertyType
        end

        # Property Definition NetworkInputSettings
        class NetworkInputSettings < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ServerValidation
          def ServerValidation(value)
            dsl_attribute(:ServerValidation, value)
          end

          #   @param [HlsInputSettings|JSONable] value
          #     The value to use for HlsInputSettings
          # @@overload HlsInputSettings(&block)
          #   Set :HlsInputSettings from block via instance eval of a new HlsInputSettings
          def HlsInputSettings(value = nil, **value_hash, &block)
            dsl_attribute(:HlsInputSettings, value, attr_class: HlsInputSettings, **value_hash, &block)
          end
        end

        # Property Definition CaptionSelector
        class CaptionSelector < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for LanguageCode
          def LanguageCode(value)
            dsl_attribute(:LanguageCode, value)
          end

          #   @param [CaptionSelectorSettings|JSONable] value
          #     The value to use for SelectorSettings
          # @@overload SelectorSettings(&block)
          #   Set :SelectorSettings from block via instance eval of a new CaptionSelectorSettings
          def SelectorSettings(value = nil, **value_hash, &block)
            dsl_attribute(:SelectorSettings, value, attr_class: CaptionSelectorSettings, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end
        end

        # Property Definition DvbSubSourceSettings
        class DvbSubSourceSettings < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for Pid
          def Pid(value)
            dsl_attribute(:Pid, value)
          end
        end

        # Property Definition VideoSelectorSettings
        class VideoSelectorSettings < PropertyType
          #   @param [VideoSelectorProgramId|JSONable] value
          #     The value to use for VideoSelectorProgramId
          # @@overload VideoSelectorProgramId(&block)
          #   Set :VideoSelectorProgramId from block via instance eval of a new VideoSelectorProgramId
          def VideoSelectorProgramId(value = nil, **value_hash, &block)
            dsl_attribute(:VideoSelectorProgramId, value, attr_class: VideoSelectorProgramId, **value_hash, &block)
          end

          #   @param [VideoSelectorPid|JSONable] value
          #     The value to use for VideoSelectorPid
          # @@overload VideoSelectorPid(&block)
          #   Set :VideoSelectorPid from block via instance eval of a new VideoSelectorPid
          def VideoSelectorPid(value = nil, **value_hash, &block)
            dsl_attribute(:VideoSelectorPid, value, attr_class: VideoSelectorPid, **value_hash, &block)
          end
        end

        # Property Definition OutputDestination
        class OutputDestination < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Id
          def Id(value)
            dsl_attribute(:Id, value)
          end

          #   @param [MultiplexProgramChannelDestinationSettings|JSONable] value
          #     The value to use for MultiplexSettings
          # @@overload MultiplexSettings(&block)
          #   Set :MultiplexSettings from block via instance eval of a new MultiplexProgramChannelDestinationSettings
          def MultiplexSettings(value = nil, **value_hash, &block)
            dsl_attribute(:MultiplexSettings, value, attr_class: MultiplexProgramChannelDestinationSettings, **value_hash, &block)
          end

          # @param [Array<OutputDestinationSettings>|JSONable>] values
          #   The List of values to use for Settings
          def Settings(values)
            dsl_list_attribute(:Settings, values)
          end

          #  @param [OutputDestinationSettings|JSONable] value  Append value to the List
          #    The List of values to use for Settings
          # @@overload Setting(&block)
          # Append value to the List from block via instance eval of a new OutputDestinationSettings
          def Setting(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Settings, value, fn_if: fn_if, attr_class: OutputDestinationSettings, **value_hash, &block)
          end

          # @param [Array<MediaPackageOutputDestinationSettings>|JSONable>] values
          #   The List of values to use for MediaPackageSettings
          def MediaPackageSettings(values)
            dsl_list_attribute(:MediaPackageSettings, values)
          end

          #  @param [MediaPackageOutputDestinationSettings|JSONable] value  Append value to the List
          #    The List of values to use for MediaPackageSettings
          # @@overload MediaPackageSetting(&block)
          # Append value to the List from block via instance eval of a new MediaPackageOutputDestinationSettings
          def MediaPackageSetting(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:MediaPackageSettings, value, fn_if: fn_if, attr_class: MediaPackageOutputDestinationSettings, **value_hash, &block)
          end
        end

        # Property Definition AudioLanguageSelection
        class AudioLanguageSelection < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for LanguageCode
          def LanguageCode(value)
            dsl_attribute(:LanguageCode, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for LanguageSelectionPolicy
          def LanguageSelectionPolicy(value)
            dsl_attribute(:LanguageSelectionPolicy, value)
          end
        end

        # Property Definition Scte20SourceSettings
        class Scte20SourceSettings < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for Source608ChannelNumber
          def Source608ChannelNumber(value)
            dsl_attribute(:Source608ChannelNumber, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Convert608To708
          def Convert608To708(value)
            dsl_attribute(:Convert608To708, value)
          end
        end

        # @param [Array<InputAttachment>|JSONable>] values
        #   The List of values to use for InputAttachments
        def InputAttachments(values)
          dsl_list_attribute(:InputAttachments, values)
        end

        #  @param [InputAttachment|JSONable] value  Append value to the List
        #    The List of values to use for InputAttachments
        # @@overload InputAttachment(&block)
        # Append value to the List from block via instance eval of a new InputAttachment
        def InputAttachment(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:InputAttachments, value, fn_if: fn_if, attr_class: InputAttachment, **value_hash, &block)
        end

        #   @param [InputSpecification|JSONable] value
        #     The value to use for InputSpecification
        # @@overload InputSpecification(&block)
        #   Set :InputSpecification from block via instance eval of a new InputSpecification
        def InputSpecification(value = nil, **value_hash, &block)
          dsl_attribute(:InputSpecification, value, attr_class: InputSpecification, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for ChannelClass
        def ChannelClass(value)
          dsl_attribute(:ChannelClass, value)
        end

        #   @param [Object|JSONable] value
        #     The value to use for EncoderSettings
        def EncoderSettings(value)
          dsl_attribute(:EncoderSettings, value)
        end

        # @param [Array<OutputDestination>|JSONable>] values
        #   The List of values to use for Destinations
        def Destinations(values)
          dsl_list_attribute(:Destinations, values)
        end

        #  @param [OutputDestination|JSONable] value  Append value to the List
        #    The List of values to use for Destinations
        # @@overload Destination(&block)
        # Append value to the List from block via instance eval of a new OutputDestination
        def Destination(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Destinations, value, fn_if: fn_if, attr_class: OutputDestination, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Arn
        def Arn(value)
          dsl_attribute(:Arn, value)
        end

        # @param [Array<String>|JSONable>] values
        #   The List of values to use for Inputs
        def Inputs(values)
          dsl_list_attribute(:Inputs, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for Inputs
        def Input(value, fn_if: nil)
          dsl_push_attribute(:Inputs, value, fn_if: fn_if)
        end

        #   @param [String|JSONable] value
        #     The value to use for LogLevel
        def LogLevel(value)
          dsl_attribute(:LogLevel, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for RoleArn
        def RoleArn(value)
          dsl_attribute(:RoleArn, value)
        end

        #   @param [Object|JSONable] value
        #     The value to use for Tags
        def Tags(value)
          dsl_attribute(:Tags, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Name
        def Name(value)
          dsl_attribute(:Name, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::MediaLive::Channel]
    def AWS_MediaLive_Channel(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::MediaLive::Channel, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
