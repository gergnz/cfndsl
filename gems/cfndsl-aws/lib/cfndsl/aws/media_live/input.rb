# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module MediaLive
      # Resource Type definition for AWS::MediaLive::Input
      class Input < ResourceType
        # Property Definition MediaConnectFlowRequest
        class MediaConnectFlowRequest < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for FlowArn
          def FlowArn(value)
            dsl_attribute(:FlowArn, value)
          end
        end

        # Property Definition InputDestinationRequest
        class InputDestinationRequest < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for StreamName
          def StreamName(value)
            dsl_attribute(:StreamName, value)
          end
        end

        # Property Definition InputVpcRequest
        class InputVpcRequest < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for SecurityGroupIds
          def SecurityGroupIds(values)
            dsl_list_attribute(:SecurityGroupIds, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for SecurityGroupIds
          def SecurityGroupId(value, fn_if: nil)
            dsl_push_attribute(:SecurityGroupIds, value, fn_if: fn_if)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for SubnetIds
          def SubnetIds(values)
            dsl_list_attribute(:SubnetIds, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for SubnetIds
          def SubnetId(value, fn_if: nil)
            dsl_push_attribute(:SubnetIds, value, fn_if: fn_if)
          end
        end

        # Property Definition InputSourceRequest
        class InputSourceRequest < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Username
          def Username(value)
            dsl_attribute(:Username, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for PasswordParam
          def PasswordParam(value)
            dsl_attribute(:PasswordParam, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Url
          def Url(value)
            dsl_attribute(:Url, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        # @param [Array<InputDestinationRequest>|JSONable>] values
        #   The List of values to use for Destinations
        def Destinations(values)
          dsl_list_attribute(:Destinations, values)
        end

        #  @param [InputDestinationRequest|JSONable] value  Append value to the List
        #    The List of values to use for Destinations
        # @@overload Destination(&block)
        # Append value to the List from block via instance eval of a new InputDestinationRequest
        def Destination(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Destinations, value, fn_if: fn_if, attr_class: InputDestinationRequest, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Arn
        def Arn(value)
          dsl_attribute(:Arn, value)
        end

        # @param [Array<InputSourceRequest>|JSONable>] values
        #   The List of values to use for Sources
        def Sources(values)
          dsl_list_attribute(:Sources, values)
        end

        #  @param [InputSourceRequest|JSONable] value  Append value to the List
        #    The List of values to use for Sources
        # @@overload Sourc(&block)
        # Append value to the List from block via instance eval of a new InputSourceRequest
        def Sourc(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Sources, value, fn_if: fn_if, attr_class: InputSourceRequest, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Type
        def Type(value)
          dsl_attribute(:Type, value)
        end

        #   @param [InputVpcRequest|JSONable] value
        #     The value to use for Vpc
        # @@overload Vpc(&block)
        #   Set :Vpc from block via instance eval of a new InputVpcRequest
        def Vpc(value = nil, **value_hash, &block)
          dsl_attribute(:Vpc, value, attr_class: InputVpcRequest, **value_hash, &block)
        end

        # @param [Array<MediaConnectFlowRequest>|JSONable>] values
        #   The List of values to use for MediaConnectFlows
        def MediaConnectFlows(values)
          dsl_list_attribute(:MediaConnectFlows, values)
        end

        #  @param [MediaConnectFlowRequest|JSONable] value  Append value to the List
        #    The List of values to use for MediaConnectFlows
        # @@overload MediaConnectFlow(&block)
        # Append value to the List from block via instance eval of a new MediaConnectFlowRequest
        def MediaConnectFlow(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:MediaConnectFlows, value, fn_if: fn_if, attr_class: MediaConnectFlowRequest, **value_hash, &block)
        end

        # @param [Array<String>|JSONable>] values
        #   The List of values to use for InputSecurityGroups
        def InputSecurityGroups(values)
          dsl_list_attribute(:InputSecurityGroups, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for InputSecurityGroups
        def InputSecurityGroup(value, fn_if: nil)
          dsl_push_attribute(:InputSecurityGroups, value, fn_if: fn_if)
        end

        #   @param [String|JSONable] value
        #     The value to use for RoleArn
        def RoleArn(value)
          dsl_attribute(:RoleArn, value)
        end

        #   @param [Object|JSONable] value
        #     The value to use for Tags
        def Tags(value)
          dsl_attribute(:Tags, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Name
        def Name(value)
          dsl_attribute(:Name, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::MediaLive::Input]
    def AWS_MediaLive_Input(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::MediaLive::Input, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
