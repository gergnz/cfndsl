# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module MediaStore
      # Resource Type definition for AWS::MediaStore::Container
      class Container < ResourceType
        # Property Definition MetricPolicy
        class MetricPolicy < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ContainerLevelMetrics
          def ContainerLevelMetrics(value)
            dsl_attribute(:ContainerLevelMetrics, value)
          end

          # @param [Array<MetricPolicyRule>|JSONable>] values
          #   The List of values to use for MetricPolicyRules
          def MetricPolicyRules(values)
            dsl_list_attribute(:MetricPolicyRules, values)
          end

          #  @param [MetricPolicyRule|JSONable] value  Append value to the List
          #    The List of values to use for MetricPolicyRules
          # @@overload MetricPolicyRule(&block)
          # Append value to the List from block via instance eval of a new MetricPolicyRule
          def MetricPolicyRule(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:MetricPolicyRules, value, fn_if: fn_if, attr_class: MetricPolicyRule, **value_hash, &block)
          end
        end

        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end
        end

        # Property Definition MetricPolicyRule
        class MetricPolicyRule < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ObjectGroupName
          def ObjectGroupName(value)
            dsl_attribute(:ObjectGroupName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ObjectGroup
          def ObjectGroup(value)
            dsl_attribute(:ObjectGroup, value)
          end
        end

        # Property Definition CorsRule
        class CorsRule < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for AllowedMethods
          def AllowedMethods(values)
            dsl_list_attribute(:AllowedMethods, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for AllowedMethods
          def AllowedMethod(value, fn_if: nil)
            dsl_push_attribute(:AllowedMethods, value, fn_if: fn_if)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for AllowedOrigins
          def AllowedOrigins(values)
            dsl_list_attribute(:AllowedOrigins, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for AllowedOrigins
          def AllowedOrigin(value, fn_if: nil)
            dsl_push_attribute(:AllowedOrigins, value, fn_if: fn_if)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for ExposeHeaders
          def ExposeHeaders(values)
            dsl_list_attribute(:ExposeHeaders, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for ExposeHeaders
          def ExposeHeader(value, fn_if: nil)
            dsl_push_attribute(:ExposeHeaders, value, fn_if: fn_if)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for MaxAgeSeconds
          def MaxAgeSeconds(value)
            dsl_attribute(:MaxAgeSeconds, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for AllowedHeaders
          def AllowedHeaders(values)
            dsl_list_attribute(:AllowedHeaders, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for AllowedHeaders
          def AllowedHeader(value, fn_if: nil)
            dsl_push_attribute(:AllowedHeaders, value, fn_if: fn_if)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for Policy
        def Policy(value)
          dsl_attribute(:Policy, value)
        end

        #   @param [MetricPolicy|JSONable] value
        #     The value to use for MetricPolicy
        # @@overload MetricPolicy(&block)
        #   Set :MetricPolicy from block via instance eval of a new MetricPolicy
        def MetricPolicy(value = nil, **value_hash, &block)
          dsl_attribute(:MetricPolicy, value, attr_class: MetricPolicy, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Endpoint
        def Endpoint(value)
          dsl_attribute(:Endpoint, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for ContainerName
        def ContainerName(value)
          dsl_attribute(:ContainerName, value)
        end

        # @param [Array<CorsRule>|JSONable>] values
        #   The List of values to use for CorsPolicy
        def CorsPolicies(values)
          dsl_list_attribute(:CorsPolicy, values)
        end

        #  @param [CorsRule|JSONable] value  Append value to the List
        #    The List of values to use for CorsPolicy
        # @@overload CorsPolicy(&block)
        # Append value to the List from block via instance eval of a new CorsRule
        def CorsPolicy(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:CorsPolicy, value, fn_if: fn_if, attr_class: CorsRule, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for LifecyclePolicy
        def LifecyclePolicy(value)
          dsl_attribute(:LifecyclePolicy, value)
        end

        #   @param [Boolean|JSONable] value
        #     The value to use for AccessLoggingEnabled
        def AccessLoggingEnabled(value)
          dsl_attribute(:AccessLoggingEnabled, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        # @param [Array<Tag>|JSONable>] values
        #   The List of values to use for Tags
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    The List of values to use for Tags
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::MediaStore::Container]
    def AWS_MediaStore_Container(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::MediaStore::Container, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
