# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module Greengrass
      # Resource Type definition for AWS::Greengrass::FunctionDefinitionVersion
      class FunctionDefinitionVersion < ResourceType
        # Property Definition DefaultConfig
        class DefaultConfig < PropertyType
          #   @param [Execution|JSONable] value
          #     The value to use for Execution
          # @@overload Execution(&block)
          #   Set :Execution from block via instance eval of a new Execution
          def Execution(value = nil, **value_hash, &block)
            dsl_attribute(:Execution, value, attr_class: Execution, **value_hash, &block)
          end
        end

        # Property Definition Function
        class Function < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for FunctionArn
          def FunctionArn(value)
            dsl_attribute(:FunctionArn, value)
          end

          #   @param [FunctionConfiguration|JSONable] value
          #     The value to use for FunctionConfiguration
          # @@overload FunctionConfiguration(&block)
          #   Set :FunctionConfiguration from block via instance eval of a new FunctionConfiguration
          def FunctionConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:FunctionConfiguration, value, attr_class: FunctionConfiguration, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for Id
          def Id(value)
            dsl_attribute(:Id, value)
          end
        end

        # Property Definition Execution
        class Execution < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for IsolationMode
          def IsolationMode(value)
            dsl_attribute(:IsolationMode, value)
          end

          #   @param [RunAs|JSONable] value
          #     The value to use for RunAs
          # @@overload RunAs(&block)
          #   Set :RunAs from block via instance eval of a new RunAs
          def RunAs(value = nil, **value_hash, &block)
            dsl_attribute(:RunAs, value, attr_class: RunAs, **value_hash, &block)
          end
        end

        # Property Definition FunctionConfiguration
        class FunctionConfiguration < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for MemorySize
          def MemorySize(value)
            dsl_attribute(:MemorySize, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for Pinned
          def Pinned(value)
            dsl_attribute(:Pinned, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ExecArgs
          def ExecArgs(value)
            dsl_attribute(:ExecArgs, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for Timeout
          def Timeout(value)
            dsl_attribute(:Timeout, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for EncodingType
          def EncodingType(value)
            dsl_attribute(:EncodingType, value)
          end

          #   @param [Environment|JSONable] value
          #     The value to use for Environment
          # @@overload Environment(&block)
          #   Set :Environment from block via instance eval of a new Environment
          def Environment(value = nil, **value_hash, &block)
            dsl_attribute(:Environment, value, attr_class: Environment, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for Executable
          def Executable(value)
            dsl_attribute(:Executable, value)
          end
        end

        # Property Definition RunAs
        class RunAs < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for Uid
          def Uid(value)
            dsl_attribute(:Uid, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for Gid
          def Gid(value)
            dsl_attribute(:Gid, value)
          end
        end

        # Property Definition Environment
        class Environment < PropertyType
          #   @param [Object|JSONable] value
          #     The value to use for Variables
          def Variables(value)
            dsl_attribute(:Variables, value)
          end

          #   @param [Execution|JSONable] value
          #     The value to use for Execution
          # @@overload Execution(&block)
          #   Set :Execution from block via instance eval of a new Execution
          def Execution(value = nil, **value_hash, &block)
            dsl_attribute(:Execution, value, attr_class: Execution, **value_hash, &block)
          end

          # @param [Array<ResourceAccessPolicy>|JSONable>] values
          #   The List of values to use for ResourceAccessPolicies
          def ResourceAccessPolicies(values)
            dsl_list_attribute(:ResourceAccessPolicies, values)
          end

          #  @param [ResourceAccessPolicy|JSONable] value  Append value to the List
          #    The List of values to use for ResourceAccessPolicies
          # @@overload ResourceAccessPolicy(&block)
          # Append value to the List from block via instance eval of a new ResourceAccessPolicy
          def ResourceAccessPolicy(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:ResourceAccessPolicies, value, fn_if: fn_if, attr_class: ResourceAccessPolicy, **value_hash, &block)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for AccessSysfs
          def AccessSysfs(value)
            dsl_attribute(:AccessSysfs, value)
          end
        end

        # Property Definition ResourceAccessPolicy
        class ResourceAccessPolicy < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ResourceId
          def ResourceId(value)
            dsl_attribute(:ResourceId, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Permission
          def Permission(value)
            dsl_attribute(:Permission, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [DefaultConfig|JSONable] value
        #     The value to use for DefaultConfig
        # @@overload DefaultConfig(&block)
        #   Set :DefaultConfig from block via instance eval of a new DefaultConfig
        def DefaultConfig(value = nil, **value_hash, &block)
          dsl_attribute(:DefaultConfig, value, attr_class: DefaultConfig, **value_hash, &block)
        end

        # @param [Array<Function>|JSONable>] values
        #   The List of values to use for Functions
        def Functions(values)
          dsl_list_attribute(:Functions, values)
        end

        #  @param [Function|JSONable] value  Append value to the List
        #    The List of values to use for Functions
        # @@overload Function(&block)
        # Append value to the List from block via instance eval of a new Function
        def Function(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Functions, value, fn_if: fn_if, attr_class: Function, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for FunctionDefinitionId
        def FunctionDefinitionId(value)
          dsl_attribute(:FunctionDefinitionId, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::Greengrass::FunctionDefinitionVersion]
    def AWS_Greengrass_FunctionDefinitionVersion(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::Greengrass::FunctionDefinitionVersion, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
