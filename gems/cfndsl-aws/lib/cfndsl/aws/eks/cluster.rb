# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module EKS
      # Resource Type definition for AWS::EKS::Cluster
      class Cluster < ResourceType
        # Property Definition EncryptionConfig
        class EncryptionConfig < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Resources
          def Resources(values)
            dsl_list_attribute(:Resources, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Resources
          def Resourc(value, fn_if: nil)
            dsl_push_attribute(:Resources, value, fn_if: fn_if)
          end

          #   @param [Provider|JSONable] value
          #     The value to use for Provider
          # @@overload Provider(&block)
          #   Set :Provider from block via instance eval of a new Provider
          def Provider(value = nil, **value_hash, &block)
            dsl_attribute(:Provider, value, attr_class: Provider, **value_hash, &block)
          end
        end

        # Property Definition ResourcesVpcConfig
        class ResourcesVpcConfig < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for SecurityGroupIds
          def SecurityGroupIds(values)
            dsl_list_attribute(:SecurityGroupIds, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for SecurityGroupIds
          def SecurityGroupId(value, fn_if: nil)
            dsl_push_attribute(:SecurityGroupIds, value, fn_if: fn_if)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for SubnetIds
          def SubnetIds(values)
            dsl_list_attribute(:SubnetIds, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for SubnetIds
          def SubnetId(value, fn_if: nil)
            dsl_push_attribute(:SubnetIds, value, fn_if: fn_if)
          end
        end

        # Property Definition Provider
        class Provider < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for KeyArn
          def KeyArn(value)
            dsl_attribute(:KeyArn, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for Endpoint
        def Endpoint(value)
          dsl_attribute(:Endpoint, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Version
        def Version(value)
          dsl_attribute(:Version, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for ClusterSecurityGroupId
        def ClusterSecurityGroupId(value)
          dsl_attribute(:ClusterSecurityGroupId, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for EncryptionConfigKeyArn
        def EncryptionConfigKeyArn(value)
          dsl_attribute(:EncryptionConfigKeyArn, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Arn
        def Arn(value)
          dsl_attribute(:Arn, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for CertificateAuthorityData
        def CertificateAuthorityData(value)
          dsl_attribute(:CertificateAuthorityData, value)
        end

        # @param [Array<EncryptionConfig>|JSONable>] values
        #   The List of values to use for EncryptionConfig
        def EncryptionConfigs(values)
          dsl_list_attribute(:EncryptionConfig, values)
        end

        #  @param [EncryptionConfig|JSONable] value  Append value to the List
        #    The List of values to use for EncryptionConfig
        # @@overload EncryptionConfig(&block)
        # Append value to the List from block via instance eval of a new EncryptionConfig
        def EncryptionConfig(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:EncryptionConfig, value, fn_if: fn_if, attr_class: EncryptionConfig, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for RoleArn
        def RoleArn(value)
          dsl_attribute(:RoleArn, value)
        end

        #   @param [ResourcesVpcConfig|JSONable] value
        #     The value to use for ResourcesVpcConfig
        # @@overload ResourcesVpcConfig(&block)
        #   Set :ResourcesVpcConfig from block via instance eval of a new ResourcesVpcConfig
        def ResourcesVpcConfig(value = nil, **value_hash, &block)
          dsl_attribute(:ResourcesVpcConfig, value, attr_class: ResourcesVpcConfig, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Name
        def Name(value)
          dsl_attribute(:Name, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::EKS::Cluster]
    def AWS_EKS_Cluster(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::EKS::Cluster, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
