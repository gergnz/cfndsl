# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module EKS
      # Resource Schema for AWS::EKS::FargateProfile
      # @see https://github.com/aws-cloudformation/aws-cloudformation-resource-providers-eks.git
      class FargateProfile < ResourceType
        # A key-value pair to associate with a resource.
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
          def Key(value)
            dsl_attribute(:Key, value)
          end

          #   @param [String|JSONable] value
          #     The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        # Property Definition Selector
        class Selector < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Namespace
          def Namespace(value)
            dsl_attribute(:Namespace, value)
          end

          # @param [Array<Label>|JSONable>] values
          #   The List of values to use for Labels
          def Labels(values)
            dsl_list_attribute(:Labels, values)
          end

          #  @param [Label|JSONable] value  Append value to the List
          #    The List of values to use for Labels
          # @@overload Label(&block)
          # Append value to the List from block via instance eval of a new Label
          def Label(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Labels, value, fn_if: fn_if, attr_class: Label, **value_hash, &block)
          end
        end

        # A key-value pair to associate with a pod.
        class Label < PropertyType
          #   @param [String|JSONable] value
          #     The key name of the label.
          def Key(value)
            dsl_attribute(:Key, value)
          end

          #   @param [String|JSONable] value
          #     The value for the label.
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        #   @param [String|JSONable] value
        #     Name of the Cluster
        def ClusterName(value)
          dsl_attribute(:ClusterName, value)
        end

        #   @param [String|JSONable] value
        #     Name of FargateProfile
        def FargateProfileName(value)
          dsl_attribute(:FargateProfileName, value)
        end

        #   @param [String|JSONable] value
        #     The IAM policy arn for pods
        def PodExecutionRoleArn(value)
          dsl_attribute(:PodExecutionRoleArn, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Arn
        def Arn(value)
          dsl_attribute(:Arn, value)
        end

        # @param [Array<String>|JSONable>] values
        #   The List of values to use for Subnets
        def Subnets(values)
          dsl_list_attribute(:Subnets, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for Subnets
        def Subnet(value, fn_if: nil)
          dsl_push_attribute(:Subnets, value, fn_if: fn_if)
        end

        # @param [Array<Selector>|JSONable>] values
        #   The List of values to use for Selectors
        def Selectors(values)
          dsl_list_attribute(:Selectors, values)
        end

        #  @param [Selector|JSONable] value  Append value to the List
        #    The List of values to use for Selectors
        # @@overload Selector(&block)
        # Append value to the List from block via instance eval of a new Selector
        def Selector(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Selectors, value, fn_if: fn_if, attr_class: Selector, **value_hash, &block)
        end

        # @param [Array<Tag>|JSONable>] values
        #   An array of key-value pairs to apply to this resource.
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    An array of key-value pairs to apply to this resource.
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::EKS::FargateProfile]
    def AWS_EKS_FargateProfile(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::EKS::FargateProfile, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
