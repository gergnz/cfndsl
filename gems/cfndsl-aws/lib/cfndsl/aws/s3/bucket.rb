# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module S3
      # Resource Type definition for AWS::S3::Bucket
      class Bucket < ResourceType
        # Property Definition DefaultRetention
        class DefaultRetention < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for Years
          def Years(value)
            dsl_attribute(:Years, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for Days
          def Days(value)
            dsl_attribute(:Days, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Mode
          def Mode(value)
            dsl_attribute(:Mode, value)
          end
        end

        # Property Definition SourceSelectionCriteria
        class SourceSelectionCriteria < PropertyType
          #   @param [SseKmsEncryptedObjects|JSONable] value
          #     The value to use for SseKmsEncryptedObjects
          # @@overload SseKmsEncryptedObjects(&block)
          #   Set :SseKmsEncryptedObjects from block via instance eval of a new SseKmsEncryptedObjects
          def SseKmsEncryptedObjects(value = nil, **value_hash, &block)
            dsl_attribute(:SseKmsEncryptedObjects, value, attr_class: SseKmsEncryptedObjects, **value_hash, &block)
          end
        end

        # Property Definition ReplicationTimeValue
        class ReplicationTimeValue < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for Minutes
          def Minutes(value)
            dsl_attribute(:Minutes, value)
          end
        end

        # Property Definition FilterRule
        class FilterRule < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end
        end

        # Property Definition ReplicationRule
        class ReplicationRule < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Status
          def Status(value)
            dsl_attribute(:Status, value)
          end

          #   @param [ReplicationDestination|JSONable] value
          #     The value to use for Destination
          # @@overload Destination(&block)
          #   Set :Destination from block via instance eval of a new ReplicationDestination
          def Destination(value = nil, **value_hash, &block)
            dsl_attribute(:Destination, value, attr_class: ReplicationDestination, **value_hash, &block)
          end

          #   @param [ReplicationRuleFilter|JSONable] value
          #     The value to use for Filter
          # @@overload Filter(&block)
          #   Set :Filter from block via instance eval of a new ReplicationRuleFilter
          def Filter(value = nil, **value_hash, &block)
            dsl_attribute(:Filter, value, attr_class: ReplicationRuleFilter, **value_hash, &block)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for Priority
          def Priority(value)
            dsl_attribute(:Priority, value)
          end

          #   @param [SourceSelectionCriteria|JSONable] value
          #     The value to use for SourceSelectionCriteria
          # @@overload SourceSelectionCriteria(&block)
          #   Set :SourceSelectionCriteria from block via instance eval of a new SourceSelectionCriteria
          def SourceSelectionCriteria(value = nil, **value_hash, &block)
            dsl_attribute(:SourceSelectionCriteria, value, attr_class: SourceSelectionCriteria, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for Id
          def Id(value)
            dsl_attribute(:Id, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Prefix
          def Prefix(value)
            dsl_attribute(:Prefix, value)
          end

          #   @param [DeleteMarkerReplication|JSONable] value
          #     The value to use for DeleteMarkerReplication
          # @@overload DeleteMarkerReplication(&block)
          #   Set :DeleteMarkerReplication from block via instance eval of a new DeleteMarkerReplication
          def DeleteMarkerReplication(value = nil, **value_hash, &block)
            dsl_attribute(:DeleteMarkerReplication, value, attr_class: DeleteMarkerReplication, **value_hash, &block)
          end
        end

        # Property Definition AccelerateConfiguration
        class AccelerateConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for AccelerationStatus
          def AccelerationStatus(value)
            dsl_attribute(:AccelerationStatus, value)
          end
        end

        # Property Definition Metrics
        class Metrics < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Status
          def Status(value)
            dsl_attribute(:Status, value)
          end

          #   @param [ReplicationTimeValue|JSONable] value
          #     The value to use for EventThreshold
          # @@overload EventThreshold(&block)
          #   Set :EventThreshold from block via instance eval of a new ReplicationTimeValue
          def EventThreshold(value = nil, **value_hash, &block)
            dsl_attribute(:EventThreshold, value, attr_class: ReplicationTimeValue, **value_hash, &block)
          end
        end

        # Property Definition RoutingRuleCondition
        class RoutingRuleCondition < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for KeyPrefixEquals
          def KeyPrefixEquals(value)
            dsl_attribute(:KeyPrefixEquals, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for HttpErrorCodeReturnedEquals
          def HttpErrorCodeReturnedEquals(value)
            dsl_attribute(:HttpErrorCodeReturnedEquals, value)
          end
        end

        # Property Definition RoutingRule
        class RoutingRule < PropertyType
          #   @param [RedirectRule|JSONable] value
          #     The value to use for RedirectRule
          # @@overload RedirectRule(&block)
          #   Set :RedirectRule from block via instance eval of a new RedirectRule
          def RedirectRule(value = nil, **value_hash, &block)
            dsl_attribute(:RedirectRule, value, attr_class: RedirectRule, **value_hash, &block)
          end

          #   @param [RoutingRuleCondition|JSONable] value
          #     The value to use for RoutingRuleCondition
          # @@overload RoutingRuleCondition(&block)
          #   Set :RoutingRuleCondition from block via instance eval of a new RoutingRuleCondition
          def RoutingRuleCondition(value = nil, **value_hash, &block)
            dsl_attribute(:RoutingRuleCondition, value, attr_class: RoutingRuleCondition, **value_hash, &block)
          end
        end

        # Property Definition DeleteMarkerReplication
        class DeleteMarkerReplication < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Status
          def Status(value)
            dsl_attribute(:Status, value)
          end
        end

        # Property Definition NotificationFilter
        class NotificationFilter < PropertyType
          #   @param [S3KeyFilter|JSONable] value
          #     The value to use for S3Key
          # @@overload S3Key(&block)
          #   Set :S3Key from block via instance eval of a new S3KeyFilter
          def S3Key(value = nil, **value_hash, &block)
            dsl_attribute(:S3Key, value, attr_class: S3KeyFilter, **value_hash, &block)
          end
        end

        # Property Definition ReplicationConfiguration
        class ReplicationConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Role
          def Role(value)
            dsl_attribute(:Role, value)
          end

          # @param [Array<ReplicationRule>|JSONable>] values
          #   The List of values to use for Rules
          def Rules(values)
            dsl_list_attribute(:Rules, values)
          end

          #  @param [ReplicationRule|JSONable] value  Append value to the List
          #    The List of values to use for Rules
          # @@overload Rule(&block)
          # Append value to the List from block via instance eval of a new ReplicationRule
          def Rule(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Rules, value, fn_if: fn_if, attr_class: ReplicationRule, **value_hash, &block)
          end
        end

        # Property Definition ServerSideEncryptionRule
        class ServerSideEncryptionRule < PropertyType
          #   @param [ServerSideEncryptionByDefault|JSONable] value
          #     The value to use for ServerSideEncryptionByDefault
          # @@overload ServerSideEncryptionByDefault(&block)
          #   Set :ServerSideEncryptionByDefault from block via instance eval of a new ServerSideEncryptionByDefault
          def ServerSideEncryptionByDefault(value = nil, **value_hash, &block)
            dsl_attribute(:ServerSideEncryptionByDefault, value, attr_class: ServerSideEncryptionByDefault, **value_hash, &block)
          end
        end

        # Property Definition ReplicationDestination
        class ReplicationDestination < PropertyType
          #   @param [AccessControlTranslation|JSONable] value
          #     The value to use for AccessControlTranslation
          # @@overload AccessControlTranslation(&block)
          #   Set :AccessControlTranslation from block via instance eval of a new AccessControlTranslation
          def AccessControlTranslation(value = nil, **value_hash, &block)
            dsl_attribute(:AccessControlTranslation, value, attr_class: AccessControlTranslation, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for Account
          def Account(value)
            dsl_attribute(:Account, value)
          end

          #   @param [Metrics|JSONable] value
          #     The value to use for Metrics
          # @@overload Metrics(&block)
          #   Set :Metrics from block via instance eval of a new Metrics
          def Metrics(value = nil, **value_hash, &block)
            dsl_attribute(:Metrics, value, attr_class: Metrics, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for Bucket
          def Bucket(value)
            dsl_attribute(:Bucket, value)
          end

          #   @param [EncryptionConfiguration|JSONable] value
          #     The value to use for EncryptionConfiguration
          # @@overload EncryptionConfiguration(&block)
          #   Set :EncryptionConfiguration from block via instance eval of a new EncryptionConfiguration
          def EncryptionConfiguration(value = nil, **value_hash, &block)
            dsl_attribute(:EncryptionConfiguration, value, attr_class: EncryptionConfiguration, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for StorageClass
          def StorageClass(value)
            dsl_attribute(:StorageClass, value)
          end

          #   @param [ReplicationTime|JSONable] value
          #     The value to use for ReplicationTime
          # @@overload ReplicationTime(&block)
          #   Set :ReplicationTime from block via instance eval of a new ReplicationTime
          def ReplicationTime(value = nil, **value_hash, &block)
            dsl_attribute(:ReplicationTime, value, attr_class: ReplicationTime, **value_hash, &block)
          end
        end

        # Property Definition CorsRule
        class CorsRule < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for ExposedHeaders
          def ExposedHeaders(values)
            dsl_list_attribute(:ExposedHeaders, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for ExposedHeaders
          def ExposedHeader(value, fn_if: nil)
            dsl_push_attribute(:ExposedHeaders, value, fn_if: fn_if)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for AllowedMethods
          def AllowedMethods(values)
            dsl_list_attribute(:AllowedMethods, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for AllowedMethods
          def AllowedMethod(value, fn_if: nil)
            dsl_push_attribute(:AllowedMethods, value, fn_if: fn_if)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for AllowedOrigins
          def AllowedOrigins(values)
            dsl_list_attribute(:AllowedOrigins, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for AllowedOrigins
          def AllowedOrigin(value, fn_if: nil)
            dsl_push_attribute(:AllowedOrigins, value, fn_if: fn_if)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for AllowedHeaders
          def AllowedHeaders(values)
            dsl_list_attribute(:AllowedHeaders, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for AllowedHeaders
          def AllowedHeader(value, fn_if: nil)
            dsl_push_attribute(:AllowedHeaders, value, fn_if: fn_if)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for MaxAge
          def MaxAge(value)
            dsl_attribute(:MaxAge, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Id
          def Id(value)
            dsl_attribute(:Id, value)
          end
        end

        # Property Definition AccessControlTranslation
        class AccessControlTranslation < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Owner
          def Owner(value)
            dsl_attribute(:Owner, value)
          end
        end

        # Property Definition ObjectLockRule
        class ObjectLockRule < PropertyType
          #   @param [DefaultRetention|JSONable] value
          #     The value to use for DefaultRetention
          # @@overload DefaultRetention(&block)
          #   Set :DefaultRetention from block via instance eval of a new DefaultRetention
          def DefaultRetention(value = nil, **value_hash, &block)
            dsl_attribute(:DefaultRetention, value, attr_class: DefaultRetention, **value_hash, &block)
          end
        end

        # Property Definition Rule
        class Rule < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Status
          def Status(value)
            dsl_attribute(:Status, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for NoncurrentVersionExpirationInDays
          def NoncurrentVersionExpirationInDays(value)
            dsl_attribute(:NoncurrentVersionExpirationInDays, value)
          end

          #  @param [Transition|JSONable] value  Append value to the List
          #    The List of values to use for Transitions
          # @@overload Transitions(&block)
          # Append value to the List from block via instance eval of a new Transition
          def Transitions(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Transitions, value, fn_if: fn_if, attr_class: Transition, **value_hash, &block)
          end

          # @param [Array<TagFilter>|JSONable>] values
          #   The List of values to use for TagFilters
          def TagFilters(values)
            dsl_list_attribute(:TagFilters, values)
          end

          #  @param [TagFilter|JSONable] value  Append value to the List
          #    The List of values to use for TagFilters
          # @@overload TagFilter(&block)
          # Append value to the List from block via instance eval of a new TagFilter
          def TagFilter(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:TagFilters, value, fn_if: fn_if, attr_class: TagFilter, **value_hash, &block)
          end

          #  @param [NoncurrentVersionTransition|JSONable] value  Append value to the List
          #    The List of values to use for NoncurrentVersionTransitions
          # @@overload NoncurrentVersionTransitions(&block)
          # Append value to the List from block via instance eval of a new NoncurrentVersionTransition
          def NoncurrentVersionTransitions(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:NoncurrentVersionTransitions, value, fn_if: fn_if, attr_class: NoncurrentVersionTransition, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for Prefix
          def Prefix(value)
            dsl_attribute(:Prefix, value)
          end

          #   @param [NoncurrentVersionTransition|JSONable] value
          #     The value to use for NoncurrentVersionTransition
          # @@overload NoncurrentVersionTransition(&block)
          #   Set :NoncurrentVersionTransition from block via instance eval of a new NoncurrentVersionTransition
          def NoncurrentVersionTransition(value = nil, **value_hash, &block)
            dsl_attribute(:NoncurrentVersionTransition, value, attr_class: NoncurrentVersionTransition, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for ExpirationDate
          def ExpirationDate(value)
            dsl_attribute(:ExpirationDate, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for ExpirationInDays
          def ExpirationInDays(value)
            dsl_attribute(:ExpirationInDays, value)
          end

          #   @param [Transition|JSONable] value
          #     The value to use for Transition
          # @@overload Transition(&block)
          #   Set :Transition from block via instance eval of a new Transition
          def Transition(value = nil, **value_hash, &block)
            dsl_attribute(:Transition, value, attr_class: Transition, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for Id
          def Id(value)
            dsl_attribute(:Id, value)
          end

          #   @param [AbortIncompleteMultipartUpload|JSONable] value
          #     The value to use for AbortIncompleteMultipartUpload
          # @@overload AbortIncompleteMultipartUpload(&block)
          #   Set :AbortIncompleteMultipartUpload from block via instance eval of a new AbortIncompleteMultipartUpload
          def AbortIncompleteMultipartUpload(value = nil, **value_hash, &block)
            dsl_attribute(:AbortIncompleteMultipartUpload, value, attr_class: AbortIncompleteMultipartUpload, **value_hash, &block)
          end
        end

        # Property Definition S3KeyFilter
        class S3KeyFilter < PropertyType
          # @param [Array<FilterRule>|JSONable>] values
          #   The List of values to use for Rules
          def Rules(values)
            dsl_list_attribute(:Rules, values)
          end

          #  @param [FilterRule|JSONable] value  Append value to the List
          #    The List of values to use for Rules
          # @@overload Rule(&block)
          # Append value to the List from block via instance eval of a new FilterRule
          def Rule(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Rules, value, fn_if: fn_if, attr_class: FilterRule, **value_hash, &block)
          end
        end

        # Property Definition AnalyticsConfiguration
        class AnalyticsConfiguration < PropertyType
          # @param [Array<TagFilter>|JSONable>] values
          #   The List of values to use for TagFilters
          def TagFilters(values)
            dsl_list_attribute(:TagFilters, values)
          end

          #  @param [TagFilter|JSONable] value  Append value to the List
          #    The List of values to use for TagFilters
          # @@overload TagFilter(&block)
          # Append value to the List from block via instance eval of a new TagFilter
          def TagFilter(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:TagFilters, value, fn_if: fn_if, attr_class: TagFilter, **value_hash, &block)
          end

          #   @param [StorageClassAnalysis|JSONable] value
          #     The value to use for StorageClassAnalysis
          # @@overload StorageClassAnalysis(&block)
          #   Set :StorageClassAnalysis from block via instance eval of a new StorageClassAnalysis
          def StorageClassAnalysis(value = nil, **value_hash, &block)
            dsl_attribute(:StorageClassAnalysis, value, attr_class: StorageClassAnalysis, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for Id
          def Id(value)
            dsl_attribute(:Id, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Prefix
          def Prefix(value)
            dsl_attribute(:Prefix, value)
          end
        end

        # Property Definition Destination
        class Destination < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for BucketArn
          def BucketArn(value)
            dsl_attribute(:BucketArn, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for BucketAccountId
          def BucketAccountId(value)
            dsl_attribute(:BucketAccountId, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Format
          def Format(value)
            dsl_attribute(:Format, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Prefix
          def Prefix(value)
            dsl_attribute(:Prefix, value)
          end
        end

        # Property Definition RedirectAllRequestsTo
        class RedirectAllRequestsTo < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Protocol
          def Protocol(value)
            dsl_attribute(:Protocol, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for HostName
          def HostName(value)
            dsl_attribute(:HostName, value)
          end
        end

        # Property Definition TagFilter
        class TagFilter < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end
        end

        # Property Definition WebsiteConfiguration
        class WebsiteConfiguration < PropertyType
          # @param [Array<RoutingRule>|JSONable>] values
          #   The List of values to use for RoutingRules
          def RoutingRules(values)
            dsl_list_attribute(:RoutingRules, values)
          end

          #  @param [RoutingRule|JSONable] value  Append value to the List
          #    The List of values to use for RoutingRules
          # @@overload RoutingRule(&block)
          # Append value to the List from block via instance eval of a new RoutingRule
          def RoutingRule(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:RoutingRules, value, fn_if: fn_if, attr_class: RoutingRule, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for IndexDocument
          def IndexDocument(value)
            dsl_attribute(:IndexDocument, value)
          end

          #   @param [RedirectAllRequestsTo|JSONable] value
          #     The value to use for RedirectAllRequestsTo
          # @@overload RedirectAllRequestsTo(&block)
          #   Set :RedirectAllRequestsTo from block via instance eval of a new RedirectAllRequestsTo
          def RedirectAllRequestsTo(value = nil, **value_hash, &block)
            dsl_attribute(:RedirectAllRequestsTo, value, attr_class: RedirectAllRequestsTo, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for ErrorDocument
          def ErrorDocument(value)
            dsl_attribute(:ErrorDocument, value)
          end
        end

        # Property Definition TopicConfiguration
        class TopicConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Event
          def Event(value)
            dsl_attribute(:Event, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Topic
          def Topic(value)
            dsl_attribute(:Topic, value)
          end

          #   @param [NotificationFilter|JSONable] value
          #     The value to use for Filter
          # @@overload Filter(&block)
          #   Set :Filter from block via instance eval of a new NotificationFilter
          def Filter(value = nil, **value_hash, &block)
            dsl_attribute(:Filter, value, attr_class: NotificationFilter, **value_hash, &block)
          end
        end

        # Property Definition PublicAccessBlockConfiguration
        class PublicAccessBlockConfiguration < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for RestrictPublicBuckets
          def RestrictPublicBuckets(value)
            dsl_attribute(:RestrictPublicBuckets, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for IgnorePublicAcls
          def IgnorePublicAcls(value)
            dsl_attribute(:IgnorePublicAcls, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for BlockPublicPolicy
          def BlockPublicPolicy(value)
            dsl_attribute(:BlockPublicPolicy, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for BlockPublicAcls
          def BlockPublicAcls(value)
            dsl_attribute(:BlockPublicAcls, value)
          end
        end

        # Property Definition NoncurrentVersionTransition
        class NoncurrentVersionTransition < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for StorageClass
          def StorageClass(value)
            dsl_attribute(:StorageClass, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for TransitionInDays
          def TransitionInDays(value)
            dsl_attribute(:TransitionInDays, value)
          end
        end

        # Property Definition StorageClassAnalysis
        class StorageClassAnalysis < PropertyType
          #   @param [DataExport|JSONable] value
          #     The value to use for DataExport
          # @@overload DataExport(&block)
          #   Set :DataExport from block via instance eval of a new DataExport
          def DataExport(value = nil, **value_hash, &block)
            dsl_attribute(:DataExport, value, attr_class: DataExport, **value_hash, &block)
          end
        end

        # Property Definition ServerSideEncryptionByDefault
        class ServerSideEncryptionByDefault < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for SSEAlgorithm
          def SSEAlgorithm(value)
            dsl_attribute(:SSEAlgorithm, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for KMSMasterKeyID
          def KMSMasterKeyID(value)
            dsl_attribute(:KMSMasterKeyID, value)
          end
        end

        # Property Definition MetricsConfiguration
        class MetricsConfiguration < PropertyType
          # @param [Array<TagFilter>|JSONable>] values
          #   The List of values to use for TagFilters
          def TagFilters(values)
            dsl_list_attribute(:TagFilters, values)
          end

          #  @param [TagFilter|JSONable] value  Append value to the List
          #    The List of values to use for TagFilters
          # @@overload TagFilter(&block)
          # Append value to the List from block via instance eval of a new TagFilter
          def TagFilter(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:TagFilters, value, fn_if: fn_if, attr_class: TagFilter, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for Id
          def Id(value)
            dsl_attribute(:Id, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Prefix
          def Prefix(value)
            dsl_attribute(:Prefix, value)
          end
        end

        # Property Definition ObjectLockConfiguration
        class ObjectLockConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ObjectLockEnabled
          def ObjectLockEnabled(value)
            dsl_attribute(:ObjectLockEnabled, value)
          end

          #   @param [ObjectLockRule|JSONable] value
          #     The value to use for Rule
          # @@overload Rule(&block)
          #   Set :Rule from block via instance eval of a new ObjectLockRule
          def Rule(value = nil, **value_hash, &block)
            dsl_attribute(:Rule, value, attr_class: ObjectLockRule, **value_hash, &block)
          end
        end

        # Property Definition LoggingConfiguration
        class LoggingConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for DestinationBucketName
          def DestinationBucketName(value)
            dsl_attribute(:DestinationBucketName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for LogFilePrefix
          def LogFilePrefix(value)
            dsl_attribute(:LogFilePrefix, value)
          end
        end

        # Property Definition LambdaConfiguration
        class LambdaConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Function
          def Function(value)
            dsl_attribute(:Function, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Event
          def Event(value)
            dsl_attribute(:Event, value)
          end

          #   @param [NotificationFilter|JSONable] value
          #     The value to use for Filter
          # @@overload Filter(&block)
          #   Set :Filter from block via instance eval of a new NotificationFilter
          def Filter(value = nil, **value_hash, &block)
            dsl_attribute(:Filter, value, attr_class: NotificationFilter, **value_hash, &block)
          end
        end

        # Property Definition DataExport
        class DataExport < PropertyType
          #   @param [Destination|JSONable] value
          #     The value to use for Destination
          # @@overload Destination(&block)
          #   Set :Destination from block via instance eval of a new Destination
          def Destination(value = nil, **value_hash, &block)
            dsl_attribute(:Destination, value, attr_class: Destination, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for OutputSchemaVersion
          def OutputSchemaVersion(value)
            dsl_attribute(:OutputSchemaVersion, value)
          end
        end

        # Property Definition ReplicationTime
        class ReplicationTime < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Status
          def Status(value)
            dsl_attribute(:Status, value)
          end

          #   @param [ReplicationTimeValue|JSONable] value
          #     The value to use for Time
          # @@overload Time(&block)
          #   Set :Time from block via instance eval of a new ReplicationTimeValue
          def Time(value = nil, **value_hash, &block)
            dsl_attribute(:Time, value, attr_class: ReplicationTimeValue, **value_hash, &block)
          end
        end

        # Property Definition ReplicationRuleFilter
        class ReplicationRuleFilter < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Prefix
          def Prefix(value)
            dsl_attribute(:Prefix, value)
          end

          #   @param [ReplicationRuleAndOperator|JSONable] value
          #     The value to use for And
          # @@overload And(&block)
          #   Set :And from block via instance eval of a new ReplicationRuleAndOperator
          def And(value = nil, **value_hash, &block)
            dsl_attribute(:And, value, attr_class: ReplicationRuleAndOperator, **value_hash, &block)
          end

          #   @param [TagFilter|JSONable] value
          #     The value to use for TagFilter
          # @@overload TagFilter(&block)
          #   Set :TagFilter from block via instance eval of a new TagFilter
          def TagFilter(value = nil, **value_hash, &block)
            dsl_attribute(:TagFilter, value, attr_class: TagFilter, **value_hash, &block)
          end
        end

        # Property Definition RedirectRule
        class RedirectRule < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ReplaceKeyWith
          def ReplaceKeyWith(value)
            dsl_attribute(:ReplaceKeyWith, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for HttpRedirectCode
          def HttpRedirectCode(value)
            dsl_attribute(:HttpRedirectCode, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Protocol
          def Protocol(value)
            dsl_attribute(:Protocol, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for HostName
          def HostName(value)
            dsl_attribute(:HostName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ReplaceKeyPrefixWith
          def ReplaceKeyPrefixWith(value)
            dsl_attribute(:ReplaceKeyPrefixWith, value)
          end
        end

        # Property Definition EncryptionConfiguration
        class EncryptionConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ReplicaKmsKeyID
          def ReplicaKmsKeyID(value)
            dsl_attribute(:ReplicaKmsKeyID, value)
          end
        end

        # Property Definition BucketEncryption
        class BucketEncryption < PropertyType
          # @param [Array<ServerSideEncryptionRule>|JSONable>] values
          #   The List of values to use for ServerSideEncryptionConfiguration
          def ServerSideEncryptionConfigurations(values)
            dsl_list_attribute(:ServerSideEncryptionConfiguration, values)
          end

          #  @param [ServerSideEncryptionRule|JSONable] value  Append value to the List
          #    The List of values to use for ServerSideEncryptionConfiguration
          # @@overload ServerSideEncryptionConfiguration(&block)
          # Append value to the List from block via instance eval of a new ServerSideEncryptionRule
          def ServerSideEncryptionConfiguration(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:ServerSideEncryptionConfiguration, value, fn_if: fn_if, attr_class: ServerSideEncryptionRule, **value_hash, &block)
          end
        end

        # Property Definition NotificationConfiguration
        class NotificationConfiguration < PropertyType
          # @param [Array<QueueConfiguration>|JSONable>] values
          #   The List of values to use for QueueConfigurations
          def QueueConfigurations(values)
            dsl_list_attribute(:QueueConfigurations, values)
          end

          #  @param [QueueConfiguration|JSONable] value  Append value to the List
          #    The List of values to use for QueueConfigurations
          # @@overload QueueConfiguration(&block)
          # Append value to the List from block via instance eval of a new QueueConfiguration
          def QueueConfiguration(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:QueueConfigurations, value, fn_if: fn_if, attr_class: QueueConfiguration, **value_hash, &block)
          end

          # @param [Array<LambdaConfiguration>|JSONable>] values
          #   The List of values to use for LambdaConfigurations
          def LambdaConfigurations(values)
            dsl_list_attribute(:LambdaConfigurations, values)
          end

          #  @param [LambdaConfiguration|JSONable] value  Append value to the List
          #    The List of values to use for LambdaConfigurations
          # @@overload LambdaConfiguration(&block)
          # Append value to the List from block via instance eval of a new LambdaConfiguration
          def LambdaConfiguration(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:LambdaConfigurations, value, fn_if: fn_if, attr_class: LambdaConfiguration, **value_hash, &block)
          end

          # @param [Array<TopicConfiguration>|JSONable>] values
          #   The List of values to use for TopicConfigurations
          def TopicConfigurations(values)
            dsl_list_attribute(:TopicConfigurations, values)
          end

          #  @param [TopicConfiguration|JSONable] value  Append value to the List
          #    The List of values to use for TopicConfigurations
          # @@overload TopicConfiguration(&block)
          # Append value to the List from block via instance eval of a new TopicConfiguration
          def TopicConfiguration(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:TopicConfigurations, value, fn_if: fn_if, attr_class: TopicConfiguration, **value_hash, &block)
          end
        end

        # Property Definition LifecycleConfiguration
        class LifecycleConfiguration < PropertyType
          # @param [Array<Rule>|JSONable>] values
          #   The List of values to use for Rules
          def Rules(values)
            dsl_list_attribute(:Rules, values)
          end

          #  @param [Rule|JSONable] value  Append value to the List
          #    The List of values to use for Rules
          # @@overload Rule(&block)
          # Append value to the List from block via instance eval of a new Rule
          def Rule(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Rules, value, fn_if: fn_if, attr_class: Rule, **value_hash, &block)
          end
        end

        # Property Definition InventoryConfiguration
        class InventoryConfiguration < PropertyType
          #   @param [Destination|JSONable] value
          #     The value to use for Destination
          # @@overload Destination(&block)
          #   Set :Destination from block via instance eval of a new Destination
          def Destination(value = nil, **value_hash, &block)
            dsl_attribute(:Destination, value, attr_class: Destination, **value_hash, &block)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for OptionalFields
          def OptionalFields(values)
            dsl_list_attribute(:OptionalFields, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for OptionalFields
          def OptionalField(value, fn_if: nil)
            dsl_push_attribute(:OptionalFields, value, fn_if: fn_if)
          end

          #   @param [String|JSONable] value
          #     The value to use for IncludedObjectVersions
          def IncludedObjectVersions(value)
            dsl_attribute(:IncludedObjectVersions, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for Enabled
          def Enabled(value)
            dsl_attribute(:Enabled, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Id
          def Id(value)
            dsl_attribute(:Id, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Prefix
          def Prefix(value)
            dsl_attribute(:Prefix, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ScheduleFrequency
          def ScheduleFrequency(value)
            dsl_attribute(:ScheduleFrequency, value)
          end
        end

        # Property Definition ReplicationRuleAndOperator
        class ReplicationRuleAndOperator < PropertyType
          # @param [Array<TagFilter>|JSONable>] values
          #   The List of values to use for TagFilters
          def TagFilters(values)
            dsl_list_attribute(:TagFilters, values)
          end

          #  @param [TagFilter|JSONable] value  Append value to the List
          #    The List of values to use for TagFilters
          # @@overload TagFilter(&block)
          # Append value to the List from block via instance eval of a new TagFilter
          def TagFilter(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:TagFilters, value, fn_if: fn_if, attr_class: TagFilter, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for Prefix
          def Prefix(value)
            dsl_attribute(:Prefix, value)
          end
        end

        # Property Definition VersioningConfiguration
        class VersioningConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Status
          def Status(value)
            dsl_attribute(:Status, value)
          end
        end

        # Property Definition CorsConfiguration
        class CorsConfiguration < PropertyType
          # @param [Array<CorsRule>|JSONable>] values
          #   The List of values to use for CorsRules
          def CorsRules(values)
            dsl_list_attribute(:CorsRules, values)
          end

          #  @param [CorsRule|JSONable] value  Append value to the List
          #    The List of values to use for CorsRules
          # @@overload CorsRule(&block)
          # Append value to the List from block via instance eval of a new CorsRule
          def CorsRule(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:CorsRules, value, fn_if: fn_if, attr_class: CorsRule, **value_hash, &block)
          end
        end

        # Property Definition QueueConfiguration
        class QueueConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Event
          def Event(value)
            dsl_attribute(:Event, value)
          end

          #   @param [NotificationFilter|JSONable] value
          #     The value to use for Filter
          # @@overload Filter(&block)
          #   Set :Filter from block via instance eval of a new NotificationFilter
          def Filter(value = nil, **value_hash, &block)
            dsl_attribute(:Filter, value, attr_class: NotificationFilter, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for Queue
          def Queue(value)
            dsl_attribute(:Queue, value)
          end
        end

        # Property Definition Transition
        class Transition < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for TransitionDate
          def TransitionDate(value)
            dsl_attribute(:TransitionDate, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for TransitionInDays
          def TransitionInDays(value)
            dsl_attribute(:TransitionInDays, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for StorageClass
          def StorageClass(value)
            dsl_attribute(:StorageClass, value)
          end
        end

        # Property Definition SseKmsEncryptedObjects
        class SseKmsEncryptedObjects < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Status
          def Status(value)
            dsl_attribute(:Status, value)
          end
        end

        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end
        end

        # Property Definition AbortIncompleteMultipartUpload
        class AbortIncompleteMultipartUpload < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for DaysAfterInitiation
          def DaysAfterInitiation(value)
            dsl_attribute(:DaysAfterInitiation, value)
          end
        end

        # @param [Array<InventoryConfiguration>|JSONable>] values
        #   The List of values to use for InventoryConfigurations
        def InventoryConfigurations(values)
          dsl_list_attribute(:InventoryConfigurations, values)
        end

        #  @param [InventoryConfiguration|JSONable] value  Append value to the List
        #    The List of values to use for InventoryConfigurations
        # @@overload InventoryConfiguration(&block)
        # Append value to the List from block via instance eval of a new InventoryConfiguration
        def InventoryConfiguration(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:InventoryConfigurations, value, fn_if: fn_if, attr_class: InventoryConfiguration, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for DomainName
        def DomainName(value)
          dsl_attribute(:DomainName, value)
        end

        #   @param [BucketEncryption|JSONable] value
        #     The value to use for BucketEncryption
        # @@overload BucketEncryption(&block)
        #   Set :BucketEncryption from block via instance eval of a new BucketEncryption
        def BucketEncryption(value = nil, **value_hash, &block)
          dsl_attribute(:BucketEncryption, value, attr_class: BucketEncryption, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for WebsiteURL
        def WebsiteURL(value)
          dsl_attribute(:WebsiteURL, value)
        end

        #   @param [NotificationConfiguration|JSONable] value
        #     The value to use for NotificationConfiguration
        # @@overload NotificationConfiguration(&block)
        #   Set :NotificationConfiguration from block via instance eval of a new NotificationConfiguration
        def NotificationConfiguration(value = nil, **value_hash, &block)
          dsl_attribute(:NotificationConfiguration, value, attr_class: NotificationConfiguration, **value_hash, &block)
        end

        #   @param [WebsiteConfiguration|JSONable] value
        #     The value to use for WebsiteConfiguration
        # @@overload WebsiteConfiguration(&block)
        #   Set :WebsiteConfiguration from block via instance eval of a new WebsiteConfiguration
        def WebsiteConfiguration(value = nil, **value_hash, &block)
          dsl_attribute(:WebsiteConfiguration, value, attr_class: WebsiteConfiguration, **value_hash, &block)
        end

        #   @param [LifecycleConfiguration|JSONable] value
        #     The value to use for LifecycleConfiguration
        # @@overload LifecycleConfiguration(&block)
        #   Set :LifecycleConfiguration from block via instance eval of a new LifecycleConfiguration
        def LifecycleConfiguration(value = nil, **value_hash, &block)
          dsl_attribute(:LifecycleConfiguration, value, attr_class: LifecycleConfiguration, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for DualStackDomainName
        def DualStackDomainName(value)
          dsl_attribute(:DualStackDomainName, value)
        end

        #   @param [VersioningConfiguration|JSONable] value
        #     The value to use for VersioningConfiguration
        # @@overload VersioningConfiguration(&block)
        #   Set :VersioningConfiguration from block via instance eval of a new VersioningConfiguration
        def VersioningConfiguration(value = nil, **value_hash, &block)
          dsl_attribute(:VersioningConfiguration, value, attr_class: VersioningConfiguration, **value_hash, &block)
        end

        # @param [Array<MetricsConfiguration>|JSONable>] values
        #   The List of values to use for MetricsConfigurations
        def MetricsConfigurations(values)
          dsl_list_attribute(:MetricsConfigurations, values)
        end

        #  @param [MetricsConfiguration|JSONable] value  Append value to the List
        #    The List of values to use for MetricsConfigurations
        # @@overload MetricsConfiguration(&block)
        # Append value to the List from block via instance eval of a new MetricsConfiguration
        def MetricsConfiguration(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:MetricsConfigurations, value, fn_if: fn_if, attr_class: MetricsConfiguration, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for AccessControl
        def AccessControl(value)
          dsl_attribute(:AccessControl, value)
        end

        # @param [Array<AnalyticsConfiguration>|JSONable>] values
        #   The List of values to use for AnalyticsConfigurations
        def AnalyticsConfigurations(values)
          dsl_list_attribute(:AnalyticsConfigurations, values)
        end

        #  @param [AnalyticsConfiguration|JSONable] value  Append value to the List
        #    The List of values to use for AnalyticsConfigurations
        # @@overload AnalyticsConfiguration(&block)
        # Append value to the List from block via instance eval of a new AnalyticsConfiguration
        def AnalyticsConfiguration(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:AnalyticsConfigurations, value, fn_if: fn_if, attr_class: AnalyticsConfiguration, **value_hash, &block)
        end

        #   @param [AccelerateConfiguration|JSONable] value
        #     The value to use for AccelerateConfiguration
        # @@overload AccelerateConfiguration(&block)
        #   Set :AccelerateConfiguration from block via instance eval of a new AccelerateConfiguration
        def AccelerateConfiguration(value = nil, **value_hash, &block)
          dsl_attribute(:AccelerateConfiguration, value, attr_class: AccelerateConfiguration, **value_hash, &block)
        end

        #   @param [PublicAccessBlockConfiguration|JSONable] value
        #     The value to use for PublicAccessBlockConfiguration
        # @@overload PublicAccessBlockConfiguration(&block)
        #   Set :PublicAccessBlockConfiguration from block via instance eval of a new PublicAccessBlockConfiguration
        def PublicAccessBlockConfiguration(value = nil, **value_hash, &block)
          dsl_attribute(:PublicAccessBlockConfiguration, value, attr_class: PublicAccessBlockConfiguration, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for BucketName
        def BucketName(value)
          dsl_attribute(:BucketName, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for RegionalDomainName
        def RegionalDomainName(value)
          dsl_attribute(:RegionalDomainName, value)
        end

        #   @param [CorsConfiguration|JSONable] value
        #     The value to use for CorsConfiguration
        # @@overload CorsConfiguration(&block)
        #   Set :CorsConfiguration from block via instance eval of a new CorsConfiguration
        def CorsConfiguration(value = nil, **value_hash, &block)
          dsl_attribute(:CorsConfiguration, value, attr_class: CorsConfiguration, **value_hash, &block)
        end

        #   @param [ObjectLockConfiguration|JSONable] value
        #     The value to use for ObjectLockConfiguration
        # @@overload ObjectLockConfiguration(&block)
        #   Set :ObjectLockConfiguration from block via instance eval of a new ObjectLockConfiguration
        def ObjectLockConfiguration(value = nil, **value_hash, &block)
          dsl_attribute(:ObjectLockConfiguration, value, attr_class: ObjectLockConfiguration, **value_hash, &block)
        end

        #   @param [Boolean|JSONable] value
        #     The value to use for ObjectLockEnabled
        def ObjectLockEnabled(value)
          dsl_attribute(:ObjectLockEnabled, value)
        end

        #   @param [LoggingConfiguration|JSONable] value
        #     The value to use for LoggingConfiguration
        # @@overload LoggingConfiguration(&block)
        #   Set :LoggingConfiguration from block via instance eval of a new LoggingConfiguration
        def LoggingConfiguration(value = nil, **value_hash, &block)
          dsl_attribute(:LoggingConfiguration, value, attr_class: LoggingConfiguration, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Arn
        def Arn(value)
          dsl_attribute(:Arn, value)
        end

        #   @param [ReplicationConfiguration|JSONable] value
        #     The value to use for ReplicationConfiguration
        # @@overload ReplicationConfiguration(&block)
        #   Set :ReplicationConfiguration from block via instance eval of a new ReplicationConfiguration
        def ReplicationConfiguration(value = nil, **value_hash, &block)
          dsl_attribute(:ReplicationConfiguration, value, attr_class: ReplicationConfiguration, **value_hash, &block)
        end

        # @param [Array<Tag>|JSONable>] values
        #   The List of values to use for Tags
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    The List of values to use for Tags
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::S3::Bucket]
    def AWS_S3_Bucket(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::S3::Bucket, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
