# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module S3
      # The AWS::S3::AccessPoint resource is an Amazon S3 resource type that you can use to access buckets.
      # @see https://github.com/aws-cloudformation/aws-cloudformation-resource-providers-s3
      class AccessPoint < ResourceType
        # The Virtual Private Cloud (VPC) configuration for a bucket access point.
        class VpcConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     If this field is specified, this access point will only allow connections from the specified VPC ID.
          def VpcId(value)
            dsl_attribute(:VpcId, value)
          end
        end

        # Property Definition PublicAccessBlockConfiguration
        class PublicAccessBlockConfiguration < PropertyType
          #   @param [Boolean|JSONable] value
          #     Specifies whether Amazon S3 should block public access control lists (ACLs) for buckets in this account. Setting this element to TRUE causes the following behavior:
          #     - PUT Bucket acl and PUT Object acl calls fail if the specified ACL is public.
          #      - PUT Object calls fail if the request includes a public ACL.
          #     . - PUT Bucket calls fail if the request includes a public ACL.
          #     Enabling this setting doesn't affect existing policies or ACLs.
          def BlockPublicAcls(value)
            dsl_attribute(:BlockPublicAcls, value)
          end

          #   @param [Boolean|JSONable] value
          #     Specifies whether Amazon S3 should ignore public ACLs for buckets in this account. Setting this element to TRUE causes Amazon S3 to ignore all public ACLs on buckets in this account and any objects that they contain. Enabling this setting doesn't affect the persistence of any existing ACLs and doesn't prevent new public ACLs from being set.
          def IgnorePublicAcls(value)
            dsl_attribute(:IgnorePublicAcls, value)
          end

          #   @param [Boolean|JSONable] value
          #     Specifies whether Amazon S3 should block public bucket policies for buckets in this account. Setting this element to TRUE causes Amazon S3 to reject calls to PUT Bucket policy if the specified bucket policy allows public access. Enabling this setting doesn't affect existing bucket policies.
          def BlockPublicPolicy(value)
            dsl_attribute(:BlockPublicPolicy, value)
          end

          #   @param [Boolean|JSONable] value
          #     Specifies whether Amazon S3 should restrict public bucket policies for this bucket. Setting this element to TRUE restricts access to this bucket to only AWS services and authorized users within this account if the bucket has a public policy.
          #     Enabling this setting doesn't affect previously stored bucket policies, except that public and cross-account access within any public bucket policy, including non-public delegation to specific accounts, is blocked.
          def RestrictPublicBuckets(value)
            dsl_attribute(:RestrictPublicBuckets, value)
          end
        end

        #   @param [String|JSONable] value
        #     The name you want to assign to this Access Point.
        def Name(value)
          dsl_attribute(:Name, value)
        end

        #   @param [String|JSONable] value
        #     The name of the bucket that you want to associate this Access Point with.
        def Bucket(value)
          dsl_attribute(:Bucket, value)
        end

        #   @param [VpcConfiguration|JSONable] value
        #     If you include this field, Amazon S3 restricts access to this Access Point to requests from the specified Virtual Private Cloud (VPC).
        # @@overload VpcConfiguration(&block)
        #   Set :VpcConfiguration from block via instance eval of a new VpcConfiguration
        def VpcConfiguration(value = nil, **value_hash, &block)
          dsl_attribute(:VpcConfiguration, value, attr_class: VpcConfiguration, **value_hash, &block)
        end

        #   @param [PublicAccessBlockConfiguration|JSONable] value
        #     The PublicAccessBlock configuration that you want to apply to this Access Point. You can enable the configuration options in any combination. For more information about when Amazon S3 considers a bucket or object public, see https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html#access-control-block-public-access-policy-status 'The Meaning of Public' in the Amazon Simple Storage Service Developer Guide.
        # @@overload PublicAccessBlockConfiguration(&block)
        #   Set :PublicAccessBlockConfiguration from block via instance eval of a new PublicAccessBlockConfiguration
        def PublicAccessBlockConfiguration(value = nil, **value_hash, &block)
          dsl_attribute(:PublicAccessBlockConfiguration, value, attr_class: PublicAccessBlockConfiguration, **value_hash, &block)
        end

        #   @param [Object|JSONable] value
        #     The Access Point Policy you want to apply to this access point.
        def Policy(value)
          dsl_attribute(:Policy, value)
        end

        #   @param [Object|JSONable] value
        #     The value to use for PolicyStatus
        def PolicyStatus(value)
          dsl_attribute(:PolicyStatus, value)
        end

        #   @param [String|JSONable] value
        #     Indicates whether this Access Point allows access from the public Internet. If VpcConfiguration is specified for this Access Point, then NetworkOrigin is VPC, and the Access Point doesn't allow access from the public Internet. Otherwise, NetworkOrigin is Internet, and the Access Point allows access from the public Internet, subject to the Access Point and bucket access policies.
        def NetworkOrigin(value)
          dsl_attribute(:NetworkOrigin, value)
        end

        #   @param [String|JSONable] value
        #     The date and time when the AccessPoint was created.
        def CreationDate(value)
          dsl_attribute(:CreationDate, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::S3::AccessPoint]
    def AWS_S3_AccessPoint(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::S3::AccessPoint, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
