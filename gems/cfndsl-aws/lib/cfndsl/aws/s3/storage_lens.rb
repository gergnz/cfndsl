# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module S3
      # The AWS::S3::StorageLens resource is an Amazon S3 resource type that you can use to create Storage Lens configurations.
      # @see https://github.com/aws-cloudformation/aws-cloudformation-resource-providers-s3-storagelens
      class StorageLens < ResourceType
        # S3 buckets and regions to include/exclude in the Storage Lens configuration.
        class BucketsAndRegions < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Buckets
          def Buckets(values)
            dsl_list_attribute(:Buckets, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Buckets
          def Bucket(value, fn_if: nil)
            dsl_push_attribute(:Buckets, value, fn_if: fn_if)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Regions
          def Regions(values)
            dsl_list_attribute(:Regions, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Regions
          def Region(value, fn_if: nil)
            dsl_push_attribute(:Regions, value, fn_if: fn_if)
          end
        end

        # The AWS Org ARN to use in the Storage Lens configuration.
        class AwsOrg < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Arn
          def Arn(value)
            dsl_attribute(:Arn, value)
          end
        end

        # Enables activity metrics.
        class ActivityMetrics < PropertyType
          #   @param [Boolean|JSONable] value
          #     Specifies whether activity metrics are enabled or disabled.
          def IsEnabled(value)
            dsl_attribute(:IsEnabled, value)
          end
        end

        # Selection criteria for prefix level metrics.
        class SelectionCriteria < PropertyType
          #   @param [Integer|JSONable] value
          #     Max depth of prefixes of S3 key that Storage Lens will analyze.
          def MaxDepth(value)
            dsl_attribute(:MaxDepth, value)
          end

          #   @param [String|JSONable] value
          #     Delimiter to divide S3 key into hierarchy of prefixes.
          def Delimiter(value)
            dsl_attribute(:Delimiter, value)
          end

          #   @param [Number|JSONable] value
          #     The minimum storage bytes threshold for the prefixes to be included in the analysis.
          def MinStorageBytesPercentage(value)
            dsl_attribute(:MinStorageBytesPercentage, value)
          end
        end

        # Property Definition PrefixLevelStorageMetrics
        class PrefixLevelStorageMetrics < PropertyType
          #   @param [Boolean|JSONable] value
          #     Specifies whether prefix level storage metrics are enabled or disabled.
          def IsEnabled(value)
            dsl_attribute(:IsEnabled, value)
          end

          #   @param [SelectionCriteria|JSONable] value
          #     The value to use for SelectionCriteria
          # @@overload SelectionCriteria(&block)
          #   Set :SelectionCriteria from block via instance eval of a new SelectionCriteria
          def SelectionCriteria(value = nil, **value_hash, &block)
            dsl_attribute(:SelectionCriteria, value, attr_class: SelectionCriteria, **value_hash, &block)
          end
        end

        # Prefix level metrics configurations.
        class PrefixLevel < PropertyType
          #   @param [PrefixLevelStorageMetrics|JSONable] value
          #     The value to use for StorageMetrics
          # @@overload StorageMetrics(&block)
          #   Set :StorageMetrics from block via instance eval of a new PrefixLevelStorageMetrics
          def StorageMetrics(value = nil, **value_hash, &block)
            dsl_attribute(:StorageMetrics, value, attr_class: PrefixLevelStorageMetrics, **value_hash, &block)
          end
        end

        # Bucket level metrics configurations.
        class BucketLevel < PropertyType
          #   @param [ActivityMetrics|JSONable] value
          #     The value to use for ActivityMetrics
          # @@overload ActivityMetrics(&block)
          #   Set :ActivityMetrics from block via instance eval of a new ActivityMetrics
          def ActivityMetrics(value = nil, **value_hash, &block)
            dsl_attribute(:ActivityMetrics, value, attr_class: ActivityMetrics, **value_hash, &block)
          end

          #   @param [PrefixLevel|JSONable] value
          #     The value to use for PrefixLevel
          # @@overload PrefixLevel(&block)
          #   Set :PrefixLevel from block via instance eval of a new PrefixLevel
          def PrefixLevel(value = nil, **value_hash, &block)
            dsl_attribute(:PrefixLevel, value, attr_class: PrefixLevel, **value_hash, &block)
          end
        end

        # Account level metrics configurations.
        class AccountLevel < PropertyType
          #   @param [ActivityMetrics|JSONable] value
          #     The value to use for ActivityMetrics
          # @@overload ActivityMetrics(&block)
          #   Set :ActivityMetrics from block via instance eval of a new ActivityMetrics
          def ActivityMetrics(value = nil, **value_hash, &block)
            dsl_attribute(:ActivityMetrics, value, attr_class: ActivityMetrics, **value_hash, &block)
          end

          #   @param [BucketLevel|JSONable] value
          #     The value to use for BucketLevel
          # @@overload BucketLevel(&block)
          #   Set :BucketLevel from block via instance eval of a new BucketLevel
          def BucketLevel(value = nil, **value_hash, &block)
            dsl_attribute(:BucketLevel, value, attr_class: BucketLevel, **value_hash, &block)
          end
        end

        # AWS KMS server-side encryption.
        class SSEKMS < PropertyType
          #   @param [String|JSONable] value
          #     The ARN of the KMS key to use for encryption.
          def KeyId(value)
            dsl_attribute(:KeyId, value)
          end
        end

        # Configures the server-side encryption for Storage Lens report files with either S3-managed keys (SSE-S3) or KMS-managed keys (SSE-KMS).
        class Encryption < PropertyType
        end

        # S3 bucket destination settings for the Storage Lens configuration.
        class S3BucketDestination < PropertyType
          #   @param [String|JSONable] value
          #     The version of the output schema to use when exporting Storage Lens report.
          def OutputSchemaVersion(value)
            dsl_attribute(:OutputSchemaVersion, value)
          end

          #   @param [String|JSONable] value
          #     Specifies the file format to use when exporting Storage Lens report.
          def Format(value)
            dsl_attribute(:Format, value)
          end

          #   @param [String|JSONable] value
          #     The AWS account ID that owns the destination S3 bucket.
          def AccountId(value)
            dsl_attribute(:AccountId, value)
          end

          #   @param [String|JSONable] value
          #     The ARN of the bucket to which Storage Lens report is exported.
          def Arn(value)
            dsl_attribute(:Arn, value)
          end

          #   @param [String|JSONable] value
          #     The prefix to use when exporting Storage Lens report file.
          def Prefix(value)
            dsl_attribute(:Prefix, value)
          end

          #   @param [Encryption|JSONable] value
          #     The value to use for Encryption
          # @@overload Encryption(&block)
          #   Set :Encryption from block via instance eval of a new Encryption
          def Encryption(value = nil, **value_hash, &block)
            dsl_attribute(:Encryption, value, attr_class: Encryption, **value_hash, &block)
          end
        end

        # Specifies how the data related to S3 Storage Lens should be exported.
        class DataExport < PropertyType
          #   @param [S3BucketDestination|JSONable] value
          #     The value to use for S3BucketDestination
          # @@overload S3BucketDestination(&block)
          #   Set :S3BucketDestination from block via instance eval of a new S3BucketDestination
          def S3BucketDestination(value = nil, **value_hash, &block)
            dsl_attribute(:S3BucketDestination, value, attr_class: S3BucketDestination, **value_hash, &block)
          end
        end

        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        # Specifies the Storage Lens configuration.
        class StorageLensConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Id
          def Id(value)
            dsl_attribute(:Id, value)
          end

          #   @param [BucketsAndRegions|JSONable] value
          #     The value to use for Include
          # @@overload Include(&block)
          #   Set :Include from block via instance eval of a new BucketsAndRegions
          def Include(value = nil, **value_hash, &block)
            dsl_attribute(:Include, value, attr_class: BucketsAndRegions, **value_hash, &block)
          end

          #   @param [BucketsAndRegions|JSONable] value
          #     The value to use for Exclude
          # @@overload Exclude(&block)
          #   Set :Exclude from block via instance eval of a new BucketsAndRegions
          def Exclude(value = nil, **value_hash, &block)
            dsl_attribute(:Exclude, value, attr_class: BucketsAndRegions, **value_hash, &block)
          end

          #   @param [AwsOrg|JSONable] value
          #     The value to use for AwsOrg
          # @@overload AwsOrg(&block)
          #   Set :AwsOrg from block via instance eval of a new AwsOrg
          def AwsOrg(value = nil, **value_hash, &block)
            dsl_attribute(:AwsOrg, value, attr_class: AwsOrg, **value_hash, &block)
          end

          #   @param [AccountLevel|JSONable] value
          #     The value to use for AccountLevel
          # @@overload AccountLevel(&block)
          #   Set :AccountLevel from block via instance eval of a new AccountLevel
          def AccountLevel(value = nil, **value_hash, &block)
            dsl_attribute(:AccountLevel, value, attr_class: AccountLevel, **value_hash, &block)
          end

          #   @param [DataExport|JSONable] value
          #     The value to use for DataExport
          # @@overload DataExport(&block)
          #   Set :DataExport from block via instance eval of a new DataExport
          def DataExport(value = nil, **value_hash, &block)
            dsl_attribute(:DataExport, value, attr_class: DataExport, **value_hash, &block)
          end

          #   @param [Boolean|JSONable] value
          #     Specifies whether the Storage Lens configuration is enabled or disabled.
          def IsEnabled(value)
            dsl_attribute(:IsEnabled, value)
          end

          #   @param [String|JSONable] value
          #     The ARN for the Storage Lens configuration.
          def StorageLensArn(value)
            dsl_attribute(:StorageLensArn, value)
          end
        end

        #   @param [StorageLensConfiguration|JSONable] value
        #     The value to use for StorageLensConfiguration
        # @@overload StorageLensConfiguration(&block)
        #   Set :StorageLensConfiguration from block via instance eval of a new StorageLensConfiguration
        def StorageLensConfiguration(value = nil, **value_hash, &block)
          dsl_attribute(:StorageLensConfiguration, value, attr_class: StorageLensConfiguration, **value_hash, &block)
        end

        # @param [Array<Tag>|JSONable>] values
        #   A set of tags (key-value pairs) for this Storage Lens configuration.
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    A set of tags (key-value pairs) for this Storage Lens configuration.
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::S3::StorageLens]
    def AWS_S3_StorageLens(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::S3::StorageLens, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
