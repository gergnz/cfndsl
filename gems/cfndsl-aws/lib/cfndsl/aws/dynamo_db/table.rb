# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module DynamoDB
      # Resource Type definition for AWS::DynamoDB::Table
      class Table < ResourceType
        # Property Definition LocalSecondaryIndex
        class LocalSecondaryIndex < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for IndexName
          def IndexName(value)
            dsl_attribute(:IndexName, value)
          end

          #   @param [Projection|JSONable] value
          #     The value to use for Projection
          # @@overload Projection(&block)
          #   Set :Projection from block via instance eval of a new Projection
          def Projection(value = nil, **value_hash, &block)
            dsl_attribute(:Projection, value, attr_class: Projection, **value_hash, &block)
          end

          # @param [Array<KeySchema>|JSONable>] values
          #   The List of values to use for KeySchema
          def KeySchemas(values)
            dsl_list_attribute(:KeySchema, values)
          end

          #  @param [KeySchema|JSONable] value  Append value to the List
          #    The List of values to use for KeySchema
          # @@overload KeySchema(&block)
          # Append value to the List from block via instance eval of a new KeySchema
          def KeySchema(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:KeySchema, value, fn_if: fn_if, attr_class: KeySchema, **value_hash, &block)
          end
        end

        # Property Definition SSESpecification
        class SSESpecification < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for KMSMasterKeyId
          def KMSMasterKeyId(value)
            dsl_attribute(:KMSMasterKeyId, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for SSEEnabled
          def SSEEnabled(value)
            dsl_attribute(:SSEEnabled, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for SSEType
          def SSEType(value)
            dsl_attribute(:SSEType, value)
          end
        end

        # Property Definition StreamSpecification
        class StreamSpecification < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for StreamViewType
          def StreamViewType(value)
            dsl_attribute(:StreamViewType, value)
          end
        end

        # Property Definition AttributeDefinition
        class AttributeDefinition < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for AttributeType
          def AttributeType(value)
            dsl_attribute(:AttributeType, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for AttributeName
          def AttributeName(value)
            dsl_attribute(:AttributeName, value)
          end
        end

        # Property Definition Projection
        class Projection < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ProjectionType
          def ProjectionType(value)
            dsl_attribute(:ProjectionType, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for NonKeyAttributes
          def NonKeyAttributes(values)
            dsl_list_attribute(:NonKeyAttributes, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for NonKeyAttributes
          def NonKeyAttribute(value, fn_if: nil)
            dsl_push_attribute(:NonKeyAttributes, value, fn_if: fn_if)
          end
        end

        # Property Definition PointInTimeRecoverySpecification
        class PointInTimeRecoverySpecification < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for PointInTimeRecoveryEnabled
          def PointInTimeRecoveryEnabled(value)
            dsl_attribute(:PointInTimeRecoveryEnabled, value)
          end
        end

        # Property Definition ProvisionedThroughput
        class ProvisionedThroughput < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for WriteCapacityUnits
          def WriteCapacityUnits(value)
            dsl_attribute(:WriteCapacityUnits, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for ReadCapacityUnits
          def ReadCapacityUnits(value)
            dsl_attribute(:ReadCapacityUnits, value)
          end
        end

        # Property Definition KeySchema
        class KeySchema < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for KeyType
          def KeyType(value)
            dsl_attribute(:KeyType, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for AttributeName
          def AttributeName(value)
            dsl_attribute(:AttributeName, value)
          end
        end

        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end
        end

        # Property Definition GlobalSecondaryIndex
        class GlobalSecondaryIndex < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for IndexName
          def IndexName(value)
            dsl_attribute(:IndexName, value)
          end

          #   @param [Projection|JSONable] value
          #     The value to use for Projection
          # @@overload Projection(&block)
          #   Set :Projection from block via instance eval of a new Projection
          def Projection(value = nil, **value_hash, &block)
            dsl_attribute(:Projection, value, attr_class: Projection, **value_hash, &block)
          end

          #   @param [ProvisionedThroughput|JSONable] value
          #     The value to use for ProvisionedThroughput
          # @@overload ProvisionedThroughput(&block)
          #   Set :ProvisionedThroughput from block via instance eval of a new ProvisionedThroughput
          def ProvisionedThroughput(value = nil, **value_hash, &block)
            dsl_attribute(:ProvisionedThroughput, value, attr_class: ProvisionedThroughput, **value_hash, &block)
          end

          # @param [Array<KeySchema>|JSONable>] values
          #   The List of values to use for KeySchema
          def KeySchemas(values)
            dsl_list_attribute(:KeySchema, values)
          end

          #  @param [KeySchema|JSONable] value  Append value to the List
          #    The List of values to use for KeySchema
          # @@overload KeySchema(&block)
          # Append value to the List from block via instance eval of a new KeySchema
          def KeySchema(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:KeySchema, value, fn_if: fn_if, attr_class: KeySchema, **value_hash, &block)
          end
        end

        # Property Definition TimeToLiveSpecification
        class TimeToLiveSpecification < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for Enabled
          def Enabled(value)
            dsl_attribute(:Enabled, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for AttributeName
          def AttributeName(value)
            dsl_attribute(:AttributeName, value)
          end
        end

        #   @param [SSESpecification|JSONable] value
        #     The value to use for SSESpecification
        # @@overload SSESpecification(&block)
        #   Set :SSESpecification from block via instance eval of a new SSESpecification
        def SSESpecification(value = nil, **value_hash, &block)
          dsl_attribute(:SSESpecification, value, attr_class: SSESpecification, **value_hash, &block)
        end

        #   @param [StreamSpecification|JSONable] value
        #     The value to use for StreamSpecification
        # @@overload StreamSpecification(&block)
        #   Set :StreamSpecification from block via instance eval of a new StreamSpecification
        def StreamSpecification(value = nil, **value_hash, &block)
          dsl_attribute(:StreamSpecification, value, attr_class: StreamSpecification, **value_hash, &block)
        end

        #   @param [PointInTimeRecoverySpecification|JSONable] value
        #     The value to use for PointInTimeRecoverySpecification
        # @@overload PointInTimeRecoverySpecification(&block)
        #   Set :PointInTimeRecoverySpecification from block via instance eval of a new PointInTimeRecoverySpecification
        def PointInTimeRecoverySpecification(value = nil, **value_hash, &block)
          dsl_attribute(:PointInTimeRecoverySpecification, value, attr_class: PointInTimeRecoverySpecification, **value_hash, &block)
        end

        #   @param [ProvisionedThroughput|JSONable] value
        #     The value to use for ProvisionedThroughput
        # @@overload ProvisionedThroughput(&block)
        #   Set :ProvisionedThroughput from block via instance eval of a new ProvisionedThroughput
        def ProvisionedThroughput(value = nil, **value_hash, &block)
          dsl_attribute(:ProvisionedThroughput, value, attr_class: ProvisionedThroughput, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for TableName
        def TableName(value)
          dsl_attribute(:TableName, value)
        end

        # @param [Array<AttributeDefinition>|JSONable>] values
        #   The List of values to use for AttributeDefinitions
        def AttributeDefinitions(values)
          dsl_list_attribute(:AttributeDefinitions, values)
        end

        #  @param [AttributeDefinition|JSONable] value  Append value to the List
        #    The List of values to use for AttributeDefinitions
        # @@overload AttributeDefinition(&block)
        # Append value to the List from block via instance eval of a new AttributeDefinition
        def AttributeDefinition(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:AttributeDefinitions, value, fn_if: fn_if, attr_class: AttributeDefinition, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for BillingMode
        def BillingMode(value)
          dsl_attribute(:BillingMode, value)
        end

        # @param [Array<GlobalSecondaryIndex>|JSONable>] values
        #   The List of values to use for GlobalSecondaryIndexes
        def GlobalSecondaryIndexes(values)
          dsl_list_attribute(:GlobalSecondaryIndexes, values)
        end

        #  @param [GlobalSecondaryIndex|JSONable] value  Append value to the List
        #    The List of values to use for GlobalSecondaryIndexes
        # @@overload GlobalSecondaryIndexe(&block)
        # Append value to the List from block via instance eval of a new GlobalSecondaryIndex
        def GlobalSecondaryIndexe(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:GlobalSecondaryIndexes, value, fn_if: fn_if, attr_class: GlobalSecondaryIndex, **value_hash, &block)
        end

        # @param [Array<KeySchema>|JSONable>] values
        #   The List of values to use for KeySchema
        def KeySchemas(values)
          dsl_list_attribute(:KeySchema, values)
        end

        #  @param [KeySchema|JSONable] value  Append value to the List
        #    The List of values to use for KeySchema
        # @@overload KeySchema(&block)
        # Append value to the List from block via instance eval of a new KeySchema
        def KeySchema(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:KeySchema, value, fn_if: fn_if, attr_class: KeySchema, **value_hash, &block)
        end

        # @param [Array<LocalSecondaryIndex>|JSONable>] values
        #   The List of values to use for LocalSecondaryIndexes
        def LocalSecondaryIndexes(values)
          dsl_list_attribute(:LocalSecondaryIndexes, values)
        end

        #  @param [LocalSecondaryIndex|JSONable] value  Append value to the List
        #    The List of values to use for LocalSecondaryIndexes
        # @@overload LocalSecondaryIndexe(&block)
        # Append value to the List from block via instance eval of a new LocalSecondaryIndex
        def LocalSecondaryIndexe(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:LocalSecondaryIndexes, value, fn_if: fn_if, attr_class: LocalSecondaryIndex, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Arn
        def Arn(value)
          dsl_attribute(:Arn, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for StreamArn
        def StreamArn(value)
          dsl_attribute(:StreamArn, value)
        end

        # @param [Array<Tag>|JSONable>] values
        #   The List of values to use for Tags
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    The List of values to use for Tags
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end

        #   @param [TimeToLiveSpecification|JSONable] value
        #     The value to use for TimeToLiveSpecification
        # @@overload TimeToLiveSpecification(&block)
        #   Set :TimeToLiveSpecification from block via instance eval of a new TimeToLiveSpecification
        def TimeToLiveSpecification(value = nil, **value_hash, &block)
          dsl_attribute(:TimeToLiveSpecification, value, attr_class: TimeToLiveSpecification, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::DynamoDB::Table]
    def AWS_DynamoDB_Table(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::DynamoDB::Table, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
