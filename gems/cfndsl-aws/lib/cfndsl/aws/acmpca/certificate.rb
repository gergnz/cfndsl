# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module ACMPCA
      # A certificate issued via a private certificate authority
      # @see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/AWS_ACMPCA.html
      class Certificate < ResourceType
        # Validity for a certificate.
        class Validity < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Type
          def Type(value)
            dsl_attribute(:Type, value)
          end
        end

        #   @param [String|JSONable] value
        #     The Amazon Resource Name (ARN) for the private CA to issue the certificate.
        def CertificateAuthorityArn(value)
          dsl_attribute(:CertificateAuthorityArn, value)
        end

        #   @param [String|JSONable] value
        #     The certificate signing request (CSR) for the Certificate.
        def CertificateSigningRequest(value)
          dsl_attribute(:CertificateSigningRequest, value)
        end

        #   @param [String|JSONable] value
        #     The name of the algorithm that will be used to sign the Certificate.
        def SigningAlgorithm(value)
          dsl_attribute(:SigningAlgorithm, value)
        end

        #   @param [String|JSONable] value
        #     Specifies a custom configuration template to use when issuing a certificate. If this parameter is not provided, ACM Private CA defaults to the EndEntityCertificate/V1 template.
        def TemplateArn(value)
          dsl_attribute(:TemplateArn, value)
        end

        #   @param [Validity|JSONable] value
        #     The time that the Certificate will be valid.
        # @@overload Validity(&block)
        #   Set :Validity from block via instance eval of a new Validity
        def Validity(value = nil, **value_hash, &block)
          dsl_attribute(:Validity, value, attr_class: Validity, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The issued certificate in base 64 PEM-encoded format.
        def Certificate(value)
          dsl_attribute(:Certificate, value)
        end

        #   @param [String|JSONable] value
        #     The ARN of the issued certificate.
        def Arn(value)
          dsl_attribute(:Arn, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::ACMPCA::Certificate]
    def AWS_ACMPCA_Certificate(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::ACMPCA::Certificate, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
