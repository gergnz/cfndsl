# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module AppStream
      # Resource Type definition for AWS::AppStream::Stack
      class Stack < ResourceType
        # Property Definition StorageConnector
        class StorageConnector < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Domains
          def Domains(values)
            dsl_list_attribute(:Domains, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Domains
          def Domain(value, fn_if: nil)
            dsl_push_attribute(:Domains, value, fn_if: fn_if)
          end

          #   @param [String|JSONable] value
          #     The value to use for ResourceIdentifier
          def ResourceIdentifier(value)
            dsl_attribute(:ResourceIdentifier, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ConnectorType
          def ConnectorType(value)
            dsl_attribute(:ConnectorType, value)
          end
        end

        # Property Definition ApplicationSettings
        class ApplicationSettings < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for SettingsGroup
          def SettingsGroup(value)
            dsl_attribute(:SettingsGroup, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for Enabled
          def Enabled(value)
            dsl_attribute(:Enabled, value)
          end
        end

        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end
        end

        # Property Definition AccessEndpoint
        class AccessEndpoint < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for EndpointType
          def EndpointType(value)
            dsl_attribute(:EndpointType, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for VpceId
          def VpceId(value)
            dsl_attribute(:VpceId, value)
          end
        end

        # Property Definition UserSetting
        class UserSetting < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Permission
          def Permission(value)
            dsl_attribute(:Permission, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Action
          def Action(value)
            dsl_attribute(:Action, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for Description
        def Description(value)
          dsl_attribute(:Description, value)
        end

        # @param [Array<StorageConnector>|JSONable>] values
        #   The List of values to use for StorageConnectors
        def StorageConnectors(values)
          dsl_list_attribute(:StorageConnectors, values)
        end

        #  @param [StorageConnector|JSONable] value  Append value to the List
        #    The List of values to use for StorageConnectors
        # @@overload StorageConnector(&block)
        # Append value to the List from block via instance eval of a new StorageConnector
        def StorageConnector(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:StorageConnectors, value, fn_if: fn_if, attr_class: StorageConnector, **value_hash, &block)
        end

        #   @param [Boolean|JSONable] value
        #     The value to use for DeleteStorageConnectors
        def DeleteStorageConnectors(value)
          dsl_attribute(:DeleteStorageConnectors, value)
        end

        # @param [Array<String>|JSONable>] values
        #   The List of values to use for EmbedHostDomains
        def EmbedHostDomains(values)
          dsl_list_attribute(:EmbedHostDomains, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for EmbedHostDomains
        def EmbedHostDomain(value, fn_if: nil)
          dsl_push_attribute(:EmbedHostDomains, value, fn_if: fn_if)
        end

        # @param [Array<UserSetting>|JSONable>] values
        #   The List of values to use for UserSettings
        def UserSettings(values)
          dsl_list_attribute(:UserSettings, values)
        end

        #  @param [UserSetting|JSONable] value  Append value to the List
        #    The List of values to use for UserSettings
        # @@overload UserSetting(&block)
        # Append value to the List from block via instance eval of a new UserSetting
        def UserSetting(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:UserSettings, value, fn_if: fn_if, attr_class: UserSetting, **value_hash, &block)
        end

        # @param [Array<String>|JSONable>] values
        #   The List of values to use for AttributesToDelete
        def AttributesToDeletes(values)
          dsl_list_attribute(:AttributesToDelete, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for AttributesToDelete
        def AttributesToDelete(value, fn_if: nil)
          dsl_push_attribute(:AttributesToDelete, value, fn_if: fn_if)
        end

        #   @param [String|JSONable] value
        #     The value to use for RedirectURL
        def RedirectURL(value)
          dsl_attribute(:RedirectURL, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Name
        def Name(value)
          dsl_attribute(:Name, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for FeedbackURL
        def FeedbackURL(value)
          dsl_attribute(:FeedbackURL, value)
        end

        #   @param [ApplicationSettings|JSONable] value
        #     The value to use for ApplicationSettings
        # @@overload ApplicationSettings(&block)
        #   Set :ApplicationSettings from block via instance eval of a new ApplicationSettings
        def ApplicationSettings(value = nil, **value_hash, &block)
          dsl_attribute(:ApplicationSettings, value, attr_class: ApplicationSettings, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for DisplayName
        def DisplayName(value)
          dsl_attribute(:DisplayName, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        # @param [Array<Tag>|JSONable>] values
        #   The List of values to use for Tags
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    The List of values to use for Tags
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end

        # @param [Array<AccessEndpoint>|JSONable>] values
        #   The List of values to use for AccessEndpoints
        def AccessEndpoints(values)
          dsl_list_attribute(:AccessEndpoints, values)
        end

        #  @param [AccessEndpoint|JSONable] value  Append value to the List
        #    The List of values to use for AccessEndpoints
        # @@overload AccessEndpoint(&block)
        # Append value to the List from block via instance eval of a new AccessEndpoint
        def AccessEndpoint(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:AccessEndpoints, value, fn_if: fn_if, attr_class: AccessEndpoint, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::AppStream::Stack]
    def AWS_AppStream_Stack(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::AppStream::Stack, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
