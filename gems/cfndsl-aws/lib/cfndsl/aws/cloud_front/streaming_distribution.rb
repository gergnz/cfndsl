# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module CloudFront
      # Resource Type definition for AWS::CloudFront::StreamingDistribution
      class StreamingDistribution < ResourceType
        # Property Definition StreamingDistributionConfig
        class StreamingDistributionConfig < PropertyType
          #   @param [Logging|JSONable] value
          #     The value to use for Logging
          # @@overload Logging(&block)
          #   Set :Logging from block via instance eval of a new Logging
          def Logging(value = nil, **value_hash, &block)
            dsl_attribute(:Logging, value, attr_class: Logging, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for Comment
          def Comment(value)
            dsl_attribute(:Comment, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for PriceClass
          def PriceClass(value)
            dsl_attribute(:PriceClass, value)
          end

          #   @param [S3Origin|JSONable] value
          #     The value to use for S3Origin
          # @@overload S3Origin(&block)
          #   Set :S3Origin from block via instance eval of a new S3Origin
          def S3Origin(value = nil, **value_hash, &block)
            dsl_attribute(:S3Origin, value, attr_class: S3Origin, **value_hash, &block)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for Enabled
          def Enabled(value)
            dsl_attribute(:Enabled, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Aliases
          def Aliases(values)
            dsl_list_attribute(:Aliases, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Aliases
          def Aliase(value, fn_if: nil)
            dsl_push_attribute(:Aliases, value, fn_if: fn_if)
          end

          #   @param [TrustedSigners|JSONable] value
          #     The value to use for TrustedSigners
          # @@overload TrustedSigners(&block)
          #   Set :TrustedSigners from block via instance eval of a new TrustedSigners
          def TrustedSigners(value = nil, **value_hash, &block)
            dsl_attribute(:TrustedSigners, value, attr_class: TrustedSigners, **value_hash, &block)
          end
        end

        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end
        end

        # Property Definition TrustedSigners
        class TrustedSigners < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for Enabled
          def Enabled(value)
            dsl_attribute(:Enabled, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for AwsAccountNumbers
          def AwsAccountNumbers(values)
            dsl_list_attribute(:AwsAccountNumbers, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for AwsAccountNumbers
          def AwsAccountNumber(value, fn_if: nil)
            dsl_push_attribute(:AwsAccountNumbers, value, fn_if: fn_if)
          end
        end

        # Property Definition Logging
        class Logging < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Bucket
          def Bucket(value)
            dsl_attribute(:Bucket, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for Enabled
          def Enabled(value)
            dsl_attribute(:Enabled, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Prefix
          def Prefix(value)
            dsl_attribute(:Prefix, value)
          end
        end

        # Property Definition S3Origin
        class S3Origin < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for DomainName
          def DomainName(value)
            dsl_attribute(:DomainName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for OriginAccessIdentity
          def OriginAccessIdentity(value)
            dsl_attribute(:OriginAccessIdentity, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for DomainName
        def DomainName(value)
          dsl_attribute(:DomainName, value)
        end

        #   @param [StreamingDistributionConfig|JSONable] value
        #     The value to use for StreamingDistributionConfig
        # @@overload StreamingDistributionConfig(&block)
        #   Set :StreamingDistributionConfig from block via instance eval of a new StreamingDistributionConfig
        def StreamingDistributionConfig(value = nil, **value_hash, &block)
          dsl_attribute(:StreamingDistributionConfig, value, attr_class: StreamingDistributionConfig, **value_hash, &block)
        end

        # @param [Array<Tag>|JSONable>] values
        #   The List of values to use for Tags
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    The List of values to use for Tags
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::CloudFront::StreamingDistribution]
    def AWS_CloudFront_StreamingDistribution(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::CloudFront::StreamingDistribution, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
