# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module CloudFront
      # Resource Type definition for AWS::CloudFront::Distribution
      class Distribution < ResourceType
        # Property Definition Origin
        class Origin < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for ConnectionTimeout
          def ConnectionTimeout(value)
            dsl_attribute(:ConnectionTimeout, value)
          end

          # @param [Array<OriginCustomHeader>|JSONable>] values
          #   The List of values to use for OriginCustomHeaders
          def OriginCustomHeaders(values)
            dsl_list_attribute(:OriginCustomHeaders, values)
          end

          #  @param [OriginCustomHeader|JSONable] value  Append value to the List
          #    The List of values to use for OriginCustomHeaders
          # @@overload OriginCustomHeader(&block)
          # Append value to the List from block via instance eval of a new OriginCustomHeader
          def OriginCustomHeader(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:OriginCustomHeaders, value, fn_if: fn_if, attr_class: OriginCustomHeader, **value_hash, &block)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for ConnectionAttempts
          def ConnectionAttempts(value)
            dsl_attribute(:ConnectionAttempts, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for DomainName
          def DomainName(value)
            dsl_attribute(:DomainName, value)
          end

          #   @param [S3OriginConfig|JSONable] value
          #     The value to use for S3OriginConfig
          # @@overload S3OriginConfig(&block)
          #   Set :S3OriginConfig from block via instance eval of a new S3OriginConfig
          def S3OriginConfig(value = nil, **value_hash, &block)
            dsl_attribute(:S3OriginConfig, value, attr_class: S3OriginConfig, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for OriginPath
          def OriginPath(value)
            dsl_attribute(:OriginPath, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Id
          def Id(value)
            dsl_attribute(:Id, value)
          end

          #   @param [CustomOriginConfig|JSONable] value
          #     The value to use for CustomOriginConfig
          # @@overload CustomOriginConfig(&block)
          #   Set :CustomOriginConfig from block via instance eval of a new CustomOriginConfig
          def CustomOriginConfig(value = nil, **value_hash, &block)
            dsl_attribute(:CustomOriginConfig, value, attr_class: CustomOriginConfig, **value_hash, &block)
          end
        end

        # Property Definition Logging
        class Logging < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for IncludeCookies
          def IncludeCookies(value)
            dsl_attribute(:IncludeCookies, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Prefix
          def Prefix(value)
            dsl_attribute(:Prefix, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Bucket
          def Bucket(value)
            dsl_attribute(:Bucket, value)
          end
        end

        # Property Definition ViewerCertificate
        class ViewerCertificate < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for MinimumProtocolVersion
          def MinimumProtocolVersion(value)
            dsl_attribute(:MinimumProtocolVersion, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for IamCertificateId
          def IamCertificateId(value)
            dsl_attribute(:IamCertificateId, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for SslSupportMethod
          def SslSupportMethod(value)
            dsl_attribute(:SslSupportMethod, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for CloudFrontDefaultCertificate
          def CloudFrontDefaultCertificate(value)
            dsl_attribute(:CloudFrontDefaultCertificate, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for AcmCertificateArn
          def AcmCertificateArn(value)
            dsl_attribute(:AcmCertificateArn, value)
          end
        end

        # Property Definition GeoRestriction
        class GeoRestriction < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Locations
          def Locations(values)
            dsl_list_attribute(:Locations, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Locations
          def Location(value, fn_if: nil)
            dsl_push_attribute(:Locations, value, fn_if: fn_if)
          end

          #   @param [String|JSONable] value
          #     The value to use for RestrictionType
          def RestrictionType(value)
            dsl_attribute(:RestrictionType, value)
          end
        end

        # Property Definition DefaultCacheBehavior
        class DefaultCacheBehavior < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for Compress
          def Compress(value)
            dsl_attribute(:Compress, value)
          end

          # @param [Array<LambdaFunctionAssociation>|JSONable>] values
          #   The List of values to use for LambdaFunctionAssociations
          def LambdaFunctionAssociations(values)
            dsl_list_attribute(:LambdaFunctionAssociations, values)
          end

          #  @param [LambdaFunctionAssociation|JSONable] value  Append value to the List
          #    The List of values to use for LambdaFunctionAssociations
          # @@overload LambdaFunctionAssociation(&block)
          # Append value to the List from block via instance eval of a new LambdaFunctionAssociation
          def LambdaFunctionAssociation(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:LambdaFunctionAssociations, value, fn_if: fn_if, attr_class: LambdaFunctionAssociation, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for TargetOriginId
          def TargetOriginId(value)
            dsl_attribute(:TargetOriginId, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ViewerProtocolPolicy
          def ViewerProtocolPolicy(value)
            dsl_attribute(:ViewerProtocolPolicy, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for TrustedSigners
          def TrustedSigners(values)
            dsl_list_attribute(:TrustedSigners, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for TrustedSigners
          def TrustedSigner(value, fn_if: nil)
            dsl_push_attribute(:TrustedSigners, value, fn_if: fn_if)
          end

          #   @param [Number|JSONable] value
          #     The value to use for DefaultTTL
          def DefaultTTL(value)
            dsl_attribute(:DefaultTTL, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for FieldLevelEncryptionId
          def FieldLevelEncryptionId(value)
            dsl_attribute(:FieldLevelEncryptionId, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for AllowedMethods
          def AllowedMethods(values)
            dsl_list_attribute(:AllowedMethods, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for AllowedMethods
          def AllowedMethod(value, fn_if: nil)
            dsl_push_attribute(:AllowedMethods, value, fn_if: fn_if)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for CachedMethods
          def CachedMethods(values)
            dsl_list_attribute(:CachedMethods, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for CachedMethods
          def CachedMethod(value, fn_if: nil)
            dsl_push_attribute(:CachedMethods, value, fn_if: fn_if)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for SmoothStreaming
          def SmoothStreaming(value)
            dsl_attribute(:SmoothStreaming, value)
          end

          #   @param [ForwardedValues|JSONable] value
          #     The value to use for ForwardedValues
          # @@overload ForwardedValues(&block)
          #   Set :ForwardedValues from block via instance eval of a new ForwardedValues
          def ForwardedValues(value = nil, **value_hash, &block)
            dsl_attribute(:ForwardedValues, value, attr_class: ForwardedValues, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for OriginRequestPolicyId
          def OriginRequestPolicyId(value)
            dsl_attribute(:OriginRequestPolicyId, value)
          end

          #   @param [Number|JSONable] value
          #     The value to use for MinTTL
          def MinTTL(value)
            dsl_attribute(:MinTTL, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for CachePolicyId
          def CachePolicyId(value)
            dsl_attribute(:CachePolicyId, value)
          end

          #   @param [Number|JSONable] value
          #     The value to use for MaxTTL
          def MaxTTL(value)
            dsl_attribute(:MaxTTL, value)
          end
        end

        # Property Definition OriginGroups
        class OriginGroups < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for Quantity
          def Quantity(value)
            dsl_attribute(:Quantity, value)
          end

          # @param [Array<OriginGroup>|JSONable>] values
          #   The List of values to use for Items
          def Items(values)
            dsl_list_attribute(:Items, values)
          end

          #  @param [OriginGroup|JSONable] value  Append value to the List
          #    The List of values to use for Items
          # @@overload Item(&block)
          # Append value to the List from block via instance eval of a new OriginGroup
          def Item(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Items, value, fn_if: fn_if, attr_class: OriginGroup, **value_hash, &block)
          end
        end

        # Property Definition S3OriginConfig
        class S3OriginConfig < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for OriginAccessIdentity
          def OriginAccessIdentity(value)
            dsl_attribute(:OriginAccessIdentity, value)
          end
        end

        # Property Definition OriginGroup
        class OriginGroup < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Id
          def Id(value)
            dsl_attribute(:Id, value)
          end

          #   @param [OriginGroupFailoverCriteria|JSONable] value
          #     The value to use for FailoverCriteria
          # @@overload FailoverCriteria(&block)
          #   Set :FailoverCriteria from block via instance eval of a new OriginGroupFailoverCriteria
          def FailoverCriteria(value = nil, **value_hash, &block)
            dsl_attribute(:FailoverCriteria, value, attr_class: OriginGroupFailoverCriteria, **value_hash, &block)
          end

          #   @param [OriginGroupMembers|JSONable] value
          #     The value to use for Members
          # @@overload Members(&block)
          #   Set :Members from block via instance eval of a new OriginGroupMembers
          def Members(value = nil, **value_hash, &block)
            dsl_attribute(:Members, value, attr_class: OriginGroupMembers, **value_hash, &block)
          end
        end

        # Property Definition StatusCodes
        class StatusCodes < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for Quantity
          def Quantity(value)
            dsl_attribute(:Quantity, value)
          end

          # @param [Array<Integer>|JSONable>] values
          #   The List of values to use for Items
          def Items(values)
            dsl_list_attribute(:Items, values)
          end

          #  @param [Integer|JSONable] value  Append value to the List
          #    The List of values to use for Items
          def Item(value, fn_if: nil)
            dsl_push_attribute(:Items, value, fn_if: fn_if)
          end
        end

        # Property Definition OriginGroupFailoverCriteria
        class OriginGroupFailoverCriteria < PropertyType
          #   @param [StatusCodes|JSONable] value
          #     The value to use for StatusCodes
          # @@overload StatusCodes(&block)
          #   Set :StatusCodes from block via instance eval of a new StatusCodes
          def StatusCodes(value = nil, **value_hash, &block)
            dsl_attribute(:StatusCodes, value, attr_class: StatusCodes, **value_hash, &block)
          end
        end

        # Property Definition CustomOriginConfig
        class CustomOriginConfig < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for OriginReadTimeout
          def OriginReadTimeout(value)
            dsl_attribute(:OriginReadTimeout, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for HTTPSPort
          def HTTPSPort(value)
            dsl_attribute(:HTTPSPort, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for OriginKeepaliveTimeout
          def OriginKeepaliveTimeout(value)
            dsl_attribute(:OriginKeepaliveTimeout, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for OriginSSLProtocols
          def OriginSSLProtocols(values)
            dsl_list_attribute(:OriginSSLProtocols, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for OriginSSLProtocols
          def OriginSSLProtocol(value, fn_if: nil)
            dsl_push_attribute(:OriginSSLProtocols, value, fn_if: fn_if)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for HTTPPort
          def HTTPPort(value)
            dsl_attribute(:HTTPPort, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for OriginProtocolPolicy
          def OriginProtocolPolicy(value)
            dsl_attribute(:OriginProtocolPolicy, value)
          end
        end

        # Property Definition OriginGroupMembers
        class OriginGroupMembers < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for Quantity
          def Quantity(value)
            dsl_attribute(:Quantity, value)
          end

          # @param [Array<OriginGroupMember>|JSONable>] values
          #   The List of values to use for Items
          def Items(values)
            dsl_list_attribute(:Items, values)
          end

          #  @param [OriginGroupMember|JSONable] value  Append value to the List
          #    The List of values to use for Items
          # @@overload Item(&block)
          # Append value to the List from block via instance eval of a new OriginGroupMember
          def Item(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Items, value, fn_if: fn_if, attr_class: OriginGroupMember, **value_hash, &block)
          end
        end

        # Property Definition DistributionConfig
        class DistributionConfig < PropertyType
          #   @param [Logging|JSONable] value
          #     The value to use for Logging
          # @@overload Logging(&block)
          #   Set :Logging from block via instance eval of a new Logging
          def Logging(value = nil, **value_hash, &block)
            dsl_attribute(:Logging, value, attr_class: Logging, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for Comment
          def Comment(value)
            dsl_attribute(:Comment, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for DefaultRootObject
          def DefaultRootObject(value)
            dsl_attribute(:DefaultRootObject, value)
          end

          # @param [Array<Origin>|JSONable>] values
          #   The List of values to use for Origins
          def Origins(values)
            dsl_list_attribute(:Origins, values)
          end

          #  @param [Origin|JSONable] value  Append value to the List
          #    The List of values to use for Origins
          # @@overload Origin(&block)
          # Append value to the List from block via instance eval of a new Origin
          def Origin(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Origins, value, fn_if: fn_if, attr_class: Origin, **value_hash, &block)
          end

          #   @param [ViewerCertificate|JSONable] value
          #     The value to use for ViewerCertificate
          # @@overload ViewerCertificate(&block)
          #   Set :ViewerCertificate from block via instance eval of a new ViewerCertificate
          def ViewerCertificate(value = nil, **value_hash, &block)
            dsl_attribute(:ViewerCertificate, value, attr_class: ViewerCertificate, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for PriceClass
          def PriceClass(value)
            dsl_attribute(:PriceClass, value)
          end

          #   @param [DefaultCacheBehavior|JSONable] value
          #     The value to use for DefaultCacheBehavior
          # @@overload DefaultCacheBehavior(&block)
          #   Set :DefaultCacheBehavior from block via instance eval of a new DefaultCacheBehavior
          def DefaultCacheBehavior(value = nil, **value_hash, &block)
            dsl_attribute(:DefaultCacheBehavior, value, attr_class: DefaultCacheBehavior, **value_hash, &block)
          end

          # @param [Array<CustomErrorResponse>|JSONable>] values
          #   The List of values to use for CustomErrorResponses
          def CustomErrorResponses(values)
            dsl_list_attribute(:CustomErrorResponses, values)
          end

          #  @param [CustomErrorResponse|JSONable] value  Append value to the List
          #    The List of values to use for CustomErrorResponses
          # @@overload CustomErrorRespons(&block)
          # Append value to the List from block via instance eval of a new CustomErrorResponse
          def CustomErrorRespons(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:CustomErrorResponses, value, fn_if: fn_if, attr_class: CustomErrorResponse, **value_hash, &block)
          end

          #   @param [OriginGroups|JSONable] value
          #     The value to use for OriginGroups
          # @@overload OriginGroups(&block)
          #   Set :OriginGroups from block via instance eval of a new OriginGroups
          def OriginGroups(value = nil, **value_hash, &block)
            dsl_attribute(:OriginGroups, value, attr_class: OriginGroups, **value_hash, &block)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for Enabled
          def Enabled(value)
            dsl_attribute(:Enabled, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Aliases
          def Aliases(values)
            dsl_list_attribute(:Aliases, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Aliases
          def Aliase(value, fn_if: nil)
            dsl_push_attribute(:Aliases, value, fn_if: fn_if)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for IPV6Enabled
          def IPV6Enabled(value)
            dsl_attribute(:IPV6Enabled, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for WebACLId
          def WebACLId(value)
            dsl_attribute(:WebACLId, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for HttpVersion
          def HttpVersion(value)
            dsl_attribute(:HttpVersion, value)
          end

          #   @param [Restrictions|JSONable] value
          #     The value to use for Restrictions
          # @@overload Restrictions(&block)
          #   Set :Restrictions from block via instance eval of a new Restrictions
          def Restrictions(value = nil, **value_hash, &block)
            dsl_attribute(:Restrictions, value, attr_class: Restrictions, **value_hash, &block)
          end

          # @param [Array<CacheBehavior>|JSONable>] values
          #   The List of values to use for CacheBehaviors
          def CacheBehaviors(values)
            dsl_list_attribute(:CacheBehaviors, values)
          end

          #  @param [CacheBehavior|JSONable] value  Append value to the List
          #    The List of values to use for CacheBehaviors
          # @@overload CacheBehavior(&block)
          # Append value to the List from block via instance eval of a new CacheBehavior
          def CacheBehavior(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:CacheBehaviors, value, fn_if: fn_if, attr_class: CacheBehavior, **value_hash, &block)
          end
        end

        # Property Definition OriginCustomHeader
        class OriginCustomHeader < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for HeaderName
          def HeaderName(value)
            dsl_attribute(:HeaderName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for HeaderValue
          def HeaderValue(value)
            dsl_attribute(:HeaderValue, value)
          end
        end

        # Property Definition OriginGroupMember
        class OriginGroupMember < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for OriginId
          def OriginId(value)
            dsl_attribute(:OriginId, value)
          end
        end

        # Property Definition LambdaFunctionAssociation
        class LambdaFunctionAssociation < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for IncludeBody
          def IncludeBody(value)
            dsl_attribute(:IncludeBody, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for EventType
          def EventType(value)
            dsl_attribute(:EventType, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for LambdaFunctionARN
          def LambdaFunctionARN(value)
            dsl_attribute(:LambdaFunctionARN, value)
          end
        end

        # Property Definition Cookies
        class Cookies < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for WhitelistedNames
          def WhitelistedNames(values)
            dsl_list_attribute(:WhitelistedNames, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for WhitelistedNames
          def WhitelistedName(value, fn_if: nil)
            dsl_push_attribute(:WhitelistedNames, value, fn_if: fn_if)
          end

          #   @param [String|JSONable] value
          #     The value to use for Forward
          def Forward(value)
            dsl_attribute(:Forward, value)
          end
        end

        # Property Definition ForwardedValues
        class ForwardedValues < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for QueryStringCacheKeys
          def QueryStringCacheKeys(values)
            dsl_list_attribute(:QueryStringCacheKeys, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for QueryStringCacheKeys
          def QueryStringCacheKey(value, fn_if: nil)
            dsl_push_attribute(:QueryStringCacheKeys, value, fn_if: fn_if)
          end

          #   @param [Cookies|JSONable] value
          #     The value to use for Cookies
          # @@overload Cookies(&block)
          #   Set :Cookies from block via instance eval of a new Cookies
          def Cookies(value = nil, **value_hash, &block)
            dsl_attribute(:Cookies, value, attr_class: Cookies, **value_hash, &block)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Headers
          def Headers(values)
            dsl_list_attribute(:Headers, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Headers
          def Header(value, fn_if: nil)
            dsl_push_attribute(:Headers, value, fn_if: fn_if)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for QueryString
          def QueryString(value)
            dsl_attribute(:QueryString, value)
          end
        end

        # Property Definition Tag
        class Tag < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end
        end

        # Property Definition CustomErrorResponse
        class CustomErrorResponse < PropertyType
          #   @param [Number|JSONable] value
          #     The value to use for ErrorCachingMinTTL
          def ErrorCachingMinTTL(value)
            dsl_attribute(:ErrorCachingMinTTL, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for ResponseCode
          def ResponseCode(value)
            dsl_attribute(:ResponseCode, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for ErrorCode
          def ErrorCode(value)
            dsl_attribute(:ErrorCode, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ResponsePagePath
          def ResponsePagePath(value)
            dsl_attribute(:ResponsePagePath, value)
          end
        end

        # Property Definition CacheBehavior
        class CacheBehavior < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for Compress
          def Compress(value)
            dsl_attribute(:Compress, value)
          end

          # @param [Array<LambdaFunctionAssociation>|JSONable>] values
          #   The List of values to use for LambdaFunctionAssociations
          def LambdaFunctionAssociations(values)
            dsl_list_attribute(:LambdaFunctionAssociations, values)
          end

          #  @param [LambdaFunctionAssociation|JSONable] value  Append value to the List
          #    The List of values to use for LambdaFunctionAssociations
          # @@overload LambdaFunctionAssociation(&block)
          # Append value to the List from block via instance eval of a new LambdaFunctionAssociation
          def LambdaFunctionAssociation(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:LambdaFunctionAssociations, value, fn_if: fn_if, attr_class: LambdaFunctionAssociation, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for TargetOriginId
          def TargetOriginId(value)
            dsl_attribute(:TargetOriginId, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ViewerProtocolPolicy
          def ViewerProtocolPolicy(value)
            dsl_attribute(:ViewerProtocolPolicy, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for TrustedSigners
          def TrustedSigners(values)
            dsl_list_attribute(:TrustedSigners, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for TrustedSigners
          def TrustedSigner(value, fn_if: nil)
            dsl_push_attribute(:TrustedSigners, value, fn_if: fn_if)
          end

          #   @param [Number|JSONable] value
          #     The value to use for DefaultTTL
          def DefaultTTL(value)
            dsl_attribute(:DefaultTTL, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for FieldLevelEncryptionId
          def FieldLevelEncryptionId(value)
            dsl_attribute(:FieldLevelEncryptionId, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for AllowedMethods
          def AllowedMethods(values)
            dsl_list_attribute(:AllowedMethods, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for AllowedMethods
          def AllowedMethod(value, fn_if: nil)
            dsl_push_attribute(:AllowedMethods, value, fn_if: fn_if)
          end

          #   @param [String|JSONable] value
          #     The value to use for PathPattern
          def PathPattern(value)
            dsl_attribute(:PathPattern, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for CachedMethods
          def CachedMethods(values)
            dsl_list_attribute(:CachedMethods, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for CachedMethods
          def CachedMethod(value, fn_if: nil)
            dsl_push_attribute(:CachedMethods, value, fn_if: fn_if)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for SmoothStreaming
          def SmoothStreaming(value)
            dsl_attribute(:SmoothStreaming, value)
          end

          #   @param [ForwardedValues|JSONable] value
          #     The value to use for ForwardedValues
          # @@overload ForwardedValues(&block)
          #   Set :ForwardedValues from block via instance eval of a new ForwardedValues
          def ForwardedValues(value = nil, **value_hash, &block)
            dsl_attribute(:ForwardedValues, value, attr_class: ForwardedValues, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for OriginRequestPolicyId
          def OriginRequestPolicyId(value)
            dsl_attribute(:OriginRequestPolicyId, value)
          end

          #   @param [Number|JSONable] value
          #     The value to use for MinTTL
          def MinTTL(value)
            dsl_attribute(:MinTTL, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for CachePolicyId
          def CachePolicyId(value)
            dsl_attribute(:CachePolicyId, value)
          end

          #   @param [Number|JSONable] value
          #     The value to use for MaxTTL
          def MaxTTL(value)
            dsl_attribute(:MaxTTL, value)
          end
        end

        # Property Definition Restrictions
        class Restrictions < PropertyType
          #   @param [GeoRestriction|JSONable] value
          #     The value to use for GeoRestriction
          # @@overload GeoRestriction(&block)
          #   Set :GeoRestriction from block via instance eval of a new GeoRestriction
          def GeoRestriction(value = nil, **value_hash, &block)
            dsl_attribute(:GeoRestriction, value, attr_class: GeoRestriction, **value_hash, &block)
          end
        end

        #   @param [DistributionConfig|JSONable] value
        #     The value to use for DistributionConfig
        # @@overload DistributionConfig(&block)
        #   Set :DistributionConfig from block via instance eval of a new DistributionConfig
        def DistributionConfig(value = nil, **value_hash, &block)
          dsl_attribute(:DistributionConfig, value, attr_class: DistributionConfig, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for DomainName
        def DomainName(value)
          dsl_attribute(:DomainName, value)
        end

        # @param [Array<Tag>|JSONable>] values
        #   The List of values to use for Tags
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Tag|JSONable] value  Append value to the List
        #    The List of values to use for Tags
        # @@overload Tag(&block)
        # Append value to the List from block via instance eval of a new Tag
        def Tag(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:Tags, value, fn_if: fn_if, attr_class: Tag, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::CloudFront::Distribution]
    def AWS_CloudFront_Distribution(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::CloudFront::Distribution, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
