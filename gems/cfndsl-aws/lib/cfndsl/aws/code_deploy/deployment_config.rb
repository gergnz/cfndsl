# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module CodeDeploy
      # Resource Type definition for AWS::CodeDeploy::DeploymentConfig
      class DeploymentConfig < ResourceType
        # Property Definition MinimumHealthyHosts
        class MinimumHealthyHosts < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Type
          def Type(value)
            dsl_attribute(:Type, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for DeploymentConfigName
        def DeploymentConfigName(value)
          dsl_attribute(:DeploymentConfigName, value)
        end

        #   @param [MinimumHealthyHosts|JSONable] value
        #     The value to use for MinimumHealthyHosts
        # @@overload MinimumHealthyHosts(&block)
        #   Set :MinimumHealthyHosts from block via instance eval of a new MinimumHealthyHosts
        def MinimumHealthyHosts(value = nil, **value_hash, &block)
          dsl_attribute(:MinimumHealthyHosts, value, attr_class: MinimumHealthyHosts, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::CodeDeploy::DeploymentConfig]
    def AWS_CodeDeploy_DeploymentConfig(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::CodeDeploy::DeploymentConfig, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
