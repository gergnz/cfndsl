# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module IoT
      # Create and manage a Domain Configuration
      # @see https://github.com/aws-cloudformation/aws-cloudformation-rpdk.git
      class DomainConfiguration < ResourceType
        # Property Definition AuthorizerConfig
        class AuthorizerConfig < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for AllowAuthorizerOverride
          def AllowAuthorizerOverride(value)
            dsl_attribute(:AllowAuthorizerOverride, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for DefaultAuthorizerName
          def DefaultAuthorizerName(value)
            dsl_attribute(:DefaultAuthorizerName, value)
          end
        end

        # Property Definition ServerCertificateSummary
        class ServerCertificateSummary < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ServerCertificateArn
          def ServerCertificateArn(value)
            dsl_attribute(:ServerCertificateArn, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ServerCertificateStatus
          def ServerCertificateStatus(value)
            dsl_attribute(:ServerCertificateStatus, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ServerCertificateStatusDetail
          def ServerCertificateStatusDetail(value)
            dsl_attribute(:ServerCertificateStatusDetail, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for DomainConfigurationName
        def DomainConfigurationName(value)
          dsl_attribute(:DomainConfigurationName, value)
        end

        #   @param [AuthorizerConfig|JSONable] value
        #     The value to use for AuthorizerConfig
        # @@overload AuthorizerConfig(&block)
        #   Set :AuthorizerConfig from block via instance eval of a new AuthorizerConfig
        def AuthorizerConfig(value = nil, **value_hash, &block)
          dsl_attribute(:AuthorizerConfig, value, attr_class: AuthorizerConfig, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for DomainName
        def DomainName(value)
          dsl_attribute(:DomainName, value)
        end

        # @param [Array<String>|JSONable>] values
        #   The List of values to use for ServerCertificateArns
        def ServerCertificateArns(values)
          dsl_list_attribute(:ServerCertificateArns, values)
        end

        #  @param [String|JSONable] value  Append value to the List
        #    The List of values to use for ServerCertificateArns
        def ServerCertificateArn(value, fn_if: nil)
          dsl_push_attribute(:ServerCertificateArns, value, fn_if: fn_if)
        end

        #   @param [String|JSONable] value
        #     The value to use for ServiceType
        def ServiceType(value)
          dsl_attribute(:ServiceType, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for ValidationCertificateArn
        def ValidationCertificateArn(value)
          dsl_attribute(:ValidationCertificateArn, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Arn
        def Arn(value)
          dsl_attribute(:Arn, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for DomainConfigurationStatus
        def DomainConfigurationStatus(value)
          dsl_attribute(:DomainConfigurationStatus, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for DomainType
        def DomainType(value)
          dsl_attribute(:DomainType, value)
        end

        # @param [Array<ServerCertificateSummary>|JSONable>] values
        #   The List of values to use for ServerCertificates
        def ServerCertificates(values)
          dsl_list_attribute(:ServerCertificates, values)
        end

        #  @param [ServerCertificateSummary|JSONable] value  Append value to the List
        #    The List of values to use for ServerCertificates
        # @@overload ServerCertificate(&block)
        # Append value to the List from block via instance eval of a new ServerCertificateSummary
        def ServerCertificate(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:ServerCertificates, value, fn_if: fn_if, attr_class: ServerCertificateSummary, **value_hash, &block)
        end

        # @param [Array<Object>|JSONable>] values
        #   The List of values to use for Tags
        def Tags(values)
          dsl_list_attribute(:Tags, values)
        end

        #  @param [Object|JSONable] value  Append value to the List
        #    The List of values to use for Tags
        def Tag(value, fn_if: nil)
          dsl_push_attribute(:Tags, value, fn_if: fn_if)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::IoT::DomainConfiguration]
    def AWS_IoT_DomainConfiguration(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::IoT::DomainConfiguration, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
