# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module IoT
      # Resource Type definition for AWS::IoT::TopicRule
      class TopicRule < ResourceType
        # Property Definition Action
        class Action < PropertyType
          #   @param [S3Action|JSONable] value
          #     The value to use for S3
          # @@overload S3(&block)
          #   Set :S3 from block via instance eval of a new S3Action
          def S3(value = nil, **value_hash, &block)
            dsl_attribute(:S3, value, attr_class: S3Action, **value_hash, &block)
          end

          #   @param [CloudwatchAlarmAction|JSONable] value
          #     The value to use for CloudwatchAlarm
          # @@overload CloudwatchAlarm(&block)
          #   Set :CloudwatchAlarm from block via instance eval of a new CloudwatchAlarmAction
          def CloudwatchAlarm(value = nil, **value_hash, &block)
            dsl_attribute(:CloudwatchAlarm, value, attr_class: CloudwatchAlarmAction, **value_hash, &block)
          end

          #   @param [IotEventsAction|JSONable] value
          #     The value to use for IotEvents
          # @@overload IotEvents(&block)
          #   Set :IotEvents from block via instance eval of a new IotEventsAction
          def IotEvents(value = nil, **value_hash, &block)
            dsl_attribute(:IotEvents, value, attr_class: IotEventsAction, **value_hash, &block)
          end

          #   @param [FirehoseAction|JSONable] value
          #     The value to use for Firehose
          # @@overload Firehose(&block)
          #   Set :Firehose from block via instance eval of a new FirehoseAction
          def Firehose(value = nil, **value_hash, &block)
            dsl_attribute(:Firehose, value, attr_class: FirehoseAction, **value_hash, &block)
          end

          #   @param [RepublishAction|JSONable] value
          #     The value to use for Republish
          # @@overload Republish(&block)
          #   Set :Republish from block via instance eval of a new RepublishAction
          def Republish(value = nil, **value_hash, &block)
            dsl_attribute(:Republish, value, attr_class: RepublishAction, **value_hash, &block)
          end

          #   @param [StepFunctionsAction|JSONable] value
          #     The value to use for StepFunctions
          # @@overload StepFunctions(&block)
          #   Set :StepFunctions from block via instance eval of a new StepFunctionsAction
          def StepFunctions(value = nil, **value_hash, &block)
            dsl_attribute(:StepFunctions, value, attr_class: StepFunctionsAction, **value_hash, &block)
          end

          #   @param [DynamoDBAction|JSONable] value
          #     The value to use for DynamoDB
          # @@overload DynamoDB(&block)
          #   Set :DynamoDB from block via instance eval of a new DynamoDBAction
          def DynamoDB(value = nil, **value_hash, &block)
            dsl_attribute(:DynamoDB, value, attr_class: DynamoDBAction, **value_hash, &block)
          end

          #   @param [HttpAction|JSONable] value
          #     The value to use for Http
          # @@overload Http(&block)
          #   Set :Http from block via instance eval of a new HttpAction
          def Http(value = nil, **value_hash, &block)
            dsl_attribute(:Http, value, attr_class: HttpAction, **value_hash, &block)
          end

          #   @param [DynamoDBv2Action|JSONable] value
          #     The value to use for DynamoDBv2
          # @@overload DynamoDBv2(&block)
          #   Set :DynamoDBv2 from block via instance eval of a new DynamoDBv2Action
          def DynamoDBv2(value = nil, **value_hash, &block)
            dsl_attribute(:DynamoDBv2, value, attr_class: DynamoDBv2Action, **value_hash, &block)
          end

          #   @param [CloudwatchMetricAction|JSONable] value
          #     The value to use for CloudwatchMetric
          # @@overload CloudwatchMetric(&block)
          #   Set :CloudwatchMetric from block via instance eval of a new CloudwatchMetricAction
          def CloudwatchMetric(value = nil, **value_hash, &block)
            dsl_attribute(:CloudwatchMetric, value, attr_class: CloudwatchMetricAction, **value_hash, &block)
          end

          #   @param [IotSiteWiseAction|JSONable] value
          #     The value to use for IotSiteWise
          # @@overload IotSiteWise(&block)
          #   Set :IotSiteWise from block via instance eval of a new IotSiteWiseAction
          def IotSiteWise(value = nil, **value_hash, &block)
            dsl_attribute(:IotSiteWise, value, attr_class: IotSiteWiseAction, **value_hash, &block)
          end

          #   @param [ElasticsearchAction|JSONable] value
          #     The value to use for Elasticsearch
          # @@overload Elasticsearch(&block)
          #   Set :Elasticsearch from block via instance eval of a new ElasticsearchAction
          def Elasticsearch(value = nil, **value_hash, &block)
            dsl_attribute(:Elasticsearch, value, attr_class: ElasticsearchAction, **value_hash, &block)
          end

          #   @param [SqsAction|JSONable] value
          #     The value to use for Sqs
          # @@overload Sqs(&block)
          #   Set :Sqs from block via instance eval of a new SqsAction
          def Sqs(value = nil, **value_hash, &block)
            dsl_attribute(:Sqs, value, attr_class: SqsAction, **value_hash, &block)
          end

          #   @param [KinesisAction|JSONable] value
          #     The value to use for Kinesis
          # @@overload Kinesis(&block)
          #   Set :Kinesis from block via instance eval of a new KinesisAction
          def Kinesis(value = nil, **value_hash, &block)
            dsl_attribute(:Kinesis, value, attr_class: KinesisAction, **value_hash, &block)
          end

          #   @param [IotAnalyticsAction|JSONable] value
          #     The value to use for IotAnalytics
          # @@overload IotAnalytics(&block)
          #   Set :IotAnalytics from block via instance eval of a new IotAnalyticsAction
          def IotAnalytics(value = nil, **value_hash, &block)
            dsl_attribute(:IotAnalytics, value, attr_class: IotAnalyticsAction, **value_hash, &block)
          end

          #   @param [SnsAction|JSONable] value
          #     The value to use for Sns
          # @@overload Sns(&block)
          #   Set :Sns from block via instance eval of a new SnsAction
          def Sns(value = nil, **value_hash, &block)
            dsl_attribute(:Sns, value, attr_class: SnsAction, **value_hash, &block)
          end

          #   @param [LambdaAction|JSONable] value
          #     The value to use for Lambda
          # @@overload Lambda(&block)
          #   Set :Lambda from block via instance eval of a new LambdaAction
          def Lambda(value = nil, **value_hash, &block)
            dsl_attribute(:Lambda, value, attr_class: LambdaAction, **value_hash, &block)
          end
        end

        # Property Definition ElasticsearchAction
        class ElasticsearchAction < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Type
          def Type(value)
            dsl_attribute(:Type, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Index
          def Index(value)
            dsl_attribute(:Index, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Id
          def Id(value)
            dsl_attribute(:Id, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Endpoint
          def Endpoint(value)
            dsl_attribute(:Endpoint, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for RoleArn
          def RoleArn(value)
            dsl_attribute(:RoleArn, value)
          end
        end

        # Property Definition KinesisAction
        class KinesisAction < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for PartitionKey
          def PartitionKey(value)
            dsl_attribute(:PartitionKey, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for StreamName
          def StreamName(value)
            dsl_attribute(:StreamName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for RoleArn
          def RoleArn(value)
            dsl_attribute(:RoleArn, value)
          end
        end

        # Property Definition FirehoseAction
        class FirehoseAction < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for DeliveryStreamName
          def DeliveryStreamName(value)
            dsl_attribute(:DeliveryStreamName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for RoleArn
          def RoleArn(value)
            dsl_attribute(:RoleArn, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Separator
          def Separator(value)
            dsl_attribute(:Separator, value)
          end
        end

        # Property Definition AssetPropertyTimestamp
        class AssetPropertyTimestamp < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for TimeInSeconds
          def TimeInSeconds(value)
            dsl_attribute(:TimeInSeconds, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for OffsetInNanos
          def OffsetInNanos(value)
            dsl_attribute(:OffsetInNanos, value)
          end
        end

        # Property Definition CloudwatchMetricAction
        class CloudwatchMetricAction < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for MetricName
          def MetricName(value)
            dsl_attribute(:MetricName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for MetricValue
          def MetricValue(value)
            dsl_attribute(:MetricValue, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for MetricNamespace
          def MetricNamespace(value)
            dsl_attribute(:MetricNamespace, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for MetricUnit
          def MetricUnit(value)
            dsl_attribute(:MetricUnit, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for RoleArn
          def RoleArn(value)
            dsl_attribute(:RoleArn, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for MetricTimestamp
          def MetricTimestamp(value)
            dsl_attribute(:MetricTimestamp, value)
          end
        end

        # Property Definition AssetPropertyVariant
        class AssetPropertyVariant < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for StringValue
          def StringValue(value)
            dsl_attribute(:StringValue, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for DoubleValue
          def DoubleValue(value)
            dsl_attribute(:DoubleValue, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for BooleanValue
          def BooleanValue(value)
            dsl_attribute(:BooleanValue, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for IntegerValue
          def IntegerValue(value)
            dsl_attribute(:IntegerValue, value)
          end
        end

        # Property Definition DynamoDBAction
        class DynamoDBAction < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for TableName
          def TableName(value)
            dsl_attribute(:TableName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for PayloadField
          def PayloadField(value)
            dsl_attribute(:PayloadField, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for RangeKeyField
          def RangeKeyField(value)
            dsl_attribute(:RangeKeyField, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for HashKeyField
          def HashKeyField(value)
            dsl_attribute(:HashKeyField, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for RangeKeyValue
          def RangeKeyValue(value)
            dsl_attribute(:RangeKeyValue, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for RangeKeyType
          def RangeKeyType(value)
            dsl_attribute(:RangeKeyType, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for HashKeyType
          def HashKeyType(value)
            dsl_attribute(:HashKeyType, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for HashKeyValue
          def HashKeyValue(value)
            dsl_attribute(:HashKeyValue, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for RoleArn
          def RoleArn(value)
            dsl_attribute(:RoleArn, value)
          end
        end

        # Property Definition RepublishAction
        class RepublishAction < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for Qos
          def Qos(value)
            dsl_attribute(:Qos, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Topic
          def Topic(value)
            dsl_attribute(:Topic, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for RoleArn
          def RoleArn(value)
            dsl_attribute(:RoleArn, value)
          end
        end

        # Property Definition SnsAction
        class SnsAction < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for TargetArn
          def TargetArn(value)
            dsl_attribute(:TargetArn, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for MessageFormat
          def MessageFormat(value)
            dsl_attribute(:MessageFormat, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for RoleArn
          def RoleArn(value)
            dsl_attribute(:RoleArn, value)
          end
        end

        # Property Definition StepFunctionsAction
        class StepFunctionsAction < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ExecutionNamePrefix
          def ExecutionNamePrefix(value)
            dsl_attribute(:ExecutionNamePrefix, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for StateMachineName
          def StateMachineName(value)
            dsl_attribute(:StateMachineName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for RoleArn
          def RoleArn(value)
            dsl_attribute(:RoleArn, value)
          end
        end

        # Property Definition SqsAction
        class SqsAction < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for RoleArn
          def RoleArn(value)
            dsl_attribute(:RoleArn, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for UseBase64
          def UseBase64(value)
            dsl_attribute(:UseBase64, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for QueueUrl
          def QueueUrl(value)
            dsl_attribute(:QueueUrl, value)
          end
        end

        # Property Definition SigV4Authorization
        class SigV4Authorization < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ServiceName
          def ServiceName(value)
            dsl_attribute(:ServiceName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for SigningRegion
          def SigningRegion(value)
            dsl_attribute(:SigningRegion, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for RoleArn
          def RoleArn(value)
            dsl_attribute(:RoleArn, value)
          end
        end

        # Property Definition LambdaAction
        class LambdaAction < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for FunctionArn
          def FunctionArn(value)
            dsl_attribute(:FunctionArn, value)
          end
        end

        # Property Definition PutAssetPropertyValueEntry
        class PutAssetPropertyValueEntry < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for PropertyAlias
          def PropertyAlias(value)
            dsl_attribute(:PropertyAlias, value)
          end

          # @param [Array<AssetPropertyValue>|JSONable>] values
          #   The List of values to use for PropertyValues
          def PropertyValues(values)
            dsl_list_attribute(:PropertyValues, values)
          end

          #  @param [AssetPropertyValue|JSONable] value  Append value to the List
          #    The List of values to use for PropertyValues
          # @@overload PropertyValue(&block)
          # Append value to the List from block via instance eval of a new AssetPropertyValue
          def PropertyValue(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:PropertyValues, value, fn_if: fn_if, attr_class: AssetPropertyValue, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for AssetId
          def AssetId(value)
            dsl_attribute(:AssetId, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for EntryId
          def EntryId(value)
            dsl_attribute(:EntryId, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for PropertyId
          def PropertyId(value)
            dsl_attribute(:PropertyId, value)
          end
        end

        # Property Definition PutItemInput
        class PutItemInput < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for TableName
          def TableName(value)
            dsl_attribute(:TableName, value)
          end
        end

        # Property Definition S3Action
        class S3Action < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for BucketName
          def BucketName(value)
            dsl_attribute(:BucketName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for RoleArn
          def RoleArn(value)
            dsl_attribute(:RoleArn, value)
          end
        end

        # Property Definition AssetPropertyValue
        class AssetPropertyValue < PropertyType
          #   @param [AssetPropertyVariant|JSONable] value
          #     The value to use for Value
          # @@overload Value(&block)
          #   Set :Value from block via instance eval of a new AssetPropertyVariant
          def Value(value = nil, **value_hash, &block)
            dsl_attribute(:Value, value, attr_class: AssetPropertyVariant, **value_hash, &block)
          end

          #   @param [AssetPropertyTimestamp|JSONable] value
          #     The value to use for Timestamp
          # @@overload Timestamp(&block)
          #   Set :Timestamp from block via instance eval of a new AssetPropertyTimestamp
          def Timestamp(value = nil, **value_hash, &block)
            dsl_attribute(:Timestamp, value, attr_class: AssetPropertyTimestamp, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for Quality
          def Quality(value)
            dsl_attribute(:Quality, value)
          end
        end

        # Property Definition DynamoDBv2Action
        class DynamoDBv2Action < PropertyType
          #   @param [PutItemInput|JSONable] value
          #     The value to use for PutItem
          # @@overload PutItem(&block)
          #   Set :PutItem from block via instance eval of a new PutItemInput
          def PutItem(value = nil, **value_hash, &block)
            dsl_attribute(:PutItem, value, attr_class: PutItemInput, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for RoleArn
          def RoleArn(value)
            dsl_attribute(:RoleArn, value)
          end
        end

        # Property Definition IotEventsAction
        class IotEventsAction < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for InputName
          def InputName(value)
            dsl_attribute(:InputName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for RoleArn
          def RoleArn(value)
            dsl_attribute(:RoleArn, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for MessageId
          def MessageId(value)
            dsl_attribute(:MessageId, value)
          end
        end

        # Property Definition HttpAuthorization
        class HttpAuthorization < PropertyType
          #   @param [SigV4Authorization|JSONable] value
          #     The value to use for Sigv4
          # @@overload Sigv4(&block)
          #   Set :Sigv4 from block via instance eval of a new SigV4Authorization
          def Sigv4(value = nil, **value_hash, &block)
            dsl_attribute(:Sigv4, value, attr_class: SigV4Authorization, **value_hash, &block)
          end
        end

        # Property Definition TopicRulePayload
        class TopicRulePayload < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for RuleDisabled
          def RuleDisabled(value)
            dsl_attribute(:RuleDisabled, value)
          end

          #   @param [Action|JSONable] value
          #     The value to use for ErrorAction
          # @@overload ErrorAction(&block)
          #   Set :ErrorAction from block via instance eval of a new Action
          def ErrorAction(value = nil, **value_hash, &block)
            dsl_attribute(:ErrorAction, value, attr_class: Action, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for Description
          def Description(value)
            dsl_attribute(:Description, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for AwsIotSqlVersion
          def AwsIotSqlVersion(value)
            dsl_attribute(:AwsIotSqlVersion, value)
          end

          # @param [Array<Action>|JSONable>] values
          #   The List of values to use for Actions
          def Actions(values)
            dsl_list_attribute(:Actions, values)
          end

          #  @param [Action|JSONable] value  Append value to the List
          #    The List of values to use for Actions
          # @@overload Action(&block)
          # Append value to the List from block via instance eval of a new Action
          def Action(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Actions, value, fn_if: fn_if, attr_class: Action, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for Sql
          def Sql(value)
            dsl_attribute(:Sql, value)
          end
        end

        # Property Definition CloudwatchAlarmAction
        class CloudwatchAlarmAction < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for StateValue
          def StateValue(value)
            dsl_attribute(:StateValue, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for AlarmName
          def AlarmName(value)
            dsl_attribute(:AlarmName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for StateReason
          def StateReason(value)
            dsl_attribute(:StateReason, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for RoleArn
          def RoleArn(value)
            dsl_attribute(:RoleArn, value)
          end
        end

        # Property Definition IotAnalyticsAction
        class IotAnalyticsAction < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for RoleArn
          def RoleArn(value)
            dsl_attribute(:RoleArn, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ChannelName
          def ChannelName(value)
            dsl_attribute(:ChannelName, value)
          end
        end

        # Property Definition HttpActionHeader
        class HttpActionHeader < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Key
          def Key(value)
            dsl_attribute(:Key, value)
          end
        end

        # Property Definition IotSiteWiseAction
        class IotSiteWiseAction < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for RoleArn
          def RoleArn(value)
            dsl_attribute(:RoleArn, value)
          end

          # @param [Array<PutAssetPropertyValueEntry>|JSONable>] values
          #   The List of values to use for PutAssetPropertyValueEntries
          def PutAssetPropertyValueEntries(values)
            dsl_list_attribute(:PutAssetPropertyValueEntries, values)
          end

          #  @param [PutAssetPropertyValueEntry|JSONable] value  Append value to the List
          #    The List of values to use for PutAssetPropertyValueEntries
          # @@overload PutAssetPropertyValueEntry(&block)
          # Append value to the List from block via instance eval of a new PutAssetPropertyValueEntry
          def PutAssetPropertyValueEntry(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:PutAssetPropertyValueEntries, value, fn_if: fn_if, attr_class: PutAssetPropertyValueEntry, **value_hash, &block)
          end
        end

        # Property Definition HttpAction
        class HttpAction < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ConfirmationUrl
          def ConfirmationUrl(value)
            dsl_attribute(:ConfirmationUrl, value)
          end

          # @param [Array<HttpActionHeader>|JSONable>] values
          #   The List of values to use for Headers
          def Headers(values)
            dsl_list_attribute(:Headers, values)
          end

          #  @param [HttpActionHeader|JSONable] value  Append value to the List
          #    The List of values to use for Headers
          # @@overload Header(&block)
          # Append value to the List from block via instance eval of a new HttpActionHeader
          def Header(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Headers, value, fn_if: fn_if, attr_class: HttpActionHeader, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for Url
          def Url(value)
            dsl_attribute(:Url, value)
          end

          #   @param [HttpAuthorization|JSONable] value
          #     The value to use for Auth
          # @@overload Auth(&block)
          #   Set :Auth from block via instance eval of a new HttpAuthorization
          def Auth(value = nil, **value_hash, &block)
            dsl_attribute(:Auth, value, attr_class: HttpAuthorization, **value_hash, &block)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Arn
        def Arn(value)
          dsl_attribute(:Arn, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for RuleName
        def RuleName(value)
          dsl_attribute(:RuleName, value)
        end

        #   @param [TopicRulePayload|JSONable] value
        #     The value to use for TopicRulePayload
        # @@overload TopicRulePayload(&block)
        #   Set :TopicRulePayload from block via instance eval of a new TopicRulePayload
        def TopicRulePayload(value = nil, **value_hash, &block)
          dsl_attribute(:TopicRulePayload, value, attr_class: TopicRulePayload, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::IoT::TopicRule]
    def AWS_IoT_TopicRule(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::IoT::TopicRule, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
