# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module Batch
      # Resource Type definition for AWS::Batch::ComputeEnvironment
      class ComputeEnvironment < ResourceType
        # Property Definition LaunchTemplateSpecification
        class LaunchTemplateSpecification < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for LaunchTemplateName
          def LaunchTemplateName(value)
            dsl_attribute(:LaunchTemplateName, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for LaunchTemplateId
          def LaunchTemplateId(value)
            dsl_attribute(:LaunchTemplateId, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Version
          def Version(value)
            dsl_attribute(:Version, value)
          end
        end

        # Property Definition ComputeResources
        class ComputeResources < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for SpotIamFleetRole
          def SpotIamFleetRole(value)
            dsl_attribute(:SpotIamFleetRole, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for MaxvCpus
          def MaxvCpus(value)
            dsl_attribute(:MaxvCpus, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for BidPercentage
          def BidPercentage(value)
            dsl_attribute(:BidPercentage, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for SecurityGroupIds
          def SecurityGroupIds(values)
            dsl_list_attribute(:SecurityGroupIds, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for SecurityGroupIds
          def SecurityGroupId(value, fn_if: nil)
            dsl_push_attribute(:SecurityGroupIds, value, fn_if: fn_if)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Subnets
          def Subnets(values)
            dsl_list_attribute(:Subnets, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Subnets
          def Subnet(value, fn_if: nil)
            dsl_push_attribute(:Subnets, value, fn_if: fn_if)
          end

          #   @param [String|JSONable] value
          #     The value to use for Type
          def Type(value)
            dsl_attribute(:Type, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for AllocationStrategy
          def AllocationStrategy(value)
            dsl_attribute(:AllocationStrategy, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for MinvCpus
          def MinvCpus(value)
            dsl_attribute(:MinvCpus, value)
          end

          #   @param [LaunchTemplateSpecification|JSONable] value
          #     The value to use for LaunchTemplate
          # @@overload LaunchTemplate(&block)
          #   Set :LaunchTemplate from block via instance eval of a new LaunchTemplateSpecification
          def LaunchTemplate(value = nil, **value_hash, &block)
            dsl_attribute(:LaunchTemplate, value, attr_class: LaunchTemplateSpecification, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for ImageId
          def ImageId(value)
            dsl_attribute(:ImageId, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for InstanceRole
          def InstanceRole(value)
            dsl_attribute(:InstanceRole, value)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for InstanceTypes
          def InstanceTypes(values)
            dsl_list_attribute(:InstanceTypes, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for InstanceTypes
          def InstanceTyp(value, fn_if: nil)
            dsl_push_attribute(:InstanceTypes, value, fn_if: fn_if)
          end

          #   @param [String|JSONable] value
          #     The value to use for Ec2KeyPair
          def Ec2KeyPair(value)
            dsl_attribute(:Ec2KeyPair, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for PlacementGroup
          def PlacementGroup(value)
            dsl_attribute(:PlacementGroup, value)
          end

          #   @param [Object|JSONable] value
          #     The value to use for Tags
          def Tags(value)
            dsl_attribute(:Tags, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for DesiredvCpus
          def DesiredvCpus(value)
            dsl_attribute(:DesiredvCpus, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for Type
        def Type(value)
          dsl_attribute(:Type, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for ServiceRole
        def ServiceRole(value)
          dsl_attribute(:ServiceRole, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for ComputeEnvironmentName
        def ComputeEnvironmentName(value)
          dsl_attribute(:ComputeEnvironmentName, value)
        end

        #   @param [ComputeResources|JSONable] value
        #     The value to use for ComputeResources
        # @@overload ComputeResources(&block)
        #   Set :ComputeResources from block via instance eval of a new ComputeResources
        def ComputeResources(value = nil, **value_hash, &block)
          dsl_attribute(:ComputeResources, value, attr_class: ComputeResources, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for State
        def State(value)
          dsl_attribute(:State, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::Batch::ComputeEnvironment]
    def AWS_Batch_ComputeEnvironment(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::Batch::ComputeEnvironment, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
