# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module Batch
      # Resource Type definition for AWS::Batch::JobQueue
      class JobQueue < ResourceType
        # Property Definition ComputeEnvironmentOrder
        class ComputeEnvironmentOrder < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ComputeEnvironment
          def ComputeEnvironment(value)
            dsl_attribute(:ComputeEnvironment, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for Order
          def Order(value)
            dsl_attribute(:Order, value)
          end
        end

        # @param [Array<ComputeEnvironmentOrder>|JSONable>] values
        #   The List of values to use for ComputeEnvironmentOrder
        def ComputeEnvironmentOrders(values)
          dsl_list_attribute(:ComputeEnvironmentOrder, values)
        end

        #  @param [ComputeEnvironmentOrder|JSONable] value  Append value to the List
        #    The List of values to use for ComputeEnvironmentOrder
        # @@overload ComputeEnvironmentOrder(&block)
        # Append value to the List from block via instance eval of a new ComputeEnvironmentOrder
        def ComputeEnvironmentOrder(value = nil, fn_if: nil, **value_hash, &block)
          dsl_push_attribute(:ComputeEnvironmentOrder, value, fn_if: fn_if, attr_class: ComputeEnvironmentOrder, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [Integer|JSONable] value
        #     The value to use for Priority
        def Priority(value)
          dsl_attribute(:Priority, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for State
        def State(value)
          dsl_attribute(:State, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for JobQueueName
        def JobQueueName(value)
          dsl_attribute(:JobQueueName, value)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::Batch::JobQueue]
    def AWS_Batch_JobQueue(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::Batch::JobQueue, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
