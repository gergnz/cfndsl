# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module AWS
    module Batch
      # Resource Type definition for AWS::Batch::JobDefinition
      class JobDefinition < ResourceType
        # Property Definition Timeout
        class Timeout < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for AttemptDurationSeconds
          def AttemptDurationSeconds(value)
            dsl_attribute(:AttemptDurationSeconds, value)
          end
        end

        # Property Definition Device
        class Device < PropertyType
          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Permissions
          def Permissions(values)
            dsl_list_attribute(:Permissions, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Permissions
          def Permission(value, fn_if: nil)
            dsl_push_attribute(:Permissions, value, fn_if: fn_if)
          end

          #   @param [String|JSONable] value
          #     The value to use for HostPath
          def HostPath(value)
            dsl_attribute(:HostPath, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ContainerPath
          def ContainerPath(value)
            dsl_attribute(:ContainerPath, value)
          end
        end

        # Property Definition LinuxParameters
        class LinuxParameters < PropertyType
          # @param [Array<Device>|JSONable>] values
          #   The List of values to use for Devices
          def Devices(values)
            dsl_list_attribute(:Devices, values)
          end

          #  @param [Device|JSONable] value  Append value to the List
          #    The List of values to use for Devices
          # @@overload Device(&block)
          # Append value to the List from block via instance eval of a new Device
          def Device(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Devices, value, fn_if: fn_if, attr_class: Device, **value_hash, &block)
          end
        end

        # Property Definition NodeRangeProperty
        class NodeRangeProperty < PropertyType
          #   @param [ContainerProperties|JSONable] value
          #     The value to use for Container
          # @@overload Container(&block)
          #   Set :Container from block via instance eval of a new ContainerProperties
          def Container(value = nil, **value_hash, &block)
            dsl_attribute(:Container, value, attr_class: ContainerProperties, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for TargetNodes
          def TargetNodes(value)
            dsl_attribute(:TargetNodes, value)
          end
        end

        # Property Definition Ulimit
        class Ulimit < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for SoftLimit
          def SoftLimit(value)
            dsl_attribute(:SoftLimit, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for HardLimit
          def HardLimit(value)
            dsl_attribute(:HardLimit, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end
        end

        # Property Definition VolumesHost
        class VolumesHost < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for SourcePath
          def SourcePath(value)
            dsl_attribute(:SourcePath, value)
          end
        end

        # Property Definition MountPoints
        class MountPoints < PropertyType
          #   @param [Boolean|JSONable] value
          #     The value to use for ReadOnly
          def ReadOnly(value)
            dsl_attribute(:ReadOnly, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for SourceVolume
          def SourceVolume(value)
            dsl_attribute(:SourceVolume, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ContainerPath
          def ContainerPath(value)
            dsl_attribute(:ContainerPath, value)
          end
        end

        # Property Definition Volumes
        class Volumes < PropertyType
          #   @param [VolumesHost|JSONable] value
          #     The value to use for Host
          # @@overload Host(&block)
          #   Set :Host from block via instance eval of a new VolumesHost
          def Host(value = nil, **value_hash, &block)
            dsl_attribute(:Host, value, attr_class: VolumesHost, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end
        end

        # Property Definition NodeProperties
        class NodeProperties < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for MainNode
          def MainNode(value)
            dsl_attribute(:MainNode, value)
          end

          # @param [Array<NodeRangeProperty>|JSONable>] values
          #   The List of values to use for NodeRangeProperties
          def NodeRangeProperties(values)
            dsl_list_attribute(:NodeRangeProperties, values)
          end

          #  @param [NodeRangeProperty|JSONable] value  Append value to the List
          #    The List of values to use for NodeRangeProperties
          # @@overload NodeRangeProperty(&block)
          # Append value to the List from block via instance eval of a new NodeRangeProperty
          def NodeRangeProperty(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:NodeRangeProperties, value, fn_if: fn_if, attr_class: NodeRangeProperty, **value_hash, &block)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for NumNodes
          def NumNodes(value)
            dsl_attribute(:NumNodes, value)
          end
        end

        # Property Definition ContainerProperties
        class ContainerProperties < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for User
          def User(value)
            dsl_attribute(:User, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for Memory
          def Memory(value)
            dsl_attribute(:Memory, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for Privileged
          def Privileged(value)
            dsl_attribute(:Privileged, value)
          end

          #   @param [LinuxParameters|JSONable] value
          #     The value to use for LinuxParameters
          # @@overload LinuxParameters(&block)
          #   Set :LinuxParameters from block via instance eval of a new LinuxParameters
          def LinuxParameters(value = nil, **value_hash, &block)
            dsl_attribute(:LinuxParameters, value, attr_class: LinuxParameters, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for JobRoleArn
          def JobRoleArn(value)
            dsl_attribute(:JobRoleArn, value)
          end

          #   @param [Boolean|JSONable] value
          #     The value to use for ReadonlyRootFilesystem
          def ReadonlyRootFilesystem(value)
            dsl_attribute(:ReadonlyRootFilesystem, value)
          end

          #   @param [Integer|JSONable] value
          #     The value to use for Vcpus
          def Vcpus(value)
            dsl_attribute(:Vcpus, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Image
          def Image(value)
            dsl_attribute(:Image, value)
          end

          # @param [Array<ResourceRequirement>|JSONable>] values
          #   The List of values to use for ResourceRequirements
          def ResourceRequirements(values)
            dsl_list_attribute(:ResourceRequirements, values)
          end

          #  @param [ResourceRequirement|JSONable] value  Append value to the List
          #    The List of values to use for ResourceRequirements
          # @@overload ResourceRequirement(&block)
          # Append value to the List from block via instance eval of a new ResourceRequirement
          def ResourceRequirement(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:ResourceRequirements, value, fn_if: fn_if, attr_class: ResourceRequirement, **value_hash, &block)
          end

          # @param [Array<MountPoints>|JSONable>] values
          #   The List of values to use for MountPoints
          def MountPoints(values)
            dsl_list_attribute(:MountPoints, values)
          end

          #  @param [MountPoints|JSONable] value  Append value to the List
          #    The List of values to use for MountPoints
          # @@overload MountPoint(&block)
          # Append value to the List from block via instance eval of a new MountPoints
          def MountPoint(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:MountPoints, value, fn_if: fn_if, attr_class: MountPoints, **value_hash, &block)
          end

          # @param [Array<Volumes>|JSONable>] values
          #   The List of values to use for Volumes
          def Volumes(values)
            dsl_list_attribute(:Volumes, values)
          end

          #  @param [Volumes|JSONable] value  Append value to the List
          #    The List of values to use for Volumes
          # @@overload Volume(&block)
          # Append value to the List from block via instance eval of a new Volumes
          def Volume(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Volumes, value, fn_if: fn_if, attr_class: Volumes, **value_hash, &block)
          end

          # @param [Array<String>|JSONable>] values
          #   The List of values to use for Command
          def Commands(values)
            dsl_list_attribute(:Command, values)
          end

          #  @param [String|JSONable] value  Append value to the List
          #    The List of values to use for Command
          def Command(value, fn_if: nil)
            dsl_push_attribute(:Command, value, fn_if: fn_if)
          end

          # @param [Array<Environment>|JSONable>] values
          #   The List of values to use for Environment
          def Environments(values)
            dsl_list_attribute(:Environment, values)
          end

          #  @param [Environment|JSONable] value  Append value to the List
          #    The List of values to use for Environment
          # @@overload Environment(&block)
          # Append value to the List from block via instance eval of a new Environment
          def Environment(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Environment, value, fn_if: fn_if, attr_class: Environment, **value_hash, &block)
          end

          # @param [Array<Ulimit>|JSONable>] values
          #   The List of values to use for Ulimits
          def Ulimits(values)
            dsl_list_attribute(:Ulimits, values)
          end

          #  @param [Ulimit|JSONable] value  Append value to the List
          #    The List of values to use for Ulimits
          # @@overload Ulimit(&block)
          # Append value to the List from block via instance eval of a new Ulimit
          def Ulimit(value = nil, fn_if: nil, **value_hash, &block)
            dsl_push_attribute(:Ulimits, value, fn_if: fn_if, attr_class: Ulimit, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for InstanceType
          def InstanceType(value)
            dsl_attribute(:InstanceType, value)
          end
        end

        # Property Definition Environment
        class Environment < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Name
          def Name(value)
            dsl_attribute(:Name, value)
          end
        end

        # Property Definition ResourceRequirement
        class ResourceRequirement < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for Value
          def Value(value)
            dsl_attribute(:Value, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for Type
          def Type(value)
            dsl_attribute(:Type, value)
          end
        end

        # Property Definition RetryStrategy
        class RetryStrategy < PropertyType
          #   @param [Integer|JSONable] value
          #     The value to use for Attempts
          def Attempts(value)
            dsl_attribute(:Attempts, value)
          end
        end

        #   @param [String|JSONable] value
        #     The value to use for Type
        def Type(value)
          dsl_attribute(:Type, value)
        end

        #   @param [Object|JSONable] value
        #     The value to use for Parameters
        def Parameters(value)
          dsl_attribute(:Parameters, value)
        end

        #   @param [NodeProperties|JSONable] value
        #     The value to use for NodeProperties
        # @@overload NodeProperties(&block)
        #   Set :NodeProperties from block via instance eval of a new NodeProperties
        def NodeProperties(value = nil, **value_hash, &block)
          dsl_attribute(:NodeProperties, value, attr_class: NodeProperties, **value_hash, &block)
        end

        #   @param [Timeout|JSONable] value
        #     The value to use for Timeout
        # @@overload Timeout(&block)
        #   Set :Timeout from block via instance eval of a new Timeout
        def Timeout(value = nil, **value_hash, &block)
          dsl_attribute(:Timeout, value, attr_class: Timeout, **value_hash, &block)
        end

        #   @param [ContainerProperties|JSONable] value
        #     The value to use for ContainerProperties
        # @@overload ContainerProperties(&block)
        #   Set :ContainerProperties from block via instance eval of a new ContainerProperties
        def ContainerProperties(value = nil, **value_hash, &block)
          dsl_attribute(:ContainerProperties, value, attr_class: ContainerProperties, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for JobDefinitionName
        def JobDefinitionName(value)
          dsl_attribute(:JobDefinitionName, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [RetryStrategy|JSONable] value
        #     The value to use for RetryStrategy
        # @@overload RetryStrategy(&block)
        #   Set :RetryStrategy from block via instance eval of a new RetryStrategy
        def RetryStrategy(value = nil, **value_hash, &block)
          dsl_attribute(:RetryStrategy, value, attr_class: RetryStrategy, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [AWS::Batch::JobDefinition]
    def AWS_Batch_JobDefinition(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: AWS::Batch::JobDefinition, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
