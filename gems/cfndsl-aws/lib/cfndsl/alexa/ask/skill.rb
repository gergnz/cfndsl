# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file is generated by CfnDsl::Generate
#
# WARNING ABOUT GENERATED CODE
require 'cfndsl/cloudformation_template'
require 'cfndsl/types'

module CfnDsl
  module Alexa
    module ASK
      # Resource Type definition for Alexa::ASK::Skill
      class Skill < ResourceType
        # Property Definition AuthenticationConfiguration
        class AuthenticationConfiguration < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for ClientId
          def ClientId(value)
            dsl_attribute(:ClientId, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for RefreshToken
          def RefreshToken(value)
            dsl_attribute(:RefreshToken, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for ClientSecret
          def ClientSecret(value)
            dsl_attribute(:ClientSecret, value)
          end
        end

        # Property Definition Overrides
        class Overrides < PropertyType
          #   @param [Object|JSONable] value
          #     The value to use for Manifest
          def Manifest(value)
            dsl_attribute(:Manifest, value)
          end
        end

        # Property Definition SkillPackage
        class SkillPackage < PropertyType
          #   @param [String|JSONable] value
          #     The value to use for S3BucketRole
          def S3BucketRole(value)
            dsl_attribute(:S3BucketRole, value)
          end

          #   @param [Overrides|JSONable] value
          #     The value to use for Overrides
          # @@overload Overrides(&block)
          #   Set :Overrides from block via instance eval of a new Overrides
          def Overrides(value = nil, **value_hash, &block)
            dsl_attribute(:Overrides, value, attr_class: Overrides, **value_hash, &block)
          end

          #   @param [String|JSONable] value
          #     The value to use for S3ObjectVersion
          def S3ObjectVersion(value)
            dsl_attribute(:S3ObjectVersion, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for S3Bucket
          def S3Bucket(value)
            dsl_attribute(:S3Bucket, value)
          end

          #   @param [String|JSONable] value
          #     The value to use for S3Key
          def S3Key(value)
            dsl_attribute(:S3Key, value)
          end
        end

        #   @param [AuthenticationConfiguration|JSONable] value
        #     The value to use for AuthenticationConfiguration
        # @@overload AuthenticationConfiguration(&block)
        #   Set :AuthenticationConfiguration from block via instance eval of a new AuthenticationConfiguration
        def AuthenticationConfiguration(value = nil, **value_hash, &block)
          dsl_attribute(:AuthenticationConfiguration, value, attr_class: AuthenticationConfiguration, **value_hash, &block)
        end

        #   @param [String|JSONable] value
        #     The value to use for Id
        def Id(value)
          dsl_attribute(:Id, value)
        end

        #   @param [String|JSONable] value
        #     The value to use for VendorId
        def VendorId(value)
          dsl_attribute(:VendorId, value)
        end

        #   @param [SkillPackage|JSONable] value
        #     The value to use for SkillPackage
        # @@overload SkillPackage(&block)
        #   Set :SkillPackage from block via instance eval of a new SkillPackage
        def SkillPackage(value = nil, **value_hash, &block)
          dsl_attribute(:SkillPackage, value, attr_class: SkillPackage, **value_hash, &block)
        end
      end
    end
  end

  # rubocop:disable Style/Documentation
  class CloudFormationTemplate
    # @return [Alexa::ASK::Skill]
    def Alexa_ASK_Skill(logical_id, value = nil, &block)
      Resource(logical_id, value, attr_class: Alexa::ASK::Skill, &block)
    end
  end

  # rubocop:enable Style/Documentation
end
